// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g 2011-07-18 18:16:30

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "PH", "EQUIVALENT", "YIELD", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "OSCARONT", "PROCEDURE", "REFERENCETOCOMPOUND", "WS", "TOKEN", "'CD-ALPHANUM'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ASE'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-AMOUNT'", "'NN-MOLAR'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-PH'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'NN-EXAMPLE'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'RB-CONJ'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'NN-IDENTIFIER'", "'DT-THE'", "'-LRB-'", "'-RRB-'", "'CC'", "'CD'", "'DT'", "'EX'", "'FW'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'LS'", "'MD'", "'NN'", "'NNS'", "'NNP'", "'NNPS'", "'PDT'", "'POS'", "'PRP'", "'PRP$'", "'RB'", "'RBR'", "'RBS'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBP'", "'VBZ'", "'WDT'", "'WP'", "'WP$'", "'WRB'"
    };
    public static final int DissolvePhrase=8;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int QUANTITY=32;
    public static final int T__161=161;
    public static final int TOKEN=37;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int OSCARONT=33;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=27;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=36;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int PH=24;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int AtmospherePhrase=17;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int NounPhrase=6;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int TempPhrase=18;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=31;
    public static final int REFERENCETOCOMPOUND=35;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=28;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int MOLECULE=30;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int YIELD=26;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int Unmatched=5;
    public static final int T__43=43;
    public static final int RolePrepPhrase=16;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int EQUIVALENT=25;
    public static final int PROCEDURE=34;
    public static final int T__175=175;
    public static final int MIXTURE=13;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__179=179;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int T__176=176;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int VOLUME=22;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int Sentence=4;
    public static final int T__169=169;
    public static final int OSCARCM=29;
    public static final int MASS=20;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[748+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g"; }


    public boolean numberLooksLikeAReferenceToACompound(TokenStream stream){
    	Token previousTokenType = stream.LT(-2);
    	if (previousTokenType !=null && previousTokenType.getText().equals("IN-OF")){
    		String nextTokenText= stream.LT(3).getText();
    		if ("-LRB-".equals(nextTokenText) || "STOP".equals(nextTokenText) || "COMMA".equals(nextTokenText)){
    			return true;
    		}
    	}
    	return false;
    }

    public boolean followedByNumberWhichIsNotAReference(TokenStream stream){
    	if ("CD".equals(input.LT(1).getText())){
    		String tokenTypeFollowingTheCD = stream.LT(3).getText();
    		if ("NN-TIMES".equals(tokenTypeFollowingTheCD) || "COLON".equals(tokenTypeFollowingTheCD)){
    			return true;
    		}
    	}
    	return false;
    }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:1: document : ( sentences )+ -> ( ^( Sentence sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);
        int document_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:9: ( ( sentences )+ -> ( ^( Sentence sentences ) )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:11: ( sentences )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document202_static.FOLLOW_sentences_in_document202);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 79:21: -> ( ^( Sentence sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:24: ^( Sentence sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, document_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:1: sentences : ( sentenceStructure | unmatchedPhrase )+ ( stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);
        int sentences_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.stop_return stop4 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:10: ( ( sentenceStructure | unmatchedPhrase )+ ( stop )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:13: ( sentenceStructure | unmatchedPhrase )+ ( stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:13: ( sentenceStructure | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:14: sentenceStructure
            	    {
            	    pushFollow(FOLLOW_sentenceStructure_in_sentences223_static.FOLLOW_sentenceStructure_in_sentences223);
            	    sentenceStructure2=sentenceStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:32: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences225_static.FOLLOW_unmatchedPhrase_in_sentences225);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:50: ( stop )*
            loop3:
            do {
                int alt3=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt3=1;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences229_static.FOLLOW_stop_in_sentences229);
            	    stop4=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop4.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, sentences_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);
        int sentenceStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase5 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase6 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase7 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter8 = null;

        ChemicalChunkerParser.advAdj_return advAdj9 = null;

        ChemicalChunkerParser.colon_return colon10 = null;

        ChemicalChunkerParser.conjunction_return conjunction11 = null;

        ChemicalChunkerParser.rbconj_return rbconj12 = null;

        ChemicalChunkerParser.comma_return comma13 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt4=0;
            loop4:
            do {
                int alt4=5;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure239_static.FOLLOW_nounphrase_in_sentenceStructure239);
            	    nounphrase5=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase5.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure241_static.FOLLOW_verbphrase_in_sentenceStructure241);
            	    verbphrase6=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase6.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure243_static.FOLLOW_prepphrase_in_sentenceStructure243);
            	    prepphrase7=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase7.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure245_static.FOLLOW_prepphraseAfter_in_sentenceStructure245);
            	    prepphraseAfter8=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter8.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:73: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure250_static.FOLLOW_advAdj_in_sentenceStructure250);
            	    advAdj9=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure252_static.FOLLOW_colon_in_sentenceStructure252);
            	    colon10=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:89: ( conjunction | rbconj | comma )*
            loop6:
            do {
                int alt6=4;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:90: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure257_static.FOLLOW_conjunction_in_sentenceStructure257);
            	    conjunction11=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:102: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure259_static.FOLLOW_rbconj_in_sentenceStructure259);
            	    rbconj12=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj12.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:109: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentenceStructure261_static.FOLLOW_comma_in_sentenceStructure261);
            	    comma13=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma13.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, sentenceStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:1: unmatchedPhrase : unmatchedToken -> ^( Unmatched unmatchedToken ) ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);
        int unmatchedPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unmatchedToken_return unmatchedToken14 = null;


        RewriteRuleSubtreeStream stream_unmatchedToken=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedToken");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:86:2: ( unmatchedToken -> ^( Unmatched unmatchedToken ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:86:5: unmatchedToken
            {
            pushFollow(FOLLOW_unmatchedToken_in_unmatchedPhrase273_static.FOLLOW_unmatchedToken_in_unmatchedPhrase273);
            unmatchedToken14=unmatchedToken();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedToken.add(unmatchedToken14.getTree());


            // AST REWRITE
            // elements: unmatchedToken
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 86:20: -> ^( Unmatched unmatchedToken )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:86:23: ^( Unmatched unmatchedToken )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                adaptor.addChild(root_1, stream_unmatchedToken.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, unmatchedPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedToken_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedToken"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:1: unmatchedToken : ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) ;
    public final ChemicalChunkerParser.unmatchedToken_return unmatchedToken() throws RecognitionException {
        ChemicalChunkerParser.unmatchedToken_return retval = new ChemicalChunkerParser.unmatchedToken_return();
        retval.start = input.LT(1);
        int unmatchedToken_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric15 = null;

        ChemicalChunkerParser.advAdj_return advAdj16 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode17 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode18 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp19 = null;

        ChemicalChunkerParser.inAll_return inAll20 = null;

        ChemicalChunkerParser.nnexample_return nnexample21 = null;

        ChemicalChunkerParser.nnstate_return nnstate22 = null;

        ChemicalChunkerParser.nntime_return nntime23 = null;

        ChemicalChunkerParser.nnmass_return nnmass24 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar25 = null;

        ChemicalChunkerParser.nnamount_return nnamount26 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere27 = null;

        ChemicalChunkerParser.nneq_return nneq28 = null;

        ChemicalChunkerParser.nnvol_return nnvol29 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity30 = null;

        ChemicalChunkerParser.nntemp_return nntemp31 = null;

        ChemicalChunkerParser.nnph_return nnph32 = null;

        ChemicalChunkerParser.nnflash_return nnflash33 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral34 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod35 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure36 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn37 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography38 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum39 = null;

        ChemicalChunkerParser.nncycle_return nncycle40 = null;

        ChemicalChunkerParser.nntimes_return nntimes41 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm42 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts43 = null;

        ChemicalChunkerParser.oscarase_return oscarase44 = null;

        ChemicalChunkerParser.verb_return verb45 = null;

        ChemicalChunkerParser.nnadd_return nnadd46 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture47 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus48 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate49 = null;

        ChemicalChunkerParser.nndry_return nndry50 = null;

        ChemicalChunkerParser.nnextract_return nnextract51 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter52 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate53 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify54 = null;

        ChemicalChunkerParser.nnremove_return nnremove55 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize56 = null;

        ChemicalChunkerParser.nnyield_return nnyield57 = null;

        ChemicalChunkerParser.colon_return colon58 = null;

        ChemicalChunkerParser.apost_return apost59 = null;

        ChemicalChunkerParser.neg_return neg60 = null;

        ChemicalChunkerParser.dash_return dash61 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent62 = null;

        ChemicalChunkerParser.lsqb_return lsqb63 = null;

        ChemicalChunkerParser.rsqb_return rsqb64 = null;

        ChemicalChunkerParser.lrb_return lrb65 = null;

        ChemicalChunkerParser.rrb_return rrb66 = null;

        ChemicalChunkerParser.cc_return cc67 = null;

        ChemicalChunkerParser.dt_return dt68 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE69 = null;

        ChemicalChunkerParser.fw_return fw70 = null;

        ChemicalChunkerParser.md_return md71 = null;

        ChemicalChunkerParser.nn_return nn72 = null;

        ChemicalChunkerParser.nns_return nns73 = null;

        ChemicalChunkerParser.nnp_return nnp74 = null;

        ChemicalChunkerParser.prp_return prp75 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss76 = null;

        ChemicalChunkerParser.rbconj_return rbconj77 = null;

        ChemicalChunkerParser.sym_return sym78 = null;

        ChemicalChunkerParser.uh_return uh79 = null;

        ChemicalChunkerParser.clause_return clause80 = null;

        ChemicalChunkerParser.comma_return comma81 = null;

        ChemicalChunkerParser.ls_return ls82 = null;

        ChemicalChunkerParser.nnps_return nnps83 = null;

        ChemicalChunkerParser.pos_return pos84 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier85 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:2: ( ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            int alt7=71;
            switch ( input.LA(1) ) {
            case 38:
            case 146:
                {
                alt7=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt7=2;
                }
                break;
            case 43:
                {
                alt7=3;
                }
                break;
            case 44:
                {
                alt7=4;
                }
                break;
            case 46:
                {
                alt7=5;
                }
                break;
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 150:
            case 169:
                {
                alt7=6;
                }
                break;
            case 83:
                {
                alt7=7;
                }
                break;
            case 63:
                {
                alt7=8;
                }
                break;
            case 64:
                {
                alt7=9;
                }
                break;
            case 65:
                {
                alt7=10;
                }
                break;
            case 67:
                {
                alt7=11;
                }
                break;
            case 66:
                {
                alt7=12;
                }
                break;
            case 68:
                {
                alt7=13;
                }
                break;
            case 69:
                {
                alt7=14;
                }
                break;
            case 70:
                {
                alt7=15;
                }
                break;
            case 71:
                {
                alt7=16;
                }
                break;
            case 72:
                {
                alt7=17;
                }
                break;
            case 73:
                {
                alt7=18;
                }
                break;
            case 74:
                {
                alt7=19;
                }
                break;
            case 75:
                {
                alt7=20;
                }
                break;
            case 76:
                {
                alt7=21;
                }
                break;
            case 77:
                {
                alt7=22;
                }
                break;
            case 78:
                {
                alt7=23;
                }
                break;
            case 79:
                {
                alt7=24;
                }
                break;
            case 80:
                {
                alt7=25;
                }
                break;
            case 81:
                {
                alt7=26;
                }
                break;
            case 82:
                {
                alt7=27;
                }
                break;
            case 84:
                {
                alt7=28;
                }
                break;
            case 42:
                {
                alt7=29;
                }
                break;
            case 41:
                {
                alt7=30;
                }
                break;
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt7=31;
                }
                break;
            case 89:
                {
                alt7=32;
                }
                break;
            case 90:
                {
                alt7=33;
                }
                break;
            case 100:
                {
                alt7=34;
                }
                break;
            case 102:
                {
                alt7=35;
                }
                break;
            case 107:
                {
                alt7=36;
                }
                break;
            case 109:
                {
                alt7=37;
                }
                break;
            case 111:
                {
                alt7=38;
                }
                break;
            case 117:
                {
                alt7=39;
                }
                break;
            case 119:
                {
                alt7=40;
                }
                break;
            case 123:
                {
                alt7=41;
                }
                break;
            case 126:
                {
                alt7=42;
                }
                break;
            case 130:
                {
                alt7=43;
                }
                break;
            case 132:
                {
                alt7=44;
                }
                break;
            case 134:
                {
                alt7=45;
                }
                break;
            case 135:
                {
                alt7=46;
                }
                break;
            case 136:
                {
                alt7=47;
                }
                break;
            case 138:
                {
                alt7=48;
                }
                break;
            case 139:
                {
                alt7=49;
                }
                break;
            case 140:
                {
                alt7=50;
                }
                break;
            case 143:
                {
                alt7=51;
                }
                break;
            case 144:
                {
                alt7=52;
                }
                break;
            case 145:
                {
                alt7=53;
                }
                break;
            case 147:
                {
                alt7=54;
                }
                break;
            case 142:
                {
                alt7=55;
                }
                break;
            case 149:
                {
                alt7=56;
                }
                break;
            case 155:
                {
                alt7=57;
                }
                break;
            case 156:
                {
                alt7=58;
                }
                break;
            case 157:
                {
                alt7=59;
                }
                break;
            case 158:
                {
                alt7=60;
                }
                break;
            case 162:
                {
                alt7=61;
                }
                break;
            case 163:
                {
                alt7=62;
                }
                break;
            case 131:
                {
                alt7=63;
                }
                break;
            case 168:
                {
                alt7=64;
                }
                break;
            case 170:
                {
                alt7=65;
                }
                break;
            case 148:
            case 160:
            case 177:
            case 178:
            case 179:
            case 180:
                {
                alt7=66;
                }
                break;
            case 133:
                {
                alt7=67;
                }
                break;
            case 154:
                {
                alt7=68;
                }
                break;
            case 159:
                {
                alt7=69;
                }
                break;
            case 161:
                {
                alt7=70;
                }
                break;
            case 141:
                {
                alt7=71;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:5: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_unmatchedToken292_static.FOLLOW_numeric_in_unmatchedToken292);
                    numeric15=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric15.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:13: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedToken294_static.FOLLOW_advAdj_in_unmatchedToken294);
                    advAdj16=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj16.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:20: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedToken296_static.FOLLOW_tmunicode_in_unmatchedToken296);
                    tmunicode17=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode17.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:30: cdunicode
                    {
                    pushFollow(FOLLOW_cdunicode_in_unmatchedToken298_static.FOLLOW_cdunicode_in_unmatchedToken298);
                    cdunicode18=cdunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdunicode18.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:40: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unmatchedToken300_static.FOLLOW_jjcomp_in_unmatchedToken300);
                    jjcomp19=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp19.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:47: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedToken302_static.FOLLOW_inAll_in_unmatchedToken302);
                    inAll20=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll20.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:2: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unmatchedToken306_static.FOLLOW_nnexample_in_unmatchedToken306);
                    nnexample21=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample21.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:12: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unmatchedToken308_static.FOLLOW_nnstate_in_unmatchedToken308);
                    nnstate22=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate22.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:20: nntime
                    {
                    pushFollow(FOLLOW_nntime_in_unmatchedToken310_static.FOLLOW_nntime_in_unmatchedToken310);
                    nntime23=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime23.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:27: nnmass
                    {
                    pushFollow(FOLLOW_nnmass_in_unmatchedToken312_static.FOLLOW_nnmass_in_unmatchedToken312);
                    nnmass24=nnmass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmass24.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:34: nnmolar
                    {
                    pushFollow(FOLLOW_nnmolar_in_unmatchedToken314_static.FOLLOW_nnmolar_in_unmatchedToken314);
                    nnmolar25=nnmolar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmolar25.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:42: nnamount
                    {
                    pushFollow(FOLLOW_nnamount_in_unmatchedToken316_static.FOLLOW_nnamount_in_unmatchedToken316);
                    nnamount26=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount26.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:51: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unmatchedToken318_static.FOLLOW_nnatmosphere_in_unmatchedToken318);
                    nnatmosphere27=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere27.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:64: nneq
                    {
                    pushFollow(FOLLOW_nneq_in_unmatchedToken320_static.FOLLOW_nneq_in_unmatchedToken320);
                    nneq28=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq28.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:69: nnvol
                    {
                    pushFollow(FOLLOW_nnvol_in_unmatchedToken322_static.FOLLOW_nnvol_in_unmatchedToken322);
                    nnvol29=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol29.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:75: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unmatchedToken324_static.FOLLOW_nnchementity_in_unmatchedToken324);
                    nnchementity30=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity30.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:88: nntemp
                    {
                    pushFollow(FOLLOW_nntemp_in_unmatchedToken326_static.FOLLOW_nntemp_in_unmatchedToken326);
                    nntemp31=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp31.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:95: nnph
                    {
                    pushFollow(FOLLOW_nnph_in_unmatchedToken328_static.FOLLOW_nnph_in_unmatchedToken328);
                    nnph32=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph32.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:100: nnflash
                    {
                    pushFollow(FOLLOW_nnflash_in_unmatchedToken330_static.FOLLOW_nnflash_in_unmatchedToken330);
                    nnflash33=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash33.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:108: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_unmatchedToken332_static.FOLLOW_nngeneral_in_unmatchedToken332);
                    nngeneral34=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral34.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:118: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_unmatchedToken334_static.FOLLOW_nnmethod_in_unmatchedToken334);
                    nnmethod35=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod35.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:127: nnpressure
                    {
                    pushFollow(FOLLOW_nnpressure_in_unmatchedToken336_static.FOLLOW_nnpressure_in_unmatchedToken336);
                    nnpressure36=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure36.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:138: nncolumn
                    {
                    pushFollow(FOLLOW_nncolumn_in_unmatchedToken338_static.FOLLOW_nncolumn_in_unmatchedToken338);
                    nncolumn37=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn37.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:147: nnchromatography
                    {
                    pushFollow(FOLLOW_nnchromatography_in_unmatchedToken340_static.FOLLOW_nnchromatography_in_unmatchedToken340);
                    nnchromatography38=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography38.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:164: nnvacuum
                    {
                    pushFollow(FOLLOW_nnvacuum_in_unmatchedToken342_static.FOLLOW_nnvacuum_in_unmatchedToken342);
                    nnvacuum39=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum39.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:173: nncycle
                    {
                    pushFollow(FOLLOW_nncycle_in_unmatchedToken344_static.FOLLOW_nncycle_in_unmatchedToken344);
                    nncycle40=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle40.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:181: nntimes
                    {
                    pushFollow(FOLLOW_nntimes_in_unmatchedToken346_static.FOLLOW_nntimes_in_unmatchedToken346);
                    nntimes41=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes41.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:2: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedToken350_static.FOLLOW_oscarcm_in_unmatchedToken350);
                    oscarcm42=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm42.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:10: oscaronts
                    {
                    pushFollow(FOLLOW_oscaronts_in_unmatchedToken352_static.FOLLOW_oscaronts_in_unmatchedToken352);
                    oscaronts43=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts43.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:20: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unmatchedToken354_static.FOLLOW_oscarase_in_unmatchedToken354);
                    oscarase44=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase44.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:29: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedToken356_static.FOLLOW_verb_in_unmatchedToken356);
                    verb45=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb45.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:34: nnadd
                    {
                    pushFollow(FOLLOW_nnadd_in_unmatchedToken358_static.FOLLOW_nnadd_in_unmatchedToken358);
                    nnadd46=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd46.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:40: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unmatchedToken360_static.FOLLOW_nnmixture_in_unmatchedToken360);
                    nnmixture47=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture47.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:50: nnapparatus
                    {
                    pushFollow(FOLLOW_nnapparatus_in_unmatchedToken362_static.FOLLOW_nnapparatus_in_unmatchedToken362);
                    nnapparatus48=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus48.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:62: nnconcentrate
                    {
                    pushFollow(FOLLOW_nnconcentrate_in_unmatchedToken364_static.FOLLOW_nnconcentrate_in_unmatchedToken364);
                    nnconcentrate49=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate49.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:76: nndry
                    {
                    pushFollow(FOLLOW_nndry_in_unmatchedToken366_static.FOLLOW_nndry_in_unmatchedToken366);
                    nndry50=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry50.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:82: nnextract
                    {
                    pushFollow(FOLLOW_nnextract_in_unmatchedToken368_static.FOLLOW_nnextract_in_unmatchedToken368);
                    nnextract51=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract51.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:92: nnfilter
                    {
                    pushFollow(FOLLOW_nnfilter_in_unmatchedToken370_static.FOLLOW_nnfilter_in_unmatchedToken370);
                    nnfilter52=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter52.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:101: nnprecipitate
                    {
                    pushFollow(FOLLOW_nnprecipitate_in_unmatchedToken372_static.FOLLOW_nnprecipitate_in_unmatchedToken372);
                    nnprecipitate53=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate53.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:115: nnpurify
                    {
                    pushFollow(FOLLOW_nnpurify_in_unmatchedToken374_static.FOLLOW_nnpurify_in_unmatchedToken374);
                    nnpurify54=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify54.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:124: nnremove
                    {
                    pushFollow(FOLLOW_nnremove_in_unmatchedToken376_static.FOLLOW_nnremove_in_unmatchedToken376);
                    nnremove55=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove55.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:133: nnsynthesize
                    {
                    pushFollow(FOLLOW_nnsynthesize_in_unmatchedToken378_static.FOLLOW_nnsynthesize_in_unmatchedToken378);
                    nnsynthesize56=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize56.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:146: nnyield
                    {
                    pushFollow(FOLLOW_nnyield_in_unmatchedToken380_static.FOLLOW_nnyield_in_unmatchedToken380);
                    nnyield57=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield57.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:154: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedToken382_static.FOLLOW_colon_in_unmatchedToken382);
                    colon58=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon58.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:160: apost
                    {
                    pushFollow(FOLLOW_apost_in_unmatchedToken384_static.FOLLOW_apost_in_unmatchedToken384);
                    apost59=apost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost59.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:166: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedToken386_static.FOLLOW_neg_in_unmatchedToken386);
                    neg60=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg60.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:170: dash
                    {
                    pushFollow(FOLLOW_dash_in_unmatchedToken388_static.FOLLOW_dash_in_unmatchedToken388);
                    dash61=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash61.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:175: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_unmatchedToken390_static.FOLLOW_nnpercent_in_unmatchedToken390);
                    nnpercent62=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent62.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:185: lsqb
                    {
                    pushFollow(FOLLOW_lsqb_in_unmatchedToken392_static.FOLLOW_lsqb_in_unmatchedToken392);
                    lsqb63=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb63.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:190: rsqb
                    {
                    pushFollow(FOLLOW_rsqb_in_unmatchedToken394_static.FOLLOW_rsqb_in_unmatchedToken394);
                    rsqb64=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb64.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:195: lrb
                    {
                    pushFollow(FOLLOW_lrb_in_unmatchedToken396_static.FOLLOW_lrb_in_unmatchedToken396);
                    lrb65=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb65.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:199: rrb
                    {
                    pushFollow(FOLLOW_rrb_in_unmatchedToken398_static.FOLLOW_rrb_in_unmatchedToken398);
                    rrb66=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb66.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:2: cc
                    {
                    pushFollow(FOLLOW_cc_in_unmatchedToken402_static.FOLLOW_cc_in_unmatchedToken402);
                    cc67=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc67.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:5: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedToken404_static.FOLLOW_dt_in_unmatchedToken404);
                    dt68=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt68.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:8: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedToken406_static.FOLLOW_dtTHE_in_unmatchedToken406);
                    dtTHE69=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE69.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:14: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedToken408_static.FOLLOW_fw_in_unmatchedToken408);
                    fw70=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw70.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:17: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedToken410_static.FOLLOW_md_in_unmatchedToken410);
                    md71=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md71.getTree());

                    }
                    break;
                case 58 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:20: nn
                    {
                    pushFollow(FOLLOW_nn_in_unmatchedToken412_static.FOLLOW_nn_in_unmatchedToken412);
                    nn72=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn72.getTree());

                    }
                    break;
                case 59 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:23: nns
                    {
                    pushFollow(FOLLOW_nns_in_unmatchedToken414_static.FOLLOW_nns_in_unmatchedToken414);
                    nns73=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns73.getTree());

                    }
                    break;
                case 60 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:27: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unmatchedToken416_static.FOLLOW_nnp_in_unmatchedToken416);
                    nnp74=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp74.getTree());

                    }
                    break;
                case 61 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:31: prp
                    {
                    pushFollow(FOLLOW_prp_in_unmatchedToken418_static.FOLLOW_prp_in_unmatchedToken418);
                    prp75=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp75.getTree());

                    }
                    break;
                case 62 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:35: prp_poss
                    {
                    pushFollow(FOLLOW_prp_poss_in_unmatchedToken420_static.FOLLOW_prp_poss_in_unmatchedToken420);
                    prp_poss76=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss76.getTree());

                    }
                    break;
                case 63 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:44: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedToken422_static.FOLLOW_rbconj_in_unmatchedToken422);
                    rbconj77=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj77.getTree());

                    }
                    break;
                case 64 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:51: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedToken424_static.FOLLOW_sym_in_unmatchedToken424);
                    sym78=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym78.getTree());

                    }
                    break;
                case 65 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:55: uh
                    {
                    pushFollow(FOLLOW_uh_in_unmatchedToken426_static.FOLLOW_uh_in_unmatchedToken426);
                    uh79=uh();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uh79.getTree());

                    }
                    break;
                case 66 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:58: clause
                    {
                    pushFollow(FOLLOW_clause_in_unmatchedToken428_static.FOLLOW_clause_in_unmatchedToken428);
                    clause80=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause80.getTree());

                    }
                    break;
                case 67 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:65: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedToken430_static.FOLLOW_comma_in_unmatchedToken430);
                    comma81=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma81.getTree());

                    }
                    break;
                case 68 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:71: ls
                    {
                    pushFollow(FOLLOW_ls_in_unmatchedToken432_static.FOLLOW_ls_in_unmatchedToken432);
                    ls82=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls82.getTree());

                    }
                    break;
                case 69 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:74: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unmatchedToken434_static.FOLLOW_nnps_in_unmatchedToken434);
                    nnps83=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps83.getTree());

                    }
                    break;
                case 70 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:79: pos
                    {
                    pushFollow(FOLLOW_pos_in_unmatchedToken436_static.FOLLOW_pos_in_unmatchedToken436);
                    pos84=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos84.getTree());

                    }
                    break;
                case 71 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:83: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_unmatchedToken438_static.FOLLOW_nnidentifier_in_unmatchedToken438);
                    nnidentifier85=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier85.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, unmatchedToken_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedToken"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);
        int nounphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure86 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase448_static.FOLLOW_nounphraseStructure_in_nounphrase448);
            nounphraseStructure86=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure86.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 95:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, nounphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);
        int nounphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure187 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure288 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure467_static.FOLLOW_nounphraseStructure1_in_nounphraseStructure467);
                    nounphraseStructure187=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure187.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure469_static.FOLLOW_nounphraseStructure2_in_nounphraseStructure469);
                    nounphraseStructure288=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure288.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, nounphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);
        int nounphraseStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus89 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1478_static.FOLLOW_multiApparatus_in_nounphraseStructure1478);
            multiApparatus89=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus89.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 100:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, nounphraseStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:1: nounphraseStructure2 : ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);
        int nounphraseStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE90 = null;

        ChemicalChunkerParser.dt_return dt91 = null;

        ChemicalChunkerParser.advAdj_return advAdj92 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase93 = null;

        ChemicalChunkerParser.ratio_return ratio94 = null;

        ChemicalChunkerParser.noun_return noun95 = null;

        ChemicalChunkerParser.numeric_return numeric96 = null;

        ChemicalChunkerParser.conjunction_return conjunction97 = null;

        ChemicalChunkerParser.advAdj_return advAdj98 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase99 = null;

        ChemicalChunkerParser.ratio_return ratio100 = null;

        ChemicalChunkerParser.noun_return noun101 = null;

        ChemicalChunkerParser.numeric_return numeric102 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf103 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN104 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase105 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:2: ( ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:4: ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:4: ( dtTHE )?
            int alt9=2;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt9=1;
                    }
                    break;
            }

            switch (alt9) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2495_static.FOLLOW_dtTHE_in_nounphraseStructure2495);
                    dtTHE90=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE90.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:11: ( dt )?
            int alt10=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA10_3 = input.LA(3);

                            if ( (synpred86_ChemicalChunker()) ) {
                                alt10=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt10) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2498_static.FOLLOW_dt_in_nounphraseStructure2498);
                    dt91=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt91.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:15: ( advAdj )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2501_static.FOLLOW_advAdj_in_nounphraseStructure2501);
            	    advAdj92=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj92.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:24: ( dissolvePhrase | ratio | noun | numeric )+
            int cnt12=0;
            loop12:
            do {
                int alt12=5;
                alt12 = dfa12.predict(input);
                switch (alt12) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:25: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2506_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2506);
            	    dissolvePhrase93=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase93.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:40: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure2508_static.FOLLOW_ratio_in_nounphraseStructure2508);
            	    ratio94=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio94.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:46: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure2510_static.FOLLOW_noun_in_nounphraseStructure2510);
            	    noun95=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun95.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:51: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_nounphraseStructure2512_static.FOLLOW_numeric_in_nounphraseStructure2512);
            	    numeric96=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric96.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:64: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric ) )*
            loop16:
            do {
                int alt16=2;
                alt16 = dfa16.predict(input);
                switch (alt16) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:65: ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:65: ( conjunction )*
            	    loop13:
            	    do {
            	        int alt13=2;
            	        alt13 = dfa13.predict(input);
            	        switch (alt13) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2520_static.FOLLOW_conjunction_in_nounphraseStructure2520);
            	    	    conjunction97=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction97.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop13;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:78: ( advAdj )*
            	    loop14:
            	    do {
            	        int alt14=2;
            	        alt14 = dfa14.predict(input);
            	        switch (alt14) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    	    {
            	    	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2523_static.FOLLOW_advAdj_in_nounphraseStructure2523);
            	    	    advAdj98=advAdj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj98.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop14;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:86: ( dissolvePhrase | ratio | noun | numeric )
            	    int alt15=4;
            	    alt15 = dfa15.predict(input);
            	    switch (alt15) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:87: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2527_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2527);
            	            dissolvePhrase99=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase99.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:102: ratio
            	            {
            	            pushFollow(FOLLOW_ratio_in_nounphraseStructure2529_static.FOLLOW_ratio_in_nounphraseStructure2529);
            	            ratio100=ratio();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio100.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:108: noun
            	            {
            	            pushFollow(FOLLOW_noun_in_nounphraseStructure2531_static.FOLLOW_noun_in_nounphraseStructure2531);
            	            noun101=noun();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun101.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:113: numeric
            	            {
            	            pushFollow(FOLLOW_numeric_in_nounphraseStructure2533_static.FOLLOW_numeric_in_nounphraseStructure2533);
            	            numeric102=numeric();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric102.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:127: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            loop19:
            do {
                int alt19=2;
                switch ( input.LA(1) ) {
                case 50:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred100_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;
                case 56:
                    {
                    int LA19_3 = input.LA(2);

                    if ( (synpred100_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;

                }

                switch (alt19) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:128: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:128: ( prepphraseOf | prepphraseIN )
            	    int alt17=2;
            	    switch ( input.LA(1) ) {
            	    case 56:
            	        {
            	        alt17=1;
            	        }
            	        break;
            	    case 50:
            	        {
            	        alt17=2;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 17, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt17) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:129: prepphraseOf
            	            {
            	            pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2543_static.FOLLOW_prepphraseOf_in_nounphraseStructure2543);
            	            prepphraseOf103=prepphraseOf();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf103.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:143: prepphraseIN
            	            {
            	            pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2546_static.FOLLOW_prepphraseIN_in_nounphraseStructure2546);
            	            prepphraseIN104=prepphraseIN();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN104.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:157: ( dissolvePhrase )?
            	    int alt18=2;
            	    alt18 = dfa18.predict(input);
            	    switch (alt18) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2549_static.FOLLOW_dissolvePhrase_in_nounphraseStructure2549);
            	            dissolvePhrase105=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase105.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, nounphraseStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:103:1: dissolvePhrase : ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);
        int dissolvePhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure106 = null;

        ChemicalChunkerParser.lrb_return lrb107 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure108 = null;

        ChemicalChunkerParser.rrb_return rrb109 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:2: ( ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:4: ( dissolveStructure | lrb dissolveStructure rrb )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:4: ( dissolveStructure | lrb dissolveStructure rrb )
            int alt20=2;
            alt20 = dfa20.predict(input);
            switch (alt20) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:5: dissolveStructure
                    {
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase563_static.FOLLOW_dissolveStructure_in_dissolvePhrase563);
                    dissolveStructure106=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure106.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:23: lrb dissolveStructure rrb
                    {
                    pushFollow(FOLLOW_lrb_in_dissolvePhrase565_static.FOLLOW_lrb_in_dissolvePhrase565);
                    lrb107=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lrb.add(lrb107.getTree());
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase567_static.FOLLOW_dissolveStructure_in_dissolvePhrase567);
                    dissolveStructure108=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure108.getTree());
                    pushFollow(FOLLOW_rrb_in_dissolvePhrase569_static.FOLLOW_rrb_in_dissolvePhrase569);
                    rrb109=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rrb.add(rrb109.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure, lrb, rrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 104:50: -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:54: ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:71: ( lrb )?
                if ( stream_lrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_lrb.nextTree());

                }
                stream_lrb.reset();
                adaptor.addChild(root_1, stream_dissolveStructure.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:94: ( rrb )?
                if ( stream_rrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_rrb.nextTree());

                }
                stream_rrb.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, dissolvePhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:106:1: dissolveStructure : ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ ;
    public final ChemicalChunkerParser.dissolveStructure_return dissolveStructure() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure_return retval = new ChemicalChunkerParser.dissolveStructure_return();
        retval.start = input.LT(1);
        int dissolveStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj110 = null;

        ChemicalChunkerParser.nnp_return nnp111 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity112 = null;

        ChemicalChunkerParser.nnp_return nnp113 = null;

        ChemicalChunkerParser.molecule_return molecule114 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule115 = null;

        ChemicalChunkerParser.inin_return inin116 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE117 = null;

        ChemicalChunkerParser.adj_return adj118 = null;

        ChemicalChunkerParser.nnp_return nnp119 = null;

        ChemicalChunkerParser.molecule_return molecule120 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule121 = null;

        ChemicalChunkerParser.conjunction_return conjunction122 = null;

        ChemicalChunkerParser.molecule_return molecule123 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:2: ( ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:4: ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:4: ( adj )?
            int alt21=2;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure594_static.FOLLOW_adj_in_dissolveStructure594);
                    adj110=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj110.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:9: ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) )
            int alt24=2;
            switch ( input.LA(1) ) {
            case 158:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 38:
                    case 39:
                    case 40:
                    case 45:
                    case 46:
                    case 73:
                    case 84:
                    case 133:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                    case 151:
                    case 152:
                    case 153:
                        {
                        alt24=2;
                        }
                        break;
                    case 71:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 50:
                                {
                                alt24=1;
                                }
                                break;
                            case 38:
                            case 139:
                            case 141:
                            case 143:
                            case 146:
                                {
                                alt24=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 24, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 24, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 24, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 24, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
            case 39:
            case 40:
            case 45:
            case 46:
            case 71:
            case 73:
            case 84:
            case 133:
            case 139:
            case 141:
            case 143:
            case 146:
            case 151:
            case 152:
            case 153:
                {
                alt24=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }

            switch (alt24) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:10: nnp nnchementity
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure598_static.FOLLOW_nnp_in_dissolveStructure598);
                    nnp111=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp111.getTree());
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure600_static.FOLLOW_nnchementity_in_dissolveStructure600);
                    nnchementity112=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity112.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:28: ( nnp )? ( molecule | unnamedmolecule )
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:28: ( nnp )?
                    int alt22=2;
                    switch ( input.LA(1) ) {
                        case 158:
                            {
                            alt22=1;
                            }
                            break;
                    }

                    switch (alt22) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                            {
                            pushFollow(FOLLOW_nnp_in_dissolveStructure603_static.FOLLOW_nnp_in_dissolveStructure603);
                            nnp113=nnp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp113.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:32: ( molecule | unnamedmolecule )
                    int alt23=2;
                    alt23 = dfa23.predict(input);
                    switch (alt23) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:33: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure606_static.FOLLOW_molecule_in_dissolveStructure606);
                            molecule114=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule114.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:42: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure608_static.FOLLOW_unnamedmolecule_in_dissolveStructure608);
                            unnamedmolecule115=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule115.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:60: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt30=0;
            loop30:
            do {
                int alt30=2;
                alt30 = dfa30.predict(input);
                switch (alt30) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:61: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure613_static.FOLLOW_inin_in_dissolveStructure613);
            	    inin116=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin116.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:66: ( dtTHE )?
            	    int alt25=2;
            	    switch ( input.LA(1) ) {
            	        case 142:
            	            {
            	            alt25=1;
            	            }
            	            break;
            	    }

            	    switch (alt25) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure615_static.FOLLOW_dtTHE_in_dissolveStructure615);
            	            dtTHE117=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE117.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:73: ( adj )?
            	    int alt26=2;
            	    alt26 = dfa26.predict(input);
            	    switch (alt26) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure618_static.FOLLOW_adj_in_dissolveStructure618);
            	            adj118=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj118.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:78: ( nnp )?
            	    int alt27=2;
            	    switch ( input.LA(1) ) {
            	        case 158:
            	            {
            	            alt27=1;
            	            }
            	            break;
            	    }

            	    switch (alt27) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure621_static.FOLLOW_nnp_in_dissolveStructure621);
            	            nnp119=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp119.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:83: ( molecule | unnamedmolecule )
            	    int alt28=2;
            	    alt28 = dfa28.predict(input);
            	    switch (alt28) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:84: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure625_static.FOLLOW_molecule_in_dissolveStructure625);
            	            molecule120=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule120.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:93: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure627_static.FOLLOW_unnamedmolecule_in_dissolveStructure627);
            	            unnamedmolecule121=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule121.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:110: ( conjunction molecule )*
            	    loop29:
            	    do {
            	        int alt29=2;
            	        alt29 = dfa29.predict(input);
            	        switch (alt29) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:111: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure631_static.FOLLOW_conjunction_in_dissolveStructure631);
            	    	    conjunction122=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction122.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure633_static.FOLLOW_molecule_in_dissolveStructure633);
            	    	    molecule123=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule123.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop29;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt30 >= 1 ) break loop30;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(30, input);
                        throw eee;
                }
                cnt30++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, dissolveStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);
        int verbphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure124 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase648_static.FOLLOW_verbphraseStructure_in_verbphrase648);
            verbphraseStructure124=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure124.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 111:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, verbphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);
        int verbphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt125 = null;

        ChemicalChunkerParser.to_return to126 = null;

        ChemicalChunkerParser.inAll_return inAll127 = null;

        ChemicalChunkerParser.inafter_return inafter128 = null;

        ChemicalChunkerParser.md_return md129 = null;

        ChemicalChunkerParser.rbconj_return rbconj130 = null;

        ChemicalChunkerParser.adv_return adv131 = null;

        ChemicalChunkerParser.adj_return adj132 = null;

        ChemicalChunkerParser.verb_return verb133 = null;

        ChemicalChunkerParser.md_return md134 = null;

        ChemicalChunkerParser.adv_return adv135 = null;

        ChemicalChunkerParser.adj_return adj136 = null;

        ChemicalChunkerParser.neg_return neg137 = null;

        ChemicalChunkerParser.inoff_return inoff138 = null;

        ChemicalChunkerParser.cc_return cc139 = null;

        ChemicalChunkerParser.comma_return comma140 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase141 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:24: ( dt )?
            int alt31=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt31=1;
                    }
                    break;
            }

            switch (alt31) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure666_static.FOLLOW_dt_in_verbphraseStructure666);
                    dt125=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt125.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:28: ( to )?
            int alt32=2;
            switch ( input.LA(1) ) {
                case 169:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA32_3 = input.LA(3);

                            if ( (synpred113_ChemicalChunker()) ) {
                                alt32=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt32) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure669_static.FOLLOW_to_in_verbphraseStructure669);
                    to126=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to126.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:32: ( inAll )?
            int alt33=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt33=1;
                    }
                    break;
                case 49:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA33_4 = input.LA(3);

                            if ( (synpred114_ChemicalChunker()) ) {
                                alt33=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt33) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure672_static.FOLLOW_inAll_in_verbphraseStructure672);
                    inAll127=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll127.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:39: ( inafter )?
            int alt34=2;
            switch ( input.LA(1) ) {
                case 49:
                    {
                    alt34=1;
                    }
                    break;
            }

            switch (alt34) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure675_static.FOLLOW_inafter_in_verbphraseStructure675);
                    inafter128=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter128.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt44=0;
            loop44:
            do {
                int alt44=2;
                alt44 = dfa44.predict(input);
                switch (alt44) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:49: ( md )*
            	    loop35:
            	    do {
            	        int alt35=2;
            	        switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            alt35=1;
            	            }
            	            break;

            	        }

            	        switch (alt35) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure679_static.FOLLOW_md_in_verbphraseStructure679);
            	    	    md129=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md129.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop35;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:53: ( rbconj )?
            	    int alt36=2;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt36=1;
            	            }
            	            break;
            	    }

            	    switch (alt36) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure682_static.FOLLOW_rbconj_in_verbphraseStructure682);
            	            rbconj130=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj130.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:61: ( adv )*
            	    loop37:
            	    do {
            	        int alt37=2;
            	        switch ( input.LA(1) ) {
            	        case 164:
            	        case 165:
            	        case 166:
            	        case 167:
            	            {
            	            alt37=1;
            	            }
            	            break;

            	        }

            	        switch (alt37) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure685_static.FOLLOW_adv_in_verbphraseStructure685);
            	    	    adv131=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv131.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop37;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:66: ( adj )?
            	    int alt38=2;
            	    switch ( input.LA(1) ) {
            	        case 39:
            	        case 40:
            	        case 45:
            	        case 151:
            	        case 152:
            	        case 153:
            	            {
            	            alt38=1;
            	            }
            	            break;
            	    }

            	    switch (alt38) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure688_static.FOLLOW_adj_in_verbphraseStructure688);
            	            adj132=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj132.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:71: ( verb )+
            	    int cnt39=0;
            	    loop39:
            	    do {
            	        int alt39=2;
            	        alt39 = dfa39.predict(input);
            	        switch (alt39) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure691_static.FOLLOW_verb_in_verbphraseStructure691);
            	    	    verb133=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb133.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt39 >= 1 ) break loop39;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(39, input);
            	                throw eee;
            	        }
            	        cnt39++;
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:77: ( md )*
            	    loop40:
            	    do {
            	        int alt40=2;
            	        switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA40_3 = input.LA(3);

            	                if ( (synpred121_ChemicalChunker()) ) {
            	                    alt40=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt40) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure694_static.FOLLOW_md_in_verbphraseStructure694);
            	    	    md134=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md134.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop40;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:81: ( adv )*
            	    loop41:
            	    do {
            	        int alt41=2;
            	        alt41 = dfa41.predict(input);
            	        switch (alt41) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure697_static.FOLLOW_adv_in_verbphraseStructure697);
            	    	    adv135=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv135.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop41;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:86: ( adj )?
            	    int alt42=2;
            	    alt42 = dfa42.predict(input);
            	    switch (alt42) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure700_static.FOLLOW_adj_in_verbphraseStructure700);
            	            adj136=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj136.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:91: ( neg )?
            	    int alt43=2;
            	    switch ( input.LA(1) ) {
            	        case 135:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA43_3 = input.LA(3);

            	                    if ( (synpred124_ChemicalChunker()) ) {
            	                        alt43=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt43) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure703_static.FOLLOW_neg_in_verbphraseStructure703);
            	            neg137=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg137.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt44 >= 1 ) break loop44;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(44, input);
                        throw eee;
                }
                cnt44++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:99: ( inoff )?
            int alt45=2;
            switch ( input.LA(1) ) {
                case 62:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA45_3 = input.LA(3);

                            if ( (synpred126_ChemicalChunker()) ) {
                                alt45=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt45) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure709_static.FOLLOW_inoff_in_verbphraseStructure709);
                    inoff138=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff138.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:106: ( ( cc )? ( comma )? prepphrase )*
            loop48:
            do {
                int alt48=2;
                alt48 = dfa48.predict(input);
                switch (alt48) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:107: ( cc )?
            	    int alt46=2;
            	    switch ( input.LA(1) ) {
            	        case 145:
            	            {
            	            alt46=1;
            	            }
            	            break;
            	    }

            	    switch (alt46) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure713_static.FOLLOW_cc_in_verbphraseStructure713);
            	            cc139=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc139.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:111: ( comma )?
            	    int alt47=2;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt47=1;
            	            }
            	            break;
            	    }

            	    switch (alt47) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure716_static.FOLLOW_comma_in_verbphraseStructure716);
            	            comma140=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma140.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure719_static.FOLLOW_prepphrase_in_verbphraseStructure719);
            	    prepphrase141=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase141.getTree());

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, verbphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);
        int verb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb142 = null;

        ChemicalChunkerParser.vbp_return vbp143 = null;

        ChemicalChunkerParser.vbg_return vbg144 = null;

        ChemicalChunkerParser.vbd_return vbd145 = null;

        ChemicalChunkerParser.vbz_return vbz146 = null;

        ChemicalChunkerParser.vbn_return vbn147 = null;

        ChemicalChunkerParser.vbuse_return vbuse148 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge149 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse150 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb151 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject152 = null;

        ChemicalChunkerParser.vbadd_return vbadd153 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute154 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge155 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain156 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop157 = null;

        ChemicalChunkerParser.vbfill_return vbfill158 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend159 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat160 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus161 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate162 = null;

        ChemicalChunkerParser.vbcool_return vbcool163 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass164 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve165 = null;

        ChemicalChunkerParser.vbdry_return vbdry166 = null;

        ChemicalChunkerParser.vbextract_return vbextract167 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter168 = null;

        ChemicalChunkerParser.vbheat_return vbheat169 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease170 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition171 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate172 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify173 = null;

        ChemicalChunkerParser.vbquench_return vbquench174 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover175 = null;

        ChemicalChunkerParser.vbremove_return vbremove176 = null;

        ChemicalChunkerParser.vbstir_return vbstir177 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize178 = null;

        ChemicalChunkerParser.vbwait_return vbwait179 = null;

        ChemicalChunkerParser.vbwash_return vbwash180 = null;

        ChemicalChunkerParser.vbyield_return vbyield181 = null;

        ChemicalChunkerParser.vbchange_return vbchange182 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt49=41;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb731_static.FOLLOW_vb_in_verb731);
                    vb142=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb142.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb733_static.FOLLOW_vbp_in_verb733);
                    vbp143=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp143.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb735_static.FOLLOW_vbg_in_verb735);
                    vbg144=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg144.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb737_static.FOLLOW_vbd_in_verb737);
                    vbd145=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd145.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb739_static.FOLLOW_vbz_in_verb739);
                    vbz146=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz146.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb741_static.FOLLOW_vbn_in_verb741);
                    vbn147=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn147.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb743_static.FOLLOW_vbuse_in_verb743);
                    vbuse148=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse148.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb745_static.FOLLOW_vbsubmerge_in_verb745);
                    vbsubmerge149=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge149.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb747_static.FOLLOW_vbimmerse_in_verb747);
                    vbimmerse150=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse150.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb749_static.FOLLOW_degassMultiVerb_in_verb749);
                    degassMultiVerb151=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb151.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb751_static.FOLLOW_vbsubject_in_verb751);
                    vbsubject152=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject152.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb753_static.FOLLOW_vbadd_in_verb753);
                    vbadd153=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd153.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:90: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_verb755_static.FOLLOW_vbdilute_in_verb755);
                    vbdilute154=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute154.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:99: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb757_static.FOLLOW_vbcharge_in_verb757);
                    vbcharge155=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge155.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:108: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb759_static.FOLLOW_vbcontain_in_verb759);
                    vbcontain156=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain156.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:118: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb761_static.FOLLOW_vbdrop_in_verb761);
                    vbdrop157=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop157.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:125: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb763_static.FOLLOW_vbfill_in_verb763);
                    vbfill158=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill158.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:132: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb765_static.FOLLOW_vbsuspend_in_verb765);
                    vbsuspend159=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend159.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:142: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb767_static.FOLLOW_vbtreat_in_verb767);
                    vbtreat160=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat160.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:150: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb769_static.FOLLOW_vbapparatus_in_verb769);
                    vbapparatus161=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus161.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:162: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb771_static.FOLLOW_vbconcentrate_in_verb771);
                    vbconcentrate162=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate162.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:176: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb773_static.FOLLOW_vbcool_in_verb773);
                    vbcool163=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool163.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:183: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb775_static.FOLLOW_vbdegass_in_verb775);
                    vbdegass164=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass164.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:192: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb777_static.FOLLOW_vbdissolve_in_verb777);
                    vbdissolve165=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve165.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:203: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb779_static.FOLLOW_vbdry_in_verb779);
                    vbdry166=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry166.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:209: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb781_static.FOLLOW_vbextract_in_verb781);
                    vbextract167=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract167.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:219: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb783_static.FOLLOW_vbfilter_in_verb783);
                    vbfilter168=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter168.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:229: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb786_static.FOLLOW_vbheat_in_verb786);
                    vbheat169=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat169.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:236: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb788_static.FOLLOW_vbincrease_in_verb788);
                    vbincrease170=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease170.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:247: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb790_static.FOLLOW_vbpartition_in_verb790);
                    vbpartition171=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition171.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:259: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb792_static.FOLLOW_vbprecipitate_in_verb792);
                    vbprecipitate172=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate172.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:273: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb794_static.FOLLOW_vbpurify_in_verb794);
                    vbpurify173=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify173.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:282: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb796_static.FOLLOW_vbquench_in_verb796);
                    vbquench174=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench174.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:291: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb798_static.FOLLOW_vbrecover_in_verb798);
                    vbrecover175=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover175.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:301: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb800_static.FOLLOW_vbremove_in_verb800);
                    vbremove176=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove176.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:310: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb802_static.FOLLOW_vbstir_in_verb802);
                    vbstir177=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir177.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:317: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb804_static.FOLLOW_vbsynthesize_in_verb804);
                    vbsynthesize178=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize178.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:330: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb806_static.FOLLOW_vbwait_in_verb806);
                    vbwait179=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait179.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:337: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb808_static.FOLLOW_vbwash_in_verb808);
                    vbwash180=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash180.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:344: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb810_static.FOLLOW_vbyield_in_verb810);
                    vbyield181=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield181.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:352: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb812_static.FOLLOW_vbchange_in_verb812);
                    vbchange182=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange182.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, verb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:115:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);
        int degassMultiVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass183 = null;

        ChemicalChunkerParser.cc_return cc184 = null;

        ChemicalChunkerParser.vbfill_return vbfill185 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:2: ( vbdegass cc vbfill )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb821_static.FOLLOW_vbdegass_in_degassMultiVerb821);
            vbdegass183=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass183.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb823_static.FOLLOW_cc_in_degassMultiVerb823);
            cc184=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc184.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb825_static.FOLLOW_vbfill_in_degassMultiVerb825);
            vbfill185=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill185.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, degassMultiVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);
        int noun_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure186 = null;

        ChemicalChunkerParser.dash_return dash187 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure188 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:7: ( nounStructure ( dash nounStructure )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun834_static.FOLLOW_nounStructure_in_noun834);
            nounStructure186=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure186.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:23: ( dash nounStructure )*
            loop50:
            do {
                int alt50=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    int LA50_2 = input.LA(2);

                    if ( (synpred170_ChemicalChunker()) ) {
                        alt50=1;
                    }


                    }
                    break;

                }

                switch (alt50) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun837_static.FOLLOW_dash_in_noun837);
            	    dash187=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash187.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun839_static.FOLLOW_nounStructure_in_noun839);
            	    nounStructure188=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure188.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, noun_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);
        int nounStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp189 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss190 = null;

        ChemicalChunkerParser.citation_return citation191 = null;

        ChemicalChunkerParser.cycles_return cycles192 = null;

        ChemicalChunkerParser.molecule_return molecule193 = null;

        ChemicalChunkerParser.apparatus_return apparatus194 = null;

        ChemicalChunkerParser.mixture_return mixture195 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule196 = null;

        ChemicalChunkerParser.nnyield_return nnyield197 = null;

        ChemicalChunkerParser.nnstate_return nnstate198 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode199 = null;

        ChemicalChunkerParser.nn_return nn200 = null;

        ChemicalChunkerParser.nns_return nns201 = null;

        ChemicalChunkerParser.nnp_return nnp202 = null;

        ChemicalChunkerParser.nnadd_return nnadd203 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase204 = null;

        ChemicalChunkerParser.nnexample_return nnexample205 = null;

        ChemicalChunkerParser.range_return range206 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts207 = null;

        ChemicalChunkerParser.nntime_return nntime208 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere209 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode210 = null;

        ChemicalChunkerParser.quantity_return quantity211 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity212 = null;

        ChemicalChunkerParser.nntemp_return nntemp213 = null;

        ChemicalChunkerParser.nnph_return nnph214 = null;

        ChemicalChunkerParser.nnflash_return nnflash215 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral216 = null;

        ChemicalChunkerParser.nnamount_return nnamount217 = null;

        ChemicalChunkerParser.nneq_return nneq218 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure219 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn220 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography221 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum222 = null;

        ChemicalChunkerParser.nncycle_return nncycle223 = null;

        ChemicalChunkerParser.nntimes_return nntimes224 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate225 = null;

        ChemicalChunkerParser.nnvol_return nnvol226 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify227 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize228 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture229 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference230 = null;

        ChemicalChunkerParser.nndry_return nndry231 = null;

        ChemicalChunkerParser.numeric_return numeric232 = null;

        ChemicalChunkerParser.nnextract_return nnextract233 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter234 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate235 = null;

        ChemicalChunkerParser.nnremove_return nnremove236 = null;

        ChemicalChunkerParser.fw_return fw237 = null;

        ChemicalChunkerParser.sym_return sym238 = null;

        ChemicalChunkerParser.clause_return clause239 = null;

        ChemicalChunkerParser.ls_return ls240 = null;

        ChemicalChunkerParser.nnps_return nnps241 = null;

        ChemicalChunkerParser.pos_return pos242 = null;

        ChemicalChunkerParser.oscarase_return oscarase243 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase )
            int alt51=55;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure850_static.FOLLOW_prp_in_nounStructure850);
                    prp189=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp189.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure852_static.FOLLOW_prp_poss_in_nounStructure852);
                    prp_poss190=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss190.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure854_static.FOLLOW_citation_in_nounStructure854);
                    citation191=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation191.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure856_static.FOLLOW_cycles_in_nounStructure856);
                    cycles192=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles192.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure858_static.FOLLOW_molecule_in_nounStructure858);
                    molecule193=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule193.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure860_static.FOLLOW_apparatus_in_nounStructure860);
                    apparatus194=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus194.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:66: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_nounStructure862_static.FOLLOW_mixture_in_nounStructure862);
                    mixture195=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture195.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:74: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure864_static.FOLLOW_unnamedmolecule_in_nounStructure864);
                    unnamedmolecule196=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule196.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:90: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure866_static.FOLLOW_nnyield_in_nounStructure866);
                    nnyield197=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield197.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:98: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure868_static.FOLLOW_nnstate_in_nounStructure868);
                    nnstate198=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate198.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:106: procedureNode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedureNode_in_nounStructure870_static.FOLLOW_procedureNode_in_nounStructure870);
                    procedureNode199=procedureNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode199.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:120: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure872_static.FOLLOW_nn_in_nounStructure872);
                    nn200=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn200.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:123: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure874_static.FOLLOW_nns_in_nounStructure874);
                    nns201=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns201.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:127: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure876_static.FOLLOW_nnp_in_nounStructure876);
                    nnp202=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp202.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:131: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure878_static.FOLLOW_nnadd_in_nounStructure878);
                    nnadd203=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd203.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:137: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure880_static.FOLLOW_preparationphrase_in_nounStructure880);
                    preparationphrase204=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase204.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:155: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure882_static.FOLLOW_nnexample_in_nounStructure882);
                    nnexample205=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample205.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:165: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure884_static.FOLLOW_range_in_nounStructure884);
                    range206=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range206.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:171: oscaronts
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaronts_in_nounStructure886_static.FOLLOW_oscaronts_in_nounStructure886);
                    oscaronts207=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts207.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:181: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure888_static.FOLLOW_nntime_in_nounStructure888);
                    nntime208=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime208.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:188: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure890_static.FOLLOW_nnatmosphere_in_nounStructure890);
                    nnatmosphere209=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere209.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:201: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure892_static.FOLLOW_tmunicode_in_nounStructure892);
                    tmunicode210=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode210.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:211: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure894_static.FOLLOW_quantity_in_nounStructure894);
                    quantity211=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity211.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:220: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure896_static.FOLLOW_nnchementity_in_nounStructure896);
                    nnchementity212=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity212.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:233: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure898_static.FOLLOW_nntemp_in_nounStructure898);
                    nntemp213=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp213.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:240: nnph
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnph_in_nounStructure900_static.FOLLOW_nnph_in_nounStructure900);
                    nnph214=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph214.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:245: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure902_static.FOLLOW_nnflash_in_nounStructure902);
                    nnflash215=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash215.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:253: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure904_static.FOLLOW_nngeneral_in_nounStructure904);
                    nngeneral216=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral216.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:263: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure906_static.FOLLOW_nnamount_in_nounStructure906);
                    nnamount217=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount217.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:272: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure908_static.FOLLOW_nneq_in_nounStructure908);
                    nneq218=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq218.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:277: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure910_static.FOLLOW_nnpressure_in_nounStructure910);
                    nnpressure219=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure219.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:288: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure912_static.FOLLOW_nncolumn_in_nounStructure912);
                    nncolumn220=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn220.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:297: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure914_static.FOLLOW_nnchromatography_in_nounStructure914);
                    nnchromatography221=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography221.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:314: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure916_static.FOLLOW_nnvacuum_in_nounStructure916);
                    nnvacuum222=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum222.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:323: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure918_static.FOLLOW_nncycle_in_nounStructure918);
                    nncycle223=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle223.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:331: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure920_static.FOLLOW_nntimes_in_nounStructure920);
                    nntimes224=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes224.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:339: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure922_static.FOLLOW_nnconcentrate_in_nounStructure922);
                    nnconcentrate225=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate225.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:353: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure924_static.FOLLOW_nnvol_in_nounStructure924);
                    nnvol226=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol226.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:359: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure926_static.FOLLOW_nnpurify_in_nounStructure926);
                    nnpurify227=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify227.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:368: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure928_static.FOLLOW_nnsynthesize_in_nounStructure928);
                    nnsynthesize228=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize228.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:381: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure930_static.FOLLOW_nnmixture_in_nounStructure930);
                    nnmixture229=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture229.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:391: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_nounStructure932_static.FOLLOW_squareBracketedReference_in_nounStructure932);
                    squareBracketedReference230=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference230.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:416: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure934_static.FOLLOW_nndry_in_nounStructure934);
                    nndry231=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry231.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:422: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_nounStructure936_static.FOLLOW_numeric_in_nounStructure936);
                    numeric232=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric232.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:430: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure938_static.FOLLOW_nnextract_in_nounStructure938);
                    nnextract233=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract233.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:440: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure940_static.FOLLOW_nnfilter_in_nounStructure940);
                    nnfilter234=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter234.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:449: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure942_static.FOLLOW_nnprecipitate_in_nounStructure942);
                    nnprecipitate235=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate235.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:463: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure944_static.FOLLOW_nnremove_in_nounStructure944);
                    nnremove236=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove236.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:472: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure946_static.FOLLOW_fw_in_nounStructure946);
                    fw237=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw237.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:475: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure948_static.FOLLOW_sym_in_nounStructure948);
                    sym238=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym238.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:479: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure950_static.FOLLOW_clause_in_nounStructure950);
                    clause239=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause239.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:486: ls
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ls_in_nounStructure952_static.FOLLOW_ls_in_nounStructure952);
                    ls240=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls240.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:489: nnps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnps_in_nounStructure954_static.FOLLOW_nnps_in_nounStructure954);
                    nnps241=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps241.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:494: pos
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pos_in_nounStructure956_static.FOLLOW_pos_in_nounStructure956);
                    pos242=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos242.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:498: oscarase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarase_in_nounStructure958_static.FOLLOW_oscarase_in_nounStructure958);
                    oscarase243=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase243.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, nounStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);
        int prepphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg244 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere245 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime246 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp247 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN248 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole249 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther250 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:5: ( neg )?
            int alt52=2;
            switch ( input.LA(1) ) {
                case 135:
                    {
                    alt52=1;
                    }
                    break;
            }

            switch (alt52) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase970_static.FOLLOW_neg_in_prepphrase970);
                    neg244=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg244.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt53=6;
            alt53 = dfa53.predict(input);
            switch (alt53) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase974_static.FOLLOW_prepphraseAtmosphere_in_prepphrase974);
                    prepphraseAtmosphere245=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere245.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase976_static.FOLLOW_prepphraseTime_in_prepphrase976);
                    prepphraseTime246=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime246.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase978_static.FOLLOW_prepphraseTemp_in_prepphrase978);
                    prepphraseTemp247=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp247.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase980_static.FOLLOW_prepphraseIN_in_prepphrase980);
                    prepphraseIN248=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN248.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase982_static.FOLLOW_prepphraseRole_in_prepphrase982);
                    prepphraseRole249=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole249.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase984_static.FOLLOW_prepphraseOther_in_prepphrase984);
                    prepphraseOther250=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther250.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, prepphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:127:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphere_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent251 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere996_static.FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere996);
            prepphraseAtmosphereContent251=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent251.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 128:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:128:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, prepphraseAtmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:130:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphereContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder252 = null;

        ChemicalChunkerParser.dt_return dt253 = null;

        ChemicalChunkerParser.advAdj_return advAdj254 = null;

        ChemicalChunkerParser.molecule_return molecule255 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere256 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1016_static.FOLLOW_inunder_in_prepphraseAtmosphereContent1016);
            inunder252=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder252.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:12: ( dt )?
            int alt54=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt54=1;
                    }
                    break;
            }

            switch (alt54) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1019_static.FOLLOW_dt_in_prepphraseAtmosphereContent1019);
                    dt253=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt253.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:16: ( advAdj )*
            loop55:
            do {
                int alt55=2;
                alt55 = dfa55.predict(input);
                switch (alt55) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1022_static.FOLLOW_advAdj_in_prepphraseAtmosphereContent1022);
            	    advAdj254=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj254.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1025_static.FOLLOW_molecule_in_prepphraseAtmosphereContent1025);
            molecule255=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule255.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:33: ( nnatmosphere )?
            int alt56=2;
            switch ( input.LA(1) ) {
                case 68:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA56_3 = input.LA(3);

                            if ( (synpred233_ChemicalChunker()) ) {
                                alt56=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt56) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1027_static.FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1027);
                    nnatmosphere256=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere256.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, prepphraseAtmosphereContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:133:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);
        int prepphraseTime_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure257 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1037_static.FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1037);
            prepPhraseTimeStructure257=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure257.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 134:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, prepphraseTime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:136:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);
        int prepPhraseTimeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj258 = null;

        ChemicalChunkerParser.inAll_return inAll259 = null;

        ChemicalChunkerParser.dt_return dt260 = null;

        ChemicalChunkerParser.advAdj_return advAdj261 = null;

        ChemicalChunkerParser.cd_return cd262 = null;

        ChemicalChunkerParser.nntime_return nntime263 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:3: ( advAdj )*
            loop57:
            do {
                int alt57=2;
                alt57 = dfa57.predict(input);
                switch (alt57) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1055_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1055);
            	    advAdj258=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj258.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:11: ( inAll )?
            int alt58=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt58=1;
                    }
                    break;
            }

            switch (alt58) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1058_static.FOLLOW_inAll_in_prepPhraseTimeStructure1058);
                    inAll259=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll259.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:19: ( dt )?
            int alt59=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt59=1;
                    }
                    break;
            }

            switch (alt59) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1062_static.FOLLOW_dt_in_prepPhraseTimeStructure1062);
                    dt260=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt260.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:23: ( advAdj )*
            loop60:
            do {
                int alt60=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt60=1;
                    }
                    break;

                }

                switch (alt60) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1065_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1065);
            	    advAdj261=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj261.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:31: ( cd )?
            int alt61=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt61=1;
                    }
                    break;
            }

            switch (alt61) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1068_static.FOLLOW_cd_in_prepPhraseTimeStructure1068);
                    cd262=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd262.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:35: ( nntime )+
            int cnt62=0;
            loop62:
            do {
                int alt62=2;
                switch ( input.LA(1) ) {
                case 64:
                    {
                    int LA62_2 = input.LA(2);

                    if ( (synpred239_ChemicalChunker()) ) {
                        alt62=1;
                    }


                    }
                    break;

                }

                switch (alt62) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1071_static.FOLLOW_nntime_in_prepPhraseTimeStructure1071);
            	    nntime263=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime263.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt62 >= 1 ) break loop62;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(62, input);
                        throw eee;
                }
                cnt62++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, prepPhraseTimeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);
        int prepphraseTemp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent264 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1081_static.FOLLOW_prepphraseTempContent_in_prepphraseTemp1081);
            prepphraseTempContent264=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent264.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 139:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, prepphraseTemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:141:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);
        int prepphraseTempContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj265 = null;

        ChemicalChunkerParser.inAll_return inAll266 = null;

        ChemicalChunkerParser.dt_return dt267 = null;

        ChemicalChunkerParser.advAdj_return advAdj268 = null;

        ChemicalChunkerParser.cd_return cd269 = null;

        ChemicalChunkerParser.nntemp_return nntemp270 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:5: ( advAdj )?
            int alt63=2;
            alt63 = dfa63.predict(input);
            switch (alt63) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1102_static.FOLLOW_advAdj_in_prepphraseTempContent1102);
                    advAdj265=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj265.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:13: ( inAll )?
            int alt64=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt64=1;
                    }
                    break;
            }

            switch (alt64) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1105_static.FOLLOW_inAll_in_prepphraseTempContent1105);
                    inAll266=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll266.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:20: ( dt )?
            int alt65=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt65=1;
                    }
                    break;
            }

            switch (alt65) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1108_static.FOLLOW_dt_in_prepphraseTempContent1108);
                    dt267=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt267.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:24: ( advAdj )?
            int alt66=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt66=1;
                    }
                    break;
            }

            switch (alt66) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1111_static.FOLLOW_advAdj_in_prepphraseTempContent1111);
                    advAdj268=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj268.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:32: ( cd )?
            int alt67=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt67=1;
                    }
                    break;
            }

            switch (alt67) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1114_static.FOLLOW_cd_in_prepphraseTempContent1114);
                    cd269=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd269.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:36: ( nntemp )+
            int cnt68=0;
            loop68:
            do {
                int alt68=2;
                switch ( input.LA(1) ) {
                case 72:
                    {
                    int LA68_2 = input.LA(2);

                    if ( (synpred245_ChemicalChunker()) ) {
                        alt68=1;
                    }


                    }
                    break;

                }

                switch (alt68) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1117_static.FOLLOW_nntemp_in_prepphraseTempContent1117);
            	    nntemp270=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp270.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt68 >= 1 ) break loop68;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(68, input);
                        throw eee;
                }
                cnt68++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, prepphraseTempContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:144:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);
        int prepphraseIN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin271 = null;

        ChemicalChunkerParser.molecule_return molecule272 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1126_static.FOLLOW_inin_in_prepphraseIN1126);
            inin271=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin271.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1128_static.FOLLOW_molecule_in_prepphraseIN1128);
            molecule272=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule272.getTree());


            // AST REWRITE
            // elements: inin, molecule
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 145:17: -> ^( PrepPhrase inin molecule )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, prepphraseIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);
        int prepphraseRole_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas273 = null;

        ChemicalChunkerParser.dt_return dt274 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity275 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1149_static.FOLLOW_inas_in_prepphraseRole1149);
            inas273=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas273.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:8: ( dt )?
            int alt69=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt69=1;
                    }
                    break;
            }

            switch (alt69) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1151_static.FOLLOW_dt_in_prepphraseRole1151);
                    dt274=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt274.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1154_static.FOLLOW_nnchementity_in_prepphraseRole1154);
            nnchementity275=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity275.getTree());


            // AST REWRITE
            // elements: nnchementity, dt, inas
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 148:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, prepphraseRole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);
        int prepphraseOther_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj276 = null;

        ChemicalChunkerParser.inMost_return inMost277 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase278 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:4: ( advAdj )*
            loop70:
            do {
                int alt70=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt70=1;
                    }
                    break;

                }

                switch (alt70) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1177_static.FOLLOW_advAdj_in_prepphraseOther1177);
            	    advAdj276=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj276.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:12: ( inMost )+
            int cnt71=0;
            loop71:
            do {
                int alt71=2;
                switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt71=1;
                    }
                    break;

                }

                switch (alt71) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1180_static.FOLLOW_inMost_in_prepphraseOther1180);
            	    inMost277=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost277.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt71 >= 1 ) break loop71;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(71, input);
                        throw eee;
                }
                cnt71++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1184_static.FOLLOW_nounphrase_in_prepphraseOther1184);
            nounphrase278=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase278.getTree());


            // AST REWRITE
            // elements: advAdj, inMost, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 151:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, prepphraseOther_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);
        int prepphraseOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof279 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase280 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1210_static.FOLLOW_inof_in_prepphraseOf1210);
            inof279=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof279.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1213_static.FOLLOW_nounphrase_in_prepphraseOf1213);
            nounphrase280=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase280.getTree());


            // AST REWRITE
            // elements: nounphrase, inof
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 154:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, prepphraseOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:156:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);
        int prepphraseAfter_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj281 = null;

        ChemicalChunkerParser.inafter_return inafter282 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase283 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:5: ( advAdj )? inafter nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:5: ( advAdj )?
            int alt72=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt72=1;
                    }
                    break;
            }

            switch (alt72) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter1235_static.FOLLOW_advAdj_in_prepphraseAfter1235);
                    advAdj281=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj281.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter1238_static.FOLLOW_inafter_in_prepphraseAfter1238);
            inafter282=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter282.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter1241_static.FOLLOW_nounphrase_in_prepphraseAfter1241);
            nounphrase283=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase283.getTree());


            // AST REWRITE
            // elements: inafter, nounphrase, advAdj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 157:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, prepphraseAfter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);
        int preparationphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize284 = null;

        ChemicalChunkerParser.inas_return inas285 = null;

        ChemicalChunkerParser.nnexample_return nnexample286 = null;

        ChemicalChunkerParser.cd_return cd287 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase288 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1266_static.FOLLOW_vbsynthesize_in_preparationphrase1266);
            vbsynthesize284=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize284.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1268_static.FOLLOW_inas_in_preparationphrase1268);
            inas285=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas285.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:22: ( nnexample cd | prepphrase )
            int alt73=2;
            switch ( input.LA(1) ) {
            case 83:
                {
                alt73=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 72:
            case 135:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
            case 169:
                {
                alt73=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1271_static.FOLLOW_nnexample_in_preparationphrase1271);
                    nnexample286=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample286.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1273_static.FOLLOW_cd_in_preparationphrase1273);
                    cd287=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd287.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1276_static.FOLLOW_prepphrase_in_preparationphrase1276);
                    prepphrase288=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase288.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, preparationphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);
        int multiApparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus289 = null;

        ChemicalChunkerParser.conjunction_return conjunction290 = null;

        ChemicalChunkerParser.apparatus_return apparatus291 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus1287_static.FOLLOW_apparatus_in_multiApparatus1287);
            apparatus289=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus289.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:14: ( ( conjunction )* apparatus )*
            loop75:
            do {
                int alt75=2;
                alt75 = dfa75.predict(input);
                switch (alt75) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:15: ( conjunction )* apparatus
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:15: ( conjunction )*
            	    loop74:
            	    do {
            	        int alt74=2;
            	        alt74 = dfa74.predict(input);
            	        switch (alt74) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus1290_static.FOLLOW_conjunction_in_multiApparatus1290);
            	    	    conjunction290=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction290.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop74;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus1293_static.FOLLOW_apparatus_in_multiApparatus1293);
            	    apparatus291=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus291.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, multiApparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:164:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);
        int apparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt292 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus293 = null;

        ChemicalChunkerParser.nnApp_return nnApp294 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:4: ( dt )?
            int alt76=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt76=1;
                    }
                    break;
            }

            switch (alt76) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus1304_static.FOLLOW_dt_in_apparatus1304);
                    dt292=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt292.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:8: ( preapparatus )*
            loop77:
            do {
                int alt77=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 40:
                case 45:
                case 63:
                case 71:
                case 73:
                case 77:
                case 84:
                case 89:
                case 133:
                case 143:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt77=1;
                    }
                    break;

                }

                switch (alt77) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1307_static.FOLLOW_preapparatus_in_apparatus1307);
            	    preapparatus293=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus293.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:22: ( nnApp )+
            int cnt78=0;
            loop78:
            do {
                int alt78=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA78_2 = input.LA(2);

                    if ( (synpred255_ChemicalChunker()) ) {
                        alt78=1;
                    }


                    }
                    break;

                }

                switch (alt78) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus1310_static.FOLLOW_nnApp_in_apparatus1310);
            	    nnApp294=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp294.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt78 >= 1 ) break loop78;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(78, input);
                        throw eee;
                }
                cnt78++;
            } while (true);



            // AST REWRITE
            // elements: preapparatus, nnApp, dt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 165:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, apparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:167:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);
        int nnApp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus295 = null;

        ChemicalChunkerParser.dash_return dash296 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus297 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:4: ( nnapparatus )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA79_2 = input.LA(2);

                    if ( (synpred256_ChemicalChunker()) ) {
                        alt79=1;
                    }


                    }
                    break;

                }

                switch (alt79) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1337_static.FOLLOW_nnapparatus_in_nnApp1337);
            	    nnapparatus295=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus295.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:17: ( dash nnapparatus )*
            loop80:
            do {
                int alt80=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 100:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA80_5 = input.LA(5);

                                if ( (synpred257_ChemicalChunker()) ) {
                                    alt80=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt80) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp1341_static.FOLLOW_dash_in_nnApp1341);
            	    dash296=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash296.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1343_static.FOLLOW_nnapparatus_in_nnApp1343);
            	    nnapparatus297=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus297.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, nnApp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);
        int preapparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity298 = null;

        ChemicalChunkerParser.adj_return adj299 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure300 = null;

        ChemicalChunkerParser.nnadd_return nnadd301 = null;

        ChemicalChunkerParser.molecule_return molecule302 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity303 = null;

        ChemicalChunkerParser.nnstate_return nnstate304 = null;

        ChemicalChunkerParser.nn_return nn305 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt81=0;
            loop81:
            do {
                int alt81=9;
                alt81 = dfa81.predict(input);
                switch (alt81) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus1357_static.FOLLOW_quantity_in_preapparatus1357);
            	    quantity298=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity298.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus1359_static.FOLLOW_adj_in_preapparatus1359);
            	    adj299=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj299.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus1361_static.FOLLOW_nnpressure_in_preapparatus1361);
            	    nnpressure300=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure300.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus1363_static.FOLLOW_nnadd_in_preapparatus1363);
            	    nnadd301=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd301.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus1365_static.FOLLOW_molecule_in_preapparatus1365);
            	    molecule302=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule302.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus1367_static.FOLLOW_nnchementity_in_preapparatus1367);
            	    nnchementity303=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity303.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus1369_static.FOLLOW_nnstate_in_preapparatus1369);
            	    nnstate304=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate304.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus1371_static.FOLLOW_nn_in_preapparatus1371);
            	    nn305=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn305.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt81 >= 1 ) break loop81;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(81, input);
                        throw eee;
                }
                cnt81++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, preapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class oscaronts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaronts"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:172:1: oscaronts : ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) ;
    public final ChemicalChunkerParser.oscaronts_return oscaronts() throws RecognitionException {
        ChemicalChunkerParser.oscaronts_return retval = new ChemicalChunkerParser.oscaronts_return();
        retval.start = input.LT(1);
        int oscaronts_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscaront_return oscaront306 = null;


        RewriteRuleSubtreeStream stream_oscaront=new RewriteRuleSubtreeStream(adaptor,"rule oscaront");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:2: ( ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:4: ( oscaront )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:4: ( oscaront )+
            int cnt82=0;
            loop82:
            do {
                int alt82=2;
                switch ( input.LA(1) ) {
                case 42:
                    {
                    int LA82_2 = input.LA(2);

                    if ( (synpred266_ChemicalChunker()) ) {
                        alt82=1;
                    }


                    }
                    break;

                }

                switch (alt82) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscaront
            	    {
            	    pushFollow(FOLLOW_oscaront_in_oscaronts1383_static.FOLLOW_oscaront_in_oscaronts1383);
            	    oscaront306=oscaront();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscaront.add(oscaront306.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt82 >= 1 ) break loop82;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(82, input);
                        throw eee;
                }
                cnt82++;
            } while (true);



            // AST REWRITE
            // elements: oscaront
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 173:14: -> ^( OSCARONT ( oscaront )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:17: ^( OSCARONT ( oscaront )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARONT, "OSCARONT"), root_1);

                if ( !(stream_oscaront.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscaront.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscaront.nextTree());

                }
                stream_oscaront.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, oscaronts_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaronts"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:1: oscarCompound : ( adj )* oscarCompoundStructure ( adj )? ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )? ( quantity )* ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);
        int oscarCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj307 = null;

        ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure308 = null;

        ChemicalChunkerParser.adj_return adj309 = null;

        ChemicalChunkerParser.quantity_return quantity310 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity311 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference312 = null;

        ChemicalChunkerParser.quantity_return quantity313 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:15: ( ( adj )* oscarCompoundStructure ( adj )? ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )? ( quantity )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:18: ( adj )* oscarCompoundStructure ( adj )? ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )? ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:18: ( adj )*
            loop83:
            do {
                int alt83=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                    {
                    alt83=1;
                    }
                    break;

                }

                switch (alt83) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound1403_static.FOLLOW_adj_in_oscarCompound1403);
            	    adj307=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj307.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            pushFollow(FOLLOW_oscarCompoundStructure_in_oscarCompound1406_static.FOLLOW_oscarCompoundStructure_in_oscarCompound1406);
            oscarCompoundStructure308=oscarCompoundStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompoundStructure308.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:46: ( adj )?
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound1408_static.FOLLOW_adj_in_oscarCompound1408);
                    adj309=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj309.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:51: ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )?
            int alt85=4;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:52: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_oscarCompound1412_static.FOLLOW_quantity_in_oscarCompound1412);
                    quantity310=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity310.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:63: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_oscarCompound1416_static.FOLLOW_nnchementity_in_oscarCompound1416);
                    nnchementity311=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity311.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:78: {...}? numericOrIdentifierCompoundReference
                    {
                    if ( !((!followedByNumberWhichIsNotAReference(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "oscarCompound", "!followedByNumberWhichIsNotAReference(input)");
                    }
                    pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_oscarCompound1422_static.FOLLOW_numericOrIdentifierCompoundReference_in_oscarCompound1422);
                    numericOrIdentifierCompoundReference312=numericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference312.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:165: ( quantity )*
            loop86:
            do {
                int alt86=2;
                alt86 = dfa86.predict(input);
                switch (alt86) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_oscarCompound1426_static.FOLLOW_quantity_in_oscarCompound1426);
            	    quantity313=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity313.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, oscarCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:1: oscarCompoundStructure : ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) ;
    public final ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompoundStructure_return retval = new ChemicalChunkerParser.oscarCompoundStructure_return();
        retval.start = input.LT(1);
        int oscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm314 = null;

        ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure315 = null;

        ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure316 = null;


        RewriteRuleSubtreeStream stream_bracketedOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule bracketedOscarCompoundStructure");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_afterOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule afterOscarCompoundStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:23: ( ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:25: ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:25: ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            int alt88=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt88=1;
                }
                break;
            case 143:
                {
                alt88=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }

            switch (alt88) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:26: oscarcm ( afterOscarCompoundStructure )?
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompoundStructure1435_static.FOLLOW_oscarcm_in_oscarCompoundStructure1435);
                    oscarcm314=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm314.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:34: ( afterOscarCompoundStructure )?
                    int alt87=2;
                    switch ( input.LA(1) ) {
                        case 84:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA87_5 = input.LA(3);

                                    if ( (synpred273_ChemicalChunker()) ) {
                                        alt87=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA87_6 = input.LA(3);

                                    if ( (synpred273_ChemicalChunker()) ) {
                                        alt87=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA87_7 = input.LA(3);

                                    if ( (synpred273_ChemicalChunker()) ) {
                                        alt87=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt87) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: afterOscarCompoundStructure
                            {
                            pushFollow(FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1437_static.FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1437);
                            afterOscarCompoundStructure315=afterOscarCompoundStructure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_afterOscarCompoundStructure.add(afterOscarCompoundStructure315.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:65: bracketedOscarCompoundStructure
                    {
                    pushFollow(FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1442_static.FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1442);
                    bracketedOscarCompoundStructure316=bracketedOscarCompoundStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedOscarCompoundStructure.add(bracketedOscarCompoundStructure316.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: oscarcm, afterOscarCompoundStructure, bracketedOscarCompoundStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 176:98: -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:101: ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:111: ( oscarcm )?
                if ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:120: ( afterOscarCompoundStructure )?
                if ( stream_afterOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_afterOscarCompoundStructure.nextTree());

                }
                stream_afterOscarCompoundStructure.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:149: ( bracketedOscarCompoundStructure )?
                if ( stream_bracketedOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedOscarCompoundStructure.nextTree());

                }
                stream_bracketedOscarCompoundStructure.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, oscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompoundStructure"

    public static class afterOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:1: afterOscarCompoundStructure : ( ( oscarcm )+ | ( dash ( oscarcm )+ )+ ( dash )? | ( dash | apost )+ );
    public final ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.afterOscarCompoundStructure_return retval = new ChemicalChunkerParser.afterOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int afterOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm317 = null;

        ChemicalChunkerParser.dash_return dash318 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm319 = null;

        ChemicalChunkerParser.dash_return dash320 = null;

        ChemicalChunkerParser.dash_return dash321 = null;

        ChemicalChunkerParser.apost_return apost322 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:28: ( ( oscarcm )+ | ( dash ( oscarcm )+ )+ ( dash )? | ( dash | apost )+ )
            int alt94=3;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt94=1;
                }
                break;
            case 136:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt94=3;
                        }
                        break;
                    case 84:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA94_6 = input.LA(5);

                            if ( (synpred280_ChemicalChunker()) ) {
                                alt94=2;
                            }
                            else if ( (true) ) {
                                alt94=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 94, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 94, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 94, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 94, 2, input);

                    throw nvae;
                }

                }
                break;
            case 134:
                {
                alt94=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;
            }

            switch (alt94) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:30: ( oscarcm )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:30: ( oscarcm )+
                    int cnt89=0;
                    loop89:
                    do {
                        int alt89=2;
                        switch ( input.LA(1) ) {
                        case 84:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA89_3 = input.LA(3);

                                if ( (synpred275_ChemicalChunker()) ) {
                                    alt89=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt89) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    {
                    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1464_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1464);
                    	    oscarcm317=oscarcm();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm317.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt89 >= 1 ) break loop89;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(89, input);
                                throw eee;
                        }
                        cnt89++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:39: ( dash ( oscarcm )+ )+ ( dash )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:39: ( dash ( oscarcm )+ )+
                    int cnt91=0;
                    loop91:
                    do {
                        int alt91=2;
                        switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 84:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA91_5 = input.LA(5);

                                        if ( (synpred278_ChemicalChunker()) ) {
                                            alt91=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt91) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:40: dash ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1468_static.FOLLOW_dash_in_afterOscarCompoundStructure1468);
                    	    dash318=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash318.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:45: ( oscarcm )+
                    	    int cnt90=0;
                    	    loop90:
                    	    do {
                    	        int alt90=2;
                    	        switch ( input.LA(1) ) {
                    	        case 84:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA90_3 = input.LA(3);

                    	                if ( (synpred277_ChemicalChunker()) ) {
                    	                    alt90=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt90) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1470_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1470);
                    	    	    oscarcm319=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm319.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt90 >= 1 ) break loop90;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(90, input);
                    	                throw eee;
                    	        }
                    	        cnt90++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt91 >= 1 ) break loop91;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(91, input);
                                throw eee;
                        }
                        cnt91++;
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:56: ( dash )?
                    int alt92=2;
                    switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA92_3 = input.LA(3);

                                    if ( (synpred279_ChemicalChunker()) ) {
                                        alt92=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt92) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                            {
                            pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1475_static.FOLLOW_dash_in_afterOscarCompoundStructure1475);
                            dash320=dash();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash320.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:62: ( dash | apost )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:62: ( dash | apost )+
                    int cnt93=0;
                    loop93:
                    do {
                        int alt93=3;
                        switch ( input.LA(1) ) {
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA93_4 = input.LA(3);

                                if ( (synpred282_ChemicalChunker()) ) {
                                    alt93=2;
                                }


                                }
                                break;

                            }

                            }
                            break;
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA93_5 = input.LA(3);

                                if ( (synpred281_ChemicalChunker()) ) {
                                    alt93=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt93) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:63: dash
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1479_static.FOLLOW_dash_in_afterOscarCompoundStructure1479);
                    	    dash321=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash321.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:68: apost
                    	    {
                    	    pushFollow(FOLLOW_apost_in_afterOscarCompoundStructure1481_static.FOLLOW_apost_in_afterOscarCompoundStructure1481);
                    	    apost322=apost();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost322.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt93 >= 1 ) break loop93;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(93, input);
                                throw eee;
                        }
                        cnt93++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, afterOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterOscarCompoundStructure"

    public static class bracketedOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:1: bracketedOscarCompoundStructure : lrb ( oscarcm )+ rrb ;
    public final ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.bracketedOscarCompoundStructure_return retval = new ChemicalChunkerParser.bracketedOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int bracketedOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb323 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm324 = null;

        ChemicalChunkerParser.rrb_return rrb325 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:33: ( lrb ( oscarcm )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:35: lrb ( oscarcm )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedOscarCompoundStructure1490_static.FOLLOW_lrb_in_bracketedOscarCompoundStructure1490);
            lrb323=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb323.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:40: ( oscarcm )+
            int cnt95=0;
            loop95:
            do {
                int alt95=2;
                switch ( input.LA(1) ) {
                case 84:
                    {
                    alt95=1;
                    }
                    break;

                }

                switch (alt95) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1493_static.FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1493);
            	    oscarcm324=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm324.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt95 >= 1 ) break loop95;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(95, input);
                        throw eee;
                }
                cnt95++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_bracketedOscarCompoundStructure1496_static.FOLLOW_rrb_in_bracketedOscarCompoundStructure1496);
            rrb325=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb325.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, bracketedOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedOscarCompoundStructure"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);
        int molecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount326 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1506_static.FOLLOW_moleculeamount_in_molecule1506);
            moleculeamount326=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount326.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 181:19: -> ^( MOLECULE moleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:181:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, molecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? ;
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);
        int moleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3327 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1328 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2329 = null;

        ChemicalChunkerParser.asAstate_return asAstate330 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:16: ( ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt96=3;
            alt96 = dfa96.predict(input);
            switch (alt96) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:19: moleculeamount3
                    {
                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount1524_static.FOLLOW_moleculeamount3_in_moleculeamount1524);
                    moleculeamount3327=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3327.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:36: moleculeamount1
                    {
                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1527_static.FOLLOW_moleculeamount1_in_moleculeamount1527);
                    moleculeamount1328=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1328.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:54: moleculeamount2
                    {
                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1531_static.FOLLOW_moleculeamount2_in_moleculeamount1531);
                    moleculeamount2329=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2329.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:71: ( asAstate )?
            int alt97=2;
            alt97 = dfa97.predict(input);
            switch (alt97) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_moleculeamount1534_static.FOLLOW_asAstate_in_moleculeamount1534);
                    asAstate330=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate330.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, moleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:185:1: moleculeamount3 : ( quantity | mixture ) inof ( dtTHE | dt )? mixtureRatio ( mixture )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);
        int moleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity331 = null;

        ChemicalChunkerParser.mixture_return mixture332 = null;

        ChemicalChunkerParser.inof_return inof333 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE334 = null;

        ChemicalChunkerParser.dt_return dt335 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio336 = null;

        ChemicalChunkerParser.mixture_return mixture337 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound338 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:2: ( ( quantity | mixture ) inof ( dtTHE | dt )? mixtureRatio ( mixture )? oscarCompound )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:3: ( quantity | mixture ) inof ( dtTHE | dt )? mixtureRatio ( mixture )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:3: ( quantity | mixture )
            int alt98=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                int LA98_1 = input.LA(2);

                if ( (synpred287_ChemicalChunker()) ) {
                    alt98=1;
                }
                else if ( (true) ) {
                    alt98=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 1, input);

                    throw nvae;
                }
                }
                break;
            case 146:
                {
                int LA98_2 = input.LA(2);

                if ( (synpred287_ChemicalChunker()) ) {
                    alt98=1;
                }
                else if ( (true) ) {
                    alt98=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 98, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
            case 73:
                {
                alt98=1;
                }
                break;
            case 133:
                {
                alt98=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount31545_static.FOLLOW_quantity_in_moleculeamount31545);
                    quantity331=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity331.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount31547_static.FOLLOW_mixture_in_moleculeamount31547);
                    mixture332=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture332.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inof_in_moleculeamount31550_static.FOLLOW_inof_in_moleculeamount31550);
            inof333=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof333.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:27: ( dtTHE | dt )?
            int alt99=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt99=1;
                    }
                    break;
                case 147:
                    {
                    alt99=2;
                    }
                    break;
            }

            switch (alt99) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:28: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount31553_static.FOLLOW_dtTHE_in_moleculeamount31553);
                    dtTHE334=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE334.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:36: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount31557_static.FOLLOW_dt_in_moleculeamount31557);
                    dt335=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt335.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_mixtureRatio_in_moleculeamount31561_static.FOLLOW_mixtureRatio_in_moleculeamount31561);
            mixtureRatio336=mixtureRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureRatio336.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:54: ( mixture )?
            int alt100=2;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount31563_static.FOLLOW_mixture_in_moleculeamount31563);
                    mixture337=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture337.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount31566_static.FOLLOW_oscarCompound_in_moleculeamount31566);
            oscarCompound338=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound338.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, moleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:188:1: moleculeamount1 : ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);
        int moleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity339 = null;

        ChemicalChunkerParser.mixture_return mixture340 = null;

        ChemicalChunkerParser.inof_return inof341 = null;

        ChemicalChunkerParser.quantity_return quantity342 = null;

        ChemicalChunkerParser.inof_return inof343 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE344 = null;

        ChemicalChunkerParser.dt_return dt345 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound346 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity347 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:2: ( ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:3: ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:3: ( quantity | mixture )+
            int cnt101=0;
            loop101:
            do {
                int alt101=3;
                switch ( input.LA(1) ) {
                case 143:
                    {
                    int LA101_2 = input.LA(2);

                    if ( (synpred291_ChemicalChunker()) ) {
                        alt101=1;
                    }
                    else if ( (synpred292_ChemicalChunker()) ) {
                        alt101=2;
                    }


                    }
                    break;
                case 146:
                    {
                    int LA101_3 = input.LA(2);

                    if ( (synpred291_ChemicalChunker()) ) {
                        alt101=1;
                    }
                    else if ( (synpred292_ChemicalChunker()) ) {
                        alt101=2;
                    }


                    }
                    break;
                case 38:
                case 73:
                    {
                    alt101=1;
                    }
                    break;
                case 133:
                    {
                    alt101=2;
                    }
                    break;

                }

                switch (alt101) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11576_static.FOLLOW_quantity_in_moleculeamount11576);
            	    quantity339=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity339.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount11578_static.FOLLOW_mixture_in_moleculeamount11578);
            	    mixture340=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture340.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11582_static.FOLLOW_inof_in_moleculeamount11582);
            inof341=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof341.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:28: ( quantity ( inof )? )?
            int alt103=2;
            switch ( input.LA(1) ) {
                case 143:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 38:
                                case 73:
                                case 146:
                                    {
                                    alt103=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
                case 38:
                case 73:
                case 146:
                    {
                    alt103=1;
                    }
                    break;
            }

            switch (alt103) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:29: quantity ( inof )?
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount11585_static.FOLLOW_quantity_in_moleculeamount11585);
                    quantity342=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity342.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:38: ( inof )?
                    int alt102=2;
                    switch ( input.LA(1) ) {
                        case 56:
                            {
                            alt102=1;
                            }
                            break;
                    }

                    switch (alt102) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                            {
                            pushFollow(FOLLOW_inof_in_moleculeamount11587_static.FOLLOW_inof_in_moleculeamount11587);
                            inof343=inof();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof343.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:46: ( dtTHE | dt )?
            int alt104=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt104=1;
                    }
                    break;
                case 147:
                    {
                    alt104=2;
                    }
                    break;
            }

            switch (alt104) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:47: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount11593_static.FOLLOW_dtTHE_in_moleculeamount11593);
                    dtTHE344=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE344.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:55: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount11597_static.FOLLOW_dt_in_moleculeamount11597);
                    dt345=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt345.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:60: ( oscarCompound )+
            int cnt105=0;
            loop105:
            do {
                int alt105=2;
                alt105 = dfa105.predict(input);
                switch (alt105) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount11601_static.FOLLOW_oscarCompound_in_moleculeamount11601);
            	    oscarCompound346=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound346.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt105 >= 1 ) break loop105;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(105, input);
                        throw eee;
                }
                cnt105++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11604_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11604);
            afterCompoundCitationOrQuantity347=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity347.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, moleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);
        int moleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity348 = null;

        ChemicalChunkerParser.mixture_return mixture349 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound350 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity351 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:2: ( ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:3: ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:3: ( quantity | mixture )*
            loop106:
            do {
                int alt106=3;
                alt106 = dfa106.predict(input);
                switch (alt106) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21613_static.FOLLOW_quantity_in_moleculeamount21613);
            	    quantity348=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity348.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21615_static.FOLLOW_mixture_in_moleculeamount21615);
            	    mixture349=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture349.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:23: ( oscarCompound )+
            int cnt107=0;
            loop107:
            do {
                int alt107=2;
                alt107 = dfa107.predict(input);
                switch (alt107) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21619_static.FOLLOW_oscarCompound_in_moleculeamount21619);
            	    oscarCompound350=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound350.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt107 >= 1 ) break loop107;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(107, input);
                        throw eee;
                }
                cnt107++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21622_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21622);
            afterCompoundCitationOrQuantity351=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity351.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, moleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class afterCompoundCitationOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterCompoundCitationOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:1: afterCompoundCitationOrQuantity : ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* ;
    public final ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return retval = new ChemicalChunkerParser.afterCompoundCitationOrQuantity_return();
        retval.start = input.LT(1);
        int afterCompoundCitationOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citation_return citation352 = null;

        ChemicalChunkerParser.quantity_return quantity353 = null;

        ChemicalChunkerParser.comma_return comma354 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node355 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure356 = null;

        ChemicalChunkerParser.mixture_return mixture357 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:32: ( ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            loop109:
            do {
                int alt109=5;
                alt109 = dfa109.predict(input);
                switch (alt109) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:35: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_afterCompoundCitationOrQuantity1630_static.FOLLOW_citation_in_afterCompoundCitationOrQuantity1630);
            	    citation352=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation352.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_afterCompoundCitationOrQuantity1632_static.FOLLOW_quantity_in_afterCompoundCitationOrQuantity1632);
            	    quantity353=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity353.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:53: comma ( quantity1Node | citationStructure )
            	    {
            	    pushFollow(FOLLOW_comma_in_afterCompoundCitationOrQuantity1634_static.FOLLOW_comma_in_afterCompoundCitationOrQuantity1634);
            	    comma354=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma354.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:59: ( quantity1Node | citationStructure )
            	    int alt108=2;
            	    alt108 = dfa108.predict(input);
            	    switch (alt108) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:60: quantity1Node
            	            {
            	            pushFollow(FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1637_static.FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1637);
            	            quantity1Node355=quantity1Node();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node355.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:74: citationStructure
            	            {
            	            pushFollow(FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1639_static.FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1639);
            	            citationStructure356=citationStructure();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure356.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:93: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_afterCompoundCitationOrQuantity1642_static.FOLLOW_mixture_in_afterCompoundCitationOrQuantity1642);
            	    mixture357=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture357.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, afterCompoundCitationOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterCompoundCitationOrQuantity"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:196:1: unnamedmolecule : unnamedmoleculeDescription ( asAstate )? -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ( asAstate )? ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);
        int unnamedmolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription358 = null;

        ChemicalChunkerParser.asAstate_return asAstate359 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeDescription=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeDescription");
        RewriteRuleSubtreeStream stream_asAstate=new RewriteRuleSubtreeStream(adaptor,"rule asAstate");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:2: ( unnamedmoleculeDescription ( asAstate )? -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ( asAstate )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:4: unnamedmoleculeDescription ( asAstate )?
            {
            pushFollow(FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1653_static.FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1653);
            unnamedmoleculeDescription358=unnamedmoleculeDescription();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeDescription.add(unnamedmoleculeDescription358.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:31: ( asAstate )?
            int alt110=2;
            alt110 = dfa110.predict(input);
            switch (alt110) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_unnamedmolecule1655_static.FOLLOW_asAstate_in_unnamedmolecule1655);
                    asAstate359=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_asAstate.add(asAstate359.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: unnamedmoleculeDescription, asAstate
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 197:41: -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ( asAstate )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:44: ^( UNNAMEDMOLECULE unnamedmoleculeDescription ( asAstate )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeDescription.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:89: ( asAstate )?
                if ( stream_asAstate.hasNext() ) {
                    adaptor.addChild(root_1, stream_asAstate.nextTree());

                }
                stream_asAstate.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, unnamedmolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class unnamedmoleculeDescription_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescription"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:199:1: unnamedmoleculeDescription : ( quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | referenceToCompound ) ;
    public final ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescription_return retval = new ChemicalChunkerParser.unnamedmoleculeDescription_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescription_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity360 = null;

        ChemicalChunkerParser.inof_return inof361 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1362 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2363 = null;

        ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return optionalUnnamedMoleculeEnding364 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3365 = null;

        ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4366 = null;

        ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5367 = null;

        ChemicalChunkerParser.unnamedmoleculeamount6_return unnamedmoleculeamount6368 = null;

        ChemicalChunkerParser.referenceToCompound_return referenceToCompound369 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:2: ( ( quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | referenceToCompound ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:3: ( quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | referenceToCompound )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:3: ( quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | referenceToCompound )
            int alt113=6;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:4: quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? )
                    {
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeDescription1676_static.FOLLOW_quantity_in_unnamedmoleculeDescription1676);
                    quantity360=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity360.getTree());
                    pushFollow(FOLLOW_inof_in_unnamedmoleculeDescription1678_static.FOLLOW_inof_in_unnamedmoleculeDescription1678);
                    inof361=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof361.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:18: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? )
                    int alt112=2;
                    switch ( input.LA(1) ) {
                    case 38:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                        {
                        alt112=1;
                        }
                        break;
                    case 41:
                    case 42:
                    case 45:
                    case 46:
                    case 63:
                    case 68:
                    case 71:
                    case 83:
                    case 90:
                    case 142:
                    case 147:
                    case 149:
                    case 151:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                        {
                        alt112=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 112, 0, input);

                        throw nvae;
                    }

                    switch (alt112) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:19: unnamedmoleculeamount1
                            {
                            pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeDescription1681_static.FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeDescription1681);
                            unnamedmoleculeamount1362=unnamedmoleculeamount1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1362.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:42: unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )?
                            {
                            pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeDescription1683_static.FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeDescription1683);
                            unnamedmoleculeamount2363=unnamedmoleculeamount2();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2363.getTree());
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:65: ( optionalUnnamedMoleculeEnding )?
                            int alt111=2;
                            alt111 = dfa111.predict(input);
                            switch (alt111) {
                                case 1 :
                                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: optionalUnnamedMoleculeEnding
                                    {
                                    pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeDescription1685_static.FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeDescription1685);
                                    optionalUnnamedMoleculeEnding364=optionalUnnamedMoleculeEnding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, optionalUnnamedMoleculeEnding364.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:98: unnamedmoleculeamount3
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeDescription1690_static.FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeDescription1690);
                    unnamedmoleculeamount3365=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3365.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:121: unnamedmoleculeamount4
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeDescription1692_static.FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeDescription1692);
                    unnamedmoleculeamount4366=unnamedmoleculeamount4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount4366.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:144: unnamedmoleculeamount5
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeDescription1694_static.FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeDescription1694);
                    unnamedmoleculeamount5367=unnamedmoleculeamount5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount5367.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:167: unnamedmoleculeamount6
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeDescription1696_static.FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeDescription1696);
                    unnamedmoleculeamount6368=unnamedmoleculeamount6();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount6368.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:190: referenceToCompound
                    {
                    pushFollow(FOLLOW_referenceToCompound_in_unnamedmoleculeDescription1698_static.FOLLOW_referenceToCompound_in_unnamedmoleculeDescription1698);
                    referenceToCompound369=referenceToCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referenceToCompound369.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, unnamedmoleculeDescription_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescription"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:1: unnamedmoleculeamount1 : numericOrIdentifierCompoundReference ( quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference370 = null;

        ChemicalChunkerParser.quantity_return quantity371 = null;

        ChemicalChunkerParser.mixture_return mixture372 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:2: ( numericOrIdentifierCompoundReference ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:5: numericOrIdentifierCompoundReference ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount11710_static.FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount11710);
            numericOrIdentifierCompoundReference370=numericOrIdentifierCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference370.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:42: ( quantity | mixture )*
            loop114:
            do {
                int alt114=3;
                alt114 = dfa114.predict(input);
                switch (alt114) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:43: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount11713_static.FOLLOW_quantity_in_unnamedmoleculeamount11713);
            	    quantity371=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity371.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:52: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount11715_static.FOLLOW_mixture_in_unnamedmoleculeamount11715);
            	    mixture372=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture372.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, unnamedmoleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:1: unnamedmoleculeamount2 : ( dtTHE | dt )? ( jj | jjchem | jjcomp )* ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE373 = null;

        ChemicalChunkerParser.dt_return dt374 = null;

        ChemicalChunkerParser.jj_return jj375 = null;

        ChemicalChunkerParser.jjchem_return jjchem376 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp377 = null;

        ChemicalChunkerParser.nnstate_return nnstate378 = null;

        ChemicalChunkerParser.nn_return nn379 = null;

        ChemicalChunkerParser.nns_return nns380 = null;

        ChemicalChunkerParser.nnp_return nnp381 = null;

        ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound382 = null;

        ChemicalChunkerParser.nnexample_return nnexample383 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts384 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere385 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity386 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture387 = null;

        ChemicalChunkerParser.fw_return fw388 = null;

        ChemicalChunkerParser.nnps_return nnps389 = null;

        ChemicalChunkerParser.oscarase_return oscarase390 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:2: ( ( dtTHE | dt )? ( jj | jjchem | jjcomp )* ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:4: ( dtTHE | dt )? ( jj | jjchem | jjcomp )* ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:4: ( dtTHE | dt )?
            int alt115=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt115=1;
                    }
                    break;
                case 147:
                    {
                    alt115=2;
                    }
                    break;
            }

            switch (alt115) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:5: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unnamedmoleculeamount21727_static.FOLLOW_dtTHE_in_unnamedmoleculeamount21727);
                    dtTHE373=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE373.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:13: dt
                    {
                    pushFollow(FOLLOW_dt_in_unnamedmoleculeamount21731_static.FOLLOW_dt_in_unnamedmoleculeamount21731);
                    dt374=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt374.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:18: ( jj | jjchem | jjcomp )*
            loop116:
            do {
                int alt116=4;
                switch ( input.LA(1) ) {
                case 151:
                    {
                    alt116=1;
                    }
                    break;
                case 45:
                    {
                    alt116=2;
                    }
                    break;
                case 46:
                    {
                    alt116=3;
                    }
                    break;

                }

                switch (alt116) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:19: jj
            	    {
            	    pushFollow(FOLLOW_jj_in_unnamedmoleculeamount21736_static.FOLLOW_jj_in_unnamedmoleculeamount21736);
            	    jj375=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj375.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:22: jjchem
            	    {
            	    pushFollow(FOLLOW_jjchem_in_unnamedmoleculeamount21738_static.FOLLOW_jjchem_in_unnamedmoleculeamount21738);
            	    jjchem376=jjchem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem376.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:29: jjcomp
            	    {
            	    pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount21740_static.FOLLOW_jjcomp_in_unnamedmoleculeamount21740);
            	    jjcomp377=jjcomp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp377.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:38: ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase )
            int alt117=13;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:39: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unnamedmoleculeamount21745_static.FOLLOW_nnstate_in_unnamedmoleculeamount21745);
                    nnstate378=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate378.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:47: nn
                    {
                    pushFollow(FOLLOW_nn_in_unnamedmoleculeamount21747_static.FOLLOW_nn_in_unnamedmoleculeamount21747);
                    nn379=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn379.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:50: nns
                    {
                    pushFollow(FOLLOW_nns_in_unnamedmoleculeamount21749_static.FOLLOW_nns_in_unnamedmoleculeamount21749);
                    nns380=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns380.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:54: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unnamedmoleculeamount21751_static.FOLLOW_nnp_in_unnamedmoleculeamount21751);
                    nnp381=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp381.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:58: referenceToExampleCompound
                    {
                    pushFollow(FOLLOW_referenceToExampleCompound_in_unnamedmoleculeamount21753_static.FOLLOW_referenceToExampleCompound_in_unnamedmoleculeamount21753);
                    referenceToExampleCompound382=referenceToExampleCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referenceToExampleCompound382.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:85: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unnamedmoleculeamount21755_static.FOLLOW_nnexample_in_unnamedmoleculeamount21755);
                    nnexample383=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample383.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:95: oscaronts
                    {
                    pushFollow(FOLLOW_oscaronts_in_unnamedmoleculeamount21757_static.FOLLOW_oscaronts_in_unnamedmoleculeamount21757);
                    oscaronts384=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts384.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:105: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unnamedmoleculeamount21759_static.FOLLOW_nnatmosphere_in_unnamedmoleculeamount21759);
                    nnatmosphere385=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere385.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:118: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount21761_static.FOLLOW_nnchementity_in_unnamedmoleculeamount21761);
                    nnchementity386=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity386.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:131: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unnamedmoleculeamount21763_static.FOLLOW_nnmixture_in_unnamedmoleculeamount21763);
                    nnmixture387=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture387.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:141: fw
                    {
                    pushFollow(FOLLOW_fw_in_unnamedmoleculeamount21765_static.FOLLOW_fw_in_unnamedmoleculeamount21765);
                    fw388=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw388.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:144: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unnamedmoleculeamount21767_static.FOLLOW_nnps_in_unnamedmoleculeamount21767);
                    nnps389=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps389.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:149: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unnamedmoleculeamount21769_static.FOLLOW_oscarase_in_unnamedmoleculeamount21769);
                    oscarase390=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase390.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, unnamedmoleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:1: unnamedmoleculeamount3 : jjcomp nnchementity ( optionalUnnamedMoleculeEnding )? ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp391 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity392 = null;

        ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return optionalUnnamedMoleculeEnding393 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:2: ( jjcomp nnchementity ( optionalUnnamedMoleculeEnding )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:4: jjcomp nnchementity ( optionalUnnamedMoleculeEnding )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount31779_static.FOLLOW_jjcomp_in_unnamedmoleculeamount31779);
            jjcomp391=jjcomp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp391.getTree());
            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount31781_static.FOLLOW_nnchementity_in_unnamedmoleculeamount31781);
            nnchementity392=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity392.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:24: ( optionalUnnamedMoleculeEnding )?
            int alt118=2;
            alt118 = dfa118.predict(input);
            switch (alt118) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: optionalUnnamedMoleculeEnding
                    {
                    pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeamount31783_static.FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeamount31783);
                    optionalUnnamedMoleculeEnding393=optionalUnnamedMoleculeEnding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, optionalUnnamedMoleculeEnding393.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, unnamedmoleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class optionalUnnamedMoleculeEnding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "optionalUnnamedMoleculeEnding"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:1: optionalUnnamedMoleculeEnding : ( numericOrIdentifierCompoundReference )? ( quantity | mixture )* ;
    public final ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return optionalUnnamedMoleculeEnding() throws RecognitionException {
        ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return retval = new ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return();
        retval.start = input.LT(1);
        int optionalUnnamedMoleculeEnding_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference394 = null;

        ChemicalChunkerParser.quantity_return quantity395 = null;

        ChemicalChunkerParser.mixture_return mixture396 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:2: ( ( numericOrIdentifierCompoundReference )? ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:5: ( numericOrIdentifierCompoundReference )? ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:5: ( numericOrIdentifierCompoundReference )?
            int alt119=2;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericOrIdentifierCompoundReference
                    {
                    pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_optionalUnnamedMoleculeEnding1795_static.FOLLOW_numericOrIdentifierCompoundReference_in_optionalUnnamedMoleculeEnding1795);
                    numericOrIdentifierCompoundReference394=numericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference394.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:43: ( quantity | mixture )*
            loop120:
            do {
                int alt120=3;
                alt120 = dfa120.predict(input);
                switch (alt120) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1799_static.FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1799);
            	    quantity395=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity395.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:53: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_optionalUnnamedMoleculeEnding1801_static.FOLLOW_mixture_in_optionalUnnamedMoleculeEnding1801);
            	    mixture396=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture396.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, optionalUnnamedMoleculeEnding_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "optionalUnnamedMoleculeEnding"

    public static class unnamedmoleculeamount4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount4"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:1: unnamedmoleculeamount4 : alphanumericOrIdentifierCompoundReference ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount4_return retval = new ChemicalChunkerParser.unnamedmoleculeamount4_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount4_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference397 = null;

        ChemicalChunkerParser.citation_return citation398 = null;

        ChemicalChunkerParser.quantity_return quantity399 = null;

        ChemicalChunkerParser.mixture_return mixture400 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:2: ( alphanumericOrIdentifierCompoundReference ( citation | quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:4: alphanumericOrIdentifierCompoundReference ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_unnamedmoleculeamount41812_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_unnamedmoleculeamount41812);
            alphanumericOrIdentifierCompoundReference397=alphanumericOrIdentifierCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference397.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:46: ( citation | quantity | mixture )*
            loop121:
            do {
                int alt121=4;
                alt121 = dfa121.predict(input);
                switch (alt121) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:47: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount41815_static.FOLLOW_citation_in_unnamedmoleculeamount41815);
            	    citation398=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation398.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:56: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount41817_static.FOLLOW_quantity_in_unnamedmoleculeamount41817);
            	    quantity399=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity399.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:65: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount41819_static.FOLLOW_mixture_in_unnamedmoleculeamount41819);
            	    mixture400=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture400.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, unnamedmoleculeamount4_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount4"

    public static class alphanumericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alphanumericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:1: alphanumericOrIdentifierCompoundReference : ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? ) ;
    public final ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int alphanumericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference401 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier402 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum403 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric404 = null;


        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_cdAlphanum=new RewriteRuleSubtreeStream(adaptor,"rule cdAlphanum");
        RewriteRuleSubtreeStream stream_bracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule bracketedNumeric");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:3: ( ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:5: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:5: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric )
            int alt122=4;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt122=1;
                }
                break;
            case 141:
            case 146:
                {
                alt122=2;
                }
                break;
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 146:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 141:
                                {
                                alt122=2;
                                }
                                break;
                            case 144:
                                {
                                alt122=4;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 122, 8, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 122, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 38:
                        {
                        alt122=4;
                        }
                        break;
                    case 141:
                        {
                        alt122=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 122, 5, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 122, 3, input);

                    throw nvae;
                }

                }
                break;
            case 38:
                {
                alt122=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }

            switch (alt122) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:6: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference1832_static.FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference1832);
                    squareBracketedReference401=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference401.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:31: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference1834_static.FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference1834);
                    identifierOrBracketedIdentifier402=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier402.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:63: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference1836_static.FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference1836);
                    cdAlphanum403=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cdAlphanum.add(cdAlphanum403.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:74: bracketedNumeric
                    {
                    pushFollow(FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference1838_static.FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference1838);
                    bracketedNumeric404=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedNumeric.add(bracketedNumeric404.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: squareBracketedReference, cdAlphanum, identifierOrBracketedIdentifier, bracketedNumeric
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 218:92: -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:95: ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:117: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:143: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:176: ( cdAlphanum )?
                if ( stream_cdAlphanum.hasNext() ) {
                    adaptor.addChild(root_1, stream_cdAlphanum.nextTree());

                }
                stream_cdAlphanum.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:188: ( bracketedNumeric )?
                if ( stream_bracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedNumeric.nextTree());

                }
                stream_bracketedNumeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, alphanumericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alphanumericOrIdentifierCompoundReference"

    public static class unnamedmoleculeamount5_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount5"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:1: unnamedmoleculeamount5 : numberCompoundReference ( citation )? quantity ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount5_return retval = new ChemicalChunkerParser.unnamedmoleculeamount5_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount5_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference405 = null;

        ChemicalChunkerParser.citation_return citation406 = null;

        ChemicalChunkerParser.quantity_return quantity407 = null;

        ChemicalChunkerParser.citation_return citation408 = null;

        ChemicalChunkerParser.quantity_return quantity409 = null;

        ChemicalChunkerParser.mixture_return mixture410 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:2: ( numberCompoundReference ( citation )? quantity ( citation | quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:4: numberCompoundReference ( citation )? quantity ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numberCompoundReference_in_unnamedmoleculeamount51866_static.FOLLOW_numberCompoundReference_in_unnamedmoleculeamount51866);
            numberCompoundReference405=numberCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference405.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:28: ( citation )?
            int alt123=2;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: citation
                    {
                    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount51868_static.FOLLOW_citation_in_unnamedmoleculeamount51868);
                    citation406=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation406.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount51871_static.FOLLOW_quantity_in_unnamedmoleculeamount51871);
            quantity407=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity407.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:47: ( citation | quantity | mixture )*
            loop124:
            do {
                int alt124=4;
                alt124 = dfa124.predict(input);
                switch (alt124) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:48: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount51874_static.FOLLOW_citation_in_unnamedmoleculeamount51874);
            	    citation408=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation408.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:57: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount51876_static.FOLLOW_quantity_in_unnamedmoleculeamount51876);
            	    quantity409=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity409.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:66: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount51878_static.FOLLOW_mixture_in_unnamedmoleculeamount51878);
            	    mixture410=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture410.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, unnamedmoleculeamount5_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount5"

    public static class numberCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:1: numberCompoundReference : cd -> ^( REFERENCETOCOMPOUND cd ) ;
    public final ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numberCompoundReference_return retval = new ChemicalChunkerParser.numberCompoundReference_return();
        retval.start = input.LT(1);
        int numberCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd411 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:3: ( cd -> ^( REFERENCETOCOMPOUND cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:5: cd
            {
            pushFollow(FOLLOW_cd_in_numberCompoundReference1890_static.FOLLOW_cd_in_numberCompoundReference1890);
            cd411=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd411.getTree());


            // AST REWRITE
            // elements: cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 224:8: -> ^( REFERENCETOCOMPOUND cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:11: ^( REFERENCETOCOMPOUND cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, numberCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numberCompoundReference"

    public static class unnamedmoleculeamount6_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount6"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:1: unnamedmoleculeamount6 : ( quantity | mixture ) ( jjcomp )? nnchementity ( quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount6_return unnamedmoleculeamount6() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount6_return retval = new ChemicalChunkerParser.unnamedmoleculeamount6_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount6_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity412 = null;

        ChemicalChunkerParser.mixture_return mixture413 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp414 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity415 = null;

        ChemicalChunkerParser.quantity_return quantity416 = null;

        ChemicalChunkerParser.mixture_return mixture417 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:2: ( ( quantity | mixture ) ( jjcomp )? nnchementity ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:3: ( quantity | mixture ) ( jjcomp )? nnchementity ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:3: ( quantity | mixture )
            int alt125=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                int LA125_1 = input.LA(2);

                if ( (synpred347_ChemicalChunker()) ) {
                    alt125=1;
                }
                else if ( (true) ) {
                    alt125=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 125, 1, input);

                    throw nvae;
                }
                }
                break;
            case 146:
                {
                int LA125_2 = input.LA(2);

                if ( (synpred347_ChemicalChunker()) ) {
                    alt125=1;
                }
                else if ( (true) ) {
                    alt125=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 125, 2, input);

                    throw nvae;
                }
                }
                break;
            case 38:
            case 73:
                {
                alt125=1;
                }
                break;
            case 133:
                {
                alt125=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }

            switch (alt125) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount61907_static.FOLLOW_quantity_in_unnamedmoleculeamount61907);
                    quantity412=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity412.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount61909_static.FOLLOW_mixture_in_unnamedmoleculeamount61909);
                    mixture413=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture413.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:22: ( jjcomp )?
            int alt126=2;
            switch ( input.LA(1) ) {
                case 46:
                    {
                    alt126=1;
                    }
                    break;
            }

            switch (alt126) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount61912_static.FOLLOW_jjcomp_in_unnamedmoleculeamount61912);
                    jjcomp414=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp414.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount61915_static.FOLLOW_nnchementity_in_unnamedmoleculeamount61915);
            nnchementity415=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity415.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:43: ( quantity | mixture )*
            loop127:
            do {
                int alt127=3;
                alt127 = dfa127.predict(input);
                switch (alt127) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount61918_static.FOLLOW_quantity_in_unnamedmoleculeamount61918);
            	    quantity416=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity416.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:53: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount61920_static.FOLLOW_mixture_in_unnamedmoleculeamount61920);
            	    mixture417=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture417.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, unnamedmoleculeamount6_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount6"

    public static class asAstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asAstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:1: asAstate : inas ( dt )? ( jj | jjchem )* nnstate ( quantity )* ;
    public final ChemicalChunkerParser.asAstate_return asAstate() throws RecognitionException {
        ChemicalChunkerParser.asAstate_return retval = new ChemicalChunkerParser.asAstate_return();
        retval.start = input.LT(1);
        int asAstate_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas418 = null;

        ChemicalChunkerParser.dt_return dt419 = null;

        ChemicalChunkerParser.jj_return jj420 = null;

        ChemicalChunkerParser.jjchem_return jjchem421 = null;

        ChemicalChunkerParser.nnstate_return nnstate422 = null;

        ChemicalChunkerParser.quantity_return quantity423 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:2: ( inas ( dt )? ( jj | jjchem )* nnstate ( quantity )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:4: inas ( dt )? ( jj | jjchem )* nnstate ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inas_in_asAstate1931_static.FOLLOW_inas_in_asAstate1931);
            inas418=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas418.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:9: ( dt )?
            int alt128=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt128=1;
                    }
                    break;
            }

            switch (alt128) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_asAstate1933_static.FOLLOW_dt_in_asAstate1933);
                    dt419=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt419.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:13: ( jj | jjchem )*
            loop129:
            do {
                int alt129=3;
                switch ( input.LA(1) ) {
                case 151:
                    {
                    alt129=1;
                    }
                    break;
                case 45:
                    {
                    alt129=2;
                    }
                    break;

                }

                switch (alt129) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:14: jj
            	    {
            	    pushFollow(FOLLOW_jj_in_asAstate1937_static.FOLLOW_jj_in_asAstate1937);
            	    jj420=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj420.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:17: jjchem
            	    {
            	    pushFollow(FOLLOW_jjchem_in_asAstate1939_static.FOLLOW_jjchem_in_asAstate1939);
            	    jjchem421=jjchem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem421.getTree());

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);

            pushFollow(FOLLOW_nnstate_in_asAstate1943_static.FOLLOW_nnstate_in_asAstate1943);
            nnstate422=nnstate();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate422.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:34: ( quantity )*
            loop130:
            do {
                int alt130=2;
                alt130 = dfa130.predict(input);
                switch (alt130) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_asAstate1945_static.FOLLOW_quantity_in_asAstate1945);
            	    quantity423=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity423.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, asAstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asAstate"

    public static class referenceToCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referenceToCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:1: referenceToCompound : ( nnchementity | {...}?) numericOrIdentifierCompoundReference ;
    public final ChemicalChunkerParser.referenceToCompound_return referenceToCompound() throws RecognitionException {
        ChemicalChunkerParser.referenceToCompound_return retval = new ChemicalChunkerParser.referenceToCompound_return();
        retval.start = input.LT(1);
        int referenceToCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity424 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference425 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:2: ( ( nnchementity | {...}?) numericOrIdentifierCompoundReference )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:4: ( nnchementity | {...}?) numericOrIdentifierCompoundReference
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:4: ( nnchementity | {...}?)
            int alt131=2;
            switch ( input.LA(1) ) {
            case 71:
                {
                alt131=1;
                }
                break;
            case 38:
            case 139:
            case 141:
            case 143:
            case 146:
                {
                alt131=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;
            }

            switch (alt131) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:5: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_referenceToCompound1956_static.FOLLOW_nnchementity_in_referenceToCompound1956);
                    nnchementity424=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity424.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:20: {...}?
                    {
                    if ( !((numberLooksLikeAReferenceToACompound(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "referenceToCompound", "numberLooksLikeAReferenceToACompound(input)");
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_referenceToCompound1963_static.FOLLOW_numericOrIdentifierCompoundReference_in_referenceToCompound1963);
            numericOrIdentifierCompoundReference425=numericOrIdentifierCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference425.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, referenceToCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referenceToCompound"

    public static class numericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:1: numericOrIdentifierCompoundReference : ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? ) ;
    public final ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.numericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int numericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference426 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier427 = null;

        ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric428 = null;


        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_numericOrBracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule numericOrBracketedNumeric");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:3: ( ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )
            int alt132=3;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:6: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference1974_static.FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference1974);
                    squareBracketedReference426=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference426.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:31: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference1976_static.FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference1976);
                    identifierOrBracketedIdentifier427=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier427.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:63: numericOrBracketedNumeric
                    {
                    pushFollow(FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference1978_static.FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference1978);
                    numericOrBracketedNumeric428=numericOrBracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numericOrBracketedNumeric.add(numericOrBracketedNumeric428.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: squareBracketedReference, numericOrBracketedNumeric, identifierOrBracketedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 236:90: -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:93: ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:115: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:141: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:174: ( numericOrBracketedNumeric )?
                if ( stream_numericOrBracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericOrBracketedNumeric.nextTree());

                }
                stream_numericOrBracketedNumeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, numericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrIdentifierCompoundReference"

    public static class squareBracketedReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "squareBracketedReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:1: squareBracketedReference : lsqb numeric rsqb ;
    public final ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference() throws RecognitionException {
        ChemicalChunkerParser.squareBracketedReference_return retval = new ChemicalChunkerParser.squareBracketedReference_return();
        retval.start = input.LT(1);
        int squareBracketedReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb429 = null;

        ChemicalChunkerParser.numeric_return numeric430 = null;

        ChemicalChunkerParser.rsqb_return rsqb431 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:2: ( lsqb numeric rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:4: lsqb numeric rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_squareBracketedReference2004_static.FOLLOW_lsqb_in_squareBracketedReference2004);
            lsqb429=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb429.getTree());
            pushFollow(FOLLOW_numeric_in_squareBracketedReference2006_static.FOLLOW_numeric_in_squareBracketedReference2006);
            numeric430=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric430.getTree());
            pushFollow(FOLLOW_rsqb_in_squareBracketedReference2008_static.FOLLOW_rsqb_in_squareBracketedReference2008);
            rsqb431=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb431.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, squareBracketedReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "squareBracketedReference"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:1: quantity : ( quantity1Node | quantity2Node ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);
        int quantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node432 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node433 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:11: ( ( quantity1Node | quantity2Node ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:14: ( quantity1Node | quantity2Node )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:14: ( quantity1Node | quantity2Node )
            int alt133=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt133=1;
                }
                break;
            case 38:
            case 73:
            case 146:
                {
                alt133=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;
            }

            switch (alt133) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:15: quantity1Node
                    {
                    pushFollow(FOLLOW_quantity1Node_in_quantity2019_static.FOLLOW_quantity1Node_in_quantity2019);
                    quantity1Node432=quantity1Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node432.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:29: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_quantity2021_static.FOLLOW_quantity2Node_in_quantity2021);
                    quantity2Node433=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node433.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, quantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:1: quantity1Node : quantity1 -> ^( QUANTITY quantity1 ) ;
    public final ChemicalChunkerParser.quantity1Node_return quantity1Node() throws RecognitionException {
        ChemicalChunkerParser.quantity1Node_return retval = new ChemicalChunkerParser.quantity1Node_return();
        retval.start = input.LT(1);
        int quantity1Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1434 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:15: ( quantity1 -> ^( QUANTITY quantity1 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:17: quantity1
            {
            pushFollow(FOLLOW_quantity1_in_quantity1Node2030_static.FOLLOW_quantity1_in_quantity1Node2030);
            quantity1434=quantity1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity1.add(quantity1434.getTree());


            // AST REWRITE
            // elements: quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 243:27: -> ^( QUANTITY quantity1 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:243:32: ^( QUANTITY quantity1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, quantity1Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1Node"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);
        int quantity1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb435 = null;

        ChemicalChunkerParser.measurements_return measurements436 = null;

        ChemicalChunkerParser.comma_return comma437 = null;

        ChemicalChunkerParser.measurements_return measurements438 = null;

        ChemicalChunkerParser.comma_return comma439 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase440 = null;

        ChemicalChunkerParser.stop_return stop441 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase442 = null;

        ChemicalChunkerParser.rrb_return rrb443 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12050_static.FOLLOW_lrb_in_quantity12050);
            lrb435=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb435.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12052_static.FOLLOW_measurements_in_quantity12052);
            measurements436=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements436.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:21: ( comma measurements )*
            loop134:
            do {
                int alt134=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 38:
                        case 73:
                        case 146:
                            {
                            alt134=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt134) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12055_static.FOLLOW_comma_in_quantity12055);
            	    comma437=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma437.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12058_static.FOLLOW_measurements_in_quantity12058);
            	    measurements438=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements438.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:44: ( comma preparationphrase )*
            loop135:
            do {
                int alt135=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    alt135=1;
                    }
                    break;

                }

                switch (alt135) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12063_static.FOLLOW_comma_in_quantity12063);
            	    comma439=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma439.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12065_static.FOLLOW_preparationphrase_in_quantity12065);
            	    preparationphrase440=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase440.getTree());

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:71: ( stop preparationphrase )*
            loop136:
            do {
                int alt136=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt136=1;
                    }
                    break;

                }

                switch (alt136) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:246:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12070_static.FOLLOW_stop_in_quantity12070);
            	    stop441=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop441.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12072_static.FOLLOW_preparationphrase_in_quantity12072);
            	    preparationphrase442=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase442.getTree());

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12077_static.FOLLOW_rrb_in_quantity12077);
            rrb443=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb443.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, quantity1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:1: quantity2Node : quantity2 -> ^( QUANTITY quantity2 ) ;
    public final ChemicalChunkerParser.quantity2Node_return quantity2Node() throws RecognitionException {
        ChemicalChunkerParser.quantity2Node_return retval = new ChemicalChunkerParser.quantity2Node_return();
        retval.start = input.LT(1);
        int quantity2Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity2_return quantity2444 = null;


        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:15: ( quantity2 -> ^( QUANTITY quantity2 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:17: quantity2
            {
            pushFollow(FOLLOW_quantity2_in_quantity2Node2085_static.FOLLOW_quantity2_in_quantity2Node2085);
            quantity2444=quantity2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity2.add(quantity2444.getTree());


            // AST REWRITE
            // elements: quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 248:27: -> ^( QUANTITY quantity2 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:32: ^( QUANTITY quantity2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, quantity2Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2Node"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);
        int quantity2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements445 = null;

        ChemicalChunkerParser.comma_return comma446 = null;

        ChemicalChunkerParser.measurements_return measurements447 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:2: ( measurements ( comma measurements )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22106_static.FOLLOW_measurements_in_quantity22106);
            measurements445=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements445.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:18: ( comma measurements )*
            loop137:
            do {
                int alt137=2;
                alt137 = dfa137.predict(input);
                switch (alt137) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22109_static.FOLLOW_comma_in_quantity22109);
            	    comma446=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma446.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22112_static.FOLLOW_measurements_in_quantity22112);
            	    measurements447=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements447.getTree());

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, quantity2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:253:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);
        int measurements_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd448 = null;

        ChemicalChunkerParser.nn_return nn449 = null;

        ChemicalChunkerParser.multiple_return multiple450 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes451 = null;

        ChemicalChunkerParser.dt_return dt452 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:3: ( cd nn )?
            int alt138=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 156:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 38:
                                                case 73:
                                                case 146:
                                                    {
                                                    alt138=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt138) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2125_static.FOLLOW_cd_in_measurements2125);
                    cd448=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd448.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2127_static.FOLLOW_nn_in_measurements2127);
                    nn449=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn449.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:12: ( multiple | measurementtypes )
            int alt139=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 65:
                    case 66:
                    case 67:
                    case 69:
                    case 70:
                    case 138:
                    case 146:
                    case 156:
                        {
                        alt139=2;
                        }
                        break;
                    case 44:
                        {
                        alt139=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 139, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 139, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
            case 73:
                {
                alt139=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }

            switch (alt139) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2132_static.FOLLOW_multiple_in_measurements2132);
                    multiple450=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple450.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2134_static.FOLLOW_measurementtypes_in_measurements2134);
                    measurementtypes451=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes451.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:40: ( dt )?
            int alt140=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA140_3 = input.LA(3);

                            if ( (synpred365_ChemicalChunker()) ) {
                                alt140=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt140) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2137_static.FOLLOW_dt_in_measurements2137);
                    dt452=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt452.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, measurements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);
        int multiple_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd453 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode454 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes455 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2145_static.FOLLOW_cd_in_multiple2145);
            cd453=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd453.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2147_static.FOLLOW_cdunicode_in_multiple2147);
            cdunicode454=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode454.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:25: ( measurementtypes )?
            int alt141=2;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2149_static.FOLLOW_measurementtypes_in_multiple2149);
                    measurementtypes455=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes455.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: cd, measurementtypes, cdunicode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 255:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, multiple_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:256:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);
        int measurementtypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar456 = null;

        ChemicalChunkerParser.amount_return amount457 = null;

        ChemicalChunkerParser.mass_return mass458 = null;

        ChemicalChunkerParser.volume_return volume459 = null;

        ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity460 = null;

        ChemicalChunkerParser.equivalent_return equivalent461 = null;

        ChemicalChunkerParser.yield_return yield462 = null;

        ChemicalChunkerParser.percent_return percent463 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:2: ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent )
            int alt142=8;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2174_static.FOLLOW_molar_in_measurementtypes2174);
                    molar456=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar456.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2176_static.FOLLOW_amount_in_measurementtypes2176);
                    amount457=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount457.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2178_static.FOLLOW_mass_in_measurementtypes2178);
                    mass458=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass458.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:22: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2180_static.FOLLOW_volume_in_measurementtypes2180);
                    volume459=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume459.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:29: logHydrogenActivity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_logHydrogenActivity_in_measurementtypes2182_static.FOLLOW_logHydrogenActivity_in_measurementtypes2182);
                    logHydrogenActivity460=logHydrogenActivity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logHydrogenActivity460.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:49: equivalent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_equivalent_in_measurementtypes2184_static.FOLLOW_equivalent_in_measurementtypes2184);
                    equivalent461=equivalent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, equivalent461.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:60: yield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_yield_in_measurementtypes2186_static.FOLLOW_yield_in_measurementtypes2186);
                    yield462=yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield462.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:66: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2188_static.FOLLOW_percent_in_measurementtypes2188);
                    percent463=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent463.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, measurementtypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:1: molar : ( cd )+ nnmolar -> ^( MOLAR ( cd )+ nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);
        int molar_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd464 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar465 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:7: ( ( cd )+ nnmolar -> ^( MOLAR ( cd )+ nnmolar ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:9: ( cd )+ nnmolar
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:9: ( cd )+
            int cnt143=0;
            loop143:
            do {
                int alt143=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt143=1;
                    }
                    break;

                }

                switch (alt143) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_molar2196_static.FOLLOW_cd_in_molar2196);
            	    cd464=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd464.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt143 >= 1 ) break loop143;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(143, input);
                        throw eee;
                }
                cnt143++;
            } while (true);

            pushFollow(FOLLOW_nnmolar_in_molar2199_static.FOLLOW_nnmolar_in_molar2199);
            nnmolar465=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar465.getTree());


            // AST REWRITE
            // elements: nnmolar, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 259:21: -> ^( MOLAR ( cd )+ nnmolar )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:24: ^( MOLAR ( cd )+ nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, molar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:1: amount : ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);
        int amount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd466 = null;

        ChemicalChunkerParser.nnamount_return nnamount467 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:8: ( ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:10: ( cd )+ nnamount
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:10: ( cd )+
            int cnt144=0;
            loop144:
            do {
                int alt144=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt144=1;
                    }
                    break;

                }

                switch (alt144) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_amount2220_static.FOLLOW_cd_in_amount2220);
            	    cd466=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd466.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt144 >= 1 ) break loop144;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(144, input);
                        throw eee;
                }
                cnt144++;
            } while (true);

            pushFollow(FOLLOW_nnamount_in_amount2223_static.FOLLOW_nnamount_in_amount2223);
            nnamount467=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount467.getTree());


            // AST REWRITE
            // elements: nnamount, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 260:23: -> ^( AMOUNT ( cd )+ nnamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:26: ^( AMOUNT ( cd )+ nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, amount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:1: mass : ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);
        int mass_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd468 = null;

        ChemicalChunkerParser.nnmass_return nnmass469 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:6: ( ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:8: ( cd )+ nnmass
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:8: ( cd )+
            int cnt145=0;
            loop145:
            do {
                int alt145=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt145=1;
                    }
                    break;

                }

                switch (alt145) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mass2244_static.FOLLOW_cd_in_mass2244);
            	    cd468=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd468.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt145 >= 1 ) break loop145;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(145, input);
                        throw eee;
                }
                cnt145++;
            } while (true);

            pushFollow(FOLLOW_nnmass_in_mass2247_static.FOLLOW_nnmass_in_mass2247);
            nnmass469=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass469.getTree());


            // AST REWRITE
            // elements: cd, nnmass
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 261:18: -> ^( MASS ( cd )+ nnmass )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:261:21: ^( MASS ( cd )+ nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, mass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:1: volume : ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);
        int volume_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd470 = null;

        ChemicalChunkerParser.nnvol_return nnvol471 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:8: ( ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:10: ( cd )+ nnvol
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:10: ( cd )+
            int cnt146=0;
            loop146:
            do {
                int alt146=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt146=1;
                    }
                    break;

                }

                switch (alt146) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_volume2267_static.FOLLOW_cd_in_volume2267);
            	    cd470=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd470.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt146 >= 1 ) break loop146;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(146, input);
                        throw eee;
                }
                cnt146++;
            } while (true);

            pushFollow(FOLLOW_nnvol_in_volume2270_static.FOLLOW_nnvol_in_volume2270);
            nnvol471=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol471.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 262:20: -> ^( VOLUME ( cd )+ nnvol )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:23: ^( VOLUME ( cd )+ nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, volume_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class logHydrogenActivity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logHydrogenActivity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:1: logHydrogenActivity : nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) ;
    public final ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity() throws RecognitionException {
        ChemicalChunkerParser.logHydrogenActivity_return retval = new ChemicalChunkerParser.logHydrogenActivity_return();
        retval.start = input.LT(1);
        int logHydrogenActivity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnph_return nnph472 = null;

        ChemicalChunkerParser.sym_return sym473 = null;

        ChemicalChunkerParser.cd_return cd474 = null;


        RewriteRuleSubtreeStream stream_nnph=new RewriteRuleSubtreeStream(adaptor,"rule nnph");
        RewriteRuleSubtreeStream stream_sym=new RewriteRuleSubtreeStream(adaptor,"rule sym");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:21: ( nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:23: nnph ( sym )? cd
            {
            pushFollow(FOLLOW_nnph_in_logHydrogenActivity2291_static.FOLLOW_nnph_in_logHydrogenActivity2291);
            nnph472=nnph();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnph.add(nnph472.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:28: ( sym )?
            int alt147=2;
            switch ( input.LA(1) ) {
                case 168:
                    {
                    alt147=1;
                    }
                    break;
            }

            switch (alt147) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sym
                    {
                    pushFollow(FOLLOW_sym_in_logHydrogenActivity2293_static.FOLLOW_sym_in_logHydrogenActivity2293);
                    sym473=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sym.add(sym473.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_cd_in_logHydrogenActivity2296_static.FOLLOW_cd_in_logHydrogenActivity2296);
            cd474=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd474.getTree());


            // AST REWRITE
            // elements: sym, cd, nnph
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 263:36: -> ^( PH nnph ( sym )? cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:39: ^( PH nnph ( sym )? cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PH, "PH"), root_1);

                adaptor.addChild(root_1, stream_nnph.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:49: ( sym )?
                if ( stream_sym.hasNext() ) {
                    adaptor.addChild(root_1, stream_sym.nextTree());

                }
                stream_sym.reset();
                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, logHydrogenActivity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logHydrogenActivity"

    public static class equivalent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equivalent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:1: equivalent : ( cd )+ nneq -> ^( EQUIVALENT ( cd )+ nneq ) ;
    public final ChemicalChunkerParser.equivalent_return equivalent() throws RecognitionException {
        ChemicalChunkerParser.equivalent_return retval = new ChemicalChunkerParser.equivalent_return();
        retval.start = input.LT(1);
        int equivalent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd475 = null;

        ChemicalChunkerParser.nneq_return nneq476 = null;


        RewriteRuleSubtreeStream stream_nneq=new RewriteRuleSubtreeStream(adaptor,"rule nneq");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:11: ( ( cd )+ nneq -> ^( EQUIVALENT ( cd )+ nneq ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:13: ( cd )+ nneq
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:13: ( cd )+
            int cnt148=0;
            loop148:
            do {
                int alt148=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt148=1;
                    }
                    break;

                }

                switch (alt148) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_equivalent2316_static.FOLLOW_cd_in_equivalent2316);
            	    cd475=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd475.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt148 >= 1 ) break loop148;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(148, input);
                        throw eee;
                }
                cnt148++;
            } while (true);

            pushFollow(FOLLOW_nneq_in_equivalent2319_static.FOLLOW_nneq_in_equivalent2319);
            nneq476=nneq();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nneq.add(nneq476.getTree());


            // AST REWRITE
            // elements: cd, nneq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 264:22: -> ^( EQUIVALENT ( cd )+ nneq )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:25: ^( EQUIVALENT ( cd )+ nneq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQUIVALENT, "EQUIVALENT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nneq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, equivalent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equivalent"

    public static class yield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:1: yield : percent nnyield -> ^( YIELD percent nnyield ) ;
    public final ChemicalChunkerParser.yield_return yield() throws RecognitionException {
        ChemicalChunkerParser.yield_return retval = new ChemicalChunkerParser.yield_return();
        retval.start = input.LT(1);
        int yield_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.percent_return percent477 = null;

        ChemicalChunkerParser.nnyield_return nnyield478 = null;


        RewriteRuleSubtreeStream stream_percent=new RewriteRuleSubtreeStream(adaptor,"rule percent");
        RewriteRuleSubtreeStream stream_nnyield=new RewriteRuleSubtreeStream(adaptor,"rule nnyield");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:6: ( percent nnyield -> ^( YIELD percent nnyield ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:8: percent nnyield
            {
            pushFollow(FOLLOW_percent_in_yield2337_static.FOLLOW_percent_in_yield2337);
            percent477=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_percent.add(percent477.getTree());
            pushFollow(FOLLOW_nnyield_in_yield2339_static.FOLLOW_nnyield_in_yield2339);
            nnyield478=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnyield.add(nnyield478.getTree());


            // AST REWRITE
            // elements: nnyield, percent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 265:24: -> ^( YIELD percent nnyield )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:27: ^( YIELD percent nnyield )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                adaptor.addChild(root_1, stream_percent.nextTree());
                adaptor.addChild(root_1, stream_nnyield.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, yield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:1: percent : numeric ( nn )? nnpercent -> ^( PERCENT numeric ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);
        int percent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric479 = null;

        ChemicalChunkerParser.nn_return nn480 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent481 = null;


        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:9: ( numeric ( nn )? nnpercent -> ^( PERCENT numeric ( nn )? nnpercent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:11: numeric ( nn )? nnpercent
            {
            pushFollow(FOLLOW_numeric_in_percent2357_static.FOLLOW_numeric_in_percent2357);
            numeric479=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numeric.add(numeric479.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:19: ( nn )?
            int alt149=2;
            switch ( input.LA(1) ) {
                case 156:
                    {
                    alt149=1;
                    }
                    break;
            }

            switch (alt149) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2359_static.FOLLOW_nn_in_percent2359);
                    nn480=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn480.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent2362_static.FOLLOW_nnpercent_in_percent2362);
            nnpercent481=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent481.getTree());


            // AST REWRITE
            // elements: nnpercent, numeric, nn
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 266:33: -> ^( PERCENT numeric ( nn )? nnpercent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:36: ^( PERCENT numeric ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_numeric.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:56: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, percent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:1: mixture : ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);
        int mixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio482 = null;

        ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3483 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2484 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1485 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        RewriteRuleSubtreeStream stream_mixtureRatio=new RewriteRuleSubtreeStream(adaptor,"rule mixtureRatio");
        RewriteRuleSubtreeStream stream_mixtureStructure3=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:8: ( ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:10: ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:10: ( mixtureRatio )?
            int alt150=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt150=1;
                    }
                    break;
            }

            switch (alt150) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixtureRatio
                    {
                    pushFollow(FOLLOW_mixtureRatio_in_mixture2385_static.FOLLOW_mixtureRatio_in_mixture2385);
                    mixtureRatio482=mixtureRatio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureRatio.add(mixtureRatio482.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:25: ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            int alt151=3;
            switch ( input.LA(1) ) {
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 138:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 144:
                                {
                                alt151=1;
                                }
                                break;
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 66:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 116:
                            case 117:
                            case 118:
                            case 119:
                            case 120:
                            case 121:
                            case 122:
                            case 123:
                            case 124:
                            case 125:
                            case 126:
                            case 127:
                            case 128:
                            case 129:
                            case 130:
                            case 132:
                            case 133:
                            case 136:
                            case 137:
                            case 138:
                            case 139:
                            case 141:
                            case 143:
                            case 146:
                            case 147:
                            case 148:
                            case 149:
                            case 150:
                            case 151:
                            case 152:
                            case 153:
                            case 154:
                            case 155:
                            case 156:
                            case 157:
                            case 158:
                            case 159:
                            case 160:
                            case 161:
                            case 162:
                            case 163:
                            case 168:
                            case 169:
                            case 171:
                            case 172:
                            case 173:
                            case 174:
                            case 175:
                            case 176:
                            case 177:
                            case 178:
                            case 179:
                            case 180:
                                {
                                alt151=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 151, 6, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 151, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 66:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 132:
                    case 133:
                    case 136:
                    case 137:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 168:
                    case 169:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt151=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 151, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 151, 1, input);

                    throw nvae;
                }

                }
                break;
            case 133:
                {
                alt151=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }

            switch (alt151) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:26: mixtureStructure3
                    {
                    pushFollow(FOLLOW_mixtureStructure3_in_mixture2390_static.FOLLOW_mixtureStructure3_in_mixture2390);
                    mixtureStructure3483=mixtureStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure3.add(mixtureStructure3483.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:44: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture2392_static.FOLLOW_mixtureStructure2_in_mixture2392);
                    mixtureStructure2484=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2484.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:62: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture2394_static.FOLLOW_mixtureStructure1_in_mixture2394);
                    mixtureStructure1485=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1485.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure3, mixtureRatio, mixtureStructure1, mixtureStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 268:81: -> ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:84: ^( MIXTURE ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:96: ( mixtureRatio )?
                if ( stream_mixtureRatio.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureRatio.nextTree());

                }
                stream_mixtureRatio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:110: ( mixtureStructure3 )?
                if ( stream_mixtureStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure3.nextTree());

                }
                stream_mixtureStructure3.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:129: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:148: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, mixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);
        int mixtureStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma486 = null;

        ChemicalChunkerParser.lrb_return lrb487 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent488 = null;

        ChemicalChunkerParser.rrb_return rrb489 = null;

        ChemicalChunkerParser.comma_return comma490 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:18: ( comma lrb mixtureContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure22421_static.FOLLOW_comma_in_mixtureStructure22421);
            comma486=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma486.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure22423_static.FOLLOW_lrb_in_mixtureStructure22423);
            lrb487=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb487.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure22425_static.FOLLOW_mixtureContent_in_mixtureStructure22425);
            mixtureContent488=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent488.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure22427_static.FOLLOW_rrb_in_mixtureStructure22427);
            rrb489=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb489.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure22429_static.FOLLOW_comma_in_mixtureStructure22429);
            comma490=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma490.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, mixtureStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);
        int mixtureStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb491 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent492 = null;

        ChemicalChunkerParser.rrb_return rrb493 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:18: ( lrb mixtureContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:20: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure12435_static.FOLLOW_lrb_in_mixtureStructure12435);
            lrb491=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb491.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure12437_static.FOLLOW_mixtureContent_in_mixtureStructure12437);
            mixtureContent492=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent492.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure12439_static.FOLLOW_rrb_in_mixtureStructure12439);
            rrb493=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb493.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, mixtureStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:1: mixtureStructure3 : lrb nnpercent rrb ;
    public final ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure3_return retval = new ChemicalChunkerParser.mixtureStructure3_return();
        retval.start = input.LT(1);
        int mixtureStructure3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb494 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent495 = null;

        ChemicalChunkerParser.rrb_return rrb496 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:2: ( lrb nnpercent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:4: lrb nnpercent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure32447_static.FOLLOW_lrb_in_mixtureStructure32447);
            lrb494=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb494.getTree());
            pushFollow(FOLLOW_nnpercent_in_mixtureStructure32450_static.FOLLOW_nnpercent_in_mixtureStructure32450);
            nnpercent495=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent495.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure32452_static.FOLLOW_rrb_in_mixtureStructure32452);
            rrb496=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb496.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, mixtureStructure3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure3"

    public static class mixtureRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:1: mixtureRatio : cd colon numeric ;
    public final ChemicalChunkerParser.mixtureRatio_return mixtureRatio() throws RecognitionException {
        ChemicalChunkerParser.mixtureRatio_return retval = new ChemicalChunkerParser.mixtureRatio_return();
        retval.start = input.LT(1);
        int mixtureRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd497 = null;

        ChemicalChunkerParser.colon_return colon498 = null;

        ChemicalChunkerParser.numeric_return numeric499 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:2: ( cd colon numeric )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:4: cd colon numeric
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_mixtureRatio2461_static.FOLLOW_cd_in_mixtureRatio2461);
            cd497=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd497.getTree());
            pushFollow(FOLLOW_colon_in_mixtureRatio2463_static.FOLLOW_colon_in_mixtureRatio2463);
            colon498=colon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon498.getTree());
            pushFollow(FOLLOW_numeric_in_mixtureRatio2465_static.FOLLOW_numeric_in_mixtureRatio2465);
            numeric499=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric499.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, mixtureRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureRatio"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:1: mixtureContent : ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);
        int mixtureContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw500 = null;

        ChemicalChunkerParser.verb_return verb501 = null;

        ChemicalChunkerParser.nn_return nn502 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node503 = null;

        ChemicalChunkerParser.md_return md504 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent505 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound506 = null;

        ChemicalChunkerParser.molecule_return molecule507 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule508 = null;

        ChemicalChunkerParser.dash_return dash509 = null;

        ChemicalChunkerParser.sym_return sym510 = null;

        ChemicalChunkerParser.noun_return noun511 = null;

        ChemicalChunkerParser.inAll_return inAll512 = null;

        ChemicalChunkerParser.cd_return cd513 = null;

        ChemicalChunkerParser.comma_return comma514 = null;

        ChemicalChunkerParser.adj_return adj515 = null;

        ChemicalChunkerParser.colon_return colon516 = null;

        ChemicalChunkerParser.stop_return stop517 = null;

        ChemicalChunkerParser.minimixture_return minimixture518 = null;

        ChemicalChunkerParser.fw_return fw519 = null;

        ChemicalChunkerParser.verb_return verb520 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node521 = null;

        ChemicalChunkerParser.nnyield_return nnyield522 = null;

        ChemicalChunkerParser.md_return md523 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent524 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound525 = null;

        ChemicalChunkerParser.molecule_return molecule526 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule527 = null;

        ChemicalChunkerParser.dash_return dash528 = null;

        ChemicalChunkerParser.sym_return sym529 = null;

        ChemicalChunkerParser.noun_return noun530 = null;

        ChemicalChunkerParser.inAll_return inAll531 = null;

        ChemicalChunkerParser.cd_return cd532 = null;

        ChemicalChunkerParser.comma_return comma533 = null;

        ChemicalChunkerParser.adj_return adj534 = null;

        ChemicalChunkerParser.colon_return colon535 = null;

        ChemicalChunkerParser.stop_return stop536 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:15: ( ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:19: ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:19: ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )
            int alt152=18;
            alt152 = dfa152.predict(input);
            switch (alt152) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent2474_static.FOLLOW_fw_in_mixtureContent2474);
                    fw500=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw500.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent2476_static.FOLLOW_verb_in_mixtureContent2476);
                    verb501=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb501.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:28: nn
                    {
                    pushFollow(FOLLOW_nn_in_mixtureContent2478_static.FOLLOW_nn_in_mixtureContent2478);
                    nn502=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn502.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:31: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2480_static.FOLLOW_quantity2Node_in_mixtureContent2480);
                    quantity2Node503=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node503.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:45: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent2482_static.FOLLOW_md_in_mixtureContent2482);
                    md504=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md504.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:48: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_mixtureContent2484_static.FOLLOW_nnpercent_in_mixtureContent2484);
                    nnpercent505=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent505.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:58: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2486_static.FOLLOW_oscarCompound_in_mixtureContent2486);
                    oscarCompound506=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound506.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:72: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent2488_static.FOLLOW_molecule_in_mixtureContent2488);
                    molecule507=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule507.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:81: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent2490_static.FOLLOW_unnamedmolecule_in_mixtureContent2490);
                    unnamedmolecule508=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule508.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:97: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent2492_static.FOLLOW_dash_in_mixtureContent2492);
                    dash509=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash509.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:102: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent2494_static.FOLLOW_sym_in_mixtureContent2494);
                    sym510=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym510.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:106: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent2496_static.FOLLOW_noun_in_mixtureContent2496);
                    noun511=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun511.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:111: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent2498_static.FOLLOW_inAll_in_mixtureContent2498);
                    inAll512=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll512.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:117: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent2500_static.FOLLOW_cd_in_mixtureContent2500);
                    cd513=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd513.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:120: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent2502_static.FOLLOW_comma_in_mixtureContent2502);
                    comma514=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma514.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:126: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent2504_static.FOLLOW_adj_in_mixtureContent2504);
                    adj515=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj515.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:130: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent2506_static.FOLLOW_colon_in_mixtureContent2506);
                    colon516=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon516.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:136: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent2508_static.FOLLOW_stop_in_mixtureContent2508);
                    stop517=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop517.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:142: ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+
            int cnt153=0;
            loop153:
            do {
                int alt153=20;
                alt153 = dfa153.predict(input);
                switch (alt153) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:143: minimixture
            	    {
            	    pushFollow(FOLLOW_minimixture_in_mixtureContent2512_static.FOLLOW_minimixture_in_mixtureContent2512);
            	    minimixture518=minimixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, minimixture518.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:155: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent2514_static.FOLLOW_fw_in_mixtureContent2514);
            	    fw519=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw519.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:158: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent2516_static.FOLLOW_verb_in_mixtureContent2516);
            	    verb520=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb520.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:163: quantity2Node
            	    {
            	    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2518_static.FOLLOW_quantity2Node_in_mixtureContent2518);
            	    quantity2Node521=quantity2Node();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node521.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:177: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_mixtureContent2520_static.FOLLOW_nnyield_in_mixtureContent2520);
            	    nnyield522=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield522.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:185: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent2522_static.FOLLOW_md_in_mixtureContent2522);
            	    md523=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md523.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:188: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_mixtureContent2524_static.FOLLOW_nnpercent_in_mixtureContent2524);
            	    nnpercent524=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent524.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:198: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2526_static.FOLLOW_oscarCompound_in_mixtureContent2526);
            	    oscarCompound525=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound525.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:212: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent2528_static.FOLLOW_molecule_in_mixtureContent2528);
            	    molecule526=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule526.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:221: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent2530_static.FOLLOW_unnamedmolecule_in_mixtureContent2530);
            	    unnamedmolecule527=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule527.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:237: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent2532_static.FOLLOW_dash_in_mixtureContent2532);
            	    dash528=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash528.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:242: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent2534_static.FOLLOW_sym_in_mixtureContent2534);
            	    sym529=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym529.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:246: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent2536_static.FOLLOW_noun_in_mixtureContent2536);
            	    noun530=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun530.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:251: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent2538_static.FOLLOW_inAll_in_mixtureContent2538);
            	    inAll531=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll531.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:257: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent2540_static.FOLLOW_cd_in_mixtureContent2540);
            	    cd532=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd532.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:260: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent2542_static.FOLLOW_comma_in_mixtureContent2542);
            	    comma533=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma533.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:266: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent2544_static.FOLLOW_adj_in_mixtureContent2544);
            	    adj534=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj534.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:270: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent2546_static.FOLLOW_colon_in_mixtureContent2546);
            	    colon535=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon535.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:276: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent2548_static.FOLLOW_stop_in_mixtureContent2548);
            	    stop536=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop536.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt153 >= 1 ) break loop153;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(153, input);
                        throw eee;
                }
                cnt153++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, mixtureContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class minimixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:1: minimixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.minimixture_return minimixture() throws RecognitionException {
        ChemicalChunkerParser.minimixture_return retval = new ChemicalChunkerParser.minimixture_return();
        retval.start = input.LT(1);
        int minimixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2537 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1538 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:12: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:14: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:14: ( mixtureStructure2 | mixtureStructure1 )
            int alt154=2;
            switch ( input.LA(1) ) {
            case 133:
                {
                alt154=1;
                }
                break;
            case 143:
                {
                alt154=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }

            switch (alt154) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:15: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_minimixture2559_static.FOLLOW_mixtureStructure2_in_minimixture2559);
                    mixtureStructure2537=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2537.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:33: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_minimixture2561_static.FOLLOW_mixtureStructure1_in_minimixture2561);
                    mixtureStructure1538=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1538.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure2, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 278:52: -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:55: ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:66: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:278:85: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, minimixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixture"

    public static class procedureNode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:1: procedureNode : method -> ^( PROCEDURE method ) ;
    public final ChemicalChunkerParser.procedureNode_return procedureNode() throws RecognitionException {
        ChemicalChunkerParser.procedureNode_return retval = new ChemicalChunkerParser.procedureNode_return();
        retval.start = input.LT(1);
        int procedureNode_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.method_return method539 = null;


        RewriteRuleSubtreeStream stream_method=new RewriteRuleSubtreeStream(adaptor,"rule method");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:14: ( method -> ^( PROCEDURE method ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:16: method
            {
            pushFollow(FOLLOW_method_in_procedureNode2582_static.FOLLOW_method_in_procedureNode2582);
            method539=method();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method.add(method539.getTree());


            // AST REWRITE
            // elements: method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 280:23: -> ^( PROCEDURE method )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:26: ^( PROCEDURE method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                adaptor.addChild(root_1, stream_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, procedureNode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNode"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:1: method : ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) );
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);
        int method_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral540 = null;

        ChemicalChunkerParser.nn_return nn541 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod542 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier543 = null;

        ChemicalChunkerParser.numeric_return numeric544 = null;

        ChemicalChunkerParser.nnexample_return nnexample545 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier546 = null;

        ChemicalChunkerParser.numeric_return numeric547 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:7: ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) )
            int alt158=2;
            switch ( input.LA(1) ) {
            case 75:
            case 76:
            case 156:
                {
                alt158=1;
                }
                break;
            case 83:
                {
                alt158=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }

            switch (alt158) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:5: ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:5: ( nngeneral | nn )?
                    int alt155=3;
                    switch ( input.LA(1) ) {
                        case 75:
                            {
                            alt155=1;
                            }
                            break;
                        case 156:
                            {
                            alt155=2;
                            }
                            break;
                    }

                    switch (alt155) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:6: nngeneral
                            {
                            pushFollow(FOLLOW_nngeneral_in_method2602_static.FOLLOW_nngeneral_in_method2602);
                            nngeneral540=nngeneral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral540.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:16: nn
                            {
                            pushFollow(FOLLOW_nn_in_method2604_static.FOLLOW_nn_in_method2604);
                            nn541=nn();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn541.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnmethod_in_method2608_static.FOLLOW_nnmethod_in_method2608);
                    nnmethod542=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod542.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:30: ( identifierOrBracketedIdentifier | numeric )?
                    int alt156=3;
                    alt156 = dfa156.predict(input);
                    switch (alt156) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:31: identifierOrBracketedIdentifier
                            {
                            pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_method2611_static.FOLLOW_identifierOrBracketedIdentifier_in_method2611);
                            identifierOrBracketedIdentifier543=identifierOrBracketedIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier543.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:63: numeric
                            {
                            pushFollow(FOLLOW_numeric_in_method2613_static.FOLLOW_numeric_in_method2613);
                            numeric544=numeric();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric544.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:75: nnexample ( identifierOrBracketedIdentifier | numeric )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_method2619_static.FOLLOW_nnexample_in_method2619);
                    nnexample545=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample545.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:85: ( identifierOrBracketedIdentifier | numeric )
                    int alt157=2;
                    switch ( input.LA(1) ) {
                    case 146:
                        {
                        switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                            case 141:
                                {
                                switch ( input.LA(4) ) {
                                case TOKEN:
                                    {
                                    int LA157_6 = input.LA(5);

                                    if ( (synpred426_ChemicalChunker()) ) {
                                        alt157=1;
                                    }
                                    else if ( (true) ) {
                                        alt157=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 157, 6, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 157, 5, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case EOF:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 65:
                            case 66:
                            case 67:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 116:
                            case 117:
                            case 118:
                            case 119:
                            case 120:
                            case 121:
                            case 122:
                            case 123:
                            case 124:
                            case 125:
                            case 126:
                            case 127:
                            case 128:
                            case 129:
                            case 130:
                            case 131:
                            case 132:
                            case 133:
                            case 134:
                            case 135:
                            case 136:
                            case 137:
                            case 138:
                            case 139:
                            case 140:
                            case 142:
                            case 143:
                            case 144:
                            case 145:
                            case 146:
                            case 147:
                            case 148:
                            case 149:
                            case 150:
                            case 151:
                            case 152:
                            case 153:
                            case 154:
                            case 155:
                            case 156:
                            case 157:
                            case 158:
                            case 159:
                            case 160:
                            case 161:
                            case 162:
                            case 163:
                            case 164:
                            case 165:
                            case 166:
                            case 167:
                            case 168:
                            case 169:
                            case 170:
                            case 171:
                            case 172:
                            case 173:
                            case 174:
                            case 175:
                            case 176:
                            case 177:
                            case 178:
                            case 179:
                            case 180:
                                {
                                alt157=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 157, 4, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 157, 1, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 141:
                    case 143:
                        {
                        alt157=1;
                        }
                        break;
                    case 38:
                        {
                        alt157=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 157, 0, input);

                        throw nvae;
                    }

                    switch (alt157) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:86: identifierOrBracketedIdentifier
                            {
                            pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_method2622_static.FOLLOW_identifierOrBracketedIdentifier_in_method2622);
                            identifierOrBracketedIdentifier546=identifierOrBracketedIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier546.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:118: numeric
                            {
                            pushFollow(FOLLOW_numeric_in_method2624_static.FOLLOW_numeric_in_method2624);
                            numeric547=numeric();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric547.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class referenceToExampleCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referenceToExampleCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:1: referenceToExampleCompound : nnexample ( identifierOrBracketedIdentifier | numeric ) -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? ) ;
    public final ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound() throws RecognitionException {
        ChemicalChunkerParser.referenceToExampleCompound_return retval = new ChemicalChunkerParser.referenceToExampleCompound_return();
        retval.start = input.LT(1);
        int referenceToExampleCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnexample_return nnexample548 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier549 = null;

        ChemicalChunkerParser.numeric_return numeric550 = null;


        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        RewriteRuleSubtreeStream stream_nnexample=new RewriteRuleSubtreeStream(adaptor,"rule nnexample");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:28: ( nnexample ( identifierOrBracketedIdentifier | numeric ) -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:2: nnexample ( identifierOrBracketedIdentifier | numeric )
            {
            pushFollow(FOLLOW_nnexample_in_referenceToExampleCompound2635_static.FOLLOW_nnexample_in_referenceToExampleCompound2635);
            nnexample548=nnexample();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnexample.add(nnexample548.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:12: ( identifierOrBracketedIdentifier | numeric )
            int alt159=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 141:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA159_6 = input.LA(5);

                            if ( (synpred427_ChemicalChunker()) ) {
                                alt159=1;
                            }
                            else if ( (true) ) {
                                alt159=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 159, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 159, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt159=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 159, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 1, input);

                    throw nvae;
                }

                }
                break;
            case 141:
            case 143:
                {
                alt159=1;
                }
                break;
            case 38:
                {
                alt159=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:13: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2638_static.FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2638);
                    identifierOrBracketedIdentifier549=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier549.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:45: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_referenceToExampleCompound2640_static.FOLLOW_numeric_in_referenceToExampleCompound2640);
                    numeric550=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numeric.add(numeric550.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nnexample, numeric, identifierOrBracketedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 286:54: -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:57: ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_nnexample.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:89: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:122: ( numeric )?
                if ( stream_numeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numeric.nextTree());

                }
                stream_numeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, referenceToExampleCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referenceToExampleCompound"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:288:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);
        int advAdj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv551 = null;

        ChemicalChunkerParser.adj_return adj552 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:2: ( adv | adj )
            int alt160=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt160=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt160=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj2663_static.FOLLOW_adv_in_advAdj2663);
                    adv551=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv551.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj2665_static.FOLLOW_adj_in_advAdj2665);
                    adj552=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj552.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, advAdj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:1: range : numeric dash numeric ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);
        int range_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric553 = null;

        ChemicalChunkerParser.dash_return dash554 = null;

        ChemicalChunkerParser.numeric_return numeric555 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:6: ( numeric dash numeric )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:8: numeric dash numeric
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numeric_in_range2672_static.FOLLOW_numeric_in_range2672);
            numeric553=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric553.getTree());
            pushFollow(FOLLOW_dash_in_range2674_static.FOLLOW_dash_in_range2674);
            dash554=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash554.getTree());
            pushFollow(FOLLOW_numeric_in_range2676_static.FOLLOW_numeric_in_range2676);
            numeric555=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric555.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, range_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);
        int cycles_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure556 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles2683_static.FOLLOW_cycleStructure_in_cycles2683);
            cycleStructure556=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure556.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 292:25: -> ^( CYCLES cycleStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:292:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, cycles_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);
        int cycleStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd557 = null;

        ChemicalChunkerParser.dashNN_return dashNN558 = null;

        ChemicalChunkerParser.nncycle_return nncycle559 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:16: ( cd ( dashNN )? nncycle )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure2700_static.FOLLOW_cd_in_cycleStructure2700);
            cd557=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd557.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:21: ( dashNN )?
            int alt161=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt161=1;
                    }
                    break;
            }

            switch (alt161) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure2702_static.FOLLOW_dashNN_in_cycleStructure2702);
                    dashNN558=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN558.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure2705_static.FOLLOW_nncycle_in_cycleStructure2705);
            nncycle559=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle559.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, cycleStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);
        int dashNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj560 = null;

        ChemicalChunkerParser.nn_return nn561 = null;

        ChemicalChunkerParser.cd_return cd562 = null;

        ChemicalChunkerParser.dash_return dash563 = null;

        ChemicalChunkerParser.adj_return adj564 = null;

        ChemicalChunkerParser.nn_return nn565 = null;

        ChemicalChunkerParser.cd_return cd566 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:10: ( adj | nn | cd )
            int alt162=3;
            switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt162=1;
                }
                break;
            case 156:
                {
                alt162=2;
                }
                break;
            case 146:
                {
                alt162=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN2713_static.FOLLOW_adj_in_dashNN2713);
                    adj560=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj560.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN2715_static.FOLLOW_nn_in_dashNN2715);
                    nn561=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn561.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN2717_static.FOLLOW_cd_in_dashNN2717);
                    cd562=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd562.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:22: ( dash ( adj | nn | cd ) )*
            loop164:
            do {
                int alt164=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    alt164=1;
                    }
                    break;

                }

                switch (alt164) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN2721_static.FOLLOW_dash_in_dashNN2721);
            	    dash563=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash563.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:28: ( adj | nn | cd )
            	    int alt163=3;
            	    switch ( input.LA(1) ) {
            	    case 39:
            	    case 40:
            	    case 45:
            	    case 151:
            	    case 152:
            	    case 153:
            	        {
            	        alt163=1;
            	        }
            	        break;
            	    case 156:
            	        {
            	        alt163=2;
            	        }
            	        break;
            	    case 146:
            	        {
            	        alt163=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 163, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt163) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN2724_static.FOLLOW_adj_in_dashNN2724);
            	            adj564=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj564.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN2726_static.FOLLOW_nn_in_dashNN2726);
            	            nn565=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn565.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN2728_static.FOLLOW_cd_in_dashNN2728);
            	            cd566=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd566.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, dashNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:1: ratio : ( numericratio | nounratio ) -> ^( RATIO ( numericratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);
        int ratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numericratio_return numericratio567 = null;

        ChemicalChunkerParser.nounratio_return nounratio568 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numericratio=new RewriteRuleSubtreeStream(adaptor,"rule numericratio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:7: ( ( numericratio | nounratio ) -> ^( RATIO ( numericratio )? ( nounratio )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:9: ( numericratio | nounratio )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:9: ( numericratio | nounratio )
            int alt165=2;
            alt165 = dfa165.predict(input);
            switch (alt165) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:10: numericratio
                    {
                    pushFollow(FOLLOW_numericratio_in_ratio2739_static.FOLLOW_numericratio_in_ratio2739);
                    numericratio567=numericratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numericratio.add(numericratio567.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:23: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio2741_static.FOLLOW_nounratio_in_ratio2741);
                    nounratio568=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio568.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nounratio, numericratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 295:34: -> ^( RATIO ( numericratio )? ( nounratio )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:37: ^( RATIO ( numericratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:45: ( numericratio )?
                if ( stream_numericratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericratio.nextTree());

                }
                stream_numericratio.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:59: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, ratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numericratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:1: numericratio : cd ( colon numeric )+ ;
    public final ChemicalChunkerParser.numericratio_return numericratio() throws RecognitionException {
        ChemicalChunkerParser.numericratio_return retval = new ChemicalChunkerParser.numericratio_return();
        retval.start = input.LT(1);
        int numericratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd569 = null;

        ChemicalChunkerParser.colon_return colon570 = null;

        ChemicalChunkerParser.numeric_return numeric571 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:14: ( cd ( colon numeric )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:17: cd ( colon numeric )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numericratio2764_static.FOLLOW_cd_in_numericratio2764);
            cd569=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd569.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:20: ( colon numeric )+
            int cnt166=0;
            loop166:
            do {
                int alt166=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 146:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA166_6 = input.LA(5);

                                if ( (synpred436_ChemicalChunker()) ) {
                                    alt166=1;
                                }


                                }
                                break;

                            }

                            }
                            break;
                        case 38:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA166_7 = input.LA(5);

                                if ( (synpred436_ChemicalChunker()) ) {
                                    alt166=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt166) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:21: colon numeric
            	    {
            	    pushFollow(FOLLOW_colon_in_numericratio2767_static.FOLLOW_colon_in_numericratio2767);
            	    colon570=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon570.getTree());
            	    pushFollow(FOLLOW_numeric_in_numericratio2769_static.FOLLOW_numeric_in_numericratio2769);
            	    numeric571=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric571.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt166 >= 1 ) break loop166;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(166, input);
                        throw eee;
                }
                cnt166++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, numericratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:297:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);
        int nounratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun572 = null;

        ChemicalChunkerParser.colon_return colon573 = null;

        ChemicalChunkerParser.noun_return noun574 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:2: ( noun ( colon noun )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio2781_static.FOLLOW_noun_in_nounratio2781);
            noun572=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun572.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:11: ( colon noun )+
            int cnt167=0;
            loop167:
            do {
                int alt167=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    int LA167_2 = input.LA(2);

                    if ( (synpred437_ChemicalChunker()) ) {
                        alt167=1;
                    }


                    }
                    break;

                }

                switch (alt167) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio2785_static.FOLLOW_colon_in_nounratio2785);
            	    colon573=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon573.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio2787_static.FOLLOW_noun_in_nounratio2787);
            	    noun574=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun574.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt167 >= 1 ) break loop167;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(167, input);
                        throw eee;
                }
                cnt167++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, nounratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:1: citation : ( citationStructure | comma citationContent comma );
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);
        int citation_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure575 = null;

        ChemicalChunkerParser.comma_return comma576 = null;

        ChemicalChunkerParser.citationContent_return citationContent577 = null;

        ChemicalChunkerParser.comma_return comma578 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:9: ( citationStructure | comma citationContent comma )
            int alt168=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt168=1;
                }
                break;
            case 133:
                {
                alt168=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }

            switch (alt168) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:12: citationStructure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citationStructure_in_citation2799_static.FOLLOW_citationStructure_in_citation2799);
                    citationStructure575=citationStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure575.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:300:30: comma citationContent comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_citation2801_static.FOLLOW_comma_in_citation2801);
                    comma576=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma576.getTree());
                    pushFollow(FOLLOW_citationContent_in_citation2803_static.FOLLOW_citationContent_in_citation2803);
                    citationContent577=citationContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent577.getTree());
                    pushFollow(FOLLOW_comma_in_citation2805_static.FOLLOW_comma_in_citation2805);
                    comma578=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma578.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, citation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:1: citationStructure : citationContent -> ^( CITATION citationContent ) ;
    public final ChemicalChunkerParser.citationStructure_return citationStructure() throws RecognitionException {
        ChemicalChunkerParser.citationStructure_return retval = new ChemicalChunkerParser.citationStructure_return();
        retval.start = input.LT(1);
        int citationStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationContent_return citationContent579 = null;


        RewriteRuleSubtreeStream stream_citationContent=new RewriteRuleSubtreeStream(adaptor,"rule citationContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:18: ( citationContent -> ^( CITATION citationContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:21: citationContent
            {
            pushFollow(FOLLOW_citationContent_in_citationStructure2813_static.FOLLOW_citationContent_in_citationStructure2813);
            citationContent579=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_citationContent.add(citationContent579.getTree());


            // AST REWRITE
            // elements: citationContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 302:37: -> ^( CITATION citationContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:40: ^( CITATION citationContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                adaptor.addChild(root_1, stream_citationContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, citationStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:1: citationContent : lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);
        int citationContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb580 = null;

        ChemicalChunkerParser.nnp_return nnp581 = null;

        ChemicalChunkerParser.fw_return fw582 = null;

        ChemicalChunkerParser.cd_return cd583 = null;

        ChemicalChunkerParser.conjunction_return conjunction584 = null;

        ChemicalChunkerParser.nnp_return nnp585 = null;

        ChemicalChunkerParser.fw_return fw586 = null;

        ChemicalChunkerParser.cd_return cd587 = null;

        ChemicalChunkerParser.conjunction_return conjunction588 = null;

        ChemicalChunkerParser.rrb_return rrb589 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:16: ( lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:20: lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationContent2829_static.FOLLOW_lrb_in_citationContent2829);
            lrb580=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb580.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:24: ( nnp | fw | cd | conjunction )
            int alt169=4;
            switch ( input.LA(1) ) {
            case 158:
                {
                alt169=1;
                }
                break;
            case 149:
                {
                alt169=2;
                }
                break;
            case 146:
                {
                alt169=3;
                }
                break;
            case 133:
            case 145:
                {
                alt169=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }

            switch (alt169) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:25: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent2832_static.FOLLOW_nnp_in_citationContent2832);
                    nnp581=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp581.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:29: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent2834_static.FOLLOW_fw_in_citationContent2834);
                    fw582=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw582.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:32: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent2836_static.FOLLOW_cd_in_citationContent2836);
                    cd583=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd583.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:35: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent2838_static.FOLLOW_conjunction_in_citationContent2838);
                    conjunction584=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction584.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:48: ( nnp | fw | cd | conjunction )+
            int cnt170=0;
            loop170:
            do {
                int alt170=5;
                switch ( input.LA(1) ) {
                case 158:
                    {
                    alt170=1;
                    }
                    break;
                case 149:
                    {
                    alt170=2;
                    }
                    break;
                case 146:
                    {
                    alt170=3;
                    }
                    break;
                case 133:
                case 145:
                    {
                    alt170=4;
                    }
                    break;

                }

                switch (alt170) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:49: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent2842_static.FOLLOW_nnp_in_citationContent2842);
            	    nnp585=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp585.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:53: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent2844_static.FOLLOW_fw_in_citationContent2844);
            	    fw586=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw586.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:56: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent2846_static.FOLLOW_cd_in_citationContent2846);
            	    cd587=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd587.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:303:59: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent2848_static.FOLLOW_conjunction_in_citationContent2848);
            	    conjunction588=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction588.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt170 >= 1 ) break loop170;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(170, input);
                        throw eee;
                }
                cnt170++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_citationContent2852_static.FOLLOW_rrb_in_citationContent2852);
            rrb589=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb589.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, citationContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class numericOrBracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrBracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:1: numericOrBracketedNumeric : ( numeric | bracketedNumeric );
    public final ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.numericOrBracketedNumeric_return retval = new ChemicalChunkerParser.numericOrBracketedNumeric_return();
        retval.start = input.LT(1);
        int numericOrBracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric590 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric591 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:27: ( numeric | bracketedNumeric )
            int alt171=2;
            switch ( input.LA(1) ) {
            case 38:
            case 146:
                {
                alt171=1;
                }
                break;
            case 143:
                {
                alt171=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;
            }

            switch (alt171) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:30: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_numericOrBracketedNumeric2862_static.FOLLOW_numeric_in_numericOrBracketedNumeric2862);
                    numeric590=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric590.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:40: bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2866_static.FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2866);
                    bracketedNumeric591=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric591.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, numericOrBracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrBracketedNumeric"

    public static class bracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:1: bracketedNumeric : lrb numeric rrb ;
    public final ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.bracketedNumeric_return retval = new ChemicalChunkerParser.bracketedNumeric_return();
        retval.start = input.LT(1);
        int bracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb592 = null;

        ChemicalChunkerParser.numeric_return numeric593 = null;

        ChemicalChunkerParser.rrb_return rrb594 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:18: ( lrb numeric rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:21: lrb numeric rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedNumeric2874_static.FOLLOW_lrb_in_bracketedNumeric2874);
            lrb592=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb592.getTree());
            pushFollow(FOLLOW_numeric_in_bracketedNumeric2876_static.FOLLOW_numeric_in_bracketedNumeric2876);
            numeric593=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric593.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedNumeric2878_static.FOLLOW_rrb_in_bracketedNumeric2878);
            rrb594=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb594.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, bracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedNumeric"

    public static class identifierOrBracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierOrBracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:1: identifierOrBracketedIdentifier : ( ( cd )? nnidentifier | bracketedIdentifier );
    public final ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.identifierOrBracketedIdentifier_return retval = new ChemicalChunkerParser.identifierOrBracketedIdentifier_return();
        retval.start = input.LT(1);
        int identifierOrBracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd595 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier596 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier597 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:33: ( ( cd )? nnidentifier | bracketedIdentifier )
            int alt173=2;
            switch ( input.LA(1) ) {
            case 141:
            case 146:
                {
                alt173=1;
                }
                break;
            case 143:
                {
                alt173=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }

            switch (alt173) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:35: ( cd )? nnidentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:35: ( cd )?
                    int alt172=2;
                    switch ( input.LA(1) ) {
                        case 146:
                            {
                            alt172=1;
                            }
                            break;
                    }

                    switch (alt172) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                            {
                            pushFollow(FOLLOW_cd_in_identifierOrBracketedIdentifier2885_static.FOLLOW_cd_in_identifierOrBracketedIdentifier2885);
                            cd595=cd();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd595.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier2888_static.FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier2888);
                    nnidentifier596=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier596.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:54: bracketedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier2892_static.FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier2892);
                    bracketedIdentifier597=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedIdentifier597.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, identifierOrBracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierOrBracketedIdentifier"

    public static class bracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:1: bracketedIdentifier : lrb ( cd )? nnidentifier rrb ;
    public final ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.bracketedIdentifier_return retval = new ChemicalChunkerParser.bracketedIdentifier_return();
        retval.start = input.LT(1);
        int bracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb598 = null;

        ChemicalChunkerParser.cd_return cd599 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier600 = null;

        ChemicalChunkerParser.rrb_return rrb601 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:21: ( lrb ( cd )? nnidentifier rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:24: lrb ( cd )? nnidentifier rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedIdentifier2900_static.FOLLOW_lrb_in_bracketedIdentifier2900);
            lrb598=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb598.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:28: ( cd )?
            int alt174=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt174=1;
                    }
                    break;
            }

            switch (alt174) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_bracketedIdentifier2902_static.FOLLOW_cd_in_bracketedIdentifier2902);
                    cd599=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd599.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnidentifier_in_bracketedIdentifier2905_static.FOLLOW_nnidentifier_in_bracketedIdentifier2905);
            nnidentifier600=nnidentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier600.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedIdentifier2907_static.FOLLOW_rrb_in_bracketedIdentifier2907);
            rrb601=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb601.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, bracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedIdentifier"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:1: adj : ( jj | jjr | jjs | oscarcj | jjchem | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);
        int adj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj602 = null;

        ChemicalChunkerParser.jjr_return jjr603 = null;

        ChemicalChunkerParser.jjs_return jjs604 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj605 = null;

        ChemicalChunkerParser.jjchem_return jjchem606 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn607 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:5: ( jj | jjr | jjs | oscarcj | jjchem | oscarrn )
            int alt175=6;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt175=1;
                }
                break;
            case 152:
                {
                alt175=2;
                }
                break;
            case 153:
                {
                alt175=3;
                }
                break;
            case 39:
                {
                alt175=4;
                }
                break;
            case 45:
                {
                alt175=5;
                }
                break;
            case 40:
                {
                alt175=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;
            }

            switch (alt175) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj2915_static.FOLLOW_jj_in_adj2915);
                    jj602=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj602.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj2917_static.FOLLOW_jjr_in_adj2917);
                    jjr603=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr603.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj2919_static.FOLLOW_jjs_in_adj2919);
                    jjs604=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs604.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:18: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj2921_static.FOLLOW_oscarcj_in_adj2921);
                    oscarcj605=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj605.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:26: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj2923_static.FOLLOW_jjchem_in_adj2923);
                    jjchem606=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem606.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:33: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj2925_static.FOLLOW_oscarrn_in_adj2925);
                    oscarrn607=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn607.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, adj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:1: adv : ( rb | rbr | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);
        int adv_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb608 = null;

        ChemicalChunkerParser.rbr_return rbr609 = null;

        ChemicalChunkerParser.rp_return rp610 = null;

        ChemicalChunkerParser.rbs_return rbs611 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:5: ( rb | rbr | rp | rbs )
            int alt176=4;
            switch ( input.LA(1) ) {
            case 164:
                {
                alt176=1;
                }
                break;
            case 165:
                {
                alt176=2;
                }
                break;
            case 167:
                {
                alt176=3;
                }
                break;
            case 166:
                {
                alt176=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;
            }

            switch (alt176) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv2932_static.FOLLOW_rb_in_adv2932);
                    rb608=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb608.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv2934_static.FOLLOW_rbr_in_adv2934);
                    rbr609=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr609.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:14: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv2936_static.FOLLOW_rp_in_adv2936);
                    rp610=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp610.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:17: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv2938_static.FOLLOW_rbs_in_adv2938);
                    rbs611=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs611.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, adv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:1: clause : ( wdt | wp_poss | wrb | ex | pdt | wp );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);
        int clause_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt612 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss613 = null;

        ChemicalChunkerParser.wrb_return wrb614 = null;

        ChemicalChunkerParser.ex_return ex615 = null;

        ChemicalChunkerParser.pdt_return pdt616 = null;

        ChemicalChunkerParser.wp_return wp617 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:8: ( wdt | wp_poss | wrb | ex | pdt | wp )
            int alt177=6;
            switch ( input.LA(1) ) {
            case 177:
                {
                alt177=1;
                }
                break;
            case 179:
                {
                alt177=2;
                }
                break;
            case 180:
                {
                alt177=3;
                }
                break;
            case 148:
                {
                alt177=4;
                }
                break;
            case 160:
                {
                alt177=5;
                }
                break;
            case 178:
                {
                alt177=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;
            }

            switch (alt177) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause2945_static.FOLLOW_wdt_in_clause2945);
                    wdt612=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt612.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause2947_static.FOLLOW_wp_poss_in_clause2947);
                    wp_poss613=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss613.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:22: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause2949_static.FOLLOW_wrb_in_clause2949);
                    wrb614=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb614.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:26: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause2951_static.FOLLOW_ex_in_clause2951);
                    ex615=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex615.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:29: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause2953_static.FOLLOW_pdt_in_clause2953);
                    pdt616=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt616.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:33: wp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_in_clause2955_static.FOLLOW_wp_in_clause2955);
                    wp617=wp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp617.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc618 = null;

        ChemicalChunkerParser.comma_return comma619 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:13: ( cc | comma )
            int alt178=2;
            switch ( input.LA(1) ) {
            case 145:
                {
                alt178=1;
                }
                break;
            case 133:
                {
                alt178=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;
            }

            switch (alt178) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:15: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction2962_static.FOLLOW_cc_in_conjunction2962);
                    cc618=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc618.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:18: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction2964_static.FOLLOW_comma_in_conjunction2964);
                    comma619=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma619.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);
        int inAll_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in620 = null;

        ChemicalChunkerParser.inafter_return inafter621 = null;

        ChemicalChunkerParser.inas_return inas622 = null;

        ChemicalChunkerParser.inbefore_return inbefore623 = null;

        ChemicalChunkerParser.inby_return inby624 = null;

        ChemicalChunkerParser.infor_return infor625 = null;

        ChemicalChunkerParser.infrom_return infrom626 = null;

        ChemicalChunkerParser.inin_return inin627 = null;

        ChemicalChunkerParser.ininto_return ininto628 = null;

        ChemicalChunkerParser.inof_return inof629 = null;

        ChemicalChunkerParser.inoff_return inoff630 = null;

        ChemicalChunkerParser.inon_return inon631 = null;

        ChemicalChunkerParser.inover_return inover632 = null;

        ChemicalChunkerParser.inunder_return inunder633 = null;

        ChemicalChunkerParser.invia_return invia634 = null;

        ChemicalChunkerParser.inwith_return inwith635 = null;

        ChemicalChunkerParser.inwithout_return inwithout636 = null;

        ChemicalChunkerParser.to_return to637 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt179=18;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt179=1;
                }
                break;
            case 49:
                {
                alt179=2;
                }
                break;
            case 47:
                {
                alt179=3;
                }
                break;
            case 48:
                {
                alt179=4;
                }
                break;
            case 54:
                {
                alt179=5;
                }
                break;
            case 58:
                {
                alt179=6;
                }
                break;
            case 59:
                {
                alt179=7;
                }
                break;
            case 50:
                {
                alt179=8;
                }
                break;
            case 51:
                {
                alt179=9;
                }
                break;
            case 56:
                {
                alt179=10;
                }
                break;
            case 62:
                {
                alt179=11;
                }
                break;
            case 57:
                {
                alt179=12;
                }
                break;
            case 61:
                {
                alt179=13;
                }
                break;
            case 60:
                {
                alt179=14;
                }
                break;
            case 55:
                {
                alt179=15;
                }
                break;
            case 52:
                {
                alt179=16;
                }
                break;
            case 53:
                {
                alt179=17;
                }
                break;
            case 169:
                {
                alt179=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }

            switch (alt179) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll2971_static.FOLLOW_in_in_inAll2971);
                    in620=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in620.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll2973_static.FOLLOW_inafter_in_inAll2973);
                    inafter621=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter621.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll2975_static.FOLLOW_inas_in_inAll2975);
                    inas622=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas622.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll2977_static.FOLLOW_inbefore_in_inAll2977);
                    inbefore623=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore623.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll2979_static.FOLLOW_inby_in_inAll2979);
                    inby624=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby624.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll2981_static.FOLLOW_infor_in_inAll2981);
                    infor625=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor625.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll2983_static.FOLLOW_infrom_in_inAll2983);
                    infrom626=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom626.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll2985_static.FOLLOW_inin_in_inAll2985);
                    inin627=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin627.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll2987_static.FOLLOW_ininto_in_inAll2987);
                    ininto628=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto628.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll2989_static.FOLLOW_inof_in_inAll2989);
                    inof629=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof629.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll2991_static.FOLLOW_inoff_in_inAll2991);
                    inoff630=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff630.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll2993_static.FOLLOW_inon_in_inAll2993);
                    inon631=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon631.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll2995_static.FOLLOW_inover_in_inAll2995);
                    inover632=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover632.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll2997_static.FOLLOW_inunder_in_inAll2997);
                    inunder633=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder633.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll2999_static.FOLLOW_invia_in_inAll2999);
                    invia634=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia634.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll3001_static.FOLLOW_inwith_in_inAll3001);
                    inwith635=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith635.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll3003_static.FOLLOW_inwithout_in_inAll3003);
                    inwithout636=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout636.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:314:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll3005_static.FOLLOW_to_in_inAll3005);
                    to637=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to637.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, inAll_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);
        int inMost_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in638 = null;

        ChemicalChunkerParser.inas_return inas639 = null;

        ChemicalChunkerParser.inbefore_return inbefore640 = null;

        ChemicalChunkerParser.inby_return inby641 = null;

        ChemicalChunkerParser.infor_return infor642 = null;

        ChemicalChunkerParser.infrom_return infrom643 = null;

        ChemicalChunkerParser.inin_return inin644 = null;

        ChemicalChunkerParser.ininto_return ininto645 = null;

        ChemicalChunkerParser.inof_return inof646 = null;

        ChemicalChunkerParser.inoff_return inoff647 = null;

        ChemicalChunkerParser.inon_return inon648 = null;

        ChemicalChunkerParser.inover_return inover649 = null;

        ChemicalChunkerParser.inunder_return inunder650 = null;

        ChemicalChunkerParser.invia_return invia651 = null;

        ChemicalChunkerParser.inwith_return inwith652 = null;

        ChemicalChunkerParser.inwithout_return inwithout653 = null;

        ChemicalChunkerParser.to_return to654 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt180=17;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt180=1;
                }
                break;
            case 47:
                {
                alt180=2;
                }
                break;
            case 48:
                {
                alt180=3;
                }
                break;
            case 54:
                {
                alt180=4;
                }
                break;
            case 58:
                {
                alt180=5;
                }
                break;
            case 59:
                {
                alt180=6;
                }
                break;
            case 50:
                {
                alt180=7;
                }
                break;
            case 51:
                {
                alt180=8;
                }
                break;
            case 56:
                {
                alt180=9;
                }
                break;
            case 62:
                {
                alt180=10;
                }
                break;
            case 57:
                {
                alt180=11;
                }
                break;
            case 61:
                {
                alt180=12;
                }
                break;
            case 60:
                {
                alt180=13;
                }
                break;
            case 55:
                {
                alt180=14;
                }
                break;
            case 52:
                {
                alt180=15;
                }
                break;
            case 53:
                {
                alt180=16;
                }
                break;
            case 169:
                {
                alt180=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost3012_static.FOLLOW_in_in_inMost3012);
                    in638=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in638.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost3014_static.FOLLOW_inas_in_inMost3014);
                    inas639=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas639.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost3016_static.FOLLOW_inbefore_in_inMost3016);
                    inbefore640=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore640.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost3018_static.FOLLOW_inby_in_inMost3018);
                    inby641=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby641.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost3020_static.FOLLOW_infor_in_inMost3020);
                    infor642=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor642.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost3022_static.FOLLOW_infrom_in_inMost3022);
                    infrom643=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom643.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost3024_static.FOLLOW_inin_in_inMost3024);
                    inin644=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin644.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost3026_static.FOLLOW_ininto_in_inMost3026);
                    ininto645=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto645.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost3028_static.FOLLOW_inof_in_inMost3028);
                    inof646=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof646.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost3030_static.FOLLOW_inoff_in_inMost3030);
                    inoff647=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff647.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost3032_static.FOLLOW_inon_in_inMost3032);
                    inon648=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon648.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost3034_static.FOLLOW_inover_in_inMost3034);
                    inover649=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover649.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost3036_static.FOLLOW_inunder_in_inMost3036);
                    inunder650=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder650.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost3038_static.FOLLOW_invia_in_inMost3038);
                    invia651=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia651.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost3040_static.FOLLOW_inwith_in_inMost3040);
                    inwith652=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith652.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost3042_static.FOLLOW_inwithout_in_inMost3042);
                    inwithout653=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout653.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost3044_static.FOLLOW_to_in_inMost3044);
                    to654=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to654.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, inMost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class numeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:1: numeric : ( cd | cdAlphanum );
    public final ChemicalChunkerParser.numeric_return numeric() throws RecognitionException {
        ChemicalChunkerParser.numeric_return retval = new ChemicalChunkerParser.numeric_return();
        retval.start = input.LT(1);
        int numeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd655 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum656 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:9: ( cd | cdAlphanum )
            int alt181=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                alt181=1;
                }
                break;
            case 38:
                {
                alt181=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:11: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_numeric3051_static.FOLLOW_cd_in_numeric3051);
                    cd655=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd655.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:316:14: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_numeric3053_static.FOLLOW_cdAlphanum_in_numeric3053);
                    cdAlphanum656=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum656.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, numeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric"

    public static class cdAlphanum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:1: cdAlphanum : 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) ;
    public final ChemicalChunkerParser.cdAlphanum_return cdAlphanum() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanum_return retval = new ChemicalChunkerParser.cdAlphanum_return();
        retval.start = input.LT(1);
        int cdAlphanum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal657=null;
        Token TOKEN658=null;

        Object string_literal657_tree=null;
        Object TOKEN658_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:11: ( 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:12: 'CD-ALPHANUM' TOKEN
            {
            string_literal657=(Token)match(input,38,FOLLOW_38_in_cdAlphanum3061_static.FOLLOW_38_in_cdAlphanum3061); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal657);

            TOKEN658=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdAlphanum3063_static.FOLLOW_TOKEN_in_cdAlphanum3063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN658);



            // AST REWRITE
            // elements: 38, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 320:32: -> ^( 'CD-ALPHANUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:35: ^( 'CD-ALPHANUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, cdAlphanum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanum"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);
        int oscarcj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal659=null;
        Token TOKEN660=null;

        Object string_literal659_tree=null;
        Object TOKEN660_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:9: 'OSCAR-CJ' TOKEN
            {
            string_literal659=(Token)match(input,39,FOLLOW_39_in_oscarcj3076_static.FOLLOW_39_in_oscarcj3076); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal659);

            TOKEN660=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj3078_static.FOLLOW_TOKEN_in_oscarcj3078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN660);



            // AST REWRITE
            // elements: 39, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 321:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, oscarcj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);
        int oscarrn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal661=null;
        Token TOKEN662=null;

        Object string_literal661_tree=null;
        Object TOKEN662_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:9: 'OSCAR-RN' TOKEN
            {
            string_literal661=(Token)match(input,40,FOLLOW_40_in_oscarrn3091_static.FOLLOW_40_in_oscarrn3091); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal661);

            TOKEN662=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn3093_static.FOLLOW_TOKEN_in_oscarrn3093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN662);



            // AST REWRITE
            // elements: 40, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 322:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, oscarrn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:1: oscarase : 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) ;
    public final ChemicalChunkerParser.oscarase_return oscarase() throws RecognitionException {
        ChemicalChunkerParser.oscarase_return retval = new ChemicalChunkerParser.oscarase_return();
        retval.start = input.LT(1);
        int oscarase_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal663=null;
        Token TOKEN664=null;

        Object string_literal663_tree=null;
        Object TOKEN664_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:9: ( 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:10: 'OSCAR-ASE' TOKEN
            {
            string_literal663=(Token)match(input,41,FOLLOW_41_in_oscarase3106_static.FOLLOW_41_in_oscarase3106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal663);

            TOKEN664=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarase3108_static.FOLLOW_TOKEN_in_oscarase3108); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN664);



            // AST REWRITE
            // elements: 41, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 323:28: -> ^( 'OSCAR-ASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:31: ^( 'OSCAR-ASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, oscarase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarase"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:1: oscaront : 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);
        int oscaront_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal665=null;
        Token TOKEN666=null;

        Object string_literal665_tree=null;
        Object TOKEN666_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:9: ( 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:10: 'OSCAR-ONT' TOKEN
            {
            string_literal665=(Token)match(input,42,FOLLOW_42_in_oscaront3121_static.FOLLOW_42_in_oscaront3121); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal665);

            TOKEN666=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront3123_static.FOLLOW_TOKEN_in_oscaront3123); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN666);



            // AST REWRITE
            // elements: TOKEN, 42
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 324:28: -> ^( 'OSCAR-ONT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:324:31: ^( 'OSCAR-ONT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, oscaront_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);
        int tmunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal667=null;
        Token TOKEN668=null;

        Object string_literal667_tree=null;
        Object TOKEN668_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:11: 'TM-UNICODE' TOKEN
            {
            string_literal667=(Token)match(input,43,FOLLOW_43_in_tmunicode3136_static.FOLLOW_43_in_tmunicode3136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal667);

            TOKEN668=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode3138_static.FOLLOW_TOKEN_in_tmunicode3138); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN668);



            // AST REWRITE
            // elements: TOKEN, 43
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 325:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, tmunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);
        int cdunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal669=null;
        Token TOKEN670=null;

        Object string_literal669_tree=null;
        Object TOKEN670_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:11: 'CD-UNICODE' TOKEN
            {
            string_literal669=(Token)match(input,44,FOLLOW_44_in_cdunicode3151_static.FOLLOW_44_in_cdunicode3151); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal669);

            TOKEN670=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode3153_static.FOLLOW_TOKEN_in_cdunicode3153); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN670);



            // AST REWRITE
            // elements: 44, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, cdunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);
        int jjchem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal671=null;
        Token TOKEN672=null;

        Object string_literal671_tree=null;
        Object TOKEN672_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:8: 'JJ-CHEM' TOKEN
            {
            string_literal671=(Token)match(input,45,FOLLOW_45_in_jjchem3166_static.FOLLOW_45_in_jjchem3166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal671);

            TOKEN672=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem3168_static.FOLLOW_TOKEN_in_jjchem3168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN672);



            // AST REWRITE
            // elements: TOKEN, 45
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 327:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, jjchem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);
        int jjcomp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal673=null;
        Token TOKEN674=null;

        Object string_literal673_tree=null;
        Object TOKEN674_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal673=(Token)match(input,46,FOLLOW_46_in_jjcomp3181_static.FOLLOW_46_in_jjcomp3181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal673);

            TOKEN674=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp3183_static.FOLLOW_TOKEN_in_jjcomp3183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN674);



            // AST REWRITE
            // elements: TOKEN, 46
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 328:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, jjcomp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);
        int inas_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal675=null;
        Token TOKEN676=null;

        Object string_literal675_tree=null;
        Object TOKEN676_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:6: 'IN-AS' TOKEN
            {
            string_literal675=(Token)match(input,47,FOLLOW_47_in_inas3197_static.FOLLOW_47_in_inas3197); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal675);

            TOKEN676=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3199_static.FOLLOW_TOKEN_in_inas3199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN676);



            // AST REWRITE
            // elements: TOKEN, 47
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 330:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, inas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);
        int inbefore_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal677=null;
        Token TOKEN678=null;

        Object string_literal677_tree=null;
        Object TOKEN678_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:10: 'IN-BEFORE' TOKEN
            {
            string_literal677=(Token)match(input,48,FOLLOW_48_in_inbefore3212_static.FOLLOW_48_in_inbefore3212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal677);

            TOKEN678=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3214_static.FOLLOW_TOKEN_in_inbefore3214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN678);



            // AST REWRITE
            // elements: 48, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 331:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, inbefore_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);
        int inafter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal679=null;
        Token TOKEN680=null;

        Object string_literal679_tree=null;
        Object TOKEN680_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:9: 'IN-AFTER' TOKEN
            {
            string_literal679=(Token)match(input,49,FOLLOW_49_in_inafter3227_static.FOLLOW_49_in_inafter3227); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal679);

            TOKEN680=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3229_static.FOLLOW_TOKEN_in_inafter3229); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN680);



            // AST REWRITE
            // elements: TOKEN, 49
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 332:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:332:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, inafter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);
        int inin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal681=null;
        Token TOKEN682=null;

        Object string_literal681_tree=null;
        Object TOKEN682_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:6: 'IN-IN' TOKEN
            {
            string_literal681=(Token)match(input,50,FOLLOW_50_in_inin3242_static.FOLLOW_50_in_inin3242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal681);

            TOKEN682=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3244_static.FOLLOW_TOKEN_in_inin3244); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN682);



            // AST REWRITE
            // elements: 50, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 333:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:333:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, inin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);
        int ininto_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal683=null;
        Token TOKEN684=null;

        Object string_literal683_tree=null;
        Object TOKEN684_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:8: 'IN-INTO' TOKEN
            {
            string_literal683=(Token)match(input,51,FOLLOW_51_in_ininto3257_static.FOLLOW_51_in_ininto3257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal683);

            TOKEN684=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3259_static.FOLLOW_TOKEN_in_ininto3259); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN684);



            // AST REWRITE
            // elements: TOKEN, 51
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 334:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:334:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, ininto_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);
        int inwith_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal685=null;
        Token TOKEN686=null;

        Object string_literal685_tree=null;
        Object TOKEN686_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:8: 'IN-WITH' TOKEN
            {
            string_literal685=(Token)match(input,52,FOLLOW_52_in_inwith3272_static.FOLLOW_52_in_inwith3272); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal685);

            TOKEN686=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3274_static.FOLLOW_TOKEN_in_inwith3274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN686);



            // AST REWRITE
            // elements: 52, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 335:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, inwith_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);
        int inwithout_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal687=null;
        Token TOKEN688=null;

        Object string_literal687_tree=null;
        Object TOKEN688_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:11: 'IN-WITHOUT' TOKEN
            {
            string_literal687=(Token)match(input,53,FOLLOW_53_in_inwithout3287_static.FOLLOW_53_in_inwithout3287); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal687);

            TOKEN688=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3289_static.FOLLOW_TOKEN_in_inwithout3289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN688);



            // AST REWRITE
            // elements: TOKEN, 53
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 336:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, inwithout_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);
        int inby_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal689=null;
        Token TOKEN690=null;

        Object string_literal689_tree=null;
        Object TOKEN690_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:6: 'IN-BY' TOKEN
            {
            string_literal689=(Token)match(input,54,FOLLOW_54_in_inby3302_static.FOLLOW_54_in_inby3302); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal689);

            TOKEN690=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3304_static.FOLLOW_TOKEN_in_inby3304); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN690);



            // AST REWRITE
            // elements: 54, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, inby_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);
        int invia_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal691=null;
        Token TOKEN692=null;

        Object string_literal691_tree=null;
        Object TOKEN692_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:7: 'IN-VIA' TOKEN
            {
            string_literal691=(Token)match(input,55,FOLLOW_55_in_invia3317_static.FOLLOW_55_in_invia3317); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal691);

            TOKEN692=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3319_static.FOLLOW_TOKEN_in_invia3319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN692);



            // AST REWRITE
            // elements: TOKEN, 55
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 338:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, invia_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);
        int inof_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal693=null;
        Token TOKEN694=null;

        Object string_literal693_tree=null;
        Object TOKEN694_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:6: 'IN-OF' TOKEN
            {
            string_literal693=(Token)match(input,56,FOLLOW_56_in_inof3332_static.FOLLOW_56_in_inof3332); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal693);

            TOKEN694=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3334_static.FOLLOW_TOKEN_in_inof3334); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN694);



            // AST REWRITE
            // elements: TOKEN, 56
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 339:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, inof_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);
        int inon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal695=null;
        Token TOKEN696=null;

        Object string_literal695_tree=null;
        Object TOKEN696_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:6: 'IN-ON' TOKEN
            {
            string_literal695=(Token)match(input,57,FOLLOW_57_in_inon3347_static.FOLLOW_57_in_inon3347); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal695);

            TOKEN696=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3349_static.FOLLOW_TOKEN_in_inon3349); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN696);



            // AST REWRITE
            // elements: 57, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 340:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, inon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);
        int infor_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal697=null;
        Token TOKEN698=null;

        Object string_literal697_tree=null;
        Object TOKEN698_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:7: 'IN-FOR' TOKEN
            {
            string_literal697=(Token)match(input,58,FOLLOW_58_in_infor3362_static.FOLLOW_58_in_infor3362); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal697);

            TOKEN698=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3364_static.FOLLOW_TOKEN_in_infor3364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN698);



            // AST REWRITE
            // elements: 58, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 341:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, infor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);
        int infrom_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal699=null;
        Token TOKEN700=null;

        Object string_literal699_tree=null;
        Object TOKEN700_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:8: 'IN-FROM' TOKEN
            {
            string_literal699=(Token)match(input,59,FOLLOW_59_in_infrom3377_static.FOLLOW_59_in_infrom3377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal699);

            TOKEN700=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3379_static.FOLLOW_TOKEN_in_infrom3379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN700);



            // AST REWRITE
            // elements: 59, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, infrom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);
        int inunder_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal701=null;
        Token TOKEN702=null;

        Object string_literal701_tree=null;
        Object TOKEN702_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:9: 'IN-UNDER' TOKEN
            {
            string_literal701=(Token)match(input,60,FOLLOW_60_in_inunder3392_static.FOLLOW_60_in_inunder3392); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal701);

            TOKEN702=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3394_static.FOLLOW_TOKEN_in_inunder3394); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN702);



            // AST REWRITE
            // elements: TOKEN, 60
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 343:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, inunder_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);
        int inover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal703=null;
        Token TOKEN704=null;

        Object string_literal703_tree=null;
        Object TOKEN704_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:8: 'IN-OVER' TOKEN
            {
            string_literal703=(Token)match(input,61,FOLLOW_61_in_inover3407_static.FOLLOW_61_in_inover3407); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal703);

            TOKEN704=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3409_static.FOLLOW_TOKEN_in_inover3409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN704);



            // AST REWRITE
            // elements: TOKEN, 61
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:344:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, inover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);
        int inoff_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal705=null;
        Token TOKEN706=null;

        Object string_literal705_tree=null;
        Object TOKEN706_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:7: 'IN-OFF' TOKEN
            {
            string_literal705=(Token)match(input,62,FOLLOW_62_in_inoff3422_static.FOLLOW_62_in_inoff3422); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal705);

            TOKEN706=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3424_static.FOLLOW_TOKEN_in_inoff3424); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN706);



            // AST REWRITE
            // elements: TOKEN, 62
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 345:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, inoff_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);
        int nnstate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal707=null;
        Token TOKEN708=null;

        Object string_literal707_tree=null;
        Object TOKEN708_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:9: 'NN-STATE' TOKEN
            {
            string_literal707=(Token)match(input,63,FOLLOW_63_in_nnstate3439_static.FOLLOW_63_in_nnstate3439); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal707);

            TOKEN708=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3441_static.FOLLOW_TOKEN_in_nnstate3441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN708);



            // AST REWRITE
            // elements: TOKEN, 63
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, nnstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);
        int nntime_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal709=null;
        Token TOKEN710=null;

        Object string_literal709_tree=null;
        Object TOKEN710_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:8: 'NN-TIME' TOKEN
            {
            string_literal709=(Token)match(input,64,FOLLOW_64_in_nntime3454_static.FOLLOW_64_in_nntime3454); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal709);

            TOKEN710=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3456_static.FOLLOW_TOKEN_in_nntime3456); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN710);



            // AST REWRITE
            // elements: TOKEN, 64
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 349:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, nntime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);
        int nnmass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal711=null;
        Token TOKEN712=null;

        Object string_literal711_tree=null;
        Object TOKEN712_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:8: 'NN-MASS' TOKEN
            {
            string_literal711=(Token)match(input,65,FOLLOW_65_in_nnmass3469_static.FOLLOW_65_in_nnmass3469); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal711);

            TOKEN712=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3471_static.FOLLOW_TOKEN_in_nnmass3471); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN712);



            // AST REWRITE
            // elements: 65, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, nnmass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);
        int nnamount_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal713=null;
        Token TOKEN714=null;

        Object string_literal713_tree=null;
        Object TOKEN714_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:10: 'NN-AMOUNT' TOKEN
            {
            string_literal713=(Token)match(input,66,FOLLOW_66_in_nnamount3484_static.FOLLOW_66_in_nnamount3484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal713);

            TOKEN714=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3486_static.FOLLOW_TOKEN_in_nnamount3486); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN714);



            // AST REWRITE
            // elements: TOKEN, 66
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 351:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, nnamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);
        int nnmolar_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal715=null;
        Token TOKEN716=null;

        Object string_literal715_tree=null;
        Object TOKEN716_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:9: 'NN-MOLAR' TOKEN
            {
            string_literal715=(Token)match(input,67,FOLLOW_67_in_nnmolar3499_static.FOLLOW_67_in_nnmolar3499); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal715);

            TOKEN716=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3501_static.FOLLOW_TOKEN_in_nnmolar3501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN716);



            // AST REWRITE
            // elements: TOKEN, 67
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 352:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, nnmolar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);
        int nnatmosphere_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal717=null;
        Token TOKEN718=null;

        Object string_literal717_tree=null;
        Object TOKEN718_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal717=(Token)match(input,68,FOLLOW_68_in_nnatmosphere3514_static.FOLLOW_68_in_nnatmosphere3514); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal717);

            TOKEN718=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3516_static.FOLLOW_TOKEN_in_nnatmosphere3516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN718);



            // AST REWRITE
            // elements: TOKEN, 68
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 353:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, nnatmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);
        int nneq_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal719=null;
        Token TOKEN720=null;

        Object string_literal719_tree=null;
        Object TOKEN720_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:6: 'NN-EQ' TOKEN
            {
            string_literal719=(Token)match(input,69,FOLLOW_69_in_nneq3529_static.FOLLOW_69_in_nneq3529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal719);

            TOKEN720=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3531_static.FOLLOW_TOKEN_in_nneq3531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN720);



            // AST REWRITE
            // elements: 69, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 354:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, nneq_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);
        int nnvol_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal721=null;
        Token TOKEN722=null;

        Object string_literal721_tree=null;
        Object TOKEN722_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:7: 'NN-VOL' TOKEN
            {
            string_literal721=(Token)match(input,70,FOLLOW_70_in_nnvol3544_static.FOLLOW_70_in_nnvol3544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal721);

            TOKEN722=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3546_static.FOLLOW_TOKEN_in_nnvol3546); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN722);



            // AST REWRITE
            // elements: TOKEN, 70
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 355:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, nnvol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);
        int nnchementity_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal723=null;
        Token TOKEN724=null;

        Object string_literal723_tree=null;
        Object TOKEN724_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal723=(Token)match(input,71,FOLLOW_71_in_nnchementity3559_static.FOLLOW_71_in_nnchementity3559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal723);

            TOKEN724=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3561_static.FOLLOW_TOKEN_in_nnchementity3561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN724);



            // AST REWRITE
            // elements: 71, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 356:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, nnchementity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);
        int nntemp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal725=null;
        Token TOKEN726=null;

        Object string_literal725_tree=null;
        Object TOKEN726_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:8: 'NN-TEMP' TOKEN
            {
            string_literal725=(Token)match(input,72,FOLLOW_72_in_nntemp3574_static.FOLLOW_72_in_nntemp3574); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal725);

            TOKEN726=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3576_static.FOLLOW_TOKEN_in_nntemp3576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN726);



            // AST REWRITE
            // elements: 72, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 357:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, nntemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnph_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnph"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:1: nnph : 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) ;
    public final ChemicalChunkerParser.nnph_return nnph() throws RecognitionException {
        ChemicalChunkerParser.nnph_return retval = new ChemicalChunkerParser.nnph_return();
        retval.start = input.LT(1);
        int nnph_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal727=null;
        Token TOKEN728=null;

        Object string_literal727_tree=null;
        Object TOKEN728_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:5: ( 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:6: 'NN-PH' TOKEN
            {
            string_literal727=(Token)match(input,73,FOLLOW_73_in_nnph3589_static.FOLLOW_73_in_nnph3589); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal727);

            TOKEN728=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnph3591_static.FOLLOW_TOKEN_in_nnph3591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN728);



            // AST REWRITE
            // elements: 73, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:20: -> ^( 'NN-PH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:23: ^( 'NN-PH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, nnph_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnph"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);
        int nnflash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal729=null;
        Token TOKEN730=null;

        Object string_literal729_tree=null;
        Object TOKEN730_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:9: 'NN-FLASH' TOKEN
            {
            string_literal729=(Token)match(input,74,FOLLOW_74_in_nnflash3604_static.FOLLOW_74_in_nnflash3604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal729);

            TOKEN730=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3606_static.FOLLOW_TOKEN_in_nnflash3606); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN730);



            // AST REWRITE
            // elements: 74, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 359:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, nnflash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);
        int nngeneral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal731=null;
        Token TOKEN732=null;

        Object string_literal731_tree=null;
        Object TOKEN732_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:11: 'NN-GENERAL' TOKEN
            {
            string_literal731=(Token)match(input,75,FOLLOW_75_in_nngeneral3619_static.FOLLOW_75_in_nngeneral3619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal731);

            TOKEN732=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral3621_static.FOLLOW_TOKEN_in_nngeneral3621); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN732);



            // AST REWRITE
            // elements: TOKEN, 75
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, nngeneral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);
        int nnmethod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal733=null;
        Token TOKEN734=null;

        Object string_literal733_tree=null;
        Object TOKEN734_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:10: 'NN-METHOD' TOKEN
            {
            string_literal733=(Token)match(input,76,FOLLOW_76_in_nnmethod3634_static.FOLLOW_76_in_nnmethod3634); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal733);

            TOKEN734=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod3636_static.FOLLOW_TOKEN_in_nnmethod3636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN734);



            // AST REWRITE
            // elements: TOKEN, 76
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 361:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:361:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, nnmethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);
        int nnpressure_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal735=null;
        Token TOKEN736=null;

        Object string_literal735_tree=null;
        Object TOKEN736_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:12: 'NN-PRESSURE' TOKEN
            {
            string_literal735=(Token)match(input,77,FOLLOW_77_in_nnpressure3649_static.FOLLOW_77_in_nnpressure3649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal735);

            TOKEN736=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure3651_static.FOLLOW_TOKEN_in_nnpressure3651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN736);



            // AST REWRITE
            // elements: 77, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 362:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:362:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, nnpressure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);
        int nncolumn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal737=null;
        Token TOKEN738=null;

        Object string_literal737_tree=null;
        Object TOKEN738_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:10: 'NN-COLUMN' TOKEN
            {
            string_literal737=(Token)match(input,78,FOLLOW_78_in_nncolumn3664_static.FOLLOW_78_in_nncolumn3664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal737);

            TOKEN738=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn3666_static.FOLLOW_TOKEN_in_nncolumn3666); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN738);



            // AST REWRITE
            // elements: 78, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, nncolumn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);
        int nnchromatography_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal739=null;
        Token TOKEN740=null;

        Object string_literal739_tree=null;
        Object TOKEN740_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal739=(Token)match(input,79,FOLLOW_79_in_nnchromatography3679_static.FOLLOW_79_in_nnchromatography3679); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal739);

            TOKEN740=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography3681_static.FOLLOW_TOKEN_in_nnchromatography3681); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN740);



            // AST REWRITE
            // elements: TOKEN, 79
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 364:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, nnchromatography_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);
        int nnvacuum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal741=null;
        Token TOKEN742=null;

        Object string_literal741_tree=null;
        Object TOKEN742_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:10: 'NN-VACUUM' TOKEN
            {
            string_literal741=(Token)match(input,80,FOLLOW_80_in_nnvacuum3694_static.FOLLOW_80_in_nnvacuum3694); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal741);

            TOKEN742=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum3696_static.FOLLOW_TOKEN_in_nnvacuum3696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN742);



            // AST REWRITE
            // elements: 80, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, nnvacuum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);
        int nncycle_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal743=null;
        Token TOKEN744=null;

        Object string_literal743_tree=null;
        Object TOKEN744_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:9: 'NN-CYCLE' TOKEN
            {
            string_literal743=(Token)match(input,81,FOLLOW_81_in_nncycle3709_static.FOLLOW_81_in_nncycle3709); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal743);

            TOKEN744=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle3711_static.FOLLOW_TOKEN_in_nncycle3711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN744);



            // AST REWRITE
            // elements: TOKEN, 81
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, nncycle_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);
        int nntimes_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal745=null;
        Token TOKEN746=null;

        Object string_literal745_tree=null;
        Object TOKEN746_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:9: 'NN-TIMES' TOKEN
            {
            string_literal745=(Token)match(input,82,FOLLOW_82_in_nntimes3724_static.FOLLOW_82_in_nntimes3724); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal745);

            TOKEN746=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes3726_static.FOLLOW_TOKEN_in_nntimes3726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN746);



            // AST REWRITE
            // elements: TOKEN, 82
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, nntimes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);
        int nnexample_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal747=null;
        Token TOKEN748=null;

        Object string_literal747_tree=null;
        Object TOKEN748_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal747=(Token)match(input,83,FOLLOW_83_in_nnexample3739_static.FOLLOW_83_in_nnexample3739); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal747);

            TOKEN748=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample3741_static.FOLLOW_TOKEN_in_nnexample3741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN748);



            // AST REWRITE
            // elements: TOKEN, 83
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, nnexample_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);
        int oscarcm_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal749=null;
        Token TOKEN750=null;

        Object string_literal749_tree=null;
        Object TOKEN750_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:9: 'OSCAR-CM' TOKEN
            {
            string_literal749=(Token)match(input,84,FOLLOW_84_in_oscarcm3756_static.FOLLOW_84_in_oscarcm3756); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal749);

            TOKEN750=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm3758_static.FOLLOW_TOKEN_in_oscarcm3758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN750);



            // AST REWRITE
            // elements: TOKEN, 84
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, oscarcm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);
        int vbuse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal751=null;
        Token TOKEN752=null;

        Object string_literal751_tree=null;
        Object TOKEN752_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:7: 'VB-USE' TOKEN
            {
            string_literal751=(Token)match(input,85,FOLLOW_85_in_vbuse3773_static.FOLLOW_85_in_vbuse3773); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal751);

            TOKEN752=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse3775_static.FOLLOW_TOKEN_in_vbuse3775); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN752);



            // AST REWRITE
            // elements: TOKEN, 85
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 374:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, vbuse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);
        int vbchange_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal753=null;
        Token TOKEN754=null;

        Object string_literal753_tree=null;
        Object TOKEN754_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:10: 'VB-CHANGE' TOKEN
            {
            string_literal753=(Token)match(input,86,FOLLOW_86_in_vbchange3788_static.FOLLOW_86_in_vbchange3788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal753);

            TOKEN754=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange3790_static.FOLLOW_TOKEN_in_vbchange3790); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN754);



            // AST REWRITE
            // elements: 86, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, vbchange_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);
        int vbsubmerge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal755=null;
        Token TOKEN756=null;

        Object string_literal755_tree=null;
        Object TOKEN756_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal755=(Token)match(input,87,FOLLOW_87_in_vbsubmerge3803_static.FOLLOW_87_in_vbsubmerge3803); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal755);

            TOKEN756=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge3805_static.FOLLOW_TOKEN_in_vbsubmerge3805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN756);



            // AST REWRITE
            // elements: TOKEN, 87
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 376:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, vbsubmerge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);
        int vbsubject_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal757=null;
        Token TOKEN758=null;

        Object string_literal757_tree=null;
        Object TOKEN758_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:11: 'VB-SUBJECT' TOKEN
            {
            string_literal757=(Token)match(input,88,FOLLOW_88_in_vbsubject3818_static.FOLLOW_88_in_vbsubject3818); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal757);

            TOKEN758=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject3820_static.FOLLOW_TOKEN_in_vbsubject3820); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN758);



            // AST REWRITE
            // elements: TOKEN, 88
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 377:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, vbsubject_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);
        int nnadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal759=null;
        Token TOKEN760=null;

        Object string_literal759_tree=null;
        Object TOKEN760_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:7: 'NN-ADD' TOKEN
            {
            string_literal759=(Token)match(input,89,FOLLOW_89_in_nnadd3835_static.FOLLOW_89_in_nnadd3835); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal759);

            TOKEN760=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd3837_static.FOLLOW_TOKEN_in_nnadd3837); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN760);



            // AST REWRITE
            // elements: TOKEN, 89
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 380:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, nnadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);
        int nnmixture_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal761=null;
        Token TOKEN762=null;

        Object string_literal761_tree=null;
        Object TOKEN762_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:11: 'NN-MIXTURE' TOKEN
            {
            string_literal761=(Token)match(input,90,FOLLOW_90_in_nnmixture3850_static.FOLLOW_90_in_nnmixture3850); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal761);

            TOKEN762=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture3852_static.FOLLOW_TOKEN_in_nnmixture3852); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN762);



            // AST REWRITE
            // elements: 90, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, nnmixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);
        int vbdilute_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal763=null;
        Token TOKEN764=null;

        Object string_literal763_tree=null;
        Object TOKEN764_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:10: 'VB-DILUTE' TOKEN
            {
            string_literal763=(Token)match(input,91,FOLLOW_91_in_vbdilute3865_static.FOLLOW_91_in_vbdilute3865); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal763);

            TOKEN764=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute3867_static.FOLLOW_TOKEN_in_vbdilute3867); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN764);



            // AST REWRITE
            // elements: TOKEN, 91
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 382:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, vbdilute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);
        int vbadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal765=null;
        Token TOKEN766=null;

        Object string_literal765_tree=null;
        Object TOKEN766_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:7: 'VB-ADD' TOKEN
            {
            string_literal765=(Token)match(input,92,FOLLOW_92_in_vbadd3880_static.FOLLOW_92_in_vbadd3880); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal765);

            TOKEN766=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd3882_static.FOLLOW_TOKEN_in_vbadd3882); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN766);



            // AST REWRITE
            // elements: 92, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 383:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, vbadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);
        int vbcharge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal767=null;
        Token TOKEN768=null;

        Object string_literal767_tree=null;
        Object TOKEN768_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:10: 'VB-CHARGE' TOKEN
            {
            string_literal767=(Token)match(input,93,FOLLOW_93_in_vbcharge3895_static.FOLLOW_93_in_vbcharge3895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal767);

            TOKEN768=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge3897_static.FOLLOW_TOKEN_in_vbcharge3897); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN768);



            // AST REWRITE
            // elements: TOKEN, 93
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 384:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:384:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, vbcharge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);
        int vbcontain_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal769=null;
        Token TOKEN770=null;

        Object string_literal769_tree=null;
        Object TOKEN770_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:11: 'VB-CONTAIN' TOKEN
            {
            string_literal769=(Token)match(input,94,FOLLOW_94_in_vbcontain3910_static.FOLLOW_94_in_vbcontain3910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal769);

            TOKEN770=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain3912_static.FOLLOW_TOKEN_in_vbcontain3912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN770);



            // AST REWRITE
            // elements: 94, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 385:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:385:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, vbcontain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);
        int vbdrop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal771=null;
        Token TOKEN772=null;

        Object string_literal771_tree=null;
        Object TOKEN772_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:8: 'VB-DROP' TOKEN
            {
            string_literal771=(Token)match(input,95,FOLLOW_95_in_vbdrop3925_static.FOLLOW_95_in_vbdrop3925); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal771);

            TOKEN772=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop3927_static.FOLLOW_TOKEN_in_vbdrop3927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN772);



            // AST REWRITE
            // elements: TOKEN, 95
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 386:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, vbdrop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);
        int vbfill_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal773=null;
        Token TOKEN774=null;

        Object string_literal773_tree=null;
        Object TOKEN774_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:8: 'VB-FILL' TOKEN
            {
            string_literal773=(Token)match(input,96,FOLLOW_96_in_vbfill3940_static.FOLLOW_96_in_vbfill3940); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal773);

            TOKEN774=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill3942_static.FOLLOW_TOKEN_in_vbfill3942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN774);



            // AST REWRITE
            // elements: 96, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:387:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, vbfill_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);
        int vbsuspend_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal775=null;
        Token TOKEN776=null;

        Object string_literal775_tree=null;
        Object TOKEN776_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:11: 'VB-SUSPEND' TOKEN
            {
            string_literal775=(Token)match(input,97,FOLLOW_97_in_vbsuspend3955_static.FOLLOW_97_in_vbsuspend3955); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal775);

            TOKEN776=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend3957_static.FOLLOW_TOKEN_in_vbsuspend3957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN776);



            // AST REWRITE
            // elements: TOKEN, 97
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 388:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:388:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, vbsuspend_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);
        int vbtreat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal777=null;
        Token TOKEN778=null;

        Object string_literal777_tree=null;
        Object TOKEN778_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:9: 'VB-TREAT' TOKEN
            {
            string_literal777=(Token)match(input,98,FOLLOW_98_in_vbtreat3970_static.FOLLOW_98_in_vbtreat3970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal777);

            TOKEN778=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat3972_static.FOLLOW_TOKEN_in_vbtreat3972); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN778);



            // AST REWRITE
            // elements: 98, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 389:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, vbtreat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);
        int vbapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal779=null;
        Token TOKEN780=null;

        Object string_literal779_tree=null;
        Object TOKEN780_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:13: 'VB-APPARATUS' TOKEN
            {
            string_literal779=(Token)match(input,99,FOLLOW_99_in_vbapparatus3987_static.FOLLOW_99_in_vbapparatus3987); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal779);

            TOKEN780=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus3989_static.FOLLOW_TOKEN_in_vbapparatus3989); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN780);



            // AST REWRITE
            // elements: 99, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 392:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, vbapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);
        int nnapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal781=null;
        Token TOKEN782=null;

        Object string_literal781_tree=null;
        Object TOKEN782_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:13: 'NN-APPARATUS' TOKEN
            {
            string_literal781=(Token)match(input,100,FOLLOW_100_in_nnapparatus4002_static.FOLLOW_100_in_nnapparatus4002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal781);

            TOKEN782=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus4004_static.FOLLOW_TOKEN_in_nnapparatus4004); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN782);



            // AST REWRITE
            // elements: TOKEN, 100
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 393:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:393:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, nnapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);
        int vbconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal783=null;
        Token TOKEN784=null;

        Object string_literal783_tree=null;
        Object TOKEN784_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal783=(Token)match(input,101,FOLLOW_101_in_vbconcentrate4019_static.FOLLOW_101_in_vbconcentrate4019); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal783);

            TOKEN784=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate4021_static.FOLLOW_TOKEN_in_vbconcentrate4021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN784);



            // AST REWRITE
            // elements: TOKEN, 101
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 396:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, vbconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);
        int nnconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal785=null;
        Token TOKEN786=null;

        Object string_literal785_tree=null;
        Object TOKEN786_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal785=(Token)match(input,102,FOLLOW_102_in_nnconcentrate4034_static.FOLLOW_102_in_nnconcentrate4034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal785);

            TOKEN786=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate4036_static.FOLLOW_TOKEN_in_nnconcentrate4036); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN786);



            // AST REWRITE
            // elements: TOKEN, 102
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, nnconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);
        int vbcool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal787=null;
        Token TOKEN788=null;

        Object string_literal787_tree=null;
        Object TOKEN788_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:8: 'VB-COOL' TOKEN
            {
            string_literal787=(Token)match(input,103,FOLLOW_103_in_vbcool4051_static.FOLLOW_103_in_vbcool4051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal787);

            TOKEN788=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool4053_static.FOLLOW_TOKEN_in_vbcool4053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN788);



            // AST REWRITE
            // elements: 103, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 400:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, vbcool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);
        int vbdegass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal789=null;
        Token TOKEN790=null;

        Object string_literal789_tree=null;
        Object TOKEN790_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:10: 'VB-DEGASS' TOKEN
            {
            string_literal789=(Token)match(input,104,FOLLOW_104_in_vbdegass4068_static.FOLLOW_104_in_vbdegass4068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal789);

            TOKEN790=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass4070_static.FOLLOW_TOKEN_in_vbdegass4070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN790);



            // AST REWRITE
            // elements: TOKEN, 104
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 403:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, vbdegass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);
        int vbdissolve_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal791=null;
        Token TOKEN792=null;

        Object string_literal791_tree=null;
        Object TOKEN792_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal791=(Token)match(input,105,FOLLOW_105_in_vbdissolve4085_static.FOLLOW_105_in_vbdissolve4085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal791);

            TOKEN792=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve4087_static.FOLLOW_TOKEN_in_vbdissolve4087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN792);



            // AST REWRITE
            // elements: TOKEN, 105
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 406:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:406:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, vbdissolve_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);
        int vbdry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal793=null;
        Token TOKEN794=null;

        Object string_literal793_tree=null;
        Object TOKEN794_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:7: 'VB-DRY' TOKEN
            {
            string_literal793=(Token)match(input,106,FOLLOW_106_in_vbdry4102_static.FOLLOW_106_in_vbdry4102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal793);

            TOKEN794=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry4104_static.FOLLOW_TOKEN_in_vbdry4104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN794);



            // AST REWRITE
            // elements: 106, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 409:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:409:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, vbdry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);
        int nndry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal795=null;
        Token TOKEN796=null;

        Object string_literal795_tree=null;
        Object TOKEN796_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:7: 'NN-DRY' TOKEN
            {
            string_literal795=(Token)match(input,107,FOLLOW_107_in_nndry4117_static.FOLLOW_107_in_nndry4117); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal795);

            TOKEN796=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry4119_static.FOLLOW_TOKEN_in_nndry4119); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN796);



            // AST REWRITE
            // elements: TOKEN, 107
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 410:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:410:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, nndry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);
        int vbextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal797=null;
        Token TOKEN798=null;

        Object string_literal797_tree=null;
        Object TOKEN798_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:11: 'VB-EXTRACT' TOKEN
            {
            string_literal797=(Token)match(input,108,FOLLOW_108_in_vbextract4134_static.FOLLOW_108_in_vbextract4134); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal797);

            TOKEN798=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract4136_static.FOLLOW_TOKEN_in_vbextract4136); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN798);



            // AST REWRITE
            // elements: TOKEN, 108
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 413:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:413:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, vbextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);
        int nnextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal799=null;
        Token TOKEN800=null;

        Object string_literal799_tree=null;
        Object TOKEN800_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:11: 'NN-EXTRACT' TOKEN
            {
            string_literal799=(Token)match(input,109,FOLLOW_109_in_nnextract4149_static.FOLLOW_109_in_nnextract4149); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal799);

            TOKEN800=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract4151_static.FOLLOW_TOKEN_in_nnextract4151); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN800);



            // AST REWRITE
            // elements: 109, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 414:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:414:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, nnextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);
        int vbfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal801=null;
        Token TOKEN802=null;

        Object string_literal801_tree=null;
        Object TOKEN802_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:10: 'VB-FILTER' TOKEN
            {
            string_literal801=(Token)match(input,110,FOLLOW_110_in_vbfilter4166_static.FOLLOW_110_in_vbfilter4166); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal801);

            TOKEN802=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter4168_static.FOLLOW_TOKEN_in_vbfilter4168); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN802);



            // AST REWRITE
            // elements: 110, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 417:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:417:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, vbfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);
        int nnfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal803=null;
        Token TOKEN804=null;

        Object string_literal803_tree=null;
        Object TOKEN804_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:10: 'NN-FILTER' TOKEN
            {
            string_literal803=(Token)match(input,111,FOLLOW_111_in_nnfilter4181_static.FOLLOW_111_in_nnfilter4181); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal803);

            TOKEN804=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter4183_static.FOLLOW_TOKEN_in_nnfilter4183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN804);



            // AST REWRITE
            // elements: 111, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 418:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, nnfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);
        int vbheat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal805=null;
        Token TOKEN806=null;

        Object string_literal805_tree=null;
        Object TOKEN806_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:8: 'VB-HEAT' TOKEN
            {
            string_literal805=(Token)match(input,112,FOLLOW_112_in_vbheat4198_static.FOLLOW_112_in_vbheat4198); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal805);

            TOKEN806=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat4200_static.FOLLOW_TOKEN_in_vbheat4200); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN806);



            // AST REWRITE
            // elements: 112, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 421:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, vbheat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);
        int vbincrease_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal807=null;
        Token TOKEN808=null;

        Object string_literal807_tree=null;
        Object TOKEN808_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:12: 'VB-INCREASE' TOKEN
            {
            string_literal807=(Token)match(input,113,FOLLOW_113_in_vbincrease4213_static.FOLLOW_113_in_vbincrease4213); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal807);

            TOKEN808=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4215_static.FOLLOW_TOKEN_in_vbincrease4215); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN808);



            // AST REWRITE
            // elements: TOKEN, 113
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 422:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:422:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, vbincrease_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);
        int vbimmerse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal809=null;
        Token TOKEN810=null;

        Object string_literal809_tree=null;
        Object TOKEN810_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:11: 'VB-IMMERSE' TOKEN
            {
            string_literal809=(Token)match(input,114,FOLLOW_114_in_vbimmerse4230_static.FOLLOW_114_in_vbimmerse4230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal809);

            TOKEN810=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4232_static.FOLLOW_TOKEN_in_vbimmerse4232); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN810);



            // AST REWRITE
            // elements: TOKEN, 114
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, vbimmerse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);
        int vbpartition_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal811=null;
        Token TOKEN812=null;

        Object string_literal811_tree=null;
        Object TOKEN812_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:13: 'VB-PARTITION' TOKEN
            {
            string_literal811=(Token)match(input,115,FOLLOW_115_in_vbpartition4247_static.FOLLOW_115_in_vbpartition4247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal811);

            TOKEN812=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4249_static.FOLLOW_TOKEN_in_vbpartition4249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN812);



            // AST REWRITE
            // elements: TOKEN, 115
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 428:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, vbpartition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);
        int vbprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal813=null;
        Token TOKEN814=null;

        Object string_literal813_tree=null;
        Object TOKEN814_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal813=(Token)match(input,116,FOLLOW_116_in_vbprecipitate4264_static.FOLLOW_116_in_vbprecipitate4264); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal813);

            TOKEN814=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4266_static.FOLLOW_TOKEN_in_vbprecipitate4266); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN814);



            // AST REWRITE
            // elements: 116, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 431:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:431:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, vbprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);
        int nnprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal815=null;
        Token TOKEN816=null;

        Object string_literal815_tree=null;
        Object TOKEN816_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal815=(Token)match(input,117,FOLLOW_117_in_nnprecipitate4279_static.FOLLOW_117_in_nnprecipitate4279); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal815);

            TOKEN816=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4281_static.FOLLOW_TOKEN_in_nnprecipitate4281); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN816);



            // AST REWRITE
            // elements: TOKEN, 117
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 432:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, nnprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);
        int vbpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal817=null;
        Token TOKEN818=null;

        Object string_literal817_tree=null;
        Object TOKEN818_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:10: 'VB-PURIFY' TOKEN
            {
            string_literal817=(Token)match(input,118,FOLLOW_118_in_vbpurify4296_static.FOLLOW_118_in_vbpurify4296); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal817);

            TOKEN818=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4298_static.FOLLOW_TOKEN_in_vbpurify4298); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN818);



            // AST REWRITE
            // elements: TOKEN, 118
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 435:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:435:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, vbpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);
        int nnpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal819=null;
        Token TOKEN820=null;

        Object string_literal819_tree=null;
        Object TOKEN820_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:10: 'NN-PURIFY' TOKEN
            {
            string_literal819=(Token)match(input,119,FOLLOW_119_in_nnpurify4311_static.FOLLOW_119_in_nnpurify4311); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal819);

            TOKEN820=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4313_static.FOLLOW_TOKEN_in_nnpurify4313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN820);



            // AST REWRITE
            // elements: 119, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, nnpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);
        int vbquench_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal821=null;
        Token TOKEN822=null;

        Object string_literal821_tree=null;
        Object TOKEN822_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:10: 'VB-QUENCH' TOKEN
            {
            string_literal821=(Token)match(input,120,FOLLOW_120_in_vbquench4328_static.FOLLOW_120_in_vbquench4328); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal821);

            TOKEN822=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4330_static.FOLLOW_TOKEN_in_vbquench4330); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN822);



            // AST REWRITE
            // elements: 120, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 439:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:439:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, vbquench_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);
        int vbrecover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal823=null;
        Token TOKEN824=null;

        Object string_literal823_tree=null;
        Object TOKEN824_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:11: 'VB-RECOVER' TOKEN
            {
            string_literal823=(Token)match(input,121,FOLLOW_121_in_vbrecover4345_static.FOLLOW_121_in_vbrecover4345); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal823);

            TOKEN824=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4347_static.FOLLOW_TOKEN_in_vbrecover4347); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN824);



            // AST REWRITE
            // elements: TOKEN, 121
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 442:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:442:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, vbrecover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);
        int vbremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal825=null;
        Token TOKEN826=null;

        Object string_literal825_tree=null;
        Object TOKEN826_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:10: 'VB-REMOVE' TOKEN
            {
            string_literal825=(Token)match(input,122,FOLLOW_122_in_vbremove4362_static.FOLLOW_122_in_vbremove4362); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal825);

            TOKEN826=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4364_static.FOLLOW_TOKEN_in_vbremove4364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN826);



            // AST REWRITE
            // elements: TOKEN, 122
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 445:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:445:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, vbremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);
        int nnremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal827=null;
        Token TOKEN828=null;

        Object string_literal827_tree=null;
        Object TOKEN828_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:10: 'NN-REMOVE' TOKEN
            {
            string_literal827=(Token)match(input,123,FOLLOW_123_in_nnremove4377_static.FOLLOW_123_in_nnremove4377); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal827);

            TOKEN828=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4379_static.FOLLOW_TOKEN_in_nnremove4379); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN828);



            // AST REWRITE
            // elements: 123, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, nnremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);
        int vbstir_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal829=null;
        Token TOKEN830=null;

        Object string_literal829_tree=null;
        Object TOKEN830_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:8: 'VB-STIR' TOKEN
            {
            string_literal829=(Token)match(input,124,FOLLOW_124_in_vbstir4394_static.FOLLOW_124_in_vbstir4394); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal829);

            TOKEN830=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4396_static.FOLLOW_TOKEN_in_vbstir4396); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN830);



            // AST REWRITE
            // elements: 124, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:449:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, vbstir_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);
        int vbsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal831=null;
        Token TOKEN832=null;

        Object string_literal831_tree=null;
        Object TOKEN832_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal831=(Token)match(input,125,FOLLOW_125_in_vbsynthesize4411_static.FOLLOW_125_in_vbsynthesize4411); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal831);

            TOKEN832=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4413_static.FOLLOW_TOKEN_in_vbsynthesize4413); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN832);



            // AST REWRITE
            // elements: TOKEN, 125
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 452:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:452:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, vbsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);
        int nnsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal833=null;
        Token TOKEN834=null;

        Object string_literal833_tree=null;
        Object TOKEN834_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal833=(Token)match(input,126,FOLLOW_126_in_nnsynthesize4426_static.FOLLOW_126_in_nnsynthesize4426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal833);

            TOKEN834=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4428_static.FOLLOW_TOKEN_in_nnsynthesize4428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN834);



            // AST REWRITE
            // elements: 126, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 453:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:453:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, nnsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);
        int vbwait_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal835=null;
        Token TOKEN836=null;

        Object string_literal835_tree=null;
        Object TOKEN836_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:8: 'VB-WAIT' TOKEN
            {
            string_literal835=(Token)match(input,127,FOLLOW_127_in_vbwait4443_static.FOLLOW_127_in_vbwait4443); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal835);

            TOKEN836=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4445_static.FOLLOW_TOKEN_in_vbwait4445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN836);



            // AST REWRITE
            // elements: 127, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 456:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:456:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, vbwait_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);
        int vbwash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal837=null;
        Token TOKEN838=null;

        Object string_literal837_tree=null;
        Object TOKEN838_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:8: 'VB-WASH' TOKEN
            {
            string_literal837=(Token)match(input,128,FOLLOW_128_in_vbwash4460_static.FOLLOW_128_in_vbwash4460); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal837);

            TOKEN838=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4462_static.FOLLOW_TOKEN_in_vbwash4462); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN838);



            // AST REWRITE
            // elements: TOKEN, 128
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 459:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:459:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, vbwash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);
        int vbyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal839=null;
        Token TOKEN840=null;

        Object string_literal839_tree=null;
        Object TOKEN840_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:9: 'VB-YIELD' TOKEN
            {
            string_literal839=(Token)match(input,129,FOLLOW_129_in_vbyield4477_static.FOLLOW_129_in_vbyield4477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal839);

            TOKEN840=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4479_static.FOLLOW_TOKEN_in_vbyield4479); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN840);



            // AST REWRITE
            // elements: TOKEN, 129
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 462:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:462:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, vbyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);
        int nnyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal841=null;
        Token TOKEN842=null;

        Object string_literal841_tree=null;
        Object TOKEN842_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:9: 'NN-YIELD' TOKEN
            {
            string_literal841=(Token)match(input,130,FOLLOW_130_in_nnyield4494_static.FOLLOW_130_in_nnyield4494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal841);

            TOKEN842=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4496_static.FOLLOW_TOKEN_in_nnyield4496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN842);



            // AST REWRITE
            // elements: 130, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:465:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, nnyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);
        int rbconj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal843=null;
        Token TOKEN844=null;

        Object string_literal843_tree=null;
        Object TOKEN844_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:8: 'RB-CONJ' TOKEN
            {
            string_literal843=(Token)match(input,131,FOLLOW_131_in_rbconj4512_static.FOLLOW_131_in_rbconj4512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal843);

            TOKEN844=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4514_static.FOLLOW_TOKEN_in_rbconj4514); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN844);



            // AST REWRITE
            // elements: TOKEN, 131
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:469:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, rbconj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal845=null;
        Token TOKEN846=null;

        Object string_literal845_tree=null;
        Object TOKEN846_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:7: 'COLON' TOKEN
            {
            string_literal845=(Token)match(input,132,FOLLOW_132_in_colon4527_static.FOLLOW_132_in_colon4527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal845);

            TOKEN846=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4529_static.FOLLOW_TOKEN_in_colon4529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN846);



            // AST REWRITE
            // elements: 132, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 470:21: -> ^( 'COLON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:470:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal847=null;
        Token TOKEN848=null;

        Object string_literal847_tree=null;
        Object TOKEN848_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:7: 'COMMA' TOKEN
            {
            string_literal847=(Token)match(input,133,FOLLOW_133_in_comma4542_static.FOLLOW_133_in_comma4542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal847);

            TOKEN848=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4544_static.FOLLOW_TOKEN_in_comma4544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN848);



            // AST REWRITE
            // elements: 133, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 471:21: -> ^( 'COMMA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);
        int apost_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal849=null;
        Token TOKEN850=null;

        Object string_literal849_tree=null;
        Object TOKEN850_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:7: 'APOST' TOKEN
            {
            string_literal849=(Token)match(input,134,FOLLOW_134_in_apost4557_static.FOLLOW_134_in_apost4557); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal849);

            TOKEN850=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4559_static.FOLLOW_TOKEN_in_apost4559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN850);



            // AST REWRITE
            // elements: TOKEN, 134
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 472:21: -> ^( 'APOST' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:472:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, apost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);
        int neg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal851=null;
        Token TOKEN852=null;

        Object string_literal851_tree=null;
        Object TOKEN852_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:5: 'NEG' TOKEN
            {
            string_literal851=(Token)match(input,135,FOLLOW_135_in_neg4572_static.FOLLOW_135_in_neg4572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal851);

            TOKEN852=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4574_static.FOLLOW_TOKEN_in_neg4574); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN852);



            // AST REWRITE
            // elements: 135, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:17: -> ^( 'NEG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:473:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, neg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);
        int dash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal853=null;
        Token TOKEN854=null;

        Object string_literal853_tree=null;
        Object TOKEN854_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:6: 'DASH' TOKEN
            {
            string_literal853=(Token)match(input,136,FOLLOW_136_in_dash4587_static.FOLLOW_136_in_dash4587); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal853);

            TOKEN854=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash4589_static.FOLLOW_TOKEN_in_dash4589); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN854);



            // AST REWRITE
            // elements: TOKEN, 136
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 474:19: -> ^( 'DASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, dash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);
        int stop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal855=null;
        Token TOKEN856=null;

        Object string_literal855_tree=null;
        Object TOKEN856_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:6: 'STOP' TOKEN
            {
            string_literal855=(Token)match(input,137,FOLLOW_137_in_stop4602_static.FOLLOW_137_in_stop4602); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal855);

            TOKEN856=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop4604_static.FOLLOW_TOKEN_in_stop4604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN856);



            // AST REWRITE
            // elements: 137, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 475:19: -> ^( 'STOP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:475:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, stop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:1: nnpercent : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);
        int nnpercent_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal857=null;
        Token TOKEN858=null;

        Object string_literal857_tree=null;
        Object TOKEN858_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:10: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:11: 'NN-PERCENT' TOKEN
            {
            string_literal857=(Token)match(input,138,FOLLOW_138_in_nnpercent4617_static.FOLLOW_138_in_nnpercent4617); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal857);

            TOKEN858=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent4619_static.FOLLOW_TOKEN_in_nnpercent4619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN858);



            // AST REWRITE
            // elements: TOKEN, 138
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:30: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:476:33: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, nnpercent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);
        int lsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal859=null;
        Token TOKEN860=null;

        Object string_literal859_tree=null;
        Object TOKEN860_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:6: 'LSQB' TOKEN
            {
            string_literal859=(Token)match(input,139,FOLLOW_139_in_lsqb4632_static.FOLLOW_139_in_lsqb4632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal859);

            TOKEN860=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb4634_static.FOLLOW_TOKEN_in_lsqb4634); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN860);



            // AST REWRITE
            // elements: TOKEN, 139
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 477:19: -> ^( 'LSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, lsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);
        int rsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal861=null;
        Token TOKEN862=null;

        Object string_literal861_tree=null;
        Object TOKEN862_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:6: 'RSQB' TOKEN
            {
            string_literal861=(Token)match(input,140,FOLLOW_140_in_rsqb4647_static.FOLLOW_140_in_rsqb4647); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal861);

            TOKEN862=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb4649_static.FOLLOW_TOKEN_in_rsqb4649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN862);



            // AST REWRITE
            // elements: 140, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 478:19: -> ^( 'RSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:478:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, rsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class nnidentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnidentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:1: nnidentifier : 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) ;
    public final ChemicalChunkerParser.nnidentifier_return nnidentifier() throws RecognitionException {
        ChemicalChunkerParser.nnidentifier_return retval = new ChemicalChunkerParser.nnidentifier_return();
        retval.start = input.LT(1);
        int nnidentifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal863=null;
        Token TOKEN864=null;

        Object string_literal863_tree=null;
        Object TOKEN864_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:13: ( 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:14: 'NN-IDENTIFIER' TOKEN
            {
            string_literal863=(Token)match(input,141,FOLLOW_141_in_nnidentifier4663_static.FOLLOW_141_in_nnidentifier4663); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal863);

            TOKEN864=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnidentifier4665_static.FOLLOW_TOKEN_in_nnidentifier4665); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN864);



            // AST REWRITE
            // elements: 141, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 480:36: -> ^( 'NN-IDENTIFIER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:39: ^( 'NN-IDENTIFIER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, nnidentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnidentifier"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);
        int dtTHE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal865=null;
        Token TOKEN866=null;

        Object string_literal865_tree=null;
        Object TOKEN866_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:7: 'DT-THE' TOKEN
            {
            string_literal865=(Token)match(input,142,FOLLOW_142_in_dtTHE4680_static.FOLLOW_142_in_dtTHE4680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal865);

            TOKEN866=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE4682_static.FOLLOW_TOKEN_in_dtTHE4682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN866);



            // AST REWRITE
            // elements: 142, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 483:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:483:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, dtTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);
        int lrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal867=null;
        Token TOKEN868=null;

        Object string_literal867_tree=null;
        Object TOKEN868_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:5: '-LRB-' TOKEN
            {
            string_literal867=(Token)match(input,143,FOLLOW_143_in_lrb4696_static.FOLLOW_143_in_lrb4696); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal867);

            TOKEN868=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb4698_static.FOLLOW_TOKEN_in_lrb4698); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN868);



            // AST REWRITE
            // elements: TOKEN, 143
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 485:19: -> ^( '-LRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, lrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);
        int rrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal869=null;
        Token TOKEN870=null;

        Object string_literal869_tree=null;
        Object TOKEN870_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:5: '-RRB-' TOKEN
            {
            string_literal869=(Token)match(input,144,FOLLOW_144_in_rrb4711_static.FOLLOW_144_in_rrb4711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal869);

            TOKEN870=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb4713_static.FOLLOW_TOKEN_in_rrb4713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN870);



            // AST REWRITE
            // elements: 144, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 486:19: -> ^( '-RRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, rrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);
        int cc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal871=null;
        Token TOKEN872=null;

        Object string_literal871_tree=null;
        Object TOKEN872_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:4: 'CC' TOKEN
            {
            string_literal871=(Token)match(input,145,FOLLOW_145_in_cc4730_static.FOLLOW_145_in_cc4730); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal871);

            TOKEN872=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc4732_static.FOLLOW_TOKEN_in_cc4732); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN872);



            // AST REWRITE
            // elements: TOKEN, 145
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 491:15: -> ^( 'CC' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, cc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);
        int cd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal873=null;
        Token TOKEN874=null;

        Object string_literal873_tree=null;
        Object TOKEN874_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:4: 'CD' TOKEN
            {
            string_literal873=(Token)match(input,146,FOLLOW_146_in_cd4747_static.FOLLOW_146_in_cd4747); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal873);

            TOKEN874=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd4749_static.FOLLOW_TOKEN_in_cd4749); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN874);



            // AST REWRITE
            // elements: TOKEN, 146
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 494:15: -> ^( 'CD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:494:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, cd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);
        int dt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal875=null;
        Token TOKEN876=null;

        Object string_literal875_tree=null;
        Object TOKEN876_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:4: 'DT' TOKEN
            {
            string_literal875=(Token)match(input,147,FOLLOW_147_in_dt4764_static.FOLLOW_147_in_dt4764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal875);

            TOKEN876=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt4766_static.FOLLOW_TOKEN_in_dt4766); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN876);



            // AST REWRITE
            // elements: 147, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 497:15: -> ^( 'DT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:497:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, dt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);
        int ex_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal877=null;
        Token TOKEN878=null;

        Object string_literal877_tree=null;
        Object TOKEN878_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:4: 'EX' TOKEN
            {
            string_literal877=(Token)match(input,148,FOLLOW_148_in_ex4781_static.FOLLOW_148_in_ex4781); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal877);

            TOKEN878=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex4783_static.FOLLOW_TOKEN_in_ex4783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN878);



            // AST REWRITE
            // elements: 148, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 500:15: -> ^( 'EX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, ex_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:503:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);
        int fw_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal879=null;
        Token TOKEN880=null;

        Object string_literal879_tree=null;
        Object TOKEN880_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:503:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:503:4: 'FW' TOKEN
            {
            string_literal879=(Token)match(input,149,FOLLOW_149_in_fw4798_static.FOLLOW_149_in_fw4798); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal879);

            TOKEN880=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw4800_static.FOLLOW_TOKEN_in_fw4800); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN880);



            // AST REWRITE
            // elements: TOKEN, 149
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 503:15: -> ^( 'FW' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:503:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, fw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);
        int in_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal881=null;
        Token TOKEN882=null;

        Object string_literal881_tree=null;
        Object TOKEN882_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:4: 'IN' TOKEN
            {
            string_literal881=(Token)match(input,150,FOLLOW_150_in_in4815_static.FOLLOW_150_in_in4815); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal881);

            TOKEN882=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in4817_static.FOLLOW_TOKEN_in_in4817); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN882);



            // AST REWRITE
            // elements: 150, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 506:15: -> ^( 'IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);
        int jj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal883=null;
        Token TOKEN884=null;

        Object string_literal883_tree=null;
        Object TOKEN884_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:4: 'JJ' TOKEN
            {
            string_literal883=(Token)match(input,151,FOLLOW_151_in_jj4832_static.FOLLOW_151_in_jj4832); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal883);

            TOKEN884=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj4834_static.FOLLOW_TOKEN_in_jj4834); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN884);



            // AST REWRITE
            // elements: TOKEN, 151
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 509:15: -> ^( 'JJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, jj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);
        int jjr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal885=null;
        Token TOKEN886=null;

        Object string_literal885_tree=null;
        Object TOKEN886_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:5: 'JJR' TOKEN
            {
            string_literal885=(Token)match(input,152,FOLLOW_152_in_jjr4849_static.FOLLOW_152_in_jjr4849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal885);

            TOKEN886=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr4851_static.FOLLOW_TOKEN_in_jjr4851); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN886);



            // AST REWRITE
            // elements: TOKEN, 152
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 512:17: -> ^( 'JJR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, jjr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);
        int jjs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal887=null;
        Token TOKEN888=null;

        Object string_literal887_tree=null;
        Object TOKEN888_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:5: 'JJS' TOKEN
            {
            string_literal887=(Token)match(input,153,FOLLOW_153_in_jjs4866_static.FOLLOW_153_in_jjs4866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal887);

            TOKEN888=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs4868_static.FOLLOW_TOKEN_in_jjs4868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN888);



            // AST REWRITE
            // elements: TOKEN, 153
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 515:17: -> ^( 'JJS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, jjs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class ls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ls"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:1: ls : 'LS' TOKEN -> ^( 'LS' TOKEN ) ;
    public final ChemicalChunkerParser.ls_return ls() throws RecognitionException {
        ChemicalChunkerParser.ls_return retval = new ChemicalChunkerParser.ls_return();
        retval.start = input.LT(1);
        int ls_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal889=null;
        Token TOKEN890=null;

        Object string_literal889_tree=null;
        Object TOKEN890_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:3: ( 'LS' TOKEN -> ^( 'LS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:4: 'LS' TOKEN
            {
            string_literal889=(Token)match(input,154,FOLLOW_154_in_ls4883_static.FOLLOW_154_in_ls4883); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal889);

            TOKEN890=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ls4885_static.FOLLOW_TOKEN_in_ls4885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN890);



            // AST REWRITE
            // elements: 154, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 518:15: -> ^( 'LS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:18: ^( 'LS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, ls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ls"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);
        int md_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal891=null;
        Token TOKEN892=null;

        Object string_literal891_tree=null;
        Object TOKEN892_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:4: 'MD' TOKEN
            {
            string_literal891=(Token)match(input,155,FOLLOW_155_in_md4900_static.FOLLOW_155_in_md4900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal891);

            TOKEN892=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md4902_static.FOLLOW_TOKEN_in_md4902); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN892);



            // AST REWRITE
            // elements: 155, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 521:15: -> ^( 'MD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, md_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);
        int nn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal893=null;
        Token TOKEN894=null;

        Object string_literal893_tree=null;
        Object TOKEN894_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:4: 'NN' TOKEN
            {
            string_literal893=(Token)match(input,156,FOLLOW_156_in_nn4917_static.FOLLOW_156_in_nn4917); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal893);

            TOKEN894=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn4919_static.FOLLOW_TOKEN_in_nn4919); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN894);



            // AST REWRITE
            // elements: TOKEN, 156
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:15: -> ^( 'NN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, nn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:527:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);
        int nns_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal895=null;
        Token TOKEN896=null;

        Object string_literal895_tree=null;
        Object TOKEN896_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:527:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:527:5: 'NNS' TOKEN
            {
            string_literal895=(Token)match(input,157,FOLLOW_157_in_nns4934_static.FOLLOW_157_in_nns4934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal895);

            TOKEN896=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns4936_static.FOLLOW_TOKEN_in_nns4936); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN896);



            // AST REWRITE
            // elements: 157, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 527:17: -> ^( 'NNS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:527:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, nns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);
        int nnp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal897=null;
        Token TOKEN898=null;

        Object string_literal897_tree=null;
        Object TOKEN898_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:5: 'NNP' TOKEN
            {
            string_literal897=(Token)match(input,158,FOLLOW_158_in_nnp4951_static.FOLLOW_158_in_nnp4951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal897);

            TOKEN898=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp4953_static.FOLLOW_TOKEN_in_nnp4953); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN898);



            // AST REWRITE
            // elements: 158, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 530:17: -> ^( 'NNP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, nnp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class nnps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:1: nnps : 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) ;
    public final ChemicalChunkerParser.nnps_return nnps() throws RecognitionException {
        ChemicalChunkerParser.nnps_return retval = new ChemicalChunkerParser.nnps_return();
        retval.start = input.LT(1);
        int nnps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal899=null;
        Token TOKEN900=null;

        Object string_literal899_tree=null;
        Object TOKEN900_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:5: ( 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:6: 'NNPS' TOKEN
            {
            string_literal899=(Token)match(input,159,FOLLOW_159_in_nnps4968_static.FOLLOW_159_in_nnps4968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal899);

            TOKEN900=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnps4970_static.FOLLOW_TOKEN_in_nnps4970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN900);



            // AST REWRITE
            // elements: 159, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 533:19: -> ^( 'NNPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:22: ^( 'NNPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, nnps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnps"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);
        int pdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal901=null;
        Token TOKEN902=null;

        Object string_literal901_tree=null;
        Object TOKEN902_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:5: 'PDT' TOKEN
            {
            string_literal901=(Token)match(input,160,FOLLOW_160_in_pdt4985_static.FOLLOW_160_in_pdt4985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal901);

            TOKEN902=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt4987_static.FOLLOW_TOKEN_in_pdt4987); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN902);



            // AST REWRITE
            // elements: TOKEN, 160
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 536:17: -> ^( 'PDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, pdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pdt"

    public static class pos_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pos"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:1: pos : 'POS' TOKEN -> ^( 'POS' TOKEN ) ;
    public final ChemicalChunkerParser.pos_return pos() throws RecognitionException {
        ChemicalChunkerParser.pos_return retval = new ChemicalChunkerParser.pos_return();
        retval.start = input.LT(1);
        int pos_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal903=null;
        Token TOKEN904=null;

        Object string_literal903_tree=null;
        Object TOKEN904_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:4: ( 'POS' TOKEN -> ^( 'POS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:5: 'POS' TOKEN
            {
            string_literal903=(Token)match(input,161,FOLLOW_161_in_pos5002_static.FOLLOW_161_in_pos5002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal903);

            TOKEN904=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pos5004_static.FOLLOW_TOKEN_in_pos5004); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN904);



            // AST REWRITE
            // elements: 161, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 539:17: -> ^( 'POS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:20: ^( 'POS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, pos_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pos"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:542:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);
        int prp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal905=null;
        Token TOKEN906=null;

        Object string_literal905_tree=null;
        Object TOKEN906_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:542:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:542:5: 'PRP' TOKEN
            {
            string_literal905=(Token)match(input,162,FOLLOW_162_in_prp5019_static.FOLLOW_162_in_prp5019); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal905);

            TOKEN906=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp5021_static.FOLLOW_TOKEN_in_prp5021); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN906);



            // AST REWRITE
            // elements: TOKEN, 162
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 542:17: -> ^( 'PRP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:542:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, prp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:545:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);
        int prp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal907=null;
        Token TOKEN908=null;

        Object string_literal907_tree=null;
        Object TOKEN908_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:545:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:545:10: 'PRP$' TOKEN
            {
            string_literal907=(Token)match(input,163,FOLLOW_163_in_prp_poss5036_static.FOLLOW_163_in_prp_poss5036); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal907);

            TOKEN908=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss5038_static.FOLLOW_TOKEN_in_prp_poss5038); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN908);



            // AST REWRITE
            // elements: TOKEN, 163
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 545:23: -> ^( 'PRP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:545:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, prp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);
        int rb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal909=null;
        Token TOKEN910=null;

        Object string_literal909_tree=null;
        Object TOKEN910_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:4: 'RB' TOKEN
            {
            string_literal909=(Token)match(input,164,FOLLOW_164_in_rb5053_static.FOLLOW_164_in_rb5053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal909);

            TOKEN910=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb5055_static.FOLLOW_TOKEN_in_rb5055); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN910);



            // AST REWRITE
            // elements: TOKEN, 164
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 548:15: -> ^( 'RB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, rb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);
        int rbr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal911=null;
        Token TOKEN912=null;

        Object string_literal911_tree=null;
        Object TOKEN912_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:5: 'RBR' TOKEN
            {
            string_literal911=(Token)match(input,165,FOLLOW_165_in_rbr5070_static.FOLLOW_165_in_rbr5070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal911);

            TOKEN912=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr5072_static.FOLLOW_TOKEN_in_rbr5072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN912);



            // AST REWRITE
            // elements: TOKEN, 165
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 551:17: -> ^( 'RBR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, rbr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);
        int rbs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal913=null;
        Token TOKEN914=null;

        Object string_literal913_tree=null;
        Object TOKEN914_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:5: 'RBS' TOKEN
            {
            string_literal913=(Token)match(input,166,FOLLOW_166_in_rbs5087_static.FOLLOW_166_in_rbs5087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal913);

            TOKEN914=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs5089_static.FOLLOW_TOKEN_in_rbs5089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN914);



            // AST REWRITE
            // elements: 166, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 554:17: -> ^( 'RBS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, rbs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);
        int rp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal915=null;
        Token TOKEN916=null;

        Object string_literal915_tree=null;
        Object TOKEN916_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:4: 'RP' TOKEN
            {
            string_literal915=(Token)match(input,167,FOLLOW_167_in_rp5104_static.FOLLOW_167_in_rp5104); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal915);

            TOKEN916=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp5106_static.FOLLOW_TOKEN_in_rp5106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN916);



            // AST REWRITE
            // elements: 167, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 557:15: -> ^( 'RP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, rp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);
        int sym_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal917=null;
        Token TOKEN918=null;

        Object string_literal917_tree=null;
        Object TOKEN918_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:5: 'SYM' TOKEN
            {
            string_literal917=(Token)match(input,168,FOLLOW_168_in_sym5121_static.FOLLOW_168_in_sym5121); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal917);

            TOKEN918=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym5123_static.FOLLOW_TOKEN_in_sym5123); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN918);



            // AST REWRITE
            // elements: 168, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 560:17: -> ^( 'SYM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, sym_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:563:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);
        int to_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal919=null;
        Token TOKEN920=null;

        Object string_literal919_tree=null;
        Object TOKEN920_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:563:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:563:4: 'TO' TOKEN
            {
            string_literal919=(Token)match(input,169,FOLLOW_169_in_to5138_static.FOLLOW_169_in_to5138); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal919);

            TOKEN920=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to5140_static.FOLLOW_TOKEN_in_to5140); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN920);



            // AST REWRITE
            // elements: 169, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 563:15: -> ^( 'TO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:563:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, to_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:566:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);
        int uh_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal921=null;
        Token TOKEN922=null;

        Object string_literal921_tree=null;
        Object TOKEN922_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:566:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:566:4: 'UH' TOKEN
            {
            string_literal921=(Token)match(input,170,FOLLOW_170_in_uh5155_static.FOLLOW_170_in_uh5155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal921);

            TOKEN922=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh5157_static.FOLLOW_TOKEN_in_uh5157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN922);



            // AST REWRITE
            // elements: 170, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 566:15: -> ^( 'UH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:566:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, uh_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:569:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);
        int vb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal923=null;
        Token TOKEN924=null;

        Object string_literal923_tree=null;
        Object TOKEN924_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:569:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:569:4: 'VB' TOKEN
            {
            string_literal923=(Token)match(input,171,FOLLOW_171_in_vb5172_static.FOLLOW_171_in_vb5172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal923);

            TOKEN924=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb5174_static.FOLLOW_TOKEN_in_vb5174); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN924);



            // AST REWRITE
            // elements: TOKEN, 171
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 569:15: -> ^( 'VB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:569:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, vb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:572:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);
        int vbd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal925=null;
        Token TOKEN926=null;

        Object string_literal925_tree=null;
        Object TOKEN926_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:572:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:572:5: 'VBD' TOKEN
            {
            string_literal925=(Token)match(input,172,FOLLOW_172_in_vbd5189_static.FOLLOW_172_in_vbd5189); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal925);

            TOKEN926=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd5191_static.FOLLOW_TOKEN_in_vbd5191); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN926);



            // AST REWRITE
            // elements: TOKEN, 172
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 572:17: -> ^( 'VBD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:572:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, vbd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:575:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);
        int vbg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal927=null;
        Token TOKEN928=null;

        Object string_literal927_tree=null;
        Object TOKEN928_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:575:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:575:5: 'VBG' TOKEN
            {
            string_literal927=(Token)match(input,173,FOLLOW_173_in_vbg5206_static.FOLLOW_173_in_vbg5206); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal927);

            TOKEN928=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg5208_static.FOLLOW_TOKEN_in_vbg5208); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN928);



            // AST REWRITE
            // elements: TOKEN, 173
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 575:17: -> ^( 'VBG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:575:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, vbg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:578:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);
        int vbn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal929=null;
        Token TOKEN930=null;

        Object string_literal929_tree=null;
        Object TOKEN930_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:578:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:578:5: 'VBN' TOKEN
            {
            string_literal929=(Token)match(input,174,FOLLOW_174_in_vbn5223_static.FOLLOW_174_in_vbn5223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal929);

            TOKEN930=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5225_static.FOLLOW_TOKEN_in_vbn5225); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN930);



            // AST REWRITE
            // elements: 174, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 578:17: -> ^( 'VBN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:578:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, vbn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);
        int vbp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal931=null;
        Token TOKEN932=null;

        Object string_literal931_tree=null;
        Object TOKEN932_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:5: 'VBP' TOKEN
            {
            string_literal931=(Token)match(input,175,FOLLOW_175_in_vbp5240_static.FOLLOW_175_in_vbp5240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal931);

            TOKEN932=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5242_static.FOLLOW_TOKEN_in_vbp5242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN932);



            // AST REWRITE
            // elements: 175, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 581:17: -> ^( 'VBP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_175.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, vbp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);
        int vbz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal933=null;
        Token TOKEN934=null;

        Object string_literal933_tree=null;
        Object TOKEN934_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:5: 'VBZ' TOKEN
            {
            string_literal933=(Token)match(input,176,FOLLOW_176_in_vbz5257_static.FOLLOW_176_in_vbz5257); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal933);

            TOKEN934=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz5259_static.FOLLOW_TOKEN_in_vbz5259); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN934);



            // AST REWRITE
            // elements: 176, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 584:17: -> ^( 'VBZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_176.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, vbz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);
        int wdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal935=null;
        Token TOKEN936=null;

        Object string_literal935_tree=null;
        Object TOKEN936_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:5: 'WDT' TOKEN
            {
            string_literal935=(Token)match(input,177,FOLLOW_177_in_wdt5274_static.FOLLOW_177_in_wdt5274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal935);

            TOKEN936=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt5276_static.FOLLOW_TOKEN_in_wdt5276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN936);



            // AST REWRITE
            // elements: TOKEN, 177
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 587:17: -> ^( 'WDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_177.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, wdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:1: wp : 'WP' TOKEN -> ^( 'WP' TOKEN ) ;
    public final ChemicalChunkerParser.wp_return wp() throws RecognitionException {
        ChemicalChunkerParser.wp_return retval = new ChemicalChunkerParser.wp_return();
        retval.start = input.LT(1);
        int wp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal937=null;
        Token TOKEN938=null;

        Object string_literal937_tree=null;
        Object TOKEN938_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:3: ( 'WP' TOKEN -> ^( 'WP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:4: 'WP' TOKEN
            {
            string_literal937=(Token)match(input,178,FOLLOW_178_in_wp5291_static.FOLLOW_178_in_wp5291); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal937);

            TOKEN938=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp5293_static.FOLLOW_TOKEN_in_wp5293); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN938);



            // AST REWRITE
            // elements: 178, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 590:15: -> ^( 'WP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:18: ^( 'WP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_178.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, wp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);
        int wp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal939=null;
        Token TOKEN940=null;

        Object string_literal939_tree=null;
        Object TOKEN940_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:9: 'WP$' TOKEN
            {
            string_literal939=(Token)match(input,179,FOLLOW_179_in_wp_poss5308_static.FOLLOW_179_in_wp_poss5308); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal939);

            TOKEN940=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss5310_static.FOLLOW_TOKEN_in_wp_poss5310); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN940);



            // AST REWRITE
            // elements: TOKEN, 179
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 593:21: -> ^( 'WP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_179.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, wp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:596:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);
        int wrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal941=null;
        Token TOKEN942=null;

        Object string_literal941_tree=null;
        Object TOKEN942_tree=null;
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:596:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:596:5: 'WRB' TOKEN
            {
            string_literal941=(Token)match(input,180,FOLLOW_180_in_wrb5325_static.FOLLOW_180_in_wrb5325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(string_literal941);

            TOKEN942=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb5327_static.FOLLOW_TOKEN_in_wrb5327); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN942);



            // AST REWRITE
            // elements: 180, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 596:17: -> ^( 'WRB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:596:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_180.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, wrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:14: ( sentenceStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:14: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker223_static.FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker223);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:32: ( unmatchedPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:32: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker225_static.FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker225);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred5_ChemicalChunker
    public final void synpred5_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:22: ( nounphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred5_ChemicalChunker239_static.FOLLOW_nounphrase_in_synpred5_ChemicalChunker239);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:33: ( verbphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred6_ChemicalChunker241_static.FOLLOW_verbphrase_in_synpred6_ChemicalChunker241);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:44: ( prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred7_ChemicalChunker243_static.FOLLOW_prepphrase_in_synpred7_ChemicalChunker243);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:55: ( prepphraseAfter )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker245_static.FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker245);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:74: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred9_ChemicalChunker250_static.FOLLOW_advAdj_in_synpred9_ChemicalChunker250);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:81: ( colon )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred10_ChemicalChunker252_static.FOLLOW_colon_in_synpred10_ChemicalChunker252);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:90: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:90: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred11_ChemicalChunker257_static.FOLLOW_conjunction_in_synpred11_ChemicalChunker257);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:102: ( rbconj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:102: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred12_ChemicalChunker259_static.FOLLOW_rbconj_in_synpred12_ChemicalChunker259);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:109: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred13_ChemicalChunker261_static.FOLLOW_comma_in_synpred13_ChemicalChunker261);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred84_ChemicalChunker
    public final void synpred84_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:4: ( nounphraseStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred84_ChemicalChunker467_static.FOLLOW_nounphraseStructure1_in_synpred84_ChemicalChunker467);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_ChemicalChunker

    // $ANTLR start synpred86_ChemicalChunker
    public final void synpred86_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:11: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred86_ChemicalChunker498_static.FOLLOW_dt_in_synpred86_ChemicalChunker498);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred86_ChemicalChunker

    // $ANTLR start synpred87_ChemicalChunker
    public final void synpred87_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:15: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:15: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred87_ChemicalChunker501_static.FOLLOW_advAdj_in_synpred87_ChemicalChunker501);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_ChemicalChunker

    // $ANTLR start synpred88_ChemicalChunker
    public final void synpred88_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:25: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:25: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred88_ChemicalChunker506_static.FOLLOW_dissolvePhrase_in_synpred88_ChemicalChunker506);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred88_ChemicalChunker

    // $ANTLR start synpred89_ChemicalChunker
    public final void synpred89_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:40: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:40: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred89_ChemicalChunker508_static.FOLLOW_ratio_in_synpred89_ChemicalChunker508);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_ChemicalChunker

    // $ANTLR start synpred90_ChemicalChunker
    public final void synpred90_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:46: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:46: noun
        {
        pushFollow(FOLLOW_noun_in_synpred90_ChemicalChunker510_static.FOLLOW_noun_in_synpred90_ChemicalChunker510);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_ChemicalChunker

    // $ANTLR start synpred91_ChemicalChunker
    public final void synpred91_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:51: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:51: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred91_ChemicalChunker512_static.FOLLOW_numeric_in_synpred91_ChemicalChunker512);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred91_ChemicalChunker

    // $ANTLR start synpred92_ChemicalChunker
    public final void synpred92_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:65: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:65: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred92_ChemicalChunker520_static.FOLLOW_conjunction_in_synpred92_ChemicalChunker520);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_ChemicalChunker

    // $ANTLR start synpred93_ChemicalChunker
    public final void synpred93_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:78: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:78: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred93_ChemicalChunker523_static.FOLLOW_advAdj_in_synpred93_ChemicalChunker523);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred93_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:87: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:87: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred94_ChemicalChunker527_static.FOLLOW_dissolvePhrase_in_synpred94_ChemicalChunker527);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:102: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:102: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred95_ChemicalChunker529_static.FOLLOW_ratio_in_synpred95_ChemicalChunker529);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred96_ChemicalChunker
    public final void synpred96_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:108: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:108: noun
        {
        pushFollow(FOLLOW_noun_in_synpred96_ChemicalChunker531_static.FOLLOW_noun_in_synpred96_ChemicalChunker531);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred96_ChemicalChunker

    // $ANTLR start synpred97_ChemicalChunker
    public final void synpred97_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:65: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:65: ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:65: ( conjunction )*
        loop182:
        do {
            int alt182=2;
            alt182 = dfa182.predict(input);
            switch (alt182) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred97_ChemicalChunker520_static.FOLLOW_conjunction_in_synpred97_ChemicalChunker520);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop182;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:78: ( advAdj )*
        loop183:
        do {
            int alt183=2;
            alt183 = dfa183.predict(input);
            switch (alt183) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
        	    {
        	    pushFollow(FOLLOW_advAdj_in_synpred97_ChemicalChunker523_static.FOLLOW_advAdj_in_synpred97_ChemicalChunker523);
        	    advAdj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop183;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:86: ( dissolvePhrase | ratio | noun | numeric )
        int alt184=4;
        alt184 = dfa184.predict(input);
        switch (alt184) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:87: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred97_ChemicalChunker527_static.FOLLOW_dissolvePhrase_in_synpred97_ChemicalChunker527);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:102: ratio
                {
                pushFollow(FOLLOW_ratio_in_synpred97_ChemicalChunker529_static.FOLLOW_ratio_in_synpred97_ChemicalChunker529);
                ratio();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:108: noun
                {
                pushFollow(FOLLOW_noun_in_synpred97_ChemicalChunker531_static.FOLLOW_noun_in_synpred97_ChemicalChunker531);
                noun();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:113: numeric
                {
                pushFollow(FOLLOW_numeric_in_synpred97_ChemicalChunker533_static.FOLLOW_numeric_in_synpred97_ChemicalChunker533);
                numeric();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred97_ChemicalChunker

    // $ANTLR start synpred99_ChemicalChunker
    public final void synpred99_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:157: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:157: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker549_static.FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker549);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:128: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:128: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:128: ( prepphraseOf | prepphraseIN )
        int alt185=2;
        switch ( input.LA(1) ) {
        case 56:
            {
            alt185=1;
            }
            break;
        case 50:
            {
            alt185=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 185, 0, input);

            throw nvae;
        }

        switch (alt185) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:129: prepphraseOf
                {
                pushFollow(FOLLOW_prepphraseOf_in_synpred100_ChemicalChunker543_static.FOLLOW_prepphraseOf_in_synpred100_ChemicalChunker543);
                prepphraseOf();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:143: prepphraseIN
                {
                pushFollow(FOLLOW_prepphraseIN_in_synpred100_ChemicalChunker546_static.FOLLOW_prepphraseIN_in_synpred100_ChemicalChunker546);
                prepphraseIN();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:157: ( dissolvePhrase )?
        int alt186=2;
        switch ( input.LA(1) ) {
            case 38:
            case 39:
            case 40:
            case 45:
            case 46:
            case 71:
            case 73:
            case 84:
            case 133:
            case 139:
            case 141:
            case 143:
            case 146:
            case 151:
            case 152:
            case 153:
            case 158:
                {
                alt186=1;
                }
                break;
        }

        switch (alt186) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred100_ChemicalChunker549_static.FOLLOW_dissolvePhrase_in_synpred100_ChemicalChunker549);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred101_ChemicalChunker
    public final void synpred101_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:5: ( dissolveStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:5: dissolveStructure
        {
        pushFollow(FOLLOW_dissolveStructure_in_synpred101_ChemicalChunker563_static.FOLLOW_dissolveStructure_in_synpred101_ChemicalChunker563);
        dissolveStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_ChemicalChunker

    // $ANTLR start synpred102_ChemicalChunker
    public final void synpred102_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:4: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred102_ChemicalChunker594_static.FOLLOW_adj_in_synpred102_ChemicalChunker594);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_ChemicalChunker

    // $ANTLR start synpred105_ChemicalChunker
    public final void synpred105_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:33: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:33: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred105_ChemicalChunker606_static.FOLLOW_molecule_in_synpred105_ChemicalChunker606);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_ChemicalChunker

    // $ANTLR start synpred107_ChemicalChunker
    public final void synpred107_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:73: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:73: adj
        {
        pushFollow(FOLLOW_adj_in_synpred107_ChemicalChunker618_static.FOLLOW_adj_in_synpred107_ChemicalChunker618);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred107_ChemicalChunker

    // $ANTLR start synpred109_ChemicalChunker
    public final void synpred109_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:84: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:84: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred109_ChemicalChunker625_static.FOLLOW_molecule_in_synpred109_ChemicalChunker625);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_ChemicalChunker

    // $ANTLR start synpred110_ChemicalChunker
    public final void synpred110_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:111: ( conjunction molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:111: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred110_ChemicalChunker631_static.FOLLOW_conjunction_in_synpred110_ChemicalChunker631);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred110_ChemicalChunker633_static.FOLLOW_molecule_in_synpred110_ChemicalChunker633);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred110_ChemicalChunker

    // $ANTLR start synpred111_ChemicalChunker
    public final void synpred111_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:61: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:61: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
        {
        pushFollow(FOLLOW_inin_in_synpred111_ChemicalChunker613_static.FOLLOW_inin_in_synpred111_ChemicalChunker613);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:66: ( dtTHE )?
        int alt187=2;
        switch ( input.LA(1) ) {
            case 142:
                {
                alt187=1;
                }
                break;
        }

        switch (alt187) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                {
                pushFollow(FOLLOW_dtTHE_in_synpred111_ChemicalChunker615_static.FOLLOW_dtTHE_in_synpred111_ChemicalChunker615);
                dtTHE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:73: ( adj )?
        int alt188=2;
        alt188 = dfa188.predict(input);
        switch (alt188) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred111_ChemicalChunker618_static.FOLLOW_adj_in_synpred111_ChemicalChunker618);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:78: ( nnp )?
        int alt189=2;
        switch ( input.LA(1) ) {
            case 158:
                {
                alt189=1;
                }
                break;
        }

        switch (alt189) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred111_ChemicalChunker621_static.FOLLOW_nnp_in_synpred111_ChemicalChunker621);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:83: ( molecule | unnamedmolecule )
        int alt190=2;
        alt190 = dfa190.predict(input);
        switch (alt190) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:84: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred111_ChemicalChunker625_static.FOLLOW_molecule_in_synpred111_ChemicalChunker625);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:93: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred111_ChemicalChunker627_static.FOLLOW_unnamedmolecule_in_synpred111_ChemicalChunker627);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:110: ( conjunction molecule )*
        loop191:
        do {
            int alt191=2;
            switch ( input.LA(1) ) {
            case 133:
            case 145:
                {
                alt191=1;
                }
                break;

            }

            switch (alt191) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:111: conjunction molecule
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred111_ChemicalChunker631_static.FOLLOW_conjunction_in_synpred111_ChemicalChunker631);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_molecule_in_synpred111_ChemicalChunker633_static.FOLLOW_molecule_in_synpred111_ChemicalChunker633);
        	    molecule();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop191;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred111_ChemicalChunker

    // $ANTLR start synpred113_ChemicalChunker
    public final void synpred113_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:28: ( to )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:28: to
        {
        pushFollow(FOLLOW_to_in_synpred113_ChemicalChunker669_static.FOLLOW_to_in_synpred113_ChemicalChunker669);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred113_ChemicalChunker

    // $ANTLR start synpred114_ChemicalChunker
    public final void synpred114_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:32: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred114_ChemicalChunker672_static.FOLLOW_inAll_in_synpred114_ChemicalChunker672);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_ChemicalChunker

    // $ANTLR start synpred120_ChemicalChunker
    public final void synpred120_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:71: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred120_ChemicalChunker691_static.FOLLOW_verb_in_synpred120_ChemicalChunker691);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred120_ChemicalChunker

    // $ANTLR start synpred121_ChemicalChunker
    public final void synpred121_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:77: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:77: md
        {
        pushFollow(FOLLOW_md_in_synpred121_ChemicalChunker694_static.FOLLOW_md_in_synpred121_ChemicalChunker694);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_ChemicalChunker

    // $ANTLR start synpred122_ChemicalChunker
    public final void synpred122_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:81: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred122_ChemicalChunker697_static.FOLLOW_adv_in_synpred122_ChemicalChunker697);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:86: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred123_ChemicalChunker700_static.FOLLOW_adj_in_synpred123_ChemicalChunker700);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred124_ChemicalChunker
    public final void synpred124_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:91: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred124_ChemicalChunker703_static.FOLLOW_neg_in_synpred124_ChemicalChunker703);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_ChemicalChunker

    // $ANTLR start synpred125_ChemicalChunker
    public final void synpred125_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:49: ( md )*
        loop192:
        do {
            int alt192=2;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt192=1;
                }
                break;

            }

            switch (alt192) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred125_ChemicalChunker679_static.FOLLOW_md_in_synpred125_ChemicalChunker679);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop192;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:53: ( rbconj )?
        int alt193=2;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt193=1;
                }
                break;
        }

        switch (alt193) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred125_ChemicalChunker682_static.FOLLOW_rbconj_in_synpred125_ChemicalChunker682);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:61: ( adv )*
        loop194:
        do {
            int alt194=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt194=1;
                }
                break;

            }

            switch (alt194) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred125_ChemicalChunker685_static.FOLLOW_adv_in_synpred125_ChemicalChunker685);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop194;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:66: ( adj )?
        int alt195=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt195=1;
                }
                break;
        }

        switch (alt195) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred125_ChemicalChunker688_static.FOLLOW_adj_in_synpred125_ChemicalChunker688);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:71: ( verb )+
        int cnt196=0;
        loop196:
        do {
            int alt196=2;
            switch ( input.LA(1) ) {
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt196=1;
                }
                break;

            }

            switch (alt196) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred125_ChemicalChunker691_static.FOLLOW_verb_in_synpred125_ChemicalChunker691);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt196 >= 1 ) break loop196;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(196, input);
                    throw eee;
            }
            cnt196++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:77: ( md )*
        loop197:
        do {
            int alt197=2;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt197=1;
                }
                break;

            }

            switch (alt197) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred125_ChemicalChunker694_static.FOLLOW_md_in_synpred125_ChemicalChunker694);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop197;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:81: ( adv )*
        loop198:
        do {
            int alt198=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt198=1;
                }
                break;

            }

            switch (alt198) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred125_ChemicalChunker697_static.FOLLOW_adv_in_synpred125_ChemicalChunker697);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop198;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:86: ( adj )?
        int alt199=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt199=1;
                }
                break;
        }

        switch (alt199) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred125_ChemicalChunker700_static.FOLLOW_adj_in_synpred125_ChemicalChunker700);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:91: ( neg )?
        int alt200=2;
        switch ( input.LA(1) ) {
            case 135:
                {
                alt200=1;
                }
                break;
        }

        switch (alt200) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred125_ChemicalChunker703_static.FOLLOW_neg_in_synpred125_ChemicalChunker703);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred125_ChemicalChunker

    // $ANTLR start synpred126_ChemicalChunker
    public final void synpred126_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:99: ( inoff )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred126_ChemicalChunker709_static.FOLLOW_inoff_in_synpred126_ChemicalChunker709);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_ChemicalChunker

    // $ANTLR start synpred129_ChemicalChunker
    public final void synpred129_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:107: ( ( cc )? ( comma )? prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:107: ( cc )? ( comma )? prepphrase
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:107: ( cc )?
        int alt201=2;
        switch ( input.LA(1) ) {
            case 145:
                {
                alt201=1;
                }
                break;
        }

        switch (alt201) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred129_ChemicalChunker713_static.FOLLOW_cc_in_synpred129_ChemicalChunker713);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:112:111: ( comma )?
        int alt202=2;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt202=1;
                }
                break;
        }

        switch (alt202) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred129_ChemicalChunker716_static.FOLLOW_comma_in_synpred129_ChemicalChunker716);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred129_ChemicalChunker719_static.FOLLOW_prepphrase_in_synpred129_ChemicalChunker719);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred129_ChemicalChunker

    // $ANTLR start synpred139_ChemicalChunker
    public final void synpred139_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:58: ( degassMultiVerb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred139_ChemicalChunker749_static.FOLLOW_degassMultiVerb_in_synpred139_ChemicalChunker749);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred139_ChemicalChunker

    // $ANTLR start synpred152_ChemicalChunker
    public final void synpred152_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:183: ( vbdegass )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:183: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred152_ChemicalChunker775_static.FOLLOW_vbdegass_in_synpred152_ChemicalChunker775);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_ChemicalChunker

    // $ANTLR start synpred170_ChemicalChunker
    public final void synpred170_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:24: ( dash nounStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred170_ChemicalChunker837_static.FOLLOW_dash_in_synpred170_ChemicalChunker837);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred170_ChemicalChunker839_static.FOLLOW_nounStructure_in_synpred170_ChemicalChunker839);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred170_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:31: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred173_ChemicalChunker854_static.FOLLOW_citation_in_synpred173_ChemicalChunker854);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred174_ChemicalChunker
    public final void synpred174_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:40: ( cycles )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred174_ChemicalChunker856_static.FOLLOW_cycles_in_synpred174_ChemicalChunker856);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_ChemicalChunker

    // $ANTLR start synpred175_ChemicalChunker
    public final void synpred175_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:47: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred175_ChemicalChunker858_static.FOLLOW_molecule_in_synpred175_ChemicalChunker858);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_ChemicalChunker

    // $ANTLR start synpred176_ChemicalChunker
    public final void synpred176_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:56: ( apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred176_ChemicalChunker860_static.FOLLOW_apparatus_in_synpred176_ChemicalChunker860);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred176_ChemicalChunker

    // $ANTLR start synpred177_ChemicalChunker
    public final void synpred177_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:66: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred177_ChemicalChunker862_static.FOLLOW_mixture_in_synpred177_ChemicalChunker862);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_ChemicalChunker

    // $ANTLR start synpred178_ChemicalChunker
    public final void synpred178_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:74: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:74: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred178_ChemicalChunker864_static.FOLLOW_unnamedmolecule_in_synpred178_ChemicalChunker864);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:98: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:98: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred180_ChemicalChunker868_static.FOLLOW_nnstate_in_synpred180_ChemicalChunker868);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:106: ( procedureNode )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:106: procedureNode
        {
        pushFollow(FOLLOW_procedureNode_in_synpred181_ChemicalChunker870_static.FOLLOW_procedureNode_in_synpred181_ChemicalChunker870);
        procedureNode();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred182_ChemicalChunker
    public final void synpred182_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:120: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:120: nn
        {
        pushFollow(FOLLOW_nn_in_synpred182_ChemicalChunker872_static.FOLLOW_nn_in_synpred182_ChemicalChunker872);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_ChemicalChunker

    // $ANTLR start synpred185_ChemicalChunker
    public final void synpred185_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:131: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:131: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred185_ChemicalChunker878_static.FOLLOW_nnadd_in_synpred185_ChemicalChunker878);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_ChemicalChunker

    // $ANTLR start synpred187_ChemicalChunker
    public final void synpred187_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:155: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:155: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred187_ChemicalChunker882_static.FOLLOW_nnexample_in_synpred187_ChemicalChunker882);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_ChemicalChunker

    // $ANTLR start synpred188_ChemicalChunker
    public final void synpred188_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:165: ( range )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:165: range
        {
        pushFollow(FOLLOW_range_in_synpred188_ChemicalChunker884_static.FOLLOW_range_in_synpred188_ChemicalChunker884);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_ChemicalChunker

    // $ANTLR start synpred193_ChemicalChunker
    public final void synpred193_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:211: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:211: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred193_ChemicalChunker894_static.FOLLOW_quantity_in_synpred193_ChemicalChunker894);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_ChemicalChunker

    // $ANTLR start synpred194_ChemicalChunker
    public final void synpred194_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:220: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:220: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred194_ChemicalChunker896_static.FOLLOW_nnchementity_in_synpred194_ChemicalChunker896);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_ChemicalChunker

    // $ANTLR start synpred196_ChemicalChunker
    public final void synpred196_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:240: ( nnph )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:240: nnph
        {
        pushFollow(FOLLOW_nnph_in_synpred196_ChemicalChunker900_static.FOLLOW_nnph_in_synpred196_ChemicalChunker900);
        nnph();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_ChemicalChunker

    // $ANTLR start synpred198_ChemicalChunker
    public final void synpred198_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:253: ( nngeneral )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:253: nngeneral
        {
        pushFollow(FOLLOW_nngeneral_in_synpred198_ChemicalChunker904_static.FOLLOW_nngeneral_in_synpred198_ChemicalChunker904);
        nngeneral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred198_ChemicalChunker

    // $ANTLR start synpred201_ChemicalChunker
    public final void synpred201_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:277: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:277: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred201_ChemicalChunker910_static.FOLLOW_nnpressure_in_synpred201_ChemicalChunker910);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred201_ChemicalChunker

    // $ANTLR start synpred212_ChemicalChunker
    public final void synpred212_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:391: ( squareBracketedReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:391: squareBracketedReference
        {
        pushFollow(FOLLOW_squareBracketedReference_in_synpred212_ChemicalChunker932_static.FOLLOW_squareBracketedReference_in_synpred212_ChemicalChunker932);
        squareBracketedReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_ChemicalChunker

    // $ANTLR start synpred214_ChemicalChunker
    public final void synpred214_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:422: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:120:422: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred214_ChemicalChunker936_static.FOLLOW_numeric_in_synpred214_ChemicalChunker936);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_ChemicalChunker

    // $ANTLR start synpred226_ChemicalChunker
    public final void synpred226_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:11: ( prepphraseAtmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred226_ChemicalChunker974_static.FOLLOW_prepphraseAtmosphere_in_synpred226_ChemicalChunker974);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred226_ChemicalChunker

    // $ANTLR start synpred227_ChemicalChunker
    public final void synpred227_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:32: ( prepphraseTime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred227_ChemicalChunker976_static.FOLLOW_prepphraseTime_in_synpred227_ChemicalChunker976);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_ChemicalChunker

    // $ANTLR start synpred228_ChemicalChunker
    public final void synpred228_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:47: ( prepphraseTemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred228_ChemicalChunker978_static.FOLLOW_prepphraseTemp_in_synpred228_ChemicalChunker978);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_ChemicalChunker

    // $ANTLR start synpred229_ChemicalChunker
    public final void synpred229_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:62: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred229_ChemicalChunker980_static.FOLLOW_prepphraseIN_in_synpred229_ChemicalChunker980);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_ChemicalChunker

    // $ANTLR start synpred230_ChemicalChunker
    public final void synpred230_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:75: ( prepphraseRole )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:125:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred230_ChemicalChunker982_static.FOLLOW_prepphraseRole_in_synpred230_ChemicalChunker982);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_ChemicalChunker

    // $ANTLR start synpred232_ChemicalChunker
    public final void synpred232_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:16: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred232_ChemicalChunker1022_static.FOLLOW_advAdj_in_synpred232_ChemicalChunker1022);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_ChemicalChunker

    // $ANTLR start synpred233_ChemicalChunker
    public final void synpred233_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:33: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred233_ChemicalChunker1027_static.FOLLOW_nnatmosphere_in_synpred233_ChemicalChunker1027);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_ChemicalChunker

    // $ANTLR start synpred234_ChemicalChunker
    public final void synpred234_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:3: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred234_ChemicalChunker1055_static.FOLLOW_advAdj_in_synpred234_ChemicalChunker1055);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_ChemicalChunker

    // $ANTLR start synpred239_ChemicalChunker
    public final void synpred239_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:35: ( nntime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred239_ChemicalChunker1071_static.FOLLOW_nntime_in_synpred239_ChemicalChunker1071);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_ChemicalChunker

    // $ANTLR start synpred240_ChemicalChunker
    public final void synpred240_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:5: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred240_ChemicalChunker1102_static.FOLLOW_advAdj_in_synpred240_ChemicalChunker1102);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_ChemicalChunker

    // $ANTLR start synpred245_ChemicalChunker
    public final void synpred245_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:36: ( nntemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred245_ChemicalChunker1117_static.FOLLOW_nntemp_in_synpred245_ChemicalChunker1117);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_ChemicalChunker

    // $ANTLR start synpred251_ChemicalChunker
    public final void synpred251_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:15: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred251_ChemicalChunker1290_static.FOLLOW_conjunction_in_synpred251_ChemicalChunker1290);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_ChemicalChunker

    // $ANTLR start synpred252_ChemicalChunker
    public final void synpred252_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:15: ( ( conjunction )* apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:15: ( conjunction )* apparatus
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:15: ( conjunction )*
        loop203:
        do {
            int alt203=2;
            alt203 = dfa203.predict(input);
            switch (alt203) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred252_ChemicalChunker1290_static.FOLLOW_conjunction_in_synpred252_ChemicalChunker1290);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop203;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred252_ChemicalChunker1293_static.FOLLOW_apparatus_in_synpred252_ChemicalChunker1293);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:22: ( nnApp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred255_ChemicalChunker1310_static.FOLLOW_nnApp_in_synpred255_ChemicalChunker1310);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred256_ChemicalChunker
    public final void synpred256_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:4: ( nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1337_static.FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1337);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:18: ( dash nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred257_ChemicalChunker1341_static.FOLLOW_dash_in_synpred257_ChemicalChunker1341);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred257_ChemicalChunker1343_static.FOLLOW_nnapparatus_in_synpred257_ChemicalChunker1343);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:8: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred258_ChemicalChunker1357_static.FOLLOW_quantity_in_synpred258_ChemicalChunker1357);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:17: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred259_ChemicalChunker1359_static.FOLLOW_adj_in_synpred259_ChemicalChunker1359);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred260_ChemicalChunker
    public final void synpred260_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:21: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred260_ChemicalChunker1361_static.FOLLOW_nnpressure_in_synpred260_ChemicalChunker1361);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_ChemicalChunker

    // $ANTLR start synpred261_ChemicalChunker
    public final void synpred261_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:32: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred261_ChemicalChunker1363_static.FOLLOW_nnadd_in_synpred261_ChemicalChunker1363);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:38: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred262_ChemicalChunker1365_static.FOLLOW_molecule_in_synpred262_ChemicalChunker1365);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:47: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred263_ChemicalChunker1367_static.FOLLOW_nnchementity_in_synpred263_ChemicalChunker1367);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred264_ChemicalChunker1369_static.FOLLOW_nnstate_in_synpred264_ChemicalChunker1369);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred265_ChemicalChunker
    public final void synpred265_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:68: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred265_ChemicalChunker1371_static.FOLLOW_nn_in_synpred265_ChemicalChunker1371);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_ChemicalChunker

    // $ANTLR start synpred266_ChemicalChunker
    public final void synpred266_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:4: ( oscaront )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:4: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred266_ChemicalChunker1383_static.FOLLOW_oscaront_in_synpred266_ChemicalChunker1383);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:46: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:46: adj
        {
        pushFollow(FOLLOW_adj_in_synpred268_ChemicalChunker1408_static.FOLLOW_adj_in_synpred268_ChemicalChunker1408);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred269_ChemicalChunker
    public final void synpred269_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:52: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:52: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred269_ChemicalChunker1412_static.FOLLOW_quantity_in_synpred269_ChemicalChunker1412);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_ChemicalChunker

    // $ANTLR start synpred270_ChemicalChunker
    public final void synpred270_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:63: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:63: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred270_ChemicalChunker1416_static.FOLLOW_nnchementity_in_synpred270_ChemicalChunker1416);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_ChemicalChunker

    // $ANTLR start synpred271_ChemicalChunker
    public final void synpred271_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:78: ({...}? numericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:78: {...}? numericOrIdentifierCompoundReference
        {
        if ( !((!followedByNumberWhichIsNotAReference(input))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred271_ChemicalChunker", "!followedByNumberWhichIsNotAReference(input)");
        }
        pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_synpred271_ChemicalChunker1422_static.FOLLOW_numericOrIdentifierCompoundReference_in_synpred271_ChemicalChunker1422);
        numericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:165: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:165: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred272_ChemicalChunker1426_static.FOLLOW_quantity_in_synpred272_ChemicalChunker1426);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:34: ( afterOscarCompoundStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:34: afterOscarCompoundStructure
        {
        pushFollow(FOLLOW_afterOscarCompoundStructure_in_synpred273_ChemicalChunker1437_static.FOLLOW_afterOscarCompoundStructure_in_synpred273_ChemicalChunker1437);
        afterOscarCompoundStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:30: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:30: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred275_ChemicalChunker1464_static.FOLLOW_oscarcm_in_synpred275_ChemicalChunker1464);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:45: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:45: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred277_ChemicalChunker1470_static.FOLLOW_oscarcm_in_synpred277_ChemicalChunker1470);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:40: ( dash ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:40: dash ( oscarcm )+
        {
        pushFollow(FOLLOW_dash_in_synpred278_ChemicalChunker1468_static.FOLLOW_dash_in_synpred278_ChemicalChunker1468);
        dash();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:45: ( oscarcm )+
        int cnt206=0;
        loop206:
        do {
            int alt206=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt206=1;
                }
                break;

            }

            switch (alt206) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred278_ChemicalChunker1470_static.FOLLOW_oscarcm_in_synpred278_ChemicalChunker1470);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt206 >= 1 ) break loop206;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(206, input);
                    throw eee;
            }
            cnt206++;
        } while (true);


        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:56: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:56: dash
        {
        pushFollow(FOLLOW_dash_in_synpred279_ChemicalChunker1475_static.FOLLOW_dash_in_synpred279_ChemicalChunker1475);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:39: ( ( dash ( oscarcm )+ )+ ( dash )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:39: ( dash ( oscarcm )+ )+ ( dash )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:39: ( dash ( oscarcm )+ )+
        int cnt208=0;
        loop208:
        do {
            int alt208=2;
            switch ( input.LA(1) ) {
            case 136:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        alt208=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                }
                break;

            }

            switch (alt208) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:40: dash ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_dash_in_synpred280_ChemicalChunker1468_static.FOLLOW_dash_in_synpred280_ChemicalChunker1468);
        	    dash();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:45: ( oscarcm )+
        	    int cnt207=0;
        	    loop207:
        	    do {
        	        int alt207=2;
        	        switch ( input.LA(1) ) {
        	        case 84:
        	            {
        	            alt207=1;
        	            }
        	            break;

        	        }

        	        switch (alt207) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred280_ChemicalChunker1470_static.FOLLOW_oscarcm_in_synpred280_ChemicalChunker1470);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt207 >= 1 ) break loop207;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(207, input);
        	                throw eee;
        	        }
        	        cnt207++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt208 >= 1 ) break loop208;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(208, input);
                    throw eee;
            }
            cnt208++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:56: ( dash )?
        int alt209=2;
        switch ( input.LA(1) ) {
            case 136:
                {
                alt209=1;
                }
                break;
        }

        switch (alt209) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                {
                pushFollow(FOLLOW_dash_in_synpred280_ChemicalChunker1475_static.FOLLOW_dash_in_synpred280_ChemicalChunker1475);
                dash();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:63: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:63: dash
        {
        pushFollow(FOLLOW_dash_in_synpred281_ChemicalChunker1479_static.FOLLOW_dash_in_synpred281_ChemicalChunker1479);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:68: ( apost )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:177:68: apost
        {
        pushFollow(FOLLOW_apost_in_synpred282_ChemicalChunker1481_static.FOLLOW_apost_in_synpred282_ChemicalChunker1481);
        apost();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred284_ChemicalChunker
    public final void synpred284_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:19: ( moleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:19: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred284_ChemicalChunker1524_static.FOLLOW_moleculeamount3_in_synpred284_ChemicalChunker1524);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:36: ( moleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:36: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred285_ChemicalChunker1527_static.FOLLOW_moleculeamount1_in_synpred285_ChemicalChunker1527);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:71: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:71: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred286_ChemicalChunker1534_static.FOLLOW_asAstate_in_synpred286_ChemicalChunker1534);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred287_ChemicalChunker1545_static.FOLLOW_quantity_in_synpred287_ChemicalChunker1545);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:54: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:54: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred290_ChemicalChunker1563_static.FOLLOW_mixture_in_synpred290_ChemicalChunker1563);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred291_ChemicalChunker
    public final void synpred291_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred291_ChemicalChunker1576_static.FOLLOW_quantity_in_synpred291_ChemicalChunker1576);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred292_ChemicalChunker1578_static.FOLLOW_mixture_in_synpred292_ChemicalChunker1578);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred297_ChemicalChunker
    public final void synpred297_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:60: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:60: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred297_ChemicalChunker1601_static.FOLLOW_oscarCompound_in_synpred297_ChemicalChunker1601);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred297_ChemicalChunker

    // $ANTLR start synpred298_ChemicalChunker
    public final void synpred298_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred298_ChemicalChunker1613_static.FOLLOW_quantity_in_synpred298_ChemicalChunker1613);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred298_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred299_ChemicalChunker1615_static.FOLLOW_mixture_in_synpred299_ChemicalChunker1615);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred300_ChemicalChunker
    public final void synpred300_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:23: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred300_ChemicalChunker1619_static.FOLLOW_oscarCompound_in_synpred300_ChemicalChunker1619);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred300_ChemicalChunker

    // $ANTLR start synpred301_ChemicalChunker
    public final void synpred301_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:35: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:35: citation
        {
        pushFollow(FOLLOW_citation_in_synpred301_ChemicalChunker1630_static.FOLLOW_citation_in_synpred301_ChemicalChunker1630);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred301_ChemicalChunker

    // $ANTLR start synpred302_ChemicalChunker
    public final void synpred302_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred302_ChemicalChunker1632_static.FOLLOW_quantity_in_synpred302_ChemicalChunker1632);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:53: ( comma ( quantity1Node | citationStructure ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:53: comma ( quantity1Node | citationStructure )
        {
        pushFollow(FOLLOW_comma_in_synpred304_ChemicalChunker1634_static.FOLLOW_comma_in_synpred304_ChemicalChunker1634);
        comma();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:59: ( quantity1Node | citationStructure )
        int alt211=2;
        alt211 = dfa211.predict(input);
        switch (alt211) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:60: quantity1Node
                {
                pushFollow(FOLLOW_quantity1Node_in_synpred304_ChemicalChunker1637_static.FOLLOW_quantity1Node_in_synpred304_ChemicalChunker1637);
                quantity1Node();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:74: citationStructure
                {
                pushFollow(FOLLOW_citationStructure_in_synpred304_ChemicalChunker1639_static.FOLLOW_citationStructure_in_synpred304_ChemicalChunker1639);
                citationStructure();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // $ANTLR start synpred305_ChemicalChunker
    public final void synpred305_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:93: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:93: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred305_ChemicalChunker1642_static.FOLLOW_mixture_in_synpred305_ChemicalChunker1642);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred305_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:31: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:31: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred306_ChemicalChunker1655_static.FOLLOW_asAstate_in_synpred306_ChemicalChunker1655);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:65: ( optionalUnnamedMoleculeEnding )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:65: optionalUnnamedMoleculeEnding
        {
        pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_synpred308_ChemicalChunker1685_static.FOLLOW_optionalUnnamedMoleculeEnding_in_synpred308_ChemicalChunker1685);
        optionalUnnamedMoleculeEnding();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred309_ChemicalChunker
    public final void synpred309_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:4: ( quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:4: quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? )
        {
        pushFollow(FOLLOW_quantity_in_synpred309_ChemicalChunker1676_static.FOLLOW_quantity_in_synpred309_ChemicalChunker1676);
        quantity();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_inof_in_synpred309_ChemicalChunker1678_static.FOLLOW_inof_in_synpred309_ChemicalChunker1678);
        inof();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:18: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? )
        int alt213=2;
        switch ( input.LA(1) ) {
        case 38:
        case 139:
        case 141:
        case 143:
        case 146:
            {
            alt213=1;
            }
            break;
        case 41:
        case 42:
        case 45:
        case 46:
        case 63:
        case 68:
        case 71:
        case 83:
        case 90:
        case 142:
        case 147:
        case 149:
        case 151:
        case 156:
        case 157:
        case 158:
        case 159:
            {
            alt213=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 213, 0, input);

            throw nvae;
        }

        switch (alt213) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:19: unnamedmoleculeamount1
                {
                pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred309_ChemicalChunker1681_static.FOLLOW_unnamedmoleculeamount1_in_synpred309_ChemicalChunker1681);
                unnamedmoleculeamount1();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:42: unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )?
                {
                pushFollow(FOLLOW_unnamedmoleculeamount2_in_synpred309_ChemicalChunker1683_static.FOLLOW_unnamedmoleculeamount2_in_synpred309_ChemicalChunker1683);
                unnamedmoleculeamount2();

                state._fsp--;
                if (state.failed) return ;
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:65: ( optionalUnnamedMoleculeEnding )?
                int alt212=2;
                switch ( input.LA(1) ) {
                    case 38:
                    case 73:
                    case 133:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                        {
                        alt212=1;
                        }
                        break;
                    case EOF:
                        {
                        int LA212_2 = input.LA(2);

                        if ( (synpred308_ChemicalChunker()) ) {
                            alt212=1;
                        }
                        }
                        break;
                }

                switch (alt212) {
                    case 1 :
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: optionalUnnamedMoleculeEnding
                        {
                        pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_synpred309_ChemicalChunker1685_static.FOLLOW_optionalUnnamedMoleculeEnding_in_synpred309_ChemicalChunker1685);
                        optionalUnnamedMoleculeEnding();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred309_ChemicalChunker

    // $ANTLR start synpred311_ChemicalChunker
    public final void synpred311_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:121: ( unnamedmoleculeamount4 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:121: unnamedmoleculeamount4
        {
        pushFollow(FOLLOW_unnamedmoleculeamount4_in_synpred311_ChemicalChunker1692_static.FOLLOW_unnamedmoleculeamount4_in_synpred311_ChemicalChunker1692);
        unnamedmoleculeamount4();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_ChemicalChunker

    // $ANTLR start synpred312_ChemicalChunker
    public final void synpred312_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:144: ( unnamedmoleculeamount5 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:144: unnamedmoleculeamount5
        {
        pushFollow(FOLLOW_unnamedmoleculeamount5_in_synpred312_ChemicalChunker1694_static.FOLLOW_unnamedmoleculeamount5_in_synpred312_ChemicalChunker1694);
        unnamedmoleculeamount5();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_ChemicalChunker

    // $ANTLR start synpred313_ChemicalChunker
    public final void synpred313_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:167: ( unnamedmoleculeamount6 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:167: unnamedmoleculeamount6
        {
        pushFollow(FOLLOW_unnamedmoleculeamount6_in_synpred313_ChemicalChunker1696_static.FOLLOW_unnamedmoleculeamount6_in_synpred313_ChemicalChunker1696);
        unnamedmoleculeamount6();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred313_ChemicalChunker

    // $ANTLR start synpred314_ChemicalChunker
    public final void synpred314_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:43: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:43: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred314_ChemicalChunker1713_static.FOLLOW_quantity_in_synpred314_ChemicalChunker1713);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred314_ChemicalChunker

    // $ANTLR start synpred315_ChemicalChunker
    public final void synpred315_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:52: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:52: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred315_ChemicalChunker1715_static.FOLLOW_mixture_in_synpred315_ChemicalChunker1715);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred315_ChemicalChunker

    // $ANTLR start synpred325_ChemicalChunker
    public final void synpred325_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:58: ( referenceToExampleCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:58: referenceToExampleCompound
        {
        pushFollow(FOLLOW_referenceToExampleCompound_in_synpred325_ChemicalChunker1753_static.FOLLOW_referenceToExampleCompound_in_synpred325_ChemicalChunker1753);
        referenceToExampleCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred325_ChemicalChunker

    // $ANTLR start synpred326_ChemicalChunker
    public final void synpred326_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:85: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:85: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred326_ChemicalChunker1755_static.FOLLOW_nnexample_in_synpred326_ChemicalChunker1755);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_ChemicalChunker

    // $ANTLR start synpred333_ChemicalChunker
    public final void synpred333_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:24: ( optionalUnnamedMoleculeEnding )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:24: optionalUnnamedMoleculeEnding
        {
        pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_synpred333_ChemicalChunker1783_static.FOLLOW_optionalUnnamedMoleculeEnding_in_synpred333_ChemicalChunker1783);
        optionalUnnamedMoleculeEnding();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_ChemicalChunker

    // $ANTLR start synpred334_ChemicalChunker
    public final void synpred334_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:5: ( numericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:5: numericOrIdentifierCompoundReference
        {
        pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_synpred334_ChemicalChunker1795_static.FOLLOW_numericOrIdentifierCompoundReference_in_synpred334_ChemicalChunker1795);
        numericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_ChemicalChunker

    // $ANTLR start synpred335_ChemicalChunker
    public final void synpred335_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred335_ChemicalChunker1799_static.FOLLOW_quantity_in_synpred335_ChemicalChunker1799);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred335_ChemicalChunker

    // $ANTLR start synpred336_ChemicalChunker
    public final void synpred336_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:53: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:53: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred336_ChemicalChunker1801_static.FOLLOW_mixture_in_synpred336_ChemicalChunker1801);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred336_ChemicalChunker

    // $ANTLR start synpred337_ChemicalChunker
    public final void synpred337_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:47: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:47: citation
        {
        pushFollow(FOLLOW_citation_in_synpred337_ChemicalChunker1815_static.FOLLOW_citation_in_synpred337_ChemicalChunker1815);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_ChemicalChunker

    // $ANTLR start synpred338_ChemicalChunker
    public final void synpred338_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:56: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:56: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred338_ChemicalChunker1817_static.FOLLOW_quantity_in_synpred338_ChemicalChunker1817);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_ChemicalChunker

    // $ANTLR start synpred339_ChemicalChunker
    public final void synpred339_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:65: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:65: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred339_ChemicalChunker1819_static.FOLLOW_mixture_in_synpred339_ChemicalChunker1819);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred339_ChemicalChunker

    // $ANTLR start synpred344_ChemicalChunker
    public final void synpred344_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:48: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:48: citation
        {
        pushFollow(FOLLOW_citation_in_synpred344_ChemicalChunker1874_static.FOLLOW_citation_in_synpred344_ChemicalChunker1874);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred344_ChemicalChunker

    // $ANTLR start synpred345_ChemicalChunker
    public final void synpred345_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:57: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:57: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred345_ChemicalChunker1876_static.FOLLOW_quantity_in_synpred345_ChemicalChunker1876);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred345_ChemicalChunker

    // $ANTLR start synpred346_ChemicalChunker
    public final void synpred346_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:66: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred346_ChemicalChunker1878_static.FOLLOW_mixture_in_synpred346_ChemicalChunker1878);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred346_ChemicalChunker

    // $ANTLR start synpred347_ChemicalChunker
    public final void synpred347_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred347_ChemicalChunker1907_static.FOLLOW_quantity_in_synpred347_ChemicalChunker1907);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred347_ChemicalChunker

    // $ANTLR start synpred349_ChemicalChunker
    public final void synpred349_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred349_ChemicalChunker1918_static.FOLLOW_quantity_in_synpred349_ChemicalChunker1918);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred349_ChemicalChunker

    // $ANTLR start synpred350_ChemicalChunker
    public final void synpred350_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:53: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:53: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred350_ChemicalChunker1920_static.FOLLOW_mixture_in_synpred350_ChemicalChunker1920);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred350_ChemicalChunker

    // $ANTLR start synpred354_ChemicalChunker
    public final void synpred354_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:34: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:34: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred354_ChemicalChunker1945_static.FOLLOW_quantity_in_synpred354_ChemicalChunker1945);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred354_ChemicalChunker

    // $ANTLR start synpred357_ChemicalChunker
    public final void synpred357_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:31: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:31: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred357_ChemicalChunker1976_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred357_ChemicalChunker1976);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred357_ChemicalChunker

    // $ANTLR start synpred362_ChemicalChunker
    public final void synpred362_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:19: ( comma measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:251:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred362_ChemicalChunker2109_static.FOLLOW_comma_in_synpred362_ChemicalChunker2109);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred362_ChemicalChunker2112_static.FOLLOW_measurements_in_synpred362_ChemicalChunker2112);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred362_ChemicalChunker

    // $ANTLR start synpred365_ChemicalChunker
    public final void synpred365_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:40: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:40: dt
        {
        pushFollow(FOLLOW_dt_in_synpred365_ChemicalChunker2137_static.FOLLOW_dt_in_synpred365_ChemicalChunker2137);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred365_ChemicalChunker

    // $ANTLR start synpred366_ChemicalChunker
    public final void synpred366_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:25: ( measurementtypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred366_ChemicalChunker2149_static.FOLLOW_measurementtypes_in_synpred366_ChemicalChunker2149);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred366_ChemicalChunker

    // $ANTLR start synpred373_ChemicalChunker
    public final void synpred373_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:60: ( yield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:60: yield
        {
        pushFollow(FOLLOW_yield_in_synpred373_ChemicalChunker2186_static.FOLLOW_yield_in_synpred373_ChemicalChunker2186);
        yield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred373_ChemicalChunker

    // $ANTLR start synpred384_ChemicalChunker
    public final void synpred384_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:20: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred384_ChemicalChunker2474_static.FOLLOW_fw_in_synpred384_ChemicalChunker2474);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred384_ChemicalChunker

    // $ANTLR start synpred385_ChemicalChunker
    public final void synpred385_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:23: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred385_ChemicalChunker2476_static.FOLLOW_verb_in_synpred385_ChemicalChunker2476);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred385_ChemicalChunker

    // $ANTLR start synpred386_ChemicalChunker
    public final void synpred386_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:28: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:28: nn
        {
        pushFollow(FOLLOW_nn_in_synpred386_ChemicalChunker2478_static.FOLLOW_nn_in_synpred386_ChemicalChunker2478);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred386_ChemicalChunker

    // $ANTLR start synpred387_ChemicalChunker
    public final void synpred387_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:31: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:31: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred387_ChemicalChunker2480_static.FOLLOW_quantity2Node_in_synpred387_ChemicalChunker2480);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred387_ChemicalChunker

    // $ANTLR start synpred390_ChemicalChunker
    public final void synpred390_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:58: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:58: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred390_ChemicalChunker2486_static.FOLLOW_oscarCompound_in_synpred390_ChemicalChunker2486);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred390_ChemicalChunker

    // $ANTLR start synpred391_ChemicalChunker
    public final void synpred391_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:72: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:72: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred391_ChemicalChunker2488_static.FOLLOW_molecule_in_synpred391_ChemicalChunker2488);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred391_ChemicalChunker

    // $ANTLR start synpred392_ChemicalChunker
    public final void synpred392_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:81: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:81: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred392_ChemicalChunker2490_static.FOLLOW_unnamedmolecule_in_synpred392_ChemicalChunker2490);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred392_ChemicalChunker

    // $ANTLR start synpred394_ChemicalChunker
    public final void synpred394_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:102: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:102: sym
        {
        pushFollow(FOLLOW_sym_in_synpred394_ChemicalChunker2494_static.FOLLOW_sym_in_synpred394_ChemicalChunker2494);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred394_ChemicalChunker

    // $ANTLR start synpred395_ChemicalChunker
    public final void synpred395_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:106: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:106: noun
        {
        pushFollow(FOLLOW_noun_in_synpred395_ChemicalChunker2496_static.FOLLOW_noun_in_synpred395_ChemicalChunker2496);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred395_ChemicalChunker

    // $ANTLR start synpred397_ChemicalChunker
    public final void synpred397_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:117: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:117: cd
        {
        pushFollow(FOLLOW_cd_in_synpred397_ChemicalChunker2500_static.FOLLOW_cd_in_synpred397_ChemicalChunker2500);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred397_ChemicalChunker

    // $ANTLR start synpred398_ChemicalChunker
    public final void synpred398_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:120: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:120: comma
        {
        pushFollow(FOLLOW_comma_in_synpred398_ChemicalChunker2502_static.FOLLOW_comma_in_synpred398_ChemicalChunker2502);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred398_ChemicalChunker

    // $ANTLR start synpred399_ChemicalChunker
    public final void synpred399_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:126: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:126: adj
        {
        pushFollow(FOLLOW_adj_in_synpred399_ChemicalChunker2504_static.FOLLOW_adj_in_synpred399_ChemicalChunker2504);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred399_ChemicalChunker

    // $ANTLR start synpred401_ChemicalChunker
    public final void synpred401_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:143: ( minimixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:143: minimixture
        {
        pushFollow(FOLLOW_minimixture_in_synpred401_ChemicalChunker2512_static.FOLLOW_minimixture_in_synpred401_ChemicalChunker2512);
        minimixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred401_ChemicalChunker

    // $ANTLR start synpred402_ChemicalChunker
    public final void synpred402_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:155: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:155: fw
        {
        pushFollow(FOLLOW_fw_in_synpred402_ChemicalChunker2514_static.FOLLOW_fw_in_synpred402_ChemicalChunker2514);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred402_ChemicalChunker

    // $ANTLR start synpred403_ChemicalChunker
    public final void synpred403_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:158: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:158: verb
        {
        pushFollow(FOLLOW_verb_in_synpred403_ChemicalChunker2516_static.FOLLOW_verb_in_synpred403_ChemicalChunker2516);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred403_ChemicalChunker

    // $ANTLR start synpred404_ChemicalChunker
    public final void synpred404_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:163: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:163: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred404_ChemicalChunker2518_static.FOLLOW_quantity2Node_in_synpred404_ChemicalChunker2518);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred404_ChemicalChunker

    // $ANTLR start synpred405_ChemicalChunker
    public final void synpred405_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:177: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:177: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred405_ChemicalChunker2520_static.FOLLOW_nnyield_in_synpred405_ChemicalChunker2520);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred405_ChemicalChunker

    // $ANTLR start synpred408_ChemicalChunker
    public final void synpred408_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:198: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:198: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred408_ChemicalChunker2526_static.FOLLOW_oscarCompound_in_synpred408_ChemicalChunker2526);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred408_ChemicalChunker

    // $ANTLR start synpred409_ChemicalChunker
    public final void synpred409_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:212: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:212: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred409_ChemicalChunker2528_static.FOLLOW_molecule_in_synpred409_ChemicalChunker2528);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred409_ChemicalChunker

    // $ANTLR start synpred410_ChemicalChunker
    public final void synpred410_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:221: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:221: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred410_ChemicalChunker2530_static.FOLLOW_unnamedmolecule_in_synpred410_ChemicalChunker2530);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred410_ChemicalChunker

    // $ANTLR start synpred412_ChemicalChunker
    public final void synpred412_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:242: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:242: sym
        {
        pushFollow(FOLLOW_sym_in_synpred412_ChemicalChunker2534_static.FOLLOW_sym_in_synpred412_ChemicalChunker2534);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred412_ChemicalChunker

    // $ANTLR start synpred413_ChemicalChunker
    public final void synpred413_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:246: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:246: noun
        {
        pushFollow(FOLLOW_noun_in_synpred413_ChemicalChunker2536_static.FOLLOW_noun_in_synpred413_ChemicalChunker2536);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred413_ChemicalChunker

    // $ANTLR start synpred415_ChemicalChunker
    public final void synpred415_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:257: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:257: cd
        {
        pushFollow(FOLLOW_cd_in_synpred415_ChemicalChunker2540_static.FOLLOW_cd_in_synpred415_ChemicalChunker2540);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred415_ChemicalChunker

    // $ANTLR start synpred416_ChemicalChunker
    public final void synpred416_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:260: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:260: comma
        {
        pushFollow(FOLLOW_comma_in_synpred416_ChemicalChunker2542_static.FOLLOW_comma_in_synpred416_ChemicalChunker2542);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred416_ChemicalChunker

    // $ANTLR start synpred417_ChemicalChunker
    public final void synpred417_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:266: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:266: adj
        {
        pushFollow(FOLLOW_adj_in_synpred417_ChemicalChunker2544_static.FOLLOW_adj_in_synpred417_ChemicalChunker2544);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_ChemicalChunker

    // $ANTLR start synpred423_ChemicalChunker
    public final void synpred423_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:31: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:31: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred423_ChemicalChunker2611_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred423_ChemicalChunker2611);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred423_ChemicalChunker

    // $ANTLR start synpred424_ChemicalChunker
    public final void synpred424_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:63: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:63: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred424_ChemicalChunker2613_static.FOLLOW_numeric_in_synpred424_ChemicalChunker2613);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred424_ChemicalChunker

    // $ANTLR start synpred426_ChemicalChunker
    public final void synpred426_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:86: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:86: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred426_ChemicalChunker2622_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred426_ChemicalChunker2622);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred426_ChemicalChunker

    // $ANTLR start synpred427_ChemicalChunker
    public final void synpred427_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:13: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:286:13: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred427_ChemicalChunker2638_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred427_ChemicalChunker2638);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred427_ChemicalChunker

    // $ANTLR start synpred435_ChemicalChunker
    public final void synpred435_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:10: ( numericratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:295:10: numericratio
        {
        pushFollow(FOLLOW_numericratio_in_synpred435_ChemicalChunker2739_static.FOLLOW_numericratio_in_synpred435_ChemicalChunker2739);
        numericratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred435_ChemicalChunker

    // $ANTLR start synpred436_ChemicalChunker
    public final void synpred436_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:21: ( colon numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:21: colon numeric
        {
        pushFollow(FOLLOW_colon_in_synpred436_ChemicalChunker2767_static.FOLLOW_colon_in_synpred436_ChemicalChunker2767);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_numeric_in_synpred436_ChemicalChunker2769_static.FOLLOW_numeric_in_synpred436_ChemicalChunker2769);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred436_ChemicalChunker

    // $ANTLR start synpred437_ChemicalChunker
    public final void synpred437_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:12: ( colon noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred437_ChemicalChunker2785_static.FOLLOW_colon_in_synpred437_ChemicalChunker2785);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred437_ChemicalChunker2787_static.FOLLOW_noun_in_synpred437_ChemicalChunker2787);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred437_ChemicalChunker

    // Delegated rules

    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred408_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred408_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred424_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred424_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred415_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred415_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred347_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred347_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred427_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred427_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred437_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred437_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred366_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred366_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred386_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred423_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred423_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred413_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred413_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred390_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred397_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred397_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred409_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred409_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred416_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred354_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred354_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred394_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred394_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred392_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred392_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred404_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred391_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred391_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred387_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred387_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred410_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred410_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred436_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred436_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred349_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred344_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred344_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred412_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred412_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred426_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred426_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred350_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred350_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred403_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred403_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred401_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred401_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred398_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred398_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred365_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred365_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred405_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred346_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred346_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred402_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred373_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred373_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred395_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred395_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred435_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred435_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred399_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred399_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA183 dfa183 = new DFA183(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA188 dfa188 = new DFA188(this);
    protected DFA190 dfa190 = new DFA190(this);
    protected DFA203 dfa203 = new DFA203(this);
    protected DFA211 dfa211 = new DFA211(this);
    static class DFA2_static {
    static final String DFA2_eotS =
        "\u0092\uffff";
    static final String DFA2_eofS =
        "\1\1\u0091\uffff";
    static final String DFA2_minS =
        "\1\46\1\uffff\u008e\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00b4\1\uffff\u008e\0\2\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\3\u008e\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\2\uffff\1\132\1\157\1\165\1\110\1\57\1\170\1\175\1\37\1\102\1"+
        "\156\1\41\1\21\1\3\1\55\1\135\1\72\1\146\1\173\1\126\1\u008b\1\112"+
        "\1\174\1\14\1\107\1\64\1\143\1\7\1\164\1\131\1\142\1\2\1\u0082\1"+
        "\u0080\1\u0087\1\177\1\134\1\44\1\46\1\11\1\70\1\73\1\167\1\u0084"+
        "\1\32\1\33\1\65\1\113\1\127\1\145\1\22\1\61\1\53\1\130\1\137\1\150"+
        "\1\u008c\1\26\1\u008a\1\36\1\u0088\1\47\1\75\1\136\1\116\1\15\1"+
        "\45\1\51\1\151\1\23\1\77\1\155\1\161\1\u0085\1\43\1\152\1\71\1\42"+
        "\1\123\1\u008d\1\114\1\153\1\166\1\56\1\117\1\6\1\74\1\176\1\122"+
        "\1\54\1\160\1\162\1\103\1\16\1\52\1\62\1\1\1\27\1\141\1\111\1\106"+
        "\1\35\1\104\1\12\1\24\1\5\1\171\1\u0081\1\u0086\1\115\1\144\1\147"+
        "\1\66\1\0\1\30\1\172\1\u0083\1\125\1\140\1\67\1\76\1\17\1\20\1\31"+
        "\1\13\1\105\1\63\1\133\1\120\1\u0089\1\121\1\100\1\163\1\25\1\34"+
        "\1\10\1\4\1\40\1\60\1\50\1\101\1\124\1\154\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\6\1\12\1\14\1\110\1\46\1\51\1\u0085\1\13\1\33\1\114\1\115"+
            "\1\113\1\121\1\122\1\131\1\132\1\116\1\130\1\123\1\125\1\117"+
            "\1\120\1\127\1\126\1\124\1\22\1\47\1\u0086\1\54\1\u0087\1\50"+
            "\1\55\1\64\1\21\1\52\1\5\1\53\1\41\1\42\1\15\1\56\1\57\1\60"+
            "\1\61\1\62\1\43\1\20\1\143\1\u0083\1\144\1\147\1\16\1\67\1\151"+
            "\1\150\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\24\1\161"+
            "\1\63\1\162\1\146\1\163\1\164\1\70\1\165\1\71\1\166\1\72\1\167"+
            "\1\170\1\145\1\171\1\172\1\73\1\173\1\65\1\174\1\175\1\176\1"+
            "\74\1\177\1\45\1\66\1\u0080\1\u0081\1\u0082\1\40\1\134\1\u0088"+
            "\1\17\1\u0089\1\u0084\1\u008a\1\1\1\u008b\1\34\1\u008c\1\35"+
            "\1\25\1\3\1\u008d\1\u008e\1\4\1\2\1\102\1\75\1\112\1\7\1\10"+
            "\1\11\1\105\1\133\1\23\1\44\1\32\1\106\1\103\1\107\1\36\1\37"+
            "\1\26\1\27\1\31\1\30\1\76\1\111\1\u008f\1\135\1\140\1\137\1"+
            "\142\1\136\1\141\1\77\1\104\1\100\1\101",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_static.DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_static.DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_static.DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_static.DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_static.DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_static.DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 81:13: ( sentenceStructure | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_137);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_136);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_138);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_140);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_139);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_141);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_142);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA2_143 = input.LA(1);

                         
                        int index2_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_143);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA4_static {
    static final String DFA4_eotS =
        "\u0089\uffff";
    static final String DFA4_eofS =
        "\1\13\u0088\uffff";
    static final String DFA4_minS =
        "\1\46\12\0\1\uffff\171\0\4\uffff";
    static final String DFA4_maxS =
        "\1\u00b4\12\0\1\uffff\171\0\4\uffff";
    static final String DFA4_acceptS =
        "\13\uffff\1\5\171\uffff\1\1\1\2\1\3\1\4";
    static final String DFA4_specialS =
        "\1\uffff\1\33\1\143\1\163\1\52\1\130\1\104\1\0\1\12\1\55\1\4\1"+
        "\uffff\1\157\1\21\1\110\1\175\1\73\1\22\1\7\1\66\1\24\1\57\1\132"+
        "\1\61\1\34\1\27\1\125\1\37\1\113\1\137\1\31\1\156\1\173\1\115\1"+
        "\162\1\127\1\133\1\5\1\134\1\11\1\174\1\u0080\1\26\1\43\1\154\1"+
        "\165\1\106\1\62\1\16\1\u0082\1\152\1\123\1\177\1\126\1\63\1\35\1"+
        "\64\1\100\1\25\1\50\1\47\1\155\1\164\1\153\1\142\1\107\1\32\1\74"+
        "\1\101\1\135\1\121\1\44\1\114\1\111\1\124\1\3\1\140\1\17\1\112\1"+
        "\14\1\167\1\131\1\6\1\160\1\76\1\75\1\46\1\36\1\45\1\151\1\103\1"+
        "\42\1\54\1\176\1\40\1\71\1\166\1\65\1\117\1\146\1\77\1\102\1\13"+
        "\1\56\1\2\1\23\1\171\1\147\1\150\1\141\1\72\1\15\1\1\1\41\1\105"+
        "\1\120\1\161\1\170\1\30\1\53\1\60\1\122\1\145\1\u0081\1\10\1\67"+
        "\1\51\1\136\1\172\1\144\1\20\1\116\1\70\4\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\22\1\10\1\12\1\111\1\47\1\52\1\13\1\11\1\34\1\115\1\116"+
            "\1\114\1\122\1\123\1\132\1\133\1\117\1\131\1\124\1\126\1\120"+
            "\1\121\1\130\1\127\1\125\1\27\1\50\1\13\1\55\1\13\1\51\1\56"+
            "\1\65\1\26\1\53\1\21\1\54\1\42\1\43\1\23\1\57\1\60\1\61\1\62"+
            "\1\63\1\44\1\25\1\143\1\u0083\1\144\1\147\1\24\1\70\1\151\1"+
            "\150\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\31\1\161\1"+
            "\64\1\162\1\146\1\163\1\164\1\71\1\165\1\72\1\166\1\73\1\167"+
            "\1\170\1\145\1\171\1\172\1\74\1\173\1\66\1\174\1\175\1\176\1"+
            "\75\1\177\1\46\1\67\1\u0080\1\u0081\1\u0082\1\41\1\15\1\13\1"+
            "\14\1\13\1\u0084\3\13\1\35\1\13\1\36\1\32\1\17\2\13\1\20\1\16"+
            "\1\103\1\76\1\113\1\5\1\6\1\7\1\106\1\134\1\30\1\45\1\33\1\107"+
            "\1\104\1\110\1\37\1\40\1\1\1\2\1\4\1\3\1\77\1\112\1\13\1\135"+
            "\1\140\1\137\1\142\1\136\1\141\1\100\1\105\1\101\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_static.DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_static.DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_static.DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_static.DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_static.DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_static.DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 83:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA4_124 = input.LA(1);

                         
                        int index4_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_124);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA4_130 = input.LA(1);

                         
                        int index4_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_130);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA4_13 = input.LA(1);

                         
                        int index4_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_13);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA4_126 = input.LA(1);

                         
                        int index4_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_126);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA4_125 = input.LA(1);

                         
                        int index4_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_125);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA4_132 = input.LA(1);

                         
                        int index4_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_132);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA4_131 = input.LA(1);

                         
                        int index4_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_131);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA4_127 = input.LA(1);

                         
                        int index4_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_127);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA4_129 = input.LA(1);

                         
                        int index4_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_129);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA4_128 = input.LA(1);

                         
                        int index4_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_128);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA5_static {
    static final String DFA5_eotS =
        "\32\uffff";
    static final String DFA5_eofS =
        "\1\1\31\uffff";
    static final String DFA5_minS =
        "\1\46\1\uffff\13\45\13\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00b4\1\uffff\13\45\13\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\15\uffff\1\5\1\2\1\0\1\6\1\1\1\7\1\11\1\12\1\10\1\3\1\4\2\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\5\1\7\4\1\1\6\126\1\1\14\22\1\1\2\1\3\1\4\12\1\1\10"+
            "\1\11\1\13\1\12\15\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_static.DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_static.DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_static.DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_static.DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_static.DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_static.DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 83:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA6_static {
    static final String DFA6_eotS =
        "\13\uffff";
    static final String DFA6_eofS =
        "\1\1\12\uffff";
    static final String DFA6_minS =
        "\1\46\1\uffff\3\45\3\0\3\uffff";
    static final String DFA6_maxS =
        "\1\u00b4\1\uffff\3\45\3\0\3\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\4\6\uffff\1\1\1\3\1\2";
    static final String DFA6_specialS =
        "\5\uffff\1\2\1\0\1\1\3\uffff}>";
    static final String[] DFA6_transitionS = {
            "\135\1\1\3\1\1\1\2\13\1\1\4\43\1",
            "",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_static.DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_static.DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_static.DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_static.DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_static.DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_static.DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 83:89: ( conjunction | rbconj | comma )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA6_6 = input.LA(1);

                         
                        int index6_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_7 = input.LA(1);

                         
                        int index6_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_5 = input.LA(1);

                         
                        int index6_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA8_static {
    static final String DFA8_eotS =
        "\111\uffff";
    static final String DFA8_eofS =
        "\111\uffff";
    static final String DFA8_minS =
        "\1\46\23\0\65\uffff";
    static final String DFA8_maxS =
        "\1\u00b4\23\0\65\uffff";
    static final String DFA8_acceptS =
        "\24\uffff\1\2\63\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\65\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\5\1\11\1\13\3\24\1\uffff\1\12\1\24\20\uffff\1\21\1\24\1"+
            "\uffff\1\24\1\uffff\3\24\1\20\1\24\1\4\3\24\1\14\6\24\1\17\4"+
            "\uffff\1\15\1\24\11\uffff\1\23\1\uffff\1\24\4\uffff\1\24\1\uffff"+
            "\1\24\1\uffff\1\24\5\uffff\1\24\1\uffff\1\24\3\uffff\1\24\1"+
            "\uffff\2\24\3\uffff\1\24\2\uffff\1\16\5\uffff\1\24\1\uffff\2"+
            "\24\1\2\2\uffff\1\3\1\1\2\24\1\uffff\1\6\1\7\1\10\1\24\1\uffff"+
            "\1\22\14\24\10\uffff\4\24",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_static.DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_static.DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_static.DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_static.DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_static.DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_static.DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "97:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA8_15 = input.LA(1);

                         
                        int index8_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA8_16 = input.LA(1);

                         
                        int index8_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA8_18 = input.LA(1);

                         
                        int index8_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA8_19 = input.LA(1);

                         
                        int index8_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index8_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA11_static {
    static final String DFA11_eotS =
        "\17\uffff";
    static final String DFA11_eofS =
        "\17\uffff";
    static final String DFA11_minS =
        "\1\46\6\45\2\uffff\6\0";
    static final String DFA11_maxS =
        "\1\u00b4\6\45\2\uffff\6\0";
    static final String DFA11_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA11_specialS =
        "\11\uffff\1\0\1\2\1\3\1\4\1\1\1\5}>";
    static final String[] DFA11_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7"+
            "\1\uffff\1\7\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10"+
            "\7\4\10\1\7\10\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_static.DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_static.DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_static.DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_static.DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_static.DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_static.DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:15: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA11_9 = input.LA(1);

                         
                        int index11_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA11_13 = input.LA(1);

                         
                        int index11_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA11_10 = input.LA(1);

                         
                        int index11_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA11_11 = input.LA(1);

                         
                        int index11_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA11_12 = input.LA(1);

                         
                        int index11_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA11_14 = input.LA(1);

                         
                        int index11_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index11_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA12_static {
    static final String DFA12_eotS =
        "\110\uffff";
    static final String DFA12_eofS =
        "\1\1\107\uffff";
    static final String DFA12_minS =
        "\1\46\1\uffff\102\0\4\uffff";
    static final String DFA12_maxS =
        "\1\u00b4\1\uffff\102\0\4\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\5\102\uffff\1\1\1\2\1\3\1\4";
    static final String DFA12_specialS =
        "\2\uffff\1\23\1\65\1\5\1\4\1\21\1\66\1\25\1\6\1\61\1\52\1\100\1"+
        "\71\1\47\1\43\1\77\1\34\1\41\1\2\1\53\1\70\1\20\1\60\1\35\1\7\1"+
        "\62\1\45\1\56\1\27\1\73\1\31\1\16\1\67\1\0\1\14\1\36\1\64\1\30\1"+
        "\101\1\51\1\37\1\74\1\50\1\10\1\75\1\72\1\3\1\13\1\11\1\32\1\44"+
        "\1\24\1\33\1\42\1\57\1\46\1\40\1\22\1\55\1\76\1\26\1\63\1\15\1\1"+
        "\1\12\1\54\1\17\4\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\15\1\6\1\10\1\103\1\41\1\44\1\1\1\7\1\17\20\1\1\30\1\42"+
            "\1\1\1\47\1\1\1\43\1\50\1\57\1\22\1\45\1\14\1\46\1\34\1\35\1"+
            "\26\1\51\1\52\1\53\1\54\1\55\1\36\1\16\4\1\1\27\1\62\11\1\1"+
            "\32\1\1\1\56\4\1\1\63\1\1\1\64\1\1\1\65\5\1\1\66\1\1\1\60\3"+
            "\1\1\67\1\1\1\40\1\61\3\1\1\33\2\1\1\2\5\1\1\20\1\1\1\21\1\1"+
            "\1\12\2\1\1\13\1\25\1\75\1\70\1\1\1\3\1\4\1\5\1\100\1\1\1\31"+
            "\1\37\1\11\1\101\1\76\1\102\1\23\1\24\4\1\1\71\10\1\1\72\1\77"+
            "\1\73\1\74",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_static.DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_static.DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_static.DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_static.DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_static.DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_static.DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()+ loopback of 102:24: ( dissolvePhrase | ratio | noun | numeric )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA12_34 = input.LA(1);

                         
                        int index12_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_34);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA12_64 = input.LA(1);

                         
                        int index12_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_64);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA12_19 = input.LA(1);

                         
                        int index12_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_19);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA12_47 = input.LA(1);

                         
                        int index12_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_47);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA12_25 = input.LA(1);

                         
                        int index12_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_25);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA12_44 = input.LA(1);

                         
                        int index12_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_44);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA12_49 = input.LA(1);

                         
                        int index12_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_49);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA12_65 = input.LA(1);

                         
                        int index12_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_65);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA12_48 = input.LA(1);

                         
                        int index12_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_48);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA12_35 = input.LA(1);

                         
                        int index12_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_35);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA12_63 = input.LA(1);

                         
                        int index12_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_63);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA12_32 = input.LA(1);

                         
                        int index12_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_32);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA12_67 = input.LA(1);

                         
                        int index12_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_67);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA12_22 = input.LA(1);

                         
                        int index12_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_22);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA12_58 = input.LA(1);

                         
                        int index12_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_58);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA12_2 = input.LA(1);

                         
                        int index12_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_2);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA12_52 = input.LA(1);

                         
                        int index12_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_52);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA12_61 = input.LA(1);

                         
                        int index12_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_61);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA12_29 = input.LA(1);

                         
                        int index12_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_29);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA12_38 = input.LA(1);

                         
                        int index12_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_38);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA12_31 = input.LA(1);

                         
                        int index12_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_31);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA12_50 = input.LA(1);

                         
                        int index12_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_50);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA12_53 = input.LA(1);

                         
                        int index12_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_53);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA12_17 = input.LA(1);

                         
                        int index12_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred89_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred89_ChemicalChunker())) ) {s = 69;}

                        else if ( ((synpred90_ChemicalChunker()||(synpred90_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_17);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA12_24 = input.LA(1);

                         
                        int index12_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_24);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA12_36 = input.LA(1);

                         
                        int index12_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_36);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA12_41 = input.LA(1);

                         
                        int index12_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_41);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA12_57 = input.LA(1);

                         
                        int index12_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_57);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA12_18 = input.LA(1);

                         
                        int index12_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_18);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA12_54 = input.LA(1);

                         
                        int index12_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_54);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA12_15 = input.LA(1);

                         
                        int index12_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_15);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA12_51 = input.LA(1);

                         
                        int index12_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_51);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA12_27 = input.LA(1);

                         
                        int index12_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_27);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA12_56 = input.LA(1);

                         
                        int index12_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_56);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA12_43 = input.LA(1);

                         
                        int index12_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_43);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA12_40 = input.LA(1);

                         
                        int index12_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_40);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred89_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred89_ChemicalChunker())) ) {s = 69;}

                        else if ( ((synpred90_ChemicalChunker()||(synpred90_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 70;}

                        else if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA12_20 = input.LA(1);

                         
                        int index12_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_20);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA12_66 = input.LA(1);

                         
                        int index12_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_66);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA12_59 = input.LA(1);

                         
                        int index12_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_59);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA12_28 = input.LA(1);

                         
                        int index12_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_28);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA12_55 = input.LA(1);

                         
                        int index12_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_55);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA12_23 = input.LA(1);

                         
                        int index12_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_23);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred89_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred89_ChemicalChunker())) ) {s = 69;}

                        else if ( ((synpred90_ChemicalChunker()||(synpred90_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA12_26 = input.LA(1);

                         
                        int index12_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_26);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_62);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA12_37 = input.LA(1);

                         
                        int index12_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_37);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA12_33 = input.LA(1);

                         
                        int index12_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_33);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA12_21 = input.LA(1);

                         
                        int index12_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_21);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred89_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred89_ChemicalChunker())) ) {s = 69;}

                        else if ( ((synpred90_ChemicalChunker()||(synpred90_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 70;}

                        else if ( (synpred91_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA12_46 = input.LA(1);

                         
                        int index12_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_46);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA12_30 = input.LA(1);

                         
                        int index12_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_30);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA12_42 = input.LA(1);

                         
                        int index12_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_42);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA12_45 = input.LA(1);

                         
                        int index12_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_45);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA12_60 = input.LA(1);

                         
                        int index12_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_60);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA12_16 = input.LA(1);

                         
                        int index12_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred89_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred89_ChemicalChunker())) ) {s = 69;}

                        else if ( ((synpred90_ChemicalChunker()||(synpred90_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_16);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA12_39 = input.LA(1);

                         
                        int index12_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred89_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred90_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_39);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA16_static {
    static final String DFA16_eotS =
        "\112\uffff";
    static final String DFA16_eofS =
        "\1\1\111\uffff";
    static final String DFA16_minS =
        "\1\46\1\uffff\107\0\1\uffff";
    static final String DFA16_maxS =
        "\1\u00b4\1\uffff\107\0\1\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\2\107\uffff\1\1";
    static final String DFA16_specialS =
        "\2\uffff\1\2\1\20\1\73\1\46\1\53\1\76\1\65\1\56\1\17\1\21\1\67"+
        "\1\74\1\10\1\66\1\34\1\72\1\33\1\32\1\7\1\62\1\42\1\6\1\106\1\25"+
        "\1\11\1\45\1\30\1\57\1\103\1\26\1\15\1\12\1\52\1\22\1\44\1\61\1"+
        "\41\1\77\1\50\1\1\1\13\1\104\1\51\1\35\1\3\1\63\1\23\1\71\1\27\1"+
        "\60\1\75\1\31\1\55\1\0\1\105\1\102\1\54\1\70\1\5\1\40\1\64\1\16"+
        "\1\37\1\100\1\14\1\47\1\43\1\36\1\24\1\4\1\101\1\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\22\1\11\1\13\1\110\1\46\1\51\1\1\1\12\1\33\20\1\1\27\1\47"+
            "\1\1\1\54\1\1\1\50\1\55\1\64\1\26\1\52\1\21\1\53\1\41\1\42\1"+
            "\23\1\56\1\57\1\60\1\61\1\62\1\43\1\25\4\1\1\24\1\67\11\1\1"+
            "\31\1\1\1\63\4\1\1\70\1\1\1\71\1\1\1\72\5\1\1\73\1\1\1\65\3"+
            "\1\1\74\1\1\1\45\1\66\3\1\1\40\2\1\1\15\5\1\1\34\1\1\1\35\1"+
            "\1\1\17\1\1\1\14\1\20\1\16\1\102\1\75\1\1\1\6\1\7\1\10\1\105"+
            "\1\1\1\30\1\44\1\32\1\106\1\103\1\107\1\36\1\37\1\2\1\3\1\5"+
            "\1\4\1\76\10\1\1\77\1\104\1\100\1\101",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_static.DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_static.DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_static.DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_static.DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_static.DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_static.DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:64: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | ratio | noun | numeric ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA16_55 = input.LA(1);

                         
                        int index16_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_55);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA16_41 = input.LA(1);

                         
                        int index16_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_41);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA16_2 = input.LA(1);

                         
                        int index16_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_2);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA16_46 = input.LA(1);

                         
                        int index16_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_46);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA16_71 = input.LA(1);

                         
                        int index16_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_71);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA16_60 = input.LA(1);

                         
                        int index16_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_60);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA16_23 = input.LA(1);

                         
                        int index16_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_23);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA16_20 = input.LA(1);

                         
                        int index16_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_20);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA16_14 = input.LA(1);

                         
                        int index16_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_14);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA16_26 = input.LA(1);

                         
                        int index16_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_26);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA16_33 = input.LA(1);

                         
                        int index16_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_33);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA16_42 = input.LA(1);

                         
                        int index16_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_42);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA16_66 = input.LA(1);

                         
                        int index16_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_66);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA16_32 = input.LA(1);

                         
                        int index16_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_32);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA16_63 = input.LA(1);

                         
                        int index16_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_63);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_10);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA16_11 = input.LA(1);

                         
                        int index16_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_11);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA16_35 = input.LA(1);

                         
                        int index16_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_35);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA16_48 = input.LA(1);

                         
                        int index16_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_48);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA16_70 = input.LA(1);

                         
                        int index16_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_70);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA16_25 = input.LA(1);

                         
                        int index16_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_25);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA16_31 = input.LA(1);

                         
                        int index16_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_31);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA16_50 = input.LA(1);

                         
                        int index16_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_50);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA16_28 = input.LA(1);

                         
                        int index16_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred97_ChemicalChunker()||(synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_28);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA16_53 = input.LA(1);

                         
                        int index16_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_53);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA16_19 = input.LA(1);

                         
                        int index16_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_19);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA16_18 = input.LA(1);

                         
                        int index16_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred97_ChemicalChunker()||(synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_18);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA16_16 = input.LA(1);

                         
                        int index16_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred97_ChemicalChunker()||(synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_16);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA16_45 = input.LA(1);

                         
                        int index16_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_45);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA16_69 = input.LA(1);

                         
                        int index16_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_69);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA16_64 = input.LA(1);

                         
                        int index16_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_64);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA16_61 = input.LA(1);

                         
                        int index16_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_61);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA16_38 = input.LA(1);

                         
                        int index16_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_38);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA16_22 = input.LA(1);

                         
                        int index16_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_22);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA16_68 = input.LA(1);

                         
                        int index16_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_68);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA16_36 = input.LA(1);

                         
                        int index16_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_36);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA16_27 = input.LA(1);

                         
                        int index16_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_27);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA16_67 = input.LA(1);

                         
                        int index16_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_67);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA16_40 = input.LA(1);

                         
                        int index16_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_40);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA16_44 = input.LA(1);

                         
                        int index16_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_44);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA16_34 = input.LA(1);

                         
                        int index16_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_34);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA16_58 = input.LA(1);

                         
                        int index16_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_58);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA16_54 = input.LA(1);

                         
                        int index16_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_54);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_9);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA16_29 = input.LA(1);

                         
                        int index16_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred97_ChemicalChunker()||(synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_29);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA16_51 = input.LA(1);

                         
                        int index16_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_51);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA16_37 = input.LA(1);

                         
                        int index16_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_37);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA16_21 = input.LA(1);

                         
                        int index16_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_21);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA16_47 = input.LA(1);

                         
                        int index16_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_47);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA16_62 = input.LA(1);

                         
                        int index16_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_62);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA16_15 = input.LA(1);

                         
                        int index16_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred97_ChemicalChunker()||(synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred97_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_15);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA16_12 = input.LA(1);

                         
                        int index16_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_12);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA16_59 = input.LA(1);

                         
                        int index16_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_59);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA16_49 = input.LA(1);

                         
                        int index16_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_49);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA16_17 = input.LA(1);

                         
                        int index16_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_17);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA16_13 = input.LA(1);

                         
                        int index16_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_13);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA16_52 = input.LA(1);

                         
                        int index16_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_52);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA16_39 = input.LA(1);

                         
                        int index16_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_39);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA16_65 = input.LA(1);

                         
                        int index16_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_65);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA16_72 = input.LA(1);

                         
                        int index16_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_72);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA16_57 = input.LA(1);

                         
                        int index16_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_57);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA16_30 = input.LA(1);

                         
                        int index16_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_30);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA16_43 = input.LA(1);

                         
                        int index16_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_43);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA16_56 = input.LA(1);

                         
                        int index16_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_56);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA16_24 = input.LA(1);

                         
                        int index16_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA13_static {
    static final String DFA13_eotS =
        "\110\uffff";
    static final String DFA13_eofS =
        "\110\uffff";
    static final String DFA13_minS =
        "\1\46\17\uffff\1\0\67\uffff";
    static final String DFA13_maxS =
        "\1\u00b4\17\uffff\1\0\67\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA13_specialS =
        "\20\uffff\1\0\67\uffff}>";
    static final String[] DFA13_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_static.DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_static.DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_static.DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_static.DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_static.DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_static.DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_static.DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_static.DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:65: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA13_16 = input.LA(1);

                         
                        int index13_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA14_static {
    static final String DFA14_eotS =
        "\17\uffff";
    static final String DFA14_eofS =
        "\17\uffff";
    static final String DFA14_minS =
        "\1\46\6\45\2\uffff\6\0";
    static final String DFA14_maxS =
        "\1\u00b4\6\45\2\uffff\6\0";
    static final String DFA14_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA14_specialS =
        "\11\uffff\1\1\1\0\1\4\1\2\1\3\1\5}>";
    static final String[] DFA14_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7"+
            "\1\uffff\1\7\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10"+
            "\7\4\10\1\7\10\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_static.DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_static.DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_static.DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_static.DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_static.DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_static.DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:78: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA15_static {
    static final String DFA15_eotS =
        "\107\uffff";
    static final String DFA15_eofS =
        "\107\uffff";
    static final String DFA15_minS =
        "\1\46\102\0\4\uffff";
    static final String DFA15_maxS =
        "\1\u00b4\102\0\4\uffff";
    static final String DFA15_acceptS =
        "\103\uffff\1\1\1\2\1\3\1\4";
    static final String DFA15_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\1\101\4\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\13\1\4\1\6\1\102\1\40\1\43\1\uffff\1\5\1\16\20\uffff\1\27"+
            "\1\41\1\uffff\1\46\1\uffff\1\42\1\47\1\56\1\21\1\44\1\12\1\45"+
            "\1\33\1\34\1\25\1\50\1\51\1\52\1\53\1\54\1\35\1\15\4\uffff\1"+
            "\26\1\61\11\uffff\1\31\1\uffff\1\55\4\uffff\1\62\1\uffff\1\63"+
            "\1\uffff\1\64\5\uffff\1\65\1\uffff\1\57\3\uffff\1\66\1\uffff"+
            "\1\37\1\60\3\uffff\1\32\2\uffff\1\14\5\uffff\1\17\1\uffff\1"+
            "\20\1\uffff\1\10\2\uffff\1\11\1\24\1\74\1\67\1\uffff\1\1\1\2"+
            "\1\3\1\77\1\uffff\1\30\1\36\1\7\1\100\1\75\1\101\1\22\1\23\4"+
            "\uffff\1\70\10\uffff\1\71\1\76\1\72\1\73",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_static.DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_static.DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_static.DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_static.DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_static.DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_static.DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "102:86: ( dissolvePhrase | ratio | noun | numeric )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA15_1 = input.LA(1);

                         
                        int index15_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA15_2 = input.LA(1);

                         
                        int index15_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA15_3 = input.LA(1);

                         
                        int index15_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA15_5 = input.LA(1);

                         
                        int index15_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA15_6 = input.LA(1);

                         
                        int index15_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA15_7 = input.LA(1);

                         
                        int index15_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA15_8 = input.LA(1);

                         
                        int index15_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred96_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred96_ChemicalChunker())) ) {s = 69;}

                         
                        input.seek(index15_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA15_9 = input.LA(1);

                         
                        int index15_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred96_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred96_ChemicalChunker())) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA15_10 = input.LA(1);

                         
                        int index15_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA15_11 = input.LA(1);

                         
                        int index15_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred96_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred96_ChemicalChunker())) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index15_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA15_12 = input.LA(1);

                         
                        int index15_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA15_13 = input.LA(1);

                         
                        int index15_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA15_14 = input.LA(1);

                         
                        int index15_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA15_15 = input.LA(1);

                         
                        int index15_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred96_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred96_ChemicalChunker())) ) {s = 69;}

                         
                        input.seek(index15_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA15_16 = input.LA(1);

                         
                        int index15_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred96_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred96_ChemicalChunker())) ) {s = 69;}

                         
                        input.seek(index15_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA15_17 = input.LA(1);

                         
                        int index15_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA15_18 = input.LA(1);

                         
                        int index15_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA15_19 = input.LA(1);

                         
                        int index15_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA15_20 = input.LA(1);

                         
                        int index15_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA15_21 = input.LA(1);

                         
                        int index15_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA15_22 = input.LA(1);

                         
                        int index15_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA15_23 = input.LA(1);

                         
                        int index15_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA15_24 = input.LA(1);

                         
                        int index15_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA15_25 = input.LA(1);

                         
                        int index15_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA15_26 = input.LA(1);

                         
                        int index15_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA15_27 = input.LA(1);

                         
                        int index15_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA15_28 = input.LA(1);

                         
                        int index15_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA15_29 = input.LA(1);

                         
                        int index15_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA15_30 = input.LA(1);

                         
                        int index15_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA15_31 = input.LA(1);

                         
                        int index15_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_31);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA15_32 = input.LA(1);

                         
                        int index15_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA15_33 = input.LA(1);

                         
                        int index15_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA15_34 = input.LA(1);

                         
                        int index15_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_34);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA15_35 = input.LA(1);

                         
                        int index15_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_35);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA15_36 = input.LA(1);

                         
                        int index15_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_36);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA15_37 = input.LA(1);

                         
                        int index15_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_37);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA15_38 = input.LA(1);

                         
                        int index15_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_38);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA15_39 = input.LA(1);

                         
                        int index15_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_39);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA15_40 = input.LA(1);

                         
                        int index15_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_40);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA15_41 = input.LA(1);

                         
                        int index15_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_41);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA15_42 = input.LA(1);

                         
                        int index15_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_42);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA15_43 = input.LA(1);

                         
                        int index15_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_43);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA15_44 = input.LA(1);

                         
                        int index15_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_44);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA15_45 = input.LA(1);

                         
                        int index15_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_45);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA15_46 = input.LA(1);

                         
                        int index15_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_46);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA15_47 = input.LA(1);

                         
                        int index15_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_47);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA15_48 = input.LA(1);

                         
                        int index15_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_48);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA15_49 = input.LA(1);

                         
                        int index15_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_49);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA15_50 = input.LA(1);

                         
                        int index15_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_50);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA15_51 = input.LA(1);

                         
                        int index15_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_51);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA15_52 = input.LA(1);

                         
                        int index15_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_52);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA15_53 = input.LA(1);

                         
                        int index15_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_53);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA15_54 = input.LA(1);

                         
                        int index15_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_54);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA15_55 = input.LA(1);

                         
                        int index15_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_55);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA15_56 = input.LA(1);

                         
                        int index15_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_56);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA15_57 = input.LA(1);

                         
                        int index15_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_57);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA15_58 = input.LA(1);

                         
                        int index15_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_58);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA15_59 = input.LA(1);

                         
                        int index15_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_59);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA15_60 = input.LA(1);

                         
                        int index15_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_60);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA15_61 = input.LA(1);

                         
                        int index15_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_61);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA15_62 = input.LA(1);

                         
                        int index15_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_62);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA15_63 = input.LA(1);

                         
                        int index15_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_63);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA15_64 = input.LA(1);

                         
                        int index15_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_64);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA15_65 = input.LA(1);

                         
                        int index15_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_65);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA15_66 = input.LA(1);

                         
                        int index15_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index15_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA18_static {
    static final String DFA18_eotS =
        "\24\uffff";
    static final String DFA18_eofS =
        "\1\22\23\uffff";
    static final String DFA18_minS =
        "\1\46\21\0\2\uffff";
    static final String DFA18_maxS =
        "\1\u00b4\21\0\2\uffff";
    static final String DFA18_acceptS =
        "\22\uffff\1\2\1\1";
    static final String DFA18_specialS =
        "\1\uffff\1\15\1\2\1\20\1\10\1\11\1\16\1\13\1\3\1\4\1\6\1\1\1\14"+
        "\1\7\1\5\1\0\1\12\1\17\2\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\13\1\4\1\6\4\22\1\5\1\16\30\22\1\21\1\22\1\12\12\22\1\15"+
            "\60\22\1\14\5\22\1\17\1\22\1\20\1\22\1\10\2\22\1\11\4\22\1\1"+
            "\1\2\1\3\4\22\1\7\26\22",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_static.DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_static.DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_static.DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_static.DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_static.DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_static.DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_static.DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "102:157: ( dissolvePhrase )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA18_15 = input.LA(1);

                         
                        int index18_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred99_ChemicalChunker()||(synpred99_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred99_ChemicalChunker()||(synpred99_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred99_ChemicalChunker()||(synpred99_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred99_ChemicalChunker()||(synpred99_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA18_16 = input.LA(1);

                         
                        int index18_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred99_ChemicalChunker()||(synpred99_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_16);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA18_17 = input.LA(1);

                         
                        int index18_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_17);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_ChemicalChunker()) ) {s = 19;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA20_static {
    static final String DFA20_eotS =
        "\23\uffff";
    static final String DFA20_eofS =
        "\23\uffff";
    static final String DFA20_minS =
        "\1\46\7\uffff\1\0\12\uffff";
    static final String DFA20_maxS =
        "\1\u009e\7\uffff\1\0\12\uffff";
    static final String DFA20_acceptS =
        "\1\uffff\1\1\20\uffff\1\2";
    static final String DFA20_specialS =
        "\10\uffff\1\0\12\uffff}>";
    static final String[] DFA20_transitionS = {
            "\3\1\4\uffff\2\1\30\uffff\1\1\1\uffff\1\1\12\uffff\1\1\60\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\1\uffff\1\10\2\uffff\1\1\4\uffff"+
            "\3\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_static.DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_static.DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_static.DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_static.DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_static.DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_static.DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_static.DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "104:4: ( dissolveStructure | lrb dissolveStructure rrb )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred101_ChemicalChunker()||(synpred101_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 1;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA21_static {
    static final String DFA21_eotS =
        "\17\uffff";
    static final String DFA21_eofS =
        "\17\uffff";
    static final String DFA21_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA21_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA21_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA21_specialS =
        "\10\uffff\1\3\1\5\1\0\1\4\1\2\1\1\1\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\30\uffff\1\7\1\uffff\1\7\12\uffff"+
            "\1\7\60\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_static.DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_static.DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_static.DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_static.DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_static.DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_static.DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "107:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA21_8 = input.LA(1);

                         
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred102_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA23_static {
    static final String DFA23_eotS =
        "\21\uffff";
    static final String DFA23_eofS =
        "\21\uffff";
    static final String DFA23_minS =
        "\1\46\5\0\13\uffff";
    static final String DFA23_maxS =
        "\1\u0099\5\0\13\uffff";
    static final String DFA23_acceptS =
        "\6\uffff\1\1\6\uffff\1\2\3\uffff";
    static final String DFA23_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\13\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\4\2\6\4\uffff\1\6\1\15\30\uffff\1\15\1\uffff\1\3\12\uffff"+
            "\1\6\60\uffff\1\5\5\uffff\1\15\1\uffff\1\15\1\uffff\1\1\2\uffff"+
            "\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_static.DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_static.DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_static.DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_static.DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_static.DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_static.DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "107:32: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA23_1 = input.LA(1);

                         
                        int index23_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA23_2 = input.LA(1);

                         
                        int index23_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA23_3 = input.LA(1);

                         
                        int index23_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA23_4 = input.LA(1);

                         
                        int index23_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA23_5 = input.LA(1);

                         
                        int index23_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index23_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA30_static {
    static final String DFA30_eotS =
        "\u0092\uffff";
    static final String DFA30_eofS =
        "\1\1\u0091\uffff";
    static final String DFA30_minS =
        "\1\46\110\uffff\1\0\110\uffff";
    static final String DFA30_maxS =
        "\1\u00b4\110\uffff\1\0\110\uffff";
    static final String DFA30_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA30_specialS =
        "\111\uffff\1\0\110\uffff}>";
    static final String[] DFA30_transitionS = {
            "\14\1\1\111\u0082\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_static.DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_static.DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_static.DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_static.DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_static.DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_static.DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_static.DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_static.DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "()+ loopback of 107:60: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA30_73 = input.LA(1);

                         
                        int index30_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_73);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA26_static {
    static final String DFA26_eotS =
        "\17\uffff";
    static final String DFA26_eofS =
        "\17\uffff";
    static final String DFA26_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA26_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA26_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA26_specialS =
        "\10\uffff\1\4\1\5\1\0\1\1\1\2\1\3\1\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\30\uffff\1\7\1\uffff\1\7\12\uffff"+
            "\1\7\60\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_static.DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_static.DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_static.DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_static.DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_static.DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_static.DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_static.DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_static.DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "107:73: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA26_10 = input.LA(1);

                         
                        int index26_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA26_11 = input.LA(1);

                         
                        int index26_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA26_12 = input.LA(1);

                         
                        int index26_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA26_13 = input.LA(1);

                         
                        int index26_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA26_8 = input.LA(1);

                         
                        int index26_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_8);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA26_9 = input.LA(1);

                         
                        int index26_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index26_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA28_static {
    static final String DFA28_eotS =
        "\21\uffff";
    static final String DFA28_eofS =
        "\21\uffff";
    static final String DFA28_minS =
        "\1\46\5\0\13\uffff";
    static final String DFA28_maxS =
        "\1\u0099\5\0\13\uffff";
    static final String DFA28_acceptS =
        "\6\uffff\1\1\6\uffff\1\2\3\uffff";
    static final String DFA28_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\13\uffff}>";
    static final String[] DFA28_transitionS = {
            "\1\4\2\6\4\uffff\1\6\1\15\30\uffff\1\15\1\uffff\1\3\12\uffff"+
            "\1\6\60\uffff\1\5\5\uffff\1\15\1\uffff\1\15\1\uffff\1\1\2\uffff"+
            "\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_static.DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_static.DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_static.DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_static.DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_static.DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_static.DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_static.DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_static.DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "107:83: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA28_1 = input.LA(1);

                         
                        int index28_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA28_2 = input.LA(1);

                         
                        int index28_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA28_3 = input.LA(1);

                         
                        int index28_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA28_4 = input.LA(1);

                         
                        int index28_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA28_5 = input.LA(1);

                         
                        int index28_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index28_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 28, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA29_static {
    static final String DFA29_eotS =
        "\u0092\uffff";
    static final String DFA29_eofS =
        "\1\3\u0091\uffff";
    static final String DFA29_minS =
        "\1\46\2\0\u008f\uffff";
    static final String DFA29_maxS =
        "\1\u00b4\2\0\u008f\uffff";
    static final String DFA29_acceptS =
        "\3\uffff\1\2\u008d\uffff\1\1";
    static final String DFA29_specialS =
        "\1\uffff\1\0\1\1\u008f\uffff}>";
    static final String[] DFA29_transitionS = {
            "\137\3\1\2\13\3\1\1\43\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_static.DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_static.DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_static.DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_static.DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_static.DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_static.DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_static.DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "()* loopback of 107:110: ( conjunction molecule )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA29_1 = input.LA(1);

                         
                        int index29_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA29_2 = input.LA(1);

                         
                        int index29_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index29_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA44_static {
    static final String DFA44_eotS =
        "\67\uffff";
    static final String DFA44_eofS =
        "\1\1\66\uffff";
    static final String DFA44_minS =
        "\1\46\1\uffff\64\0\1\uffff";
    static final String DFA44_maxS =
        "\1\u00b4\1\uffff\64\0\1\uffff";
    static final String DFA44_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA44_specialS =
        "\2\uffff\1\45\1\25\1\4\1\54\1\61\1\10\1\20\1\55\1\5\1\46\1\24\1"+
        "\53\1\21\1\16\1\17\1\51\1\1\1\2\1\35\1\0\1\33\1\44\1\42\1\60\1\47"+
        "\1\31\1\63\1\7\1\22\1\36\1\57\1\13\1\30\1\62\1\6\1\34\1\40\1\14"+
        "\1\41\1\11\1\56\1\26\1\15\1\43\1\52\1\3\1\12\1\37\1\27\1\32\1\50"+
        "\1\23\1\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\1\1\11\1\13\4\1\1\12\47\1\1\25\1\65\1\26\1\31\2\1\1\33\1"+
            "\32\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\1\1\43\1\1\1\44\1\30"+
            "\1\45\1\46\1\1\1\47\1\1\1\50\1\1\1\51\1\52\1\27\1\53\1\54\1"+
            "\1\1\55\1\1\1\56\1\57\1\60\1\1\1\61\1\15\1\1\1\62\1\63\1\64"+
            "\1\1\1\14\23\1\1\6\1\7\1\10\1\1\1\16\10\1\1\2\1\3\1\5\1\4\3"+
            "\1\1\17\1\22\1\21\1\24\1\20\1\23\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_static.DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_static.DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_static.DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_static.DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_static.DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_static.DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_static.DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_static.DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "()+ loopback of 112:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA44_21 = input.LA(1);

                         
                        int index44_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_21);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA44_18 = input.LA(1);

                         
                        int index44_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_18);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA44_19 = input.LA(1);

                         
                        int index44_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_19);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA44_47 = input.LA(1);

                         
                        int index44_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_47);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA44_4 = input.LA(1);

                         
                        int index44_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_4);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA44_10 = input.LA(1);

                         
                        int index44_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA44_36 = input.LA(1);

                         
                        int index44_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_36);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA44_29 = input.LA(1);

                         
                        int index44_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_29);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA44_7 = input.LA(1);

                         
                        int index44_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_7);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA44_41 = input.LA(1);

                         
                        int index44_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_41);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA44_48 = input.LA(1);

                         
                        int index44_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_48);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA44_33 = input.LA(1);

                         
                        int index44_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_33);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA44_39 = input.LA(1);

                         
                        int index44_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_39);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA44_44 = input.LA(1);

                         
                        int index44_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_44);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA44_15 = input.LA(1);

                         
                        int index44_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA44_16 = input.LA(1);

                         
                        int index44_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA44_8 = input.LA(1);

                         
                        int index44_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_8);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA44_14 = input.LA(1);

                         
                        int index44_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_14);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA44_30 = input.LA(1);

                         
                        int index44_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_30);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA44_53 = input.LA(1);

                         
                        int index44_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_53);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA44_12 = input.LA(1);

                         
                        int index44_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_12);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA44_3 = input.LA(1);

                         
                        int index44_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_3);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA44_43 = input.LA(1);

                         
                        int index44_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_43);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA44_50 = input.LA(1);

                         
                        int index44_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_50);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA44_34 = input.LA(1);

                         
                        int index44_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_34);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA44_27 = input.LA(1);

                         
                        int index44_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_27);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA44_51 = input.LA(1);

                         
                        int index44_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_51);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA44_22 = input.LA(1);

                         
                        int index44_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_22);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA44_37 = input.LA(1);

                         
                        int index44_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_37);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA44_20 = input.LA(1);

                         
                        int index44_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_20);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA44_31 = input.LA(1);

                         
                        int index44_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_31);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA44_49 = input.LA(1);

                         
                        int index44_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_49);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA44_38 = input.LA(1);

                         
                        int index44_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_38);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA44_40 = input.LA(1);

                         
                        int index44_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_40);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA44_24 = input.LA(1);

                         
                        int index44_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_24);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA44_45 = input.LA(1);

                         
                        int index44_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_45);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA44_23 = input.LA(1);

                         
                        int index44_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_23);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA44_2 = input.LA(1);

                         
                        int index44_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_2);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA44_11 = input.LA(1);

                         
                        int index44_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_11);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA44_26 = input.LA(1);

                         
                        int index44_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_26);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA44_52 = input.LA(1);

                         
                        int index44_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_52);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA44_17 = input.LA(1);

                         
                        int index44_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_17);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA44_46 = input.LA(1);

                         
                        int index44_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_46);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA44_13 = input.LA(1);

                         
                        int index44_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_13);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA44_5 = input.LA(1);

                         
                        int index44_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_5);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA44_9 = input.LA(1);

                         
                        int index44_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_9);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA44_42 = input.LA(1);

                         
                        int index44_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_42);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA44_32 = input.LA(1);

                         
                        int index44_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_32);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA44_25 = input.LA(1);

                         
                        int index44_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_25);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA44_6 = input.LA(1);

                         
                        int index44_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_6);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA44_35 = input.LA(1);

                         
                        int index44_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_35);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA44_28 = input.LA(1);

                         
                        int index44_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred125_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA39_static {
    static final String DFA39_eotS =
        "\53\uffff";
    static final String DFA39_eofS =
        "\1\1\52\uffff";
    static final String DFA39_minS =
        "\1\46\1\uffff\50\0\1\uffff";
    static final String DFA39_maxS =
        "\1\u00b4\1\uffff\50\0\1\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA39_specialS =
        "\2\uffff\1\1\1\40\1\45\1\36\1\17\1\3\1\21\1\13\1\23\1\42\1\0\1"+
        "\37\1\14\1\33\1\43\1\16\1\30\1\26\1\11\1\31\1\20\1\7\1\6\1\25\1"+
        "\2\1\34\1\47\1\44\1\22\1\15\1\46\1\4\1\35\1\12\1\32\1\24\1\10\1"+
        "\5\1\27\1\41\1\uffff}>";
    static final String[] DFA39_transitionS = {
            "\57\1\1\11\1\51\1\12\1\15\2\1\1\17\1\16\1\20\1\21\1\22\1\23"+
            "\1\24\1\25\1\26\1\1\1\27\1\1\1\30\1\14\1\31\1\32\1\1\1\33\1"+
            "\1\1\34\1\1\1\35\1\36\1\13\1\37\1\40\1\1\1\41\1\1\1\42\1\43"+
            "\1\44\1\1\1\45\1\2\1\1\1\46\1\47\1\50\51\1\1\3\1\6\1\5\1\10"+
            "\1\4\1\7\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_static.DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_static.DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_static.DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_static.DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_static.DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_static.DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_static.DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_static.DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "()+ loopback of 112:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA39_12 = input.LA(1);

                         
                        int index39_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA39_2 = input.LA(1);

                         
                        int index39_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA39_26 = input.LA(1);

                         
                        int index39_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_26);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA39_7 = input.LA(1);

                         
                        int index39_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_7);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA39_33 = input.LA(1);

                         
                        int index39_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_33);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA39_39 = input.LA(1);

                         
                        int index39_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_39);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA39_24 = input.LA(1);

                         
                        int index39_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_24);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA39_23 = input.LA(1);

                         
                        int index39_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_23);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA39_38 = input.LA(1);

                         
                        int index39_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_38);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA39_20 = input.LA(1);

                         
                        int index39_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_20);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA39_35 = input.LA(1);

                         
                        int index39_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_35);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA39_14 = input.LA(1);

                         
                        int index39_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_14);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA39_31 = input.LA(1);

                         
                        int index39_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_31);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA39_17 = input.LA(1);

                         
                        int index39_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_17);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA39_6 = input.LA(1);

                         
                        int index39_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_6);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA39_22 = input.LA(1);

                         
                        int index39_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_22);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA39_8 = input.LA(1);

                         
                        int index39_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_8);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA39_30 = input.LA(1);

                         
                        int index39_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_30);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA39_10 = input.LA(1);

                         
                        int index39_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_10);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA39_37 = input.LA(1);

                         
                        int index39_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_37);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA39_25 = input.LA(1);

                         
                        int index39_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_25);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA39_19 = input.LA(1);

                         
                        int index39_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_19);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA39_40 = input.LA(1);

                         
                        int index39_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_40);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA39_18 = input.LA(1);

                         
                        int index39_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_18);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA39_21 = input.LA(1);

                         
                        int index39_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_21);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA39_36 = input.LA(1);

                         
                        int index39_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_36);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA39_15 = input.LA(1);

                         
                        int index39_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_15);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA39_27 = input.LA(1);

                         
                        int index39_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_27);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA39_34 = input.LA(1);

                         
                        int index39_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_34);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA39_5 = input.LA(1);

                         
                        int index39_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_5);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA39_13 = input.LA(1);

                         
                        int index39_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_13);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA39_3 = input.LA(1);

                         
                        int index39_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_3);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA39_41 = input.LA(1);

                         
                        int index39_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_41);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA39_11 = input.LA(1);

                         
                        int index39_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_11);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA39_16 = input.LA(1);

                         
                        int index39_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_16);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA39_29 = input.LA(1);

                         
                        int index39_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_29);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA39_32 = input.LA(1);

                         
                        int index39_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_32);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA39_28 = input.LA(1);

                         
                        int index39_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA41_static {
    static final String DFA41_eotS =
        "\13\uffff";
    static final String DFA41_eofS =
        "\1\1\12\uffff";
    static final String DFA41_minS =
        "\1\46\1\uffff\4\45\4\0\1\uffff";
    static final String DFA41_maxS =
        "\1\u00b4\1\uffff\4\45\4\0\1\uffff";
    static final String DFA41_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA41_specialS =
        "\6\uffff\1\2\1\1\1\0\1\3\1\uffff}>";
    static final String[] DFA41_transitionS = {
            "\176\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_static.DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_static.DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_static.DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_static.DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_static.DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_static.DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_static.DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_static.DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "()* loopback of 112:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA41_8 = input.LA(1);

                         
                        int index41_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA41_7 = input.LA(1);

                         
                        int index41_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA41_6 = input.LA(1);

                         
                        int index41_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_6);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA41_9 = input.LA(1);

                         
                        int index41_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred122_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA42_static {
    static final String DFA42_eotS =
        "\17\uffff";
    static final String DFA42_eofS =
        "\1\7\16\uffff";
    static final String DFA42_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA42_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA42_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA42_specialS =
        "\10\uffff\1\3\1\0\1\4\1\1\1\2\1\5\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_static.DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_static.DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_static.DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_static.DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_static.DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_static.DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_static.DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "112:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA42_11 = input.LA(1);

                         
                        int index42_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA42_12 = input.LA(1);

                         
                        int index42_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA42_8 = input.LA(1);

                         
                        int index42_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA42_10 = input.LA(1);

                         
                        int index42_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA42_13 = input.LA(1);

                         
                        int index42_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index42_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA48_static {
    static final String DFA48_eotS =
        "\u0092\uffff";
    static final String DFA48_eofS =
        "\1\13\u0091\uffff";
    static final String DFA48_minS =
        "\1\46\12\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\27\uffff\1\0\2\uffff"+
        "\1\0\36\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA48_maxS =
        "\1\u00b4\12\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\27\uffff\1\0"+
        "\2\uffff\1\0\36\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA48_acceptS =
        "\13\uffff\1\2\u0085\uffff\1\1";
    static final String DFA48_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12"+
        "\1\13\3\uffff\1\14\1\uffff\1\15\27\uffff\1\16\2\uffff\1\17\36\uffff"+
        "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\50\uffff\1\42\12\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\13\1\10\1\12\4\13\1\11\1\13\1\120\1\121\1\117\1\125\1\126"+
            "\1\135\1\136\1\122\1\134\1\127\1\131\1\123\1\124\1\133\1\132"+
            "\1\130\1\13\1\53\7\13\1\56\74\13\1\15\1\13\1\u0087\11\13\1\14"+
            "\1\23\1\21\2\13\1\116\1\5\1\6\1\7\12\13\1\1\1\2\1\4\1\3\1\13"+
            "\1\115\13\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_static.DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_static.DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_static.DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_static.DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_static.DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_static.DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_static.DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_static.DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "()* loopback of 112:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA48_1 = input.LA(1);

                         
                        int index48_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA48_2 = input.LA(1);

                         
                        int index48_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA48_3 = input.LA(1);

                         
                        int index48_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA48_4 = input.LA(1);

                         
                        int index48_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA48_5 = input.LA(1);

                         
                        int index48_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA48_6 = input.LA(1);

                         
                        int index48_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA48_7 = input.LA(1);

                         
                        int index48_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA48_8 = input.LA(1);

                         
                        int index48_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA48_9 = input.LA(1);

                         
                        int index48_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA48_10 = input.LA(1);

                         
                        int index48_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA48_12 = input.LA(1);

                         
                        int index48_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA48_13 = input.LA(1);

                         
                        int index48_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA48_17 = input.LA(1);

                         
                        int index48_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_17);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA48_19 = input.LA(1);

                         
                        int index48_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_19);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA48_43 = input.LA(1);

                         
                        int index48_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_43);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA48_46 = input.LA(1);

                         
                        int index48_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_46);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA48_77 = input.LA(1);

                         
                        int index48_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_77);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA48_78 = input.LA(1);

                         
                        int index48_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_78);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA48_79 = input.LA(1);

                         
                        int index48_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_79);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA48_80 = input.LA(1);

                         
                        int index48_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_80);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA48_81 = input.LA(1);

                         
                        int index48_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_81);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA48_82 = input.LA(1);

                         
                        int index48_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_82);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA48_83 = input.LA(1);

                         
                        int index48_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_83);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA48_84 = input.LA(1);

                         
                        int index48_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_84);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA48_85 = input.LA(1);

                         
                        int index48_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_85);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA48_86 = input.LA(1);

                         
                        int index48_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_86);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA48_87 = input.LA(1);

                         
                        int index48_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_87);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA48_88 = input.LA(1);

                         
                        int index48_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_88);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA48_89 = input.LA(1);

                         
                        int index48_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_89);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA48_90 = input.LA(1);

                         
                        int index48_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_90);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA48_91 = input.LA(1);

                         
                        int index48_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_91);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA48_92 = input.LA(1);

                         
                        int index48_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_92);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA48_93 = input.LA(1);

                         
                        int index48_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_93);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA48_94 = input.LA(1);

                         
                        int index48_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_94);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA48_135 = input.LA(1);

                         
                        int index48_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred129_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index48_135);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA49_static {
    static final String DFA49_eotS =
        "\60\uffff";
    static final String DFA49_eofS =
        "\51\uffff\1\52\2\uffff\1\52\3\uffff";
    static final String DFA49_minS =
        "\1\125\11\uffff\1\45\36\uffff\1\46\1\uffff\1\45\1\46\1\45\1\0\1"+
        "\uffff";
    static final String DFA49_maxS =
        "\1\u00b0\11\uffff\1\45\36\uffff\1\u00b4\1\uffff\1\45\1\u00b4\1"+
        "\45\1\0\1\uffff";
    static final String DFA49_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\1\uffff\1\27\4\uffff\1\12";
    static final String DFA49_specialS =
        "\56\uffff\1\0\1\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\7\1\50\1\10\1\13\2\uffff\1\15\1\14\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\24\1\uffff\1\25\1\uffff\1\26\1\12\1\27\1\30\1\uffff"+
            "\1\31\1\uffff\1\32\1\uffff\1\33\1\34\1\11\1\35\1\36\1\uffff"+
            "\1\37\1\uffff\1\40\1\41\1\42\1\uffff\1\43\1\44\1\uffff\1\45"+
            "\1\46\1\47\51\uffff\1\1\1\4\1\3\1\6\1\2\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\153\52\1\53\43\52",
            "",
            "\1\54",
            "\72\52\1\55\124\52",
            "\1\56",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_static.DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_static.DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_static.DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_static.DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_static.DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_static.DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_static.DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "113:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA49_46 = input.LA(1);

                         
                        int index49_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred139_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred152_ChemicalChunker()) ) {s = 42;}

                         
                        input.seek(index49_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA51_static {
    static final String DFA51_eotS =
        "\123\uffff";
    static final String DFA51_eofS =
        "\123\uffff";
    static final String DFA51_minS =
        "\1\46\2\uffff\14\0\1\uffff\5\0\2\uffff\1\0\2\uffff\1\0\1\uffff"+
        "\1\0\66\uffff";
    static final String DFA51_maxS =
        "\1\u00b4\2\uffff\14\0\1\uffff\5\0\2\uffff\1\0\2\uffff\1\0\1\uffff"+
        "\1\0\66\uffff";
    static final String DFA51_acceptS =
        "\1\uffff\1\1\1\2\14\uffff\1\6\6\uffff\1\10\2\uffff\1\11\1\uffff"+
        "\1\13\1\uffff\1\15\1\16\1\20\1\23\1\24\1\25\1\26\1\31\1\33\1\35"+
        "\1\36\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\53\1\55"+
        "\1\56\1\57\1\60\1\61\1\62\1\63\5\uffff\1\64\1\65\1\66\1\67\1\3\1"+
        "\5\1\7\1\27\1\4\1\22\1\54\1\32\1\37\1\17\1\30\1\12\1\14\1\52\1\34"+
        "\1\21";
    static final String DFA51_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\uffff\1\14\1\15\1\16\1\17\1\20\2\uffff\1\21\2\uffff\1\22\1\uffff"+
        "\1\23\66\uffff}>";
    static final String[] DFA51_transitionS = {
            "\1\7\1\13\1\15\1\102\1\40\1\43\1\uffff\1\14\1\26\20\uffff\1"+
            "\23\1\41\1\uffff\1\46\1\uffff\1\42\1\47\1\56\1\22\1\44\1\6\1"+
            "\45\1\32\1\33\1\20\1\50\1\51\1\52\1\53\1\54\1\34\1\16\4\uffff"+
            "\1\21\1\61\11\uffff\1\17\1\uffff\1\55\4\uffff\1\62\1\uffff\1"+
            "\63\1\uffff\1\64\5\uffff\1\65\1\uffff\1\57\3\uffff\1\66\1\uffff"+
            "\1\37\1\60\3\uffff\1\31\2\uffff\1\4\5\uffff\1\27\1\uffff\1\26"+
            "\1\uffff\1\3\2\uffff\1\5\1\17\1\71\1\67\1\uffff\1\10\1\11\1"+
            "\12\1\77\1\uffff\1\24\1\35\1\36\1\100\1\71\1\101\1\1\1\2\4\uffff"+
            "\1\70\10\uffff\4\71",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_static.DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_static.DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_static.DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_static.DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_static.DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_static.DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_static.DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_static.DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "120:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | fw | sym | clause | ls | nnps | pos | oscarase );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA51_3 = input.LA(1);

                         
                        int index51_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 69;}

                        else if ( ((synpred178_ChemicalChunker()||(synpred178_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 22;}

                        else if ( (synpred193_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index51_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA51_4 = input.LA(1);

                         
                        int index51_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 22;}

                         
                        input.seek(index51_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA51_5 = input.LA(1);

                         
                        int index51_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred177_ChemicalChunker()) ) {s = 69;}

                        else if ( ((synpred178_ChemicalChunker()||(synpred178_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 22;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred193_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index51_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA51_6 = input.LA(1);

                         
                        int index51_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred193_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred196_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index51_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA51_7 = input.LA(1);

                         
                        int index51_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                        else if ( ((synpred178_ChemicalChunker()||(synpred178_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 22;}

                        else if ( (synpred188_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred193_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred214_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index51_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA51_8 = input.LA(1);

                         
                        int index51_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index51_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA51_9 = input.LA(1);

                         
                        int index51_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index51_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA51_10 = input.LA(1);

                         
                        int index51_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index51_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA51_11 = input.LA(1);

                         
                        int index51_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index51_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA51_12 = input.LA(1);

                         
                        int index51_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index51_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA51_13 = input.LA(1);

                         
                        int index51_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index51_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA51_14 = input.LA(1);

                         
                        int index51_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred175_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                         
                        input.seek(index51_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA51_16 = input.LA(1);

                         
                        int index51_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred201_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index51_16);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA51_17 = input.LA(1);

                         
                        int index51_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred185_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index51_17);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA51_18 = input.LA(1);

                         
                        int index51_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index51_18);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA51_19 = input.LA(1);

                         
                        int index51_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index51_19);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA51_20 = input.LA(1);

                         
                        int index51_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 27;}

                        else if ( (synpred182_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index51_20);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA51_23 = input.LA(1);

                         
                        int index51_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred178_ChemicalChunker()||(synpred178_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 22;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index51_23);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA51_26 = input.LA(1);

                         
                        int index51_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 27;}

                        else if ( (synpred198_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index51_26);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA51_28 = input.LA(1);

                         
                        int index51_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_ChemicalChunker()) ) {s = 27;}

                        else if ( (synpred187_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index51_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA53_static {
    static final String DFA53_eotS =
        "\45\uffff";
    static final String DFA53_eofS =
        "\45\uffff";
    static final String DFA53_minS =
        "\1\47\36\0\6\uffff";
    static final String DFA53_maxS =
        "\1\u00a9\36\0\6\uffff";
    static final String DFA53_acceptS =
        "\37\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA53_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\6\uffff}>";
    static final String[] DFA53_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\1\16\1\17\1\15\1\23\1\24\1"+
            "\32\1\33\1\20\1\31\1\25\1\27\1\21\1\22\1\1\1\30\1\26\1\uffff"+
            "\1\37\7\uffff\1\40\111\uffff\1\36\1\35\2\uffff\1\14\1\6\1\7"+
            "\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff\1\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_static.DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_static.DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_static.DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_static.DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_static.DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_static.DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_static.DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_static.DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "125:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA53_1 = input.LA(1);

                         
                        int index53_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA53_2 = input.LA(1);

                         
                        int index53_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA53_3 = input.LA(1);

                         
                        int index53_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA53_4 = input.LA(1);

                         
                        int index53_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA53_5 = input.LA(1);

                         
                        int index53_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA53_6 = input.LA(1);

                         
                        int index53_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA53_7 = input.LA(1);

                         
                        int index53_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA53_8 = input.LA(1);

                         
                        int index53_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA53_9 = input.LA(1);

                         
                        int index53_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA53_10 = input.LA(1);

                         
                        int index53_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA53_11 = input.LA(1);

                         
                        int index53_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA53_12 = input.LA(1);

                         
                        int index53_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA53_13 = input.LA(1);

                         
                        int index53_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index53_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA53_14 = input.LA(1);

                         
                        int index53_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred230_ChemicalChunker()) ) {s = 35;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA53_15 = input.LA(1);

                         
                        int index53_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA53_16 = input.LA(1);

                         
                        int index53_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA53_17 = input.LA(1);

                         
                        int index53_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA53_18 = input.LA(1);

                         
                        int index53_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA53_19 = input.LA(1);

                         
                        int index53_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred229_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA53_20 = input.LA(1);

                         
                        int index53_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA53_21 = input.LA(1);

                         
                        int index53_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA53_22 = input.LA(1);

                         
                        int index53_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA53_23 = input.LA(1);

                         
                        int index53_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA53_24 = input.LA(1);

                         
                        int index53_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA53_25 = input.LA(1);

                         
                        int index53_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA53_26 = input.LA(1);

                         
                        int index53_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA53_27 = input.LA(1);

                         
                        int index53_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA53_28 = input.LA(1);

                         
                        int index53_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index53_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA53_29 = input.LA(1);

                         
                        int index53_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index53_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA53_30 = input.LA(1);

                         
                        int index53_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred228_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index53_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 53, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA55_static {
    static final String DFA55_eotS =
        "\17\uffff";
    static final String DFA55_eofS =
        "\17\uffff";
    static final String DFA55_minS =
        "\1\46\1\uffff\6\45\1\uffff\6\0";
    static final String DFA55_maxS =
        "\1\u00a7\1\uffff\6\45\1\uffff\6\0";
    static final String DFA55_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA55_specialS =
        "\11\uffff\1\5\1\0\1\2\1\4\1\1\1\3}>";
    static final String[] DFA55_transitionS = {
            "\1\1\1\5\1\7\4\uffff\1\6\33\uffff\1\1\12\uffff\1\1\60\uffff"+
            "\1\1\11\uffff\1\1\2\uffff\1\1\4\uffff\1\2\1\3\1\4\12\uffff\4"+
            "\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_static.DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_static.DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_static.DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_static.DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_static.DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_static.DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_static.DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_static.DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "()* loopback of 131:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA55_10 = input.LA(1);

                         
                        int index55_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA55_13 = input.LA(1);

                         
                        int index55_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA55_11 = input.LA(1);

                         
                        int index55_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA55_14 = input.LA(1);

                         
                        int index55_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_14);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA55_12 = input.LA(1);

                         
                        int index55_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA55_9 = input.LA(1);

                         
                        int index55_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index55_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 55, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA57_static {
    static final String DFA57_eotS =
        "\27\uffff";
    static final String DFA57_eofS =
        "\27\uffff";
    static final String DFA57_minS =
        "\1\47\1\uffff\12\45\12\0\1\uffff";
    static final String DFA57_maxS =
        "\1\u00a9\1\uffff\12\45\12\0\1\uffff";
    static final String DFA57_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA57_specialS =
        "\14\uffff\1\0\1\7\1\1\1\11\1\6\1\4\1\2\1\10\1\3\1\5\1\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\20\1\1\uffff\1\1\121\uffff"+
            "\2\1\2\uffff\1\1\1\6\1\7\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff"+
            "\1\1",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_static.DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_static.DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_static.DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_static.DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_static.DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_static.DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_static.DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_static.DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "()* loopback of 137:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA57_12 = input.LA(1);

                         
                        int index57_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA57_14 = input.LA(1);

                         
                        int index57_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA57_18 = input.LA(1);

                         
                        int index57_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA57_20 = input.LA(1);

                         
                        int index57_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_20);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA57_17 = input.LA(1);

                         
                        int index57_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA57_21 = input.LA(1);

                         
                        int index57_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_21);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA57_16 = input.LA(1);

                         
                        int index57_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_16);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA57_13 = input.LA(1);

                         
                        int index57_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA57_19 = input.LA(1);

                         
                        int index57_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_19);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA57_15 = input.LA(1);

                         
                        int index57_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index57_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 57, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA63_static {
    static final String DFA63_eotS =
        "\27\uffff";
    static final String DFA63_eofS =
        "\27\uffff";
    static final String DFA63_minS =
        "\1\47\12\45\1\uffff\12\0\1\uffff";
    static final String DFA63_maxS =
        "\1\u00a9\12\45\1\uffff\12\0\1\uffff";
    static final String DFA63_acceptS =
        "\13\uffff\1\2\12\uffff\1\1";
    static final String DFA63_specialS =
        "\14\uffff\1\10\1\1\1\3\1\7\1\0\1\2\1\6\1\11\1\4\1\5\1\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\10\1\12\4\uffff\1\11\1\uffff\20\13\11\uffff\1\13\111\uffff"+
            "\2\13\2\uffff\1\13\1\5\1\6\1\7\12\uffff\1\1\1\2\1\4\1\3\1\uffff"+
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_static.DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_static.DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_static.DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_static.DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_static.DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_static.DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_static.DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_static.DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "142:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA63_16 = input.LA(1);

                         
                        int index63_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_16);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA63_13 = input.LA(1);

                         
                        int index63_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA63_17 = input.LA(1);

                         
                        int index63_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA63_14 = input.LA(1);

                         
                        int index63_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_14);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA63_20 = input.LA(1);

                         
                        int index63_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA63_21 = input.LA(1);

                         
                        int index63_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_21);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA63_18 = input.LA(1);

                         
                        int index63_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA63_15 = input.LA(1);

                         
                        int index63_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_15);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA63_12 = input.LA(1);

                         
                        int index63_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_12);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA63_19 = input.LA(1);

                         
                        int index63_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index63_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 63, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA75_static {
    static final String DFA75_eotS =
        "\u0092\uffff";
    static final String DFA75_eofS =
        "\1\1\u0091\uffff";
    static final String DFA75_minS =
        "\1\46\4\uffff\6\0\1\uffff\2\0\3\uffff\14\0\165\uffff";
    static final String DFA75_maxS =
        "\1\u00b4\4\uffff\6\0\1\uffff\2\0\3\uffff\14\0\165\uffff";
    static final String DFA75_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA75_specialS =
        "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\3\uffff\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\165\uffff}>";
    static final String[] DFA75_transitionS = {
            "\1\25\1\10\1\12\4\1\1\11\21\1\1\32\7\1\1\31\1\1\1\24\3\1\1"+
            "\26\6\1\1\30\4\1\1\27\12\1\1\34\40\1\1\15\11\1\1\22\1\1\1\14"+
            "\1\23\1\21\3\1\1\5\1\6\1\7\2\1\1\33\30\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_static.DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_static.DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_static.DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_static.DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_static.DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_static.DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_static.DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "()* loopback of 163:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA75_5 = input.LA(1);

                         
                        int index75_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA75_6 = input.LA(1);

                         
                        int index75_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA75_7 = input.LA(1);

                         
                        int index75_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA75_8 = input.LA(1);

                         
                        int index75_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA75_9 = input.LA(1);

                         
                        int index75_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA75_10 = input.LA(1);

                         
                        int index75_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA75_12 = input.LA(1);

                         
                        int index75_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA75_13 = input.LA(1);

                         
                        int index75_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA75_17 = input.LA(1);

                         
                        int index75_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA75_18 = input.LA(1);

                         
                        int index75_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_18);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA75_19 = input.LA(1);

                         
                        int index75_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_19);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA75_20 = input.LA(1);

                         
                        int index75_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_20);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA75_21 = input.LA(1);

                         
                        int index75_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_21);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA75_22 = input.LA(1);

                         
                        int index75_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_22);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA75_23 = input.LA(1);

                         
                        int index75_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_23);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA75_24 = input.LA(1);

                         
                        int index75_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_24);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA75_25 = input.LA(1);

                         
                        int index75_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_25);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA75_26 = input.LA(1);

                         
                        int index75_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_26);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA75_27 = input.LA(1);

                         
                        int index75_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_27);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA75_28 = input.LA(1);

                         
                        int index75_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index75_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA74_static {
    static final String DFA74_eotS =
        "\25\uffff";
    static final String DFA74_eofS =
        "\25\uffff";
    static final String DFA74_minS =
        "\1\46\15\uffff\1\0\6\uffff";
    static final String DFA74_maxS =
        "\1\u009c\15\uffff\1\0\6\uffff";
    static final String DFA74_acceptS =
        "\1\uffff\1\2\22\uffff\1\1";
    static final String DFA74_specialS =
        "\16\uffff\1\0\6\uffff}>";
    static final String[] DFA74_transitionS = {
            "\3\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\40\uffff\1\16\11\uffff"+
            "\1\1\1\uffff\1\24\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_static.DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_static.DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_static.DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_static.DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_static.DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_static.DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_static.DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_static.DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "()* loopback of 163:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA74_14 = input.LA(1);

                         
                        int index74_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index74_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 74, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA81_static {
    static final String DFA81_eotS =
        "\33\uffff";
    static final String DFA81_eofS =
        "\1\1\32\uffff";
    static final String DFA81_minS =
        "\1\46\1\uffff\21\0\10\uffff";
    static final String DFA81_maxS =
        "\1\u009c\1\uffff\21\0\10\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\11\21\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA81_specialS =
        "\2\uffff\1\20\1\15\1\14\1\11\1\2\1\17\1\13\1\16\1\1\1\3\1\6\1\12"+
        "\1\7\1\5\1\10\1\4\1\0\10\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\5\1\11\1\13\4\uffff\1\12\21\uffff\1\21\7\uffff\1\20\1\uffff"+
            "\1\4\3\uffff\1\14\6\uffff\1\17\4\uffff\1\15\12\uffff\1\1\40"+
            "\uffff\1\16\11\uffff\1\2\2\uffff\1\3\4\uffff\1\6\1\7\1\10\2"+
            "\uffff\1\22",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_static.DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_static.DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_static.DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_static.DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_static.DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_static.DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "()+ loopback of 170:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA81_18 = input.LA(1);

                         
                        int index81_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_18);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA81_10 = input.LA(1);

                         
                        int index81_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA81_6 = input.LA(1);

                         
                        int index81_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_6);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA81_11 = input.LA(1);

                         
                        int index81_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA81_17 = input.LA(1);

                         
                        int index81_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA81_15 = input.LA(1);

                         
                        int index81_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_15);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA81_12 = input.LA(1);

                         
                        int index81_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA81_14 = input.LA(1);

                         
                        int index81_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_14);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA81_16 = input.LA(1);

                         
                        int index81_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_16);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA81_5 = input.LA(1);

                         
                        int index81_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_5);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA81_13 = input.LA(1);

                         
                        int index81_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA81_8 = input.LA(1);

                         
                        int index81_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_8);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA81_4 = input.LA(1);

                         
                        int index81_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_4);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA81_3 = input.LA(1);

                         
                        int index81_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_3);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA81_9 = input.LA(1);

                         
                        int index81_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_9);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA81_7 = input.LA(1);

                         
                        int index81_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_7);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA81_2 = input.LA(1);

                         
                        int index81_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_ChemicalChunker()) ) {s = 19;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA84_static {
    static final String DFA84_eotS =
        "\17\uffff";
    static final String DFA84_eofS =
        "\1\7\16\uffff";
    static final String DFA84_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA84_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA84_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA84_specialS =
        "\10\uffff\1\4\1\3\1\2\1\5\1\0\1\1\1\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_static.DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_static.DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_static.DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_static.DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_static.DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_static.DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_static.DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_static.DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "174:46: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA84_12 = input.LA(1);

                         
                        int index84_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA84_13 = input.LA(1);

                         
                        int index84_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA84_10 = input.LA(1);

                         
                        int index84_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA84_9 = input.LA(1);

                         
                        int index84_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA84_8 = input.LA(1);

                         
                        int index84_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_8);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA84_11 = input.LA(1);

                         
                        int index84_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred268_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index84_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA85_static {
    static final String DFA85_eotS =
        "\u0094\uffff";
    static final String DFA85_eofS =
        "\1\10\u0093\uffff";
    static final String DFA85_minS =
        "\1\46\7\0\u008c\uffff";
    static final String DFA85_maxS =
        "\1\u00b4\7\0\u008c\uffff";
    static final String DFA85_acceptS =
        "\10\uffff\1\4\u0088\uffff\1\1\1\3\1\2";
    static final String DFA85_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\u008c\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\4\40\10\1\5\1\10\1\3\101\10\1\6\1\10\1\7\1\10\1\1\2\10\1"+
            "\2\42\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_static.DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_static.DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_static.DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_static.DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_static.DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_static.DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_static.DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "174:51: ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA85_1 = input.LA(1);

                         
                        int index85_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 145;}

                        else if ( ((synpred271_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index85_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA85_2 = input.LA(1);

                         
                        int index85_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 145;}

                        else if ( ((synpred271_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index85_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA85_3 = input.LA(1);

                         
                        int index85_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index85_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA85_4 = input.LA(1);

                         
                        int index85_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_ChemicalChunker()) ) {s = 145;}

                        else if ( ((synpred271_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index85_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA85_5 = input.LA(1);

                         
                        int index85_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index85_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA85_6 = input.LA(1);

                         
                        int index85_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred271_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index85_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA85_7 = input.LA(1);

                         
                        int index85_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred271_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index85_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA86_static {
    static final String DFA86_eotS =
        "\u0092\uffff";
    static final String DFA86_eofS =
        "\1\1\u0091\uffff";
    static final String DFA86_minS =
        "\1\46\17\uffff\4\0\176\uffff";
    static final String DFA86_maxS =
        "\1\u00b4\17\uffff\4\0\176\uffff";
    static final String DFA86_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA86_specialS =
        "\20\uffff\1\0\1\1\1\2\1\3\176\uffff}>";
    static final String[] DFA86_transitionS = {
            "\1\23\42\1\1\22\105\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_static.DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_static.DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_static.DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_static.DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_static.DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_static.DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_static.DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_static.DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "()* loopback of 174:165: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA86_16 = input.LA(1);

                         
                        int index86_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_16);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA86_17 = input.LA(1);

                         
                        int index86_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA86_18 = input.LA(1);

                         
                        int index86_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA86_19 = input.LA(1);

                         
                        int index86_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index86_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA96_static {
    static final String DFA96_eotS =
        "\17\uffff";
    static final String DFA96_eofS =
        "\17\uffff";
    static final String DFA96_minS =
        "\1\46\5\0\11\uffff";
    static final String DFA96_maxS =
        "\1\u0099\5\0\11\uffff";
    static final String DFA96_acceptS =
        "\6\uffff\1\3\6\uffff\1\1\1\2";
    static final String DFA96_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\11\uffff}>";
    static final String[] DFA96_transitionS = {
            "\1\4\2\6\4\uffff\1\6\33\uffff\1\3\12\uffff\1\6\60\uffff\1\5"+
            "\11\uffff\1\1\2\uffff\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_static.DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_static.DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_static.DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_static.DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_static.DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_static.DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_static.DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_static.DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "183:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA96_1 = input.LA(1);

                         
                        int index96_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index96_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA96_2 = input.LA(1);

                         
                        int index96_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index96_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA96_3 = input.LA(1);

                         
                        int index96_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index96_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA96_4 = input.LA(1);

                         
                        int index96_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index96_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA96_5 = input.LA(1);

                         
                        int index96_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index96_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 96, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA97_static {
    static final String DFA97_eotS =
        "\33\uffff";
    static final String DFA97_eofS =
        "\1\2\2\uffff\1\2\4\uffff\3\2\7\uffff\4\2\3\uffff\2\2";
    static final String DFA97_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\3\46\1\0\5\45\1\uffff\4\46\1\0\2\45"+
        "\2\46";
    static final String DFA97_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\3\u00b4\1\0\5\45\1\uffff\4\u00b4"+
        "\1\0\2\45\2\u00b4";
    static final String DFA97_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\11\uffff";
    static final String DFA97_specialS =
        "\13\uffff\1\1\12\uffff\1\0\4\uffff}>";
    static final String[] DFA97_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\5\21\2\1\7\123\2\1\6\3\2\1\4\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\7\127\2\1\14\35\2",
            "\7\2\1\15\21\2\1\7\127\2\1\14\35\2",
            "\7\2\1\17\21\2\1\20\127\2\1\16\35\2",
            "\1\uffff",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "",
            "\7\2\1\15\21\2\1\7\127\2\1\14\35\2",
            "\7\2\1\15\21\2\1\7\127\2\1\14\35\2",
            "\7\2\1\30\21\2\1\20\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\20\127\2\1\27\35\2",
            "\1\uffff",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\20\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\20\127\2\1\27\35\2"
    };
    }

    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_static.DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_static.DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_static.DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_static.DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_static.DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_static.DFA97_specialS);
    static final short[][] DFA97_transition;

    static {
        int numStates = DFA97_static.DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_static.DFA97_transitionS[i]);
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }
        public String getDescription() {
            return "183:71: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA97_22 = input.LA(1);

                         
                        int index97_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_22);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA97_11 = input.LA(1);

                         
                        int index97_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 97, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA100_static {
    static final String DFA100_eotS =
        "\13\uffff";
    static final String DFA100_eofS =
        "\13\uffff";
    static final String DFA100_minS =
        "\1\47\1\uffff\1\0\10\uffff";
    static final String DFA100_maxS =
        "\1\u0099\1\uffff\1\0\10\uffff";
    static final String DFA100_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\6\uffff";
    static final String DFA100_specialS =
        "\2\uffff\1\0\10\uffff}>";
    static final String[] DFA100_transitionS = {
            "\2\4\4\uffff\1\4\46\uffff\1\4\60\uffff\1\1\11\uffff\1\2\2\uffff"+
            "\1\1\4\uffff\3\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_static.DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_static.DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_static.DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_static.DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_static.DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_static.DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_static.DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_static.DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "186:54: ( mixture )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA100_2 = input.LA(1);

                         
                        int index100_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index100_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA105_static {
    static final String DFA105_eotS =
        "\u0092\uffff";
    static final String DFA105_eofS =
        "\1\2\u0091\uffff";
    static final String DFA105_minS =
        "\1\46\1\0\13\uffff\6\0\1\uffff\1\0\175\uffff";
    static final String DFA105_maxS =
        "\1\u00b4\1\0\13\uffff\6\0\1\uffff\1\0\175\uffff";
    static final String DFA105_acceptS =
        "\2\uffff\1\2\u008e\uffff\1\1";
    static final String DFA105_specialS =
        "\1\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\7\175\uffff}>";
    static final String[] DFA105_transitionS = {
            "\1\2\1\20\1\22\4\2\1\21\46\2\1\24\72\2\1\1\7\2\1\15\1\16\1"+
            "\17\33\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_static.DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_static.DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_static.DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_static.DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_static.DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_static.DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "()+ loopback of 189:60: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA105_1 = input.LA(1);

                         
                        int index105_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index105_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA105_13 = input.LA(1);

                         
                        int index105_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index105_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA105_14 = input.LA(1);

                         
                        int index105_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index105_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA105_15 = input.LA(1);

                         
                        int index105_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index105_15);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA105_16 = input.LA(1);

                         
                        int index105_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index105_16);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA105_17 = input.LA(1);

                         
                        int index105_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index105_17);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA105_18 = input.LA(1);

                         
                        int index105_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index105_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA105_20 = input.LA(1);

                         
                        int index105_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index105_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA106_static {
    static final String DFA106_eotS =
        "\15\uffff";
    static final String DFA106_eofS =
        "\15\uffff";
    static final String DFA106_minS =
        "\1\46\7\uffff\2\0\3\uffff";
    static final String DFA106_maxS =
        "\1\u0099\7\uffff\2\0\3\uffff";
    static final String DFA106_acceptS =
        "\1\uffff\1\3\10\uffff\1\1\1\uffff\1\2";
    static final String DFA106_specialS =
        "\10\uffff\1\0\1\1\3\uffff}>";
    static final String[] DFA106_transitionS = {
            "\1\12\2\1\4\uffff\1\1\33\uffff\1\12\12\uffff\1\1\60\uffff\1"+
            "\14\11\uffff\1\10\2\uffff\1\11\4\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_static.DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_static.DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_static.DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_static.DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_static.DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_static.DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_static.DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_static.DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "()* loopback of 192:3: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA106_8 = input.LA(1);

                         
                        int index106_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred299_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA106_9 = input.LA(1);

                         
                        int index106_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred299_ChemicalChunker()) ) {s = 12;}

                         
                        input.seek(index106_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA107_static {
    static final String DFA107_eotS =
        "\13\uffff";
    static final String DFA107_eofS =
        "\1\2\12\uffff";
    static final String DFA107_minS =
        "\1\46\1\0\1\uffff\7\0\1\uffff";
    static final String DFA107_maxS =
        "\1\u00b4\1\0\1\uffff\7\0\1\uffff";
    static final String DFA107_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA107_specialS =
        "\1\uffff\1\2\1\uffff\1\7\1\0\1\4\1\3\1\6\1\5\1\1\1\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\2\1\6\1\10\4\2\1\7\46\2\1\11\72\2\1\1\7\2\1\3\1\4\1\5\33"+
            "\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_static.DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_static.DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_static.DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_static.DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_static.DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_static.DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "()+ loopback of 192:23: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA107_4 = input.LA(1);

                         
                        int index107_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA107_9 = input.LA(1);

                         
                        int index107_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA107_1 = input.LA(1);

                         
                        int index107_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_1);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA107_6 = input.LA(1);

                         
                        int index107_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA107_5 = input.LA(1);

                         
                        int index107_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA107_8 = input.LA(1);

                         
                        int index107_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA107_7 = input.LA(1);

                         
                        int index107_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA107_3 = input.LA(1);

                         
                        int index107_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA109_static {
    static final String DFA109_eotS =
        "\u0095\uffff";
    static final String DFA109_eofS =
        "\1\1\u0094\uffff";
    static final String DFA109_minS =
        "\1\46\3\uffff\1\0\13\uffff\4\0\u0081\uffff";
    static final String DFA109_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\4\0\u0081\uffff";
    static final String DFA109_acceptS =
        "\1\uffff\1\5\u008f\uffff\1\1\1\3\1\4\1\2";
    static final String DFA109_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\u0081\uffff}>";
    static final String[] DFA109_transitionS = {
            "\1\23\42\1\1\22\73\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_static.DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_static.DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_static.DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_static.DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_static.DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_static.DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_static.DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_static.DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "()* loopback of 194:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA109_4 = input.LA(1);

                         
                        int index109_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred304_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index109_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA109_16 = input.LA(1);

                         
                        int index109_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred301_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred302_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index109_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA109_17 = input.LA(1);

                         
                        int index109_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index109_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA109_18 = input.LA(1);

                         
                        int index109_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index109_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA109_19 = input.LA(1);

                         
                        int index109_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index109_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 109, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA108_static {
    static final String DFA108_eotS =
        "\11\uffff";
    static final String DFA108_eofS =
        "\11\uffff";
    static final String DFA108_minS =
        "\1\u008f\1\45\1\46\1\uffff\1\45\1\uffff\1\54\1\45\1\101";
    static final String DFA108_maxS =
        "\1\u008f\1\45\1\u009e\1\uffff\1\45\1\uffff\1\u009e\1\45\1\u009e";
    static final String DFA108_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\3\uffff";
    static final String DFA108_specialS =
        "\11\uffff}>";
    static final String[] DFA108_transitionS = {
            "\1\1",
            "\1\2",
            "\1\5\42\uffff\1\5\73\uffff\1\3\13\uffff\1\3\1\4\2\uffff\1"+
            "\3\10\uffff\1\3",
            "",
            "\1\6",
            "",
            "\1\5\24\uffff\3\5\1\uffff\2\5\76\uffff\1\3\4\uffff\1\5\6\uffff"+
            "\1\3\1\7\2\uffff\1\3\6\uffff\1\5\1\uffff\1\3",
            "\1\10",
            "\3\5\1\uffff\2\5\76\uffff\1\3\12\uffff\2\3\1\7\2\uffff\1\3"+
            "\10\uffff\1\3"
    };
    }

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_static.DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_static.DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_static.DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_static.DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_static.DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_static.DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_static.DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_static.DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "194:59: ( quantity1Node | citationStructure )";
        }
    }
    static class DFA110_static {
    static final String DFA110_eotS =
        "\33\uffff";
    static final String DFA110_eofS =
        "\1\2\2\uffff\1\2\4\uffff\3\2\7\uffff\4\2\3\uffff\2\2";
    static final String DFA110_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\3\46\1\0\5\45\1\uffff\4\46\1\0\2\45"+
        "\2\46";
    static final String DFA110_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\3\u00b4\1\0\5\45\1\uffff\4\u00b4"+
        "\1\0\2\45\2\u00b4";
    static final String DFA110_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\11\uffff";
    static final String DFA110_specialS =
        "\13\uffff\1\1\12\uffff\1\0\4\uffff}>";
    static final String[] DFA110_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\5\21\2\1\7\123\2\1\6\3\2\1\4\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\7\127\2\1\14\35\2",
            "\7\2\1\15\21\2\1\7\127\2\1\14\35\2",
            "\7\2\1\17\21\2\1\20\127\2\1\16\35\2",
            "\1\uffff",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "",
            "\7\2\1\15\21\2\1\7\127\2\1\14\35\2",
            "\7\2\1\15\21\2\1\7\127\2\1\14\35\2",
            "\7\2\1\30\21\2\1\20\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\20\127\2\1\27\35\2",
            "\1\uffff",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\20\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\20\127\2\1\27\35\2"
    };
    }

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_static.DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_static.DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_static.DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_static.DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_static.DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_static.DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_static.DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "197:31: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA110_22 = input.LA(1);

                         
                        int index110_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_22);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA110_11 = input.LA(1);

                         
                        int index110_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index110_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA113_static {
    static final String DFA113_eotS =
        "\15\uffff";
    static final String DFA113_eofS =
        "\15\uffff";
    static final String DFA113_minS =
        "\1\46\4\0\1\uffff\2\0\5\uffff";
    static final String DFA113_maxS =
        "\1\u0092\4\0\1\uffff\2\0\5\uffff";
    static final String DFA113_acceptS =
        "\5\uffff\1\2\2\uffff\1\5\1\6\1\1\1\3\1\4";
    static final String DFA113_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\5\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\4\7\uffff\1\5\30\uffff\1\11\1\uffff\1\3\73\uffff\1\10\5"+
            "\uffff\1\6\1\uffff\1\7\1\uffff\1\1\2\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_static.DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_static.DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_static.DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_static.DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_static.DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_static.DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "200:3: ( quantity inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | referenceToCompound )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA113_1 = input.LA(1);

                         
                        int index113_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 8;}

                        else if ( ((numberLooksLikeAReferenceToACompound(input))) ) {s = 9;}

                         
                        input.seek(index113_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA113_2 = input.LA(1);

                         
                        int index113_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred312_ChemicalChunker()) ) {s = 12;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 8;}

                        else if ( ((numberLooksLikeAReferenceToACompound(input))) ) {s = 9;}

                         
                        input.seek(index113_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA113_3 = input.LA(1);

                         
                        int index113_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 8;}

                         
                        input.seek(index113_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA113_4 = input.LA(1);

                         
                        int index113_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred313_ChemicalChunker()) ) {s = 8;}

                        else if ( ((numberLooksLikeAReferenceToACompound(input))) ) {s = 9;}

                         
                        input.seek(index113_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA113_6 = input.LA(1);

                         
                        int index113_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( ((numberLooksLikeAReferenceToACompound(input))) ) {s = 9;}

                         
                        input.seek(index113_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA113_7 = input.LA(1);

                         
                        int index113_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_ChemicalChunker()) ) {s = 11;}

                        else if ( ((numberLooksLikeAReferenceToACompound(input))) ) {s = 9;}

                         
                        input.seek(index113_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA111_static {
    static final String DFA111_eotS =
        "\u0093\uffff";
    static final String DFA111_eofS =
        "\1\116\u0092\uffff";
    static final String DFA111_minS =
        "\1\46\u0090\0\2\uffff";
    static final String DFA111_maxS =
        "\1\u00b4\u0090\0\2\uffff";
    static final String DFA111_acceptS =
        "\u0091\uffff\1\1\1\2";
    static final String DFA111_specialS =
        "\1\uffff\1\161\1\63\1\45\1\112\1\140\1\u0086\1\121\1\10\1\17\1"+
        "\u008b\1\163\1\111\1\27\1\144\1\123\1\67\1\160\1\170\1\167\1\145"+
        "\1\40\1\127\1\152\1\136\1\76\1\151\1\117\1\21\1\74\1\5\1\u0087\1"+
        "\32\1\4\1\66\1\35\1\102\1\11\1\150\1\143\1\54\1\65\1\26\1\120\1"+
        "\1\1\55\1\u0080\1\24\1\132\1\155\1\41\1\130\1\13\1\103\1\113\1\42"+
        "\1\u008d\1\175\1\171\1\156\1\u0085\1\133\1\22\1\165\1\110\1\147"+
        "\1\25\1\166\1\57\1\30\1\142\1\174\1\u0088\1\43\1\15\1\164\1\104"+
        "\1\100\1\162\1\47\1\u008e\1\70\1\141\1\125\1\0\1\2\1\154\1\36\1"+
        "\u0089\1\50\1\51\1\23\1\61\1\105\1\157\1\46\1\52\1\53\1\172\1\6"+
        "\1\7\1\115\1\20\1\116\1\134\1\124\1\173\1\146\1\72\1\176\1\16\1"+
        "\60\1\114\1\u0081\1\37\1\73\1\177\1\14\1\u0084\1\135\1\44\1\137"+
        "\1\12\1\u0083\1\75\1\34\1\131\1\153\1\u008c\1\31\1\122\1\77\1\106"+
        "\1\u008f\1\64\1\101\1\126\1\56\1\71\1\3\1\u0082\1\62\1\107\1\33"+
        "\1\u008a\2\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\5\1\22\1\24\1\111\1\47\1\52\1\u0088\1\23\1\27\1\10\1\123"+
            "\1\122\1\11\1\127\1\135\1\136\1\124\1\134\1\112\1\131\1\125"+
            "\1\126\1\133\1\132\1\130\1\36\1\50\1\u0089\1\55\1\u008a\1\51"+
            "\1\56\1\65\1\30\1\53\1\6\1\54\1\42\1\43\1\34\1\57\1\60\1\61"+
            "\1\62\1\63\1\44\1\26\1\146\1\u0086\1\147\1\152\1\35\1\70\1\154"+
            "\1\153\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\40\1\164"+
            "\1\64\1\165\1\151\1\166\1\167\1\71\1\170\1\72\1\171\1\73\1\172"+
            "\1\173\1\150\1\174\1\175\1\74\1\176\1\66\1\177\1\u0080\1\u0081"+
            "\1\75\1\u0082\1\46\1\67\1\u0083\1\u0084\1\u0085\1\41\1\114\1"+
            "\113\1\7\1\u008b\1\u0087\1\u008c\1\115\1\u008d\1\1\1\u008e\1"+
            "\3\1\117\1\4\1\u008f\1\12\1\2\1\33\1\103\1\76\1\121\1\17\1\20"+
            "\1\21\1\106\1\137\1\37\1\45\1\25\1\107\1\104\1\110\1\31\1\32"+
            "\1\13\1\14\1\16\1\15\1\77\1\120\1\u0090\1\140\1\143\1\142\1"+
            "\145\1\141\1\144\1\100\1\105\1\101\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_static.DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_static.DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_static.DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_static.DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_static.DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_static.DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "200:65: ( optionalUnnamedMoleculeEnding )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA111_84 = input.LA(1);

                         
                        int index111_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_84);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA111_44 = input.LA(1);

                         
                        int index111_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_44);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA111_85 = input.LA(1);

                         
                        int index111_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_85);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA111_139 = input.LA(1);

                         
                        int index111_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_139);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA111_33 = input.LA(1);

                         
                        int index111_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_33);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA111_30 = input.LA(1);

                         
                        int index111_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_30);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA111_99 = input.LA(1);

                         
                        int index111_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_99);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA111_100 = input.LA(1);

                         
                        int index111_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_100);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA111_8 = input.LA(1);

                         
                        int index111_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_8);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA111_37 = input.LA(1);

                         
                        int index111_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_37);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA111_122 = input.LA(1);

                         
                        int index111_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_122);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA111_52 = input.LA(1);

                         
                        int index111_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_52);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA111_117 = input.LA(1);

                         
                        int index111_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_117);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA111_74 = input.LA(1);

                         
                        int index111_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_74);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA111_110 = input.LA(1);

                         
                        int index111_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_110);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA111_9 = input.LA(1);

                         
                        int index111_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_9);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA111_102 = input.LA(1);

                         
                        int index111_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_102);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA111_28 = input.LA(1);

                         
                        int index111_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_28);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA111_62 = input.LA(1);

                         
                        int index111_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_62);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA111_91 = input.LA(1);

                         
                        int index111_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_91);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA111_47 = input.LA(1);

                         
                        int index111_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_47);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA111_66 = input.LA(1);

                         
                        int index111_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_66);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA111_42 = input.LA(1);

                         
                        int index111_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_42);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA111_13 = input.LA(1);

                         
                        int index111_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_13);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA111_69 = input.LA(1);

                         
                        int index111_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_69);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA111_129 = input.LA(1);

                         
                        int index111_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_129);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA111_32 = input.LA(1);

                         
                        int index111_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_32);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA111_143 = input.LA(1);

                         
                        int index111_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_143);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA111_125 = input.LA(1);

                         
                        int index111_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_125);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA111_35 = input.LA(1);

                         
                        int index111_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_35);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA111_87 = input.LA(1);

                         
                        int index111_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_87);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA111_114 = input.LA(1);

                         
                        int index111_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_114);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA111_21 = input.LA(1);

                         
                        int index111_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_21);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA111_50 = input.LA(1);

                         
                        int index111_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_50);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA111_55 = input.LA(1);

                         
                        int index111_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_55);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA111_73 = input.LA(1);

                         
                        int index111_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_73);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA111_120 = input.LA(1);

                         
                        int index111_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_120);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA111_3 = input.LA(1);

                         
                        int index111_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred308_ChemicalChunker()||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_3);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA111_95 = input.LA(1);

                         
                        int index111_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_95);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA111_79 = input.LA(1);

                         
                        int index111_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_79);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA111_89 = input.LA(1);

                         
                        int index111_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_89);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA111_90 = input.LA(1);

                         
                        int index111_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_90);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA111_96 = input.LA(1);

                         
                        int index111_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_96);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA111_97 = input.LA(1);

                         
                        int index111_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_97);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA111_40 = input.LA(1);

                         
                        int index111_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_40);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA111_45 = input.LA(1);

                         
                        int index111_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_45);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA111_137 = input.LA(1);

                         
                        int index111_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_137);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA111_68 = input.LA(1);

                         
                        int index111_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_68);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA111_111 = input.LA(1);

                         
                        int index111_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_111);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA111_92 = input.LA(1);

                         
                        int index111_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_92);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA111_141 = input.LA(1);

                         
                        int index111_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_141);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA111_2 = input.LA(1);

                         
                        int index111_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred308_ChemicalChunker()||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_2);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA111_134 = input.LA(1);

                         
                        int index111_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_134);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA111_41 = input.LA(1);

                         
                        int index111_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_41);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA111_34 = input.LA(1);

                         
                        int index111_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_34);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA111_16 = input.LA(1);

                         
                        int index111_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_16);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA111_81 = input.LA(1);

                         
                        int index111_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_81);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA111_138 = input.LA(1);

                         
                        int index111_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_138);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA111_108 = input.LA(1);

                         
                        int index111_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_108);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA111_115 = input.LA(1);

                         
                        int index111_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_115);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA111_29 = input.LA(1);

                         
                        int index111_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_29);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA111_124 = input.LA(1);

                         
                        int index111_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_124);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA111_25 = input.LA(1);

                         
                        int index111_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_25);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA111_131 = input.LA(1);

                         
                        int index111_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_131);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA111_77 = input.LA(1);

                         
                        int index111_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_77);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA111_135 = input.LA(1);

                         
                        int index111_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_135);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA111_36 = input.LA(1);

                         
                        int index111_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_36);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA111_53 = input.LA(1);

                         
                        int index111_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_53);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA111_76 = input.LA(1);

                         
                        int index111_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_76);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA111_93 = input.LA(1);

                         
                        int index111_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_93);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA111_132 = input.LA(1);

                         
                        int index111_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_132);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA111_142 = input.LA(1);

                         
                        int index111_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_142);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA111_64 = input.LA(1);

                         
                        int index111_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_64);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA111_12 = input.LA(1);

                         
                        int index111_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_12);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA111_4 = input.LA(1);

                         
                        int index111_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred308_ChemicalChunker()||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_4);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA111_54 = input.LA(1);

                         
                        int index111_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_54);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA111_112 = input.LA(1);

                         
                        int index111_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_112);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA111_101 = input.LA(1);

                         
                        int index111_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_101);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA111_103 = input.LA(1);

                         
                        int index111_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_103);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA111_27 = input.LA(1);

                         
                        int index111_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_27);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA111_43 = input.LA(1);

                         
                        int index111_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_43);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA111_7 = input.LA(1);

                         
                        int index111_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_7);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA111_130 = input.LA(1);

                         
                        int index111_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_130);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA111_15 = input.LA(1);

                         
                        int index111_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_15);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA111_105 = input.LA(1);

                         
                        int index111_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_105);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA111_83 = input.LA(1);

                         
                        int index111_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_83);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA111_136 = input.LA(1);

                         
                        int index111_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_136);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA111_22 = input.LA(1);

                         
                        int index111_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_22);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA111_51 = input.LA(1);

                         
                        int index111_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_51);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA111_126 = input.LA(1);

                         
                        int index111_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_126);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA111_48 = input.LA(1);

                         
                        int index111_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_48);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA111_61 = input.LA(1);

                         
                        int index111_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_61);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA111_104 = input.LA(1);

                         
                        int index111_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_104);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA111_119 = input.LA(1);

                         
                        int index111_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_119);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA111_24 = input.LA(1);

                         
                        int index111_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_24);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA111_121 = input.LA(1);

                         
                        int index111_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_121);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA111_5 = input.LA(1);

                         
                        int index111_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred308_ChemicalChunker()||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_5);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA111_82 = input.LA(1);

                         
                        int index111_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_82);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA111_70 = input.LA(1);

                         
                        int index111_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_70);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA111_39 = input.LA(1);

                         
                        int index111_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_39);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA111_14 = input.LA(1);

                         
                        int index111_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_14);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA111_20 = input.LA(1);

                         
                        int index111_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_20);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA111_107 = input.LA(1);

                         
                        int index111_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_107);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA111_65 = input.LA(1);

                         
                        int index111_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_65);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA111_38 = input.LA(1);

                         
                        int index111_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_38);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA111_26 = input.LA(1);

                         
                        int index111_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_26);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA111_23 = input.LA(1);

                         
                        int index111_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_23);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA111_127 = input.LA(1);

                         
                        int index111_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_127);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA111_86 = input.LA(1);

                         
                        int index111_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_86);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA111_49 = input.LA(1);

                         
                        int index111_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_49);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA111_59 = input.LA(1);

                         
                        int index111_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_59);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA111_94 = input.LA(1);

                         
                        int index111_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_94);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA111_17 = input.LA(1);

                         
                        int index111_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_17);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA111_1 = input.LA(1);

                         
                        int index111_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred308_ChemicalChunker()||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred308_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_1);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA111_78 = input.LA(1);

                         
                        int index111_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_78);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA111_11 = input.LA(1);

                         
                        int index111_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_11);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA111_75 = input.LA(1);

                         
                        int index111_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_75);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA111_63 = input.LA(1);

                         
                        int index111_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_63);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA111_67 = input.LA(1);

                         
                        int index111_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_67);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA111_19 = input.LA(1);

                         
                        int index111_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_19);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA111_18 = input.LA(1);

                         
                        int index111_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_18);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA111_58 = input.LA(1);

                         
                        int index111_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_58);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA111_98 = input.LA(1);

                         
                        int index111_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_98);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA111_106 = input.LA(1);

                         
                        int index111_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_106);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA111_71 = input.LA(1);

                         
                        int index111_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_71);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA111_57 = input.LA(1);

                         
                        int index111_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_57);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA111_109 = input.LA(1);

                         
                        int index111_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_109);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA111_116 = input.LA(1);

                         
                        int index111_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_116);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA111_46 = input.LA(1);

                         
                        int index111_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_46);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA111_113 = input.LA(1);

                         
                        int index111_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_113);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA111_140 = input.LA(1);

                         
                        int index111_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_140);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA111_123 = input.LA(1);

                         
                        int index111_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_123);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA111_118 = input.LA(1);

                         
                        int index111_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_118);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA111_60 = input.LA(1);

                         
                        int index111_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_60);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA111_6 = input.LA(1);

                         
                        int index111_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_6);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA111_31 = input.LA(1);

                         
                        int index111_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_31);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA111_72 = input.LA(1);

                         
                        int index111_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_72);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA111_88 = input.LA(1);

                         
                        int index111_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_88);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA111_144 = input.LA(1);

                         
                        int index111_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_144);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA111_10 = input.LA(1);

                         
                        int index111_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_10);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA111_128 = input.LA(1);

                         
                        int index111_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_128);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA111_56 = input.LA(1);

                         
                        int index111_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_56);
                        if ( s>=0 ) return s;
                        break;

                    case 142 : 
                        int LA111_80 = input.LA(1);

                         
                        int index111_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_80);
                        if ( s>=0 ) return s;
                        break;

                    case 143 : 
                        int LA111_133 = input.LA(1);

                         
                        int index111_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index111_133);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA114_static {
    static final String DFA114_eotS =
        "\u0093\uffff";
    static final String DFA114_eofS =
        "\1\1\u0092\uffff";
    static final String DFA114_minS =
        "\1\46\3\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA114_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA114_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\2\1\1";
    static final String DFA114_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\177\uffff}>";
    static final String[] DFA114_transitionS = {
            "\1\23\42\1\1\22\73\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_static.DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_static.DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_static.DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_static.DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_static.DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_static.DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_static.DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_static.DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "()* loopback of 203:42: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA114_4 = input.LA(1);

                         
                        int index114_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA114_16 = input.LA(1);

                         
                        int index114_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred315_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA114_17 = input.LA(1);

                         
                        int index114_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred315_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA114_18 = input.LA(1);

                         
                        int index114_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA114_19 = input.LA(1);

                         
                        int index114_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index114_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 114, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA117_static {
    static final String DFA117_eotS =
        "\17\uffff";
    static final String DFA117_eofS =
        "\17\uffff";
    static final String DFA117_minS =
        "\1\51\4\uffff\1\0\11\uffff";
    static final String DFA117_maxS =
        "\1\u009f\4\uffff\1\0\11\uffff";
    static final String DFA117_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\5\1\6";
    static final String DFA117_specialS =
        "\5\uffff\1\0\11\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\14\1\6\24\uffff\1\1\4\uffff\1\7\2\uffff\1\10\13\uffff\1"+
            "\5\6\uffff\1\11\72\uffff\1\12\6\uffff\1\2\1\3\1\4\1\13",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_static.DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_static.DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_static.DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_static.DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_static.DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_static.DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "206:38: ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA117_5 = input.LA(1);

                         
                        int index117_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 14;}

                         
                        input.seek(index117_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA118_static {
    static final String DFA118_eotS =
        "\u0093\uffff";
    static final String DFA118_eofS =
        "\1\116\u0092\uffff";
    static final String DFA118_minS =
        "\1\46\u0090\0\2\uffff";
    static final String DFA118_maxS =
        "\1\u00b4\u0090\0\2\uffff";
    static final String DFA118_acceptS =
        "\u0091\uffff\1\1\1\2";
    static final String DFA118_specialS =
        "\1\uffff\1\162\1\64\1\46\1\113\1\141\1\u0086\1\122\1\10\1\20\1"+
        "\u008b\1\163\1\112\1\30\1\145\1\124\1\70\1\161\1\170\1\167\1\146"+
        "\1\41\1\130\1\153\1\137\1\77\1\152\1\120\1\22\1\75\1\5\1\u0087\1"+
        "\33\1\4\1\67\1\36\1\103\1\12\1\151\1\144\1\55\1\66\1\27\1\121\1"+
        "\1\1\56\1\u0080\1\25\1\133\1\156\1\42\1\131\1\14\1\104\1\114\1\43"+
        "\1\u008d\1\175\1\171\1\157\1\u0085\1\134\1\23\1\165\1\111\1\150"+
        "\1\26\1\166\1\60\1\31\1\143\1\174\1\u0088\1\44\1\16\1\164\1\105"+
        "\1\101\1\11\1\50\1\u008e\1\71\1\142\1\126\1\0\1\2\1\155\1\37\1\u0089"+
        "\1\51\1\52\1\24\1\62\1\106\1\160\1\47\1\53\1\54\1\172\1\6\1\7\1"+
        "\116\1\21\1\117\1\135\1\125\1\173\1\147\1\73\1\176\1\17\1\61\1\115"+
        "\1\u0081\1\40\1\74\1\177\1\15\1\u0084\1\136\1\45\1\140\1\13\1\u0083"+
        "\1\76\1\35\1\132\1\154\1\u008c\1\32\1\123\1\100\1\107\1\u008f\1"+
        "\65\1\102\1\127\1\57\1\72\1\3\1\u0082\1\63\1\110\1\34\1\u008a\2"+
        "\uffff}>";
    static final String[] DFA118_transitionS = {
            "\1\5\1\22\1\24\1\111\1\47\1\52\1\u0088\1\23\1\27\1\10\1\123"+
            "\1\122\1\11\1\127\1\135\1\136\1\124\1\134\1\112\1\131\1\125"+
            "\1\126\1\133\1\132\1\130\1\36\1\50\1\u0089\1\55\1\u008a\1\51"+
            "\1\56\1\65\1\30\1\53\1\6\1\54\1\42\1\43\1\34\1\57\1\60\1\61"+
            "\1\62\1\63\1\44\1\26\1\146\1\u0086\1\147\1\152\1\35\1\70\1\154"+
            "\1\153\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\40\1\164"+
            "\1\64\1\165\1\151\1\166\1\167\1\71\1\170\1\72\1\171\1\73\1\172"+
            "\1\173\1\150\1\174\1\175\1\74\1\176\1\66\1\177\1\u0080\1\u0081"+
            "\1\75\1\u0082\1\46\1\67\1\u0083\1\u0084\1\u0085\1\41\1\114\1"+
            "\113\1\7\1\u008b\1\u0087\1\u008c\1\115\1\u008d\1\1\1\u008e\1"+
            "\3\1\117\1\4\1\u008f\1\12\1\2\1\33\1\103\1\76\1\121\1\17\1\20"+
            "\1\21\1\106\1\137\1\37\1\45\1\25\1\107\1\104\1\110\1\31\1\32"+
            "\1\13\1\14\1\16\1\15\1\77\1\120\1\u0090\1\140\1\143\1\142\1"+
            "\145\1\141\1\144\1\100\1\105\1\101\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_static.DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_static.DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_static.DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_static.DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_static.DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_static.DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "209:24: ( optionalUnnamedMoleculeEnding )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA118_84 = input.LA(1);

                         
                        int index118_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_84);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA118_44 = input.LA(1);

                         
                        int index118_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_44);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA118_85 = input.LA(1);

                         
                        int index118_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_85);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA118_139 = input.LA(1);

                         
                        int index118_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_139);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA118_33 = input.LA(1);

                         
                        int index118_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_33);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA118_30 = input.LA(1);

                         
                        int index118_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_30);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA118_99 = input.LA(1);

                         
                        int index118_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_99);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA118_100 = input.LA(1);

                         
                        int index118_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_100);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA118_8 = input.LA(1);

                         
                        int index118_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_8);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA118_78 = input.LA(1);

                         
                        int index118_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_78);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA118_37 = input.LA(1);

                         
                        int index118_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_37);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA118_122 = input.LA(1);

                         
                        int index118_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_122);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA118_52 = input.LA(1);

                         
                        int index118_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_52);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA118_117 = input.LA(1);

                         
                        int index118_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_117);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA118_74 = input.LA(1);

                         
                        int index118_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_74);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA118_110 = input.LA(1);

                         
                        int index118_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_110);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA118_9 = input.LA(1);

                         
                        int index118_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_9);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA118_102 = input.LA(1);

                         
                        int index118_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_102);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA118_28 = input.LA(1);

                         
                        int index118_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_28);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA118_62 = input.LA(1);

                         
                        int index118_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_62);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA118_91 = input.LA(1);

                         
                        int index118_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_91);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA118_47 = input.LA(1);

                         
                        int index118_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_47);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA118_66 = input.LA(1);

                         
                        int index118_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_66);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA118_42 = input.LA(1);

                         
                        int index118_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_42);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA118_13 = input.LA(1);

                         
                        int index118_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_13);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA118_69 = input.LA(1);

                         
                        int index118_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_69);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA118_129 = input.LA(1);

                         
                        int index118_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_129);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA118_32 = input.LA(1);

                         
                        int index118_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_32);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA118_143 = input.LA(1);

                         
                        int index118_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_143);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA118_125 = input.LA(1);

                         
                        int index118_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_125);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA118_35 = input.LA(1);

                         
                        int index118_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_35);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA118_87 = input.LA(1);

                         
                        int index118_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_87);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA118_114 = input.LA(1);

                         
                        int index118_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_114);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA118_21 = input.LA(1);

                         
                        int index118_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_21);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA118_50 = input.LA(1);

                         
                        int index118_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_50);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA118_55 = input.LA(1);

                         
                        int index118_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_55);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA118_73 = input.LA(1);

                         
                        int index118_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_73);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA118_120 = input.LA(1);

                         
                        int index118_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_120);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA118_3 = input.LA(1);

                         
                        int index118_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred333_ChemicalChunker()||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_3);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA118_95 = input.LA(1);

                         
                        int index118_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_95);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA118_79 = input.LA(1);

                         
                        int index118_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_79);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA118_89 = input.LA(1);

                         
                        int index118_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_89);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA118_90 = input.LA(1);

                         
                        int index118_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_90);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA118_96 = input.LA(1);

                         
                        int index118_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_96);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA118_97 = input.LA(1);

                         
                        int index118_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_97);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA118_40 = input.LA(1);

                         
                        int index118_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_40);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA118_45 = input.LA(1);

                         
                        int index118_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_45);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA118_137 = input.LA(1);

                         
                        int index118_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_137);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA118_68 = input.LA(1);

                         
                        int index118_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_68);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA118_111 = input.LA(1);

                         
                        int index118_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_111);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA118_92 = input.LA(1);

                         
                        int index118_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_92);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA118_141 = input.LA(1);

                         
                        int index118_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_141);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA118_2 = input.LA(1);

                         
                        int index118_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred333_ChemicalChunker()||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_2);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA118_134 = input.LA(1);

                         
                        int index118_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_134);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA118_41 = input.LA(1);

                         
                        int index118_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_41);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA118_34 = input.LA(1);

                         
                        int index118_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_34);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA118_16 = input.LA(1);

                         
                        int index118_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_16);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA118_81 = input.LA(1);

                         
                        int index118_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_81);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA118_138 = input.LA(1);

                         
                        int index118_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_138);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA118_108 = input.LA(1);

                         
                        int index118_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_108);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA118_115 = input.LA(1);

                         
                        int index118_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_115);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA118_29 = input.LA(1);

                         
                        int index118_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_29);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA118_124 = input.LA(1);

                         
                        int index118_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_124);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA118_25 = input.LA(1);

                         
                        int index118_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_25);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA118_131 = input.LA(1);

                         
                        int index118_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_131);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA118_77 = input.LA(1);

                         
                        int index118_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_77);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA118_135 = input.LA(1);

                         
                        int index118_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_135);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA118_36 = input.LA(1);

                         
                        int index118_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_36);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA118_53 = input.LA(1);

                         
                        int index118_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_53);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA118_76 = input.LA(1);

                         
                        int index118_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_76);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA118_93 = input.LA(1);

                         
                        int index118_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_93);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA118_132 = input.LA(1);

                         
                        int index118_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_132);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA118_142 = input.LA(1);

                         
                        int index118_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_142);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA118_64 = input.LA(1);

                         
                        int index118_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_64);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA118_12 = input.LA(1);

                         
                        int index118_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_12);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA118_4 = input.LA(1);

                         
                        int index118_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred333_ChemicalChunker()||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_4);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA118_54 = input.LA(1);

                         
                        int index118_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_54);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA118_112 = input.LA(1);

                         
                        int index118_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_112);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA118_101 = input.LA(1);

                         
                        int index118_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_101);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA118_103 = input.LA(1);

                         
                        int index118_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_103);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA118_27 = input.LA(1);

                         
                        int index118_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_27);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA118_43 = input.LA(1);

                         
                        int index118_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_43);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA118_7 = input.LA(1);

                         
                        int index118_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_7);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA118_130 = input.LA(1);

                         
                        int index118_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_130);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA118_15 = input.LA(1);

                         
                        int index118_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_15);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA118_105 = input.LA(1);

                         
                        int index118_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_105);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA118_83 = input.LA(1);

                         
                        int index118_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_83);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA118_136 = input.LA(1);

                         
                        int index118_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_136);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA118_22 = input.LA(1);

                         
                        int index118_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_22);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA118_51 = input.LA(1);

                         
                        int index118_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_51);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA118_126 = input.LA(1);

                         
                        int index118_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_126);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA118_48 = input.LA(1);

                         
                        int index118_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_48);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA118_61 = input.LA(1);

                         
                        int index118_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_61);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA118_104 = input.LA(1);

                         
                        int index118_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_104);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA118_119 = input.LA(1);

                         
                        int index118_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_119);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA118_24 = input.LA(1);

                         
                        int index118_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_24);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA118_121 = input.LA(1);

                         
                        int index118_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_121);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA118_5 = input.LA(1);

                         
                        int index118_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred333_ChemicalChunker()||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_5);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA118_82 = input.LA(1);

                         
                        int index118_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_82);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA118_70 = input.LA(1);

                         
                        int index118_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_70);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA118_39 = input.LA(1);

                         
                        int index118_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_39);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA118_14 = input.LA(1);

                         
                        int index118_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_14);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA118_20 = input.LA(1);

                         
                        int index118_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_20);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA118_107 = input.LA(1);

                         
                        int index118_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_107);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA118_65 = input.LA(1);

                         
                        int index118_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_65);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA118_38 = input.LA(1);

                         
                        int index118_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_38);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA118_26 = input.LA(1);

                         
                        int index118_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_26);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA118_23 = input.LA(1);

                         
                        int index118_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_23);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA118_127 = input.LA(1);

                         
                        int index118_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_127);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA118_86 = input.LA(1);

                         
                        int index118_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_86);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA118_49 = input.LA(1);

                         
                        int index118_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_49);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA118_59 = input.LA(1);

                         
                        int index118_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_59);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA118_94 = input.LA(1);

                         
                        int index118_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_94);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA118_17 = input.LA(1);

                         
                        int index118_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_17);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA118_1 = input.LA(1);

                         
                        int index118_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred333_ChemicalChunker()||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred333_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_1);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA118_11 = input.LA(1);

                         
                        int index118_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_11);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA118_75 = input.LA(1);

                         
                        int index118_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_75);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA118_63 = input.LA(1);

                         
                        int index118_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_63);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA118_67 = input.LA(1);

                         
                        int index118_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_67);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA118_19 = input.LA(1);

                         
                        int index118_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_19);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA118_18 = input.LA(1);

                         
                        int index118_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_18);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA118_58 = input.LA(1);

                         
                        int index118_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_58);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA118_98 = input.LA(1);

                         
                        int index118_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_98);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA118_106 = input.LA(1);

                         
                        int index118_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_106);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA118_71 = input.LA(1);

                         
                        int index118_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_71);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA118_57 = input.LA(1);

                         
                        int index118_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_57);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA118_109 = input.LA(1);

                         
                        int index118_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_109);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA118_116 = input.LA(1);

                         
                        int index118_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_116);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA118_46 = input.LA(1);

                         
                        int index118_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_46);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA118_113 = input.LA(1);

                         
                        int index118_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_113);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA118_140 = input.LA(1);

                         
                        int index118_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_140);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA118_123 = input.LA(1);

                         
                        int index118_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_123);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA118_118 = input.LA(1);

                         
                        int index118_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_118);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA118_60 = input.LA(1);

                         
                        int index118_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_60);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA118_6 = input.LA(1);

                         
                        int index118_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_6);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA118_31 = input.LA(1);

                         
                        int index118_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_31);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA118_72 = input.LA(1);

                         
                        int index118_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_72);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA118_88 = input.LA(1);

                         
                        int index118_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_88);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA118_144 = input.LA(1);

                         
                        int index118_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_144);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA118_10 = input.LA(1);

                         
                        int index118_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_10);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA118_128 = input.LA(1);

                         
                        int index118_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_128);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA118_56 = input.LA(1);

                         
                        int index118_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_56);
                        if ( s>=0 ) return s;
                        break;

                    case 142 : 
                        int LA118_80 = input.LA(1);

                         
                        int index118_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_80);
                        if ( s>=0 ) return s;
                        break;

                    case 143 : 
                        int LA118_133 = input.LA(1);

                         
                        int index118_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index118_133);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA119_static {
    static final String DFA119_eotS =
        "\u0092\uffff";
    static final String DFA119_eofS =
        "\1\6\u0091\uffff";
    static final String DFA119_minS =
        "\1\46\5\0\u008c\uffff";
    static final String DFA119_maxS =
        "\1\u00b4\5\0\u008c\uffff";
    static final String DFA119_acceptS =
        "\6\uffff\1\2\u008a\uffff\1\1";
    static final String DFA119_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\u008c\uffff}>";
    static final String[] DFA119_transitionS = {
            "\1\5\144\6\1\1\1\6\1\3\1\6\1\4\2\6\1\2\42\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_static.DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_static.DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_static.DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_static.DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_static.DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_static.DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_static.DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_static.DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "212:5: ( numericOrIdentifierCompoundReference )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA119_1 = input.LA(1);

                         
                        int index119_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index119_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA119_2 = input.LA(1);

                         
                        int index119_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index119_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA119_3 = input.LA(1);

                         
                        int index119_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index119_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA119_4 = input.LA(1);

                         
                        int index119_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index119_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA119_5 = input.LA(1);

                         
                        int index119_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index119_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 119, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA120_static {
    static final String DFA120_eotS =
        "\u0093\uffff";
    static final String DFA120_eofS =
        "\1\1\u0092\uffff";
    static final String DFA120_minS =
        "\1\46\3\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA120_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA120_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\2\1\1";
    static final String DFA120_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\177\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\23\42\1\1\22\73\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_static.DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_static.DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_static.DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_static.DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_static.DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_static.DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_static.DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_static.DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "()* loopback of 212:43: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA120_4 = input.LA(1);

                         
                        int index120_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA120_16 = input.LA(1);

                         
                        int index120_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred336_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA120_17 = input.LA(1);

                         
                        int index120_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred336_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA120_18 = input.LA(1);

                         
                        int index120_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA120_19 = input.LA(1);

                         
                        int index120_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA121_static {
    static final String DFA121_eotS =
        "\u0094\uffff";
    static final String DFA121_eofS =
        "\1\1\u0093\uffff";
    static final String DFA121_minS =
        "\1\46\3\uffff\1\0\13\uffff\4\0\u0080\uffff";
    static final String DFA121_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\4\0\u0080\uffff";
    static final String DFA121_acceptS =
        "\1\uffff\1\4\u008f\uffff\1\1\1\3\1\2";
    static final String DFA121_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\u0080\uffff}>";
    static final String[] DFA121_transitionS = {
            "\1\23\42\1\1\22\73\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_static.DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_static.DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_static.DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_static.DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_static.DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_static.DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "()* loopback of 215:46: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA121_4 = input.LA(1);

                         
                        int index121_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA121_16 = input.LA(1);

                         
                        int index121_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred338_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA121_17 = input.LA(1);

                         
                        int index121_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred339_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA121_18 = input.LA(1);

                         
                        int index121_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA121_19 = input.LA(1);

                         
                        int index121_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA123_static {
    static final String DFA123_eotS =
        "\11\uffff";
    static final String DFA123_eofS =
        "\11\uffff";
    static final String DFA123_minS =
        "\1\46\1\45\2\uffff\1\46\1\45\1\54\1\45\1\101";
    static final String DFA123_maxS =
        "\1\u0092\1\45\2\uffff\1\u009e\1\45\1\u009e\1\45\1\u009e";
    static final String DFA123_acceptS =
        "\2\uffff\1\1\1\2\5\uffff";
    static final String DFA123_specialS =
        "\11\uffff}>";
    static final String[] DFA123_transitionS = {
            "\1\3\42\uffff\1\3\73\uffff\1\2\11\uffff\1\1\2\uffff\1\3",
            "\1\4",
            "",
            "",
            "\1\3\42\uffff\1\3\73\uffff\1\2\13\uffff\1\2\1\5\2\uffff\1"+
            "\2\10\uffff\1\2",
            "\1\6",
            "\1\3\24\uffff\3\3\1\uffff\2\3\76\uffff\1\2\4\uffff\1\3\6\uffff"+
            "\1\2\1\7\2\uffff\1\2\6\uffff\1\3\1\uffff\1\2",
            "\1\10",
            "\3\3\1\uffff\2\3\76\uffff\1\2\12\uffff\2\2\1\7\2\uffff\1\2"+
            "\10\uffff\1\2"
    };
    }

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_static.DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_static.DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_static.DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_static.DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_static.DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_static.DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "221:28: ( citation )?";
        }
    }
    static class DFA124_static {
    static final String DFA124_eotS =
        "\u0094\uffff";
    static final String DFA124_eofS =
        "\1\1\u0093\uffff";
    static final String DFA124_minS =
        "\1\46\3\uffff\1\0\13\uffff\4\0\u0080\uffff";
    static final String DFA124_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\4\0\u0080\uffff";
    static final String DFA124_acceptS =
        "\1\uffff\1\4\u008f\uffff\1\1\1\3\1\2";
    static final String DFA124_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\u0080\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\23\42\1\1\22\73\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_static.DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_static.DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_static.DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_static.DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_static.DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_static.DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_static.DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_static.DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "()* loopback of 221:47: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA124_4 = input.LA(1);

                         
                        int index124_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred346_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index124_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA124_16 = input.LA(1);

                         
                        int index124_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred345_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred346_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index124_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA124_17 = input.LA(1);

                         
                        int index124_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred345_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred346_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index124_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA124_18 = input.LA(1);

                         
                        int index124_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred345_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index124_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA124_19 = input.LA(1);

                         
                        int index124_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred345_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index124_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA127_static {
    static final String DFA127_eotS =
        "\u0093\uffff";
    static final String DFA127_eofS =
        "\1\1\u0092\uffff";
    static final String DFA127_minS =
        "\1\46\3\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA127_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\4\0\177\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\2\1\1";
    static final String DFA127_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\177\uffff}>";
    static final String[] DFA127_transitionS = {
            "\1\23\42\1\1\22\73\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_static.DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_static.DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_static.DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_static.DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_static.DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_static.DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "()* loopback of 227:43: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA127_4 = input.LA(1);

                         
                        int index127_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred350_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA127_16 = input.LA(1);

                         
                        int index127_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA127_17 = input.LA(1);

                         
                        int index127_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred350_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA127_18 = input.LA(1);

                         
                        int index127_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA127_19 = input.LA(1);

                         
                        int index127_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred349_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA130_static {
    static final String DFA130_eotS =
        "\u0092\uffff";
    static final String DFA130_eofS =
        "\1\1\u0091\uffff";
    static final String DFA130_minS =
        "\1\46\16\uffff\4\0\177\uffff";
    static final String DFA130_maxS =
        "\1\u00b4\16\uffff\4\0\177\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA130_specialS =
        "\17\uffff\1\0\1\1\1\2\1\3\177\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\22\42\1\1\21\105\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_static.DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_static.DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_static.DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_static.DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_static.DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_static.DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_static.DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_static.DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "()* loopback of 230:34: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA130_15 = input.LA(1);

                         
                        int index130_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA130_16 = input.LA(1);

                         
                        int index130_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA130_17 = input.LA(1);

                         
                        int index130_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA130_18 = input.LA(1);

                         
                        int index130_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred354_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA132_static {
    static final String DFA132_eotS =
        "\12\uffff";
    static final String DFA132_eofS =
        "\12\uffff";
    static final String DFA132_minS =
        "\1\46\1\uffff\1\45\1\uffff\1\45\1\uffff\1\0\1\46\1\45\1\u008d";
    static final String DFA132_maxS =
        "\1\u0092\1\uffff\1\45\1\uffff\1\45\1\uffff\1\0\1\u0092\1\45\1\u0090";
    static final String DFA132_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\uffff\1\3\4\uffff";
    static final String DFA132_specialS =
        "\6\uffff\1\0\3\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\5\144\uffff\1\1\1\uffff\1\3\1\uffff\1\4\2\uffff\1\2",
            "",
            "\1\6",
            "",
            "\1\7",
            "",
            "\1\uffff",
            "\1\5\146\uffff\1\3\4\uffff\1\10",
            "\1\11",
            "\1\3\2\uffff\1\5"
    };
    }

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_static.DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_static.DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_static.DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_static.DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_static.DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_static.DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "236:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA132_6 = input.LA(1);

                         
                        int index132_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index132_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA137_static {
    static final String DFA137_eotS =
        "\u0092\uffff";
    static final String DFA137_eofS =
        "\1\1\u0091\uffff";
    static final String DFA137_minS =
        "\1\46\2\uffff\1\0\u008e\uffff";
    static final String DFA137_maxS =
        "\1\u00b4\2\uffff\1\0\u008e\uffff";
    static final String DFA137_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA137_specialS =
        "\3\uffff\1\0\u008e\uffff}>";
    static final String[] DFA137_transitionS = {
            "\137\1\1\3\57\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_static.DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_static.DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_static.DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_static.DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_static.DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_static.DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "()* loopback of 251:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA137_3 = input.LA(1);

                         
                        int index137_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred362_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index137_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA141_static {
    static final String DFA141_eotS =
        "\u0092\uffff";
    static final String DFA141_eofS =
        "\1\4\u0091\uffff";
    static final String DFA141_minS =
        "\1\46\3\0\u008e\uffff";
    static final String DFA141_maxS =
        "\1\u00b4\3\0\u008e\uffff";
    static final String DFA141_acceptS =
        "\4\uffff\1\2\u008c\uffff\1\1";
    static final String DFA141_specialS =
        "\1\uffff\1\0\1\1\1\2\u008e\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\3\42\4\1\2\110\4\1\1\42\4",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_static.DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_static.DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_static.DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_static.DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_static.DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_static.DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_static.DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_static.DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "255:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA141_1 = input.LA(1);

                         
                        int index141_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred366_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index141_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA141_2 = input.LA(1);

                         
                        int index141_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred366_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index141_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA141_3 = input.LA(1);

                         
                        int index141_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred366_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index141_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA142_static {
    static final String DFA142_eotS =
        "\25\uffff";
    static final String DFA142_eofS =
        "\20\uffff\1\22\4\uffff";
    static final String DFA142_minS =
        "\1\46\1\45\1\uffff\1\45\1\101\1\u008a\1\uffff\1\45\3\uffff\2\45"+
        "\1\uffff\1\101\1\u008a\1\46\1\45\1\uffff\1\0\1\uffff";
    static final String DFA142_maxS =
        "\1\u0092\1\45\1\uffff\1\45\2\u009c\1\uffff\1\45\3\uffff\2\45\1"+
        "\uffff\1\u0092\1\u008a\1\u00b4\1\45\1\uffff\1\0\1\uffff";
    static final String DFA142_acceptS =
        "\2\uffff\1\5\3\uffff\1\4\1\uffff\1\2\1\3\1\6\2\uffff\1\1\4\uffff"+
        "\1\10\1\uffff\1\7";
    static final String DFA142_specialS =
        "\23\uffff\1\0\1\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\3\42\uffff\1\2\110\uffff\1\1",
            "\1\4",
            "",
            "\1\5",
            "\1\11\1\10\1\15\1\uffff\1\12\1\6\103\uffff\1\14\7\uffff\1"+
            "\7\11\uffff\1\13",
            "\1\14\21\uffff\1\13",
            "",
            "\1\16",
            "",
            "",
            "",
            "\1\17",
            "\1\20",
            "",
            "\1\11\1\10\1\15\1\uffff\1\12\1\6\113\uffff\1\7",
            "\1\14",
            "\134\22\1\21\62\22",
            "\1\23",
            "",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_static.DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_static.DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_static.DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_static.DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_static.DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_static.DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_static.DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_static.DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "256:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA142_19 = input.LA(1);

                         
                        int index142_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred373_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index142_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 142, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA152_static {
    static final String DFA152_eotS =
        "\u008b\uffff";
    static final String DFA152_eofS =
        "\u008b\uffff";
    static final String DFA152_minS =
        "\1\46\1\0\43\uffff\1\0\4\uffff\4\0\2\uffff\15\0\1\uffff\1\0\114"+
        "\uffff";
    static final String DFA152_maxS =
        "\1\u00b4\1\0\43\uffff\1\0\4\uffff\4\0\2\uffff\15\0\1\uffff\1\0"+
        "\114\uffff";
    static final String DFA152_acceptS =
        "\2\uffff\1\2\53\uffff\1\5\1\6\15\uffff\1\12\1\uffff\1\14\55\uffff"+
        "\1\15\21\uffff\1\21\1\22\1\1\1\3\1\4\1\10\1\11\1\16\1\7\1\20\1\17"+
        "\1\13";
    static final String DFA152_specialS =
        "\1\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\1\5\2\uffff\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff"+
        "\1\23\114\uffff}>";
    static final String[] DFA152_transitionS = {
            "\1\55\1\63\1\65\3\77\1\uffff\1\64\1\71\20\155\2\77\1\uffff"+
            "\1\77\1\uffff\3\77\1\74\1\77\1\54\12\77\1\66\4\2\2\77\11\2\1"+
            "\77\1\2\1\77\4\2\1\77\1\2\1\77\1\2\1\77\5\2\1\77\1\2\1\77\3"+
            "\2\1\77\1\2\1\45\1\77\3\2\1\77\1\uffff\1\177\1\70\2\uffff\1"+
            "\75\1\u0080\1\57\1\72\1\uffff\1\73\1\uffff\1\67\2\uffff\1\53"+
            "\2\77\1\1\1\155\1\60\1\61\1\62\1\77\1\56\1\52\7\77\4\uffff\1"+
            "\76\1\155\1\uffff\6\2\4\77",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_static.DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_static.DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_static.DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_static.DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_static.DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_static.DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_static.DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_static.DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "276:19: ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA152_1 = input.LA(1);

                         
                        int index152_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index152_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA152_37 = input.LA(1);

                         
                        int index152_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index152_37);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA152_42 = input.LA(1);

                         
                        int index152_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred386_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index152_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA152_43 = input.LA(1);

                         
                        int index152_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred387_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                        else if ( ((synpred392_ChemicalChunker()||(synpred392_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 133;}

                        else if ( ((synpred395_ChemicalChunker()||(synpred395_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 63;}

                        else if ( (synpred397_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index152_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA152_44 = input.LA(1);

                         
                        int index152_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred387_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred392_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index152_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA152_45 = input.LA(1);

                         
                        int index152_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred387_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                        else if ( ((synpred392_ChemicalChunker()||(synpred392_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 133;}

                        else if ( ((synpred395_ChemicalChunker()||(synpred395_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 63;}

                         
                        input.seek(index152_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA152_48 = input.LA(1);

                         
                        int index152_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index152_48);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA152_49 = input.LA(1);

                         
                        int index152_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index152_49);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA152_50 = input.LA(1);

                         
                        int index152_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index152_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA152_51 = input.LA(1);

                         
                        int index152_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index152_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA152_52 = input.LA(1);

                         
                        int index152_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index152_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA152_53 = input.LA(1);

                         
                        int index152_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred399_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index152_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA152_54 = input.LA(1);

                         
                        int index152_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index152_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA152_55 = input.LA(1);

                         
                        int index152_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred390_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                        else if ( ((synpred392_ChemicalChunker()||(synpred392_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 133;}

                        else if ( ((synpred395_ChemicalChunker()||(synpred395_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 63;}

                         
                        input.seek(index152_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA152_56 = input.LA(1);

                         
                        int index152_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred391_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred392_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred398_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index152_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA152_57 = input.LA(1);

                         
                        int index152_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred392_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index152_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA152_58 = input.LA(1);

                         
                        int index152_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred392_ChemicalChunker()||(synpred392_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 133;}

                        else if ( ((synpred395_ChemicalChunker()||(synpred395_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 63;}

                         
                        input.seek(index152_58);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA152_59 = input.LA(1);

                         
                        int index152_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred392_ChemicalChunker()||(synpred392_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 133;}

                        else if ( ((synpred395_ChemicalChunker()||(synpred395_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 63;}

                         
                        input.seek(index152_59);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA152_60 = input.LA(1);

                         
                        int index152_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred392_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index152_60);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA152_62 = input.LA(1);

                         
                        int index152_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred394_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred395_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index152_62);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA153_static {
    static final String DFA153_eotS =
        "\u008d\uffff";
    static final String DFA153_eofS =
        "\u008d\uffff";
    static final String DFA153_minS =
        "\1\46\1\uffff\3\0\43\uffff\1\0\4\uffff\4\0\2\uffff\13\0\1\uffff"+
        "\1\0\115\uffff";
    static final String DFA153_maxS =
        "\1\u00b4\1\uffff\3\0\43\uffff\1\0\4\uffff\4\0\2\uffff\13\0\1\uffff"+
        "\1\0\115\uffff";
    static final String DFA153_acceptS =
        "\1\uffff\1\24\3\uffff\1\3\53\uffff\1\6\1\7\13\uffff\1\13\1\uffff"+
        "\1\15\55\uffff\1\16\21\uffff\1\22\1\23\1\1\1\11\1\12\1\20\1\10\1"+
        "\2\1\4\1\17\1\5\1\21\1\14";
    static final String DFA153_specialS =
        "\2\uffff\1\0\1\1\1\2\43\uffff\1\3\4\uffff\1\4\1\5\1\6\1\7\2\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff"+
        "\1\23\115\uffff}>";
    static final String[] DFA153_transitionS = {
            "\1\57\1\66\1\70\3\100\1\uffff\1\67\1\72\20\156\2\100\1\uffff"+
            "\1\100\1\uffff\3\100\1\75\1\100\1\56\12\100\1\71\4\5\2\100\11"+
            "\5\1\100\1\5\1\100\4\5\1\100\1\5\1\100\1\5\1\100\5\5\1\100\1"+
            "\5\1\100\3\5\1\100\1\5\1\50\1\100\3\5\1\60\1\uffff\1\u0080\1"+
            "\2\2\uffff\1\76\1\u0081\1\62\1\73\1\uffff\1\74\1\uffff\1\3\1"+
            "\1\1\uffff\1\55\2\100\1\4\1\156\1\63\1\64\1\65\1\100\1\61\10"+
            "\100\4\uffff\1\77\1\156\1\uffff\6\5\4\100",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_static.DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_static.DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_static.DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_static.DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_static.DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_static.DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_static.DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "()+ loopback of 276:142: ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA153_2 = input.LA(1);

                         
                        int index153_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred401_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred410_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred416_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index153_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA153_3 = input.LA(1);

                         
                        int index153_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred401_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred408_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 131;}

                        else if ( ((synpred410_ChemicalChunker()||(synpred410_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 132;}

                        else if ( ((synpred413_ChemicalChunker()||(synpred413_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 64;}

                         
                        input.seek(index153_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA153_4 = input.LA(1);

                         
                        int index153_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred402_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index153_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA153_40 = input.LA(1);

                         
                        int index153_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred403_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index153_40);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA153_45 = input.LA(1);

                         
                        int index153_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred404_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 131;}

                        else if ( ((synpred410_ChemicalChunker()||(synpred410_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 132;}

                        else if ( ((synpred413_ChemicalChunker()||(synpred413_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 64;}

                        else if ( (synpred415_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index153_45);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA153_46 = input.LA(1);

                         
                        int index153_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred404_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred410_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index153_46);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA153_47 = input.LA(1);

                         
                        int index153_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred404_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 131;}

                        else if ( ((synpred410_ChemicalChunker()||(synpred410_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 132;}

                        else if ( ((synpred413_ChemicalChunker()||(synpred413_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 64;}

                         
                        input.seek(index153_47);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA153_48 = input.LA(1);

                         
                        int index153_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred405_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index153_48);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA153_51 = input.LA(1);

                         
                        int index153_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred408_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index153_51);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA153_52 = input.LA(1);

                         
                        int index153_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred408_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index153_52);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA153_53 = input.LA(1);

                         
                        int index153_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred408_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index153_53);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA153_54 = input.LA(1);

                         
                        int index153_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred408_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index153_54);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA153_55 = input.LA(1);

                         
                        int index153_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred408_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index153_55);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA153_56 = input.LA(1);

                         
                        int index153_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred408_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index153_56);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA153_57 = input.LA(1);

                         
                        int index153_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred408_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index153_57);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA153_58 = input.LA(1);

                         
                        int index153_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index153_58);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA153_59 = input.LA(1);

                         
                        int index153_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred410_ChemicalChunker()||(synpred410_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 132;}

                        else if ( ((synpred413_ChemicalChunker()||(synpred413_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 64;}

                         
                        input.seek(index153_59);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA153_60 = input.LA(1);

                         
                        int index153_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred410_ChemicalChunker()||(synpred410_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 132;}

                        else if ( ((synpred413_ChemicalChunker()||(synpred413_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 64;}

                         
                        input.seek(index153_60);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA153_61 = input.LA(1);

                         
                        int index153_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index153_61);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA153_63 = input.LA(1);

                         
                        int index153_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred412_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 64;}

                         
                        input.seek(index153_63);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA156_static {
    static final String DFA156_eotS =
        "\u0093\uffff";
    static final String DFA156_eofS =
        "\1\5\u0092\uffff";
    static final String DFA156_minS =
        "\1\46\4\0\u008e\uffff";
    static final String DFA156_maxS =
        "\1\u00b4\4\0\u008e\uffff";
    static final String DFA156_acceptS =
        "\5\uffff\1\3\u008b\uffff\1\1\1\2";
    static final String DFA156_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008e\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\4\146\5\1\2\1\5\1\3\2\5\1\1\42\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_static.DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_static.DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_static.DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_static.DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_static.DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_static.DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_static.DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_static.DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "283:30: ( identifierOrBracketedIdentifier | numeric )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA156_1 = input.LA(1);

                         
                        int index156_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred424_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index156_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA156_2 = input.LA(1);

                         
                        int index156_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index156_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA156_3 = input.LA(1);

                         
                        int index156_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index156_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA156_4 = input.LA(1);

                         
                        int index156_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index156_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA165_static {
    static final String DFA165_eotS =
        "\13\uffff";
    static final String DFA165_eofS =
        "\13\uffff";
    static final String DFA165_minS =
        "\1\46\1\45\1\uffff\1\46\1\45\1\46\2\45\2\0\1\uffff";
    static final String DFA165_maxS =
        "\1\u00b4\1\45\1\uffff\1\u009c\1\45\1\u00b4\2\45\2\0\1\uffff";
    static final String DFA165_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA165_specialS =
        "\10\uffff\1\1\1\0\1\uffff}>";
    static final String[] DFA165_transitionS = {
            "\6\2\1\uffff\2\2\20\uffff\2\2\1\uffff\1\2\1\uffff\21\2\4\uffff"+
            "\2\2\11\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2\2\3\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\1\1\3\2\1\uffff\4\2\1\uffff\10\2\4\uffff\1\2\10\uffff\4\2",
            "\1\3",
            "",
            "\3\2\3\uffff\2\2\1\uffff\1\2\21\uffff\3\2\1\uffff\2\2\2\uffff"+
            "\1\2\7\uffff\1\2\62\uffff\1\4\1\2\2\uffff\1\2\1\uffff\1\2\2"+
            "\uffff\1\2\1\uffff\1\2\2\uffff\1\2\4\uffff\3\2\2\uffff\1\2",
            "\1\5",
            "\1\7\5\2\1\uffff\2\2\20\uffff\2\2\1\uffff\1\2\1\uffff\21\2"+
            "\4\uffff\2\2\11\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1"+
            "\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2"+
            "\2\3\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1"+
            "\2\2\uffff\1\6\3\2\1\uffff\4\2\1\uffff\10\2\4\uffff\1\2\10\uffff"+
            "\4\2",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_static.DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_static.DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_static.DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_static.DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_static.DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_static.DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_static.DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_static.DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "295:9: ( numericratio | nounratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA165_9 = input.LA(1);

                         
                        int index165_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred435_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA165_8 = input.LA(1);

                         
                        int index165_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred435_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index165_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA182_static {
    static final String DFA182_eotS =
        "\110\uffff";
    static final String DFA182_eofS =
        "\110\uffff";
    static final String DFA182_minS =
        "\1\46\17\uffff\1\0\67\uffff";
    static final String DFA182_maxS =
        "\1\u00b4\17\uffff\1\0\67\uffff";
    static final String DFA182_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA182_specialS =
        "\20\uffff\1\0\67\uffff}>";
    static final String[] DFA182_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\20\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_static.DFA182_eotS);
    static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_static.DFA182_eofS);
    static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_static.DFA182_minS);
    static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_static.DFA182_maxS);
    static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_static.DFA182_acceptS);
    static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_static.DFA182_specialS);
    static final short[][] DFA182_transition;

    static {
        int numStates = DFA182_static.DFA182_transitionS.length;
        DFA182_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA182_transition[i] = DFA.unpackEncodedString(DFA182_static.DFA182_transitionS[i]);
        }
    }

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = DFA182_eot;
            this.eof = DFA182_eof;
            this.min = DFA182_min;
            this.max = DFA182_max;
            this.accept = DFA182_accept;
            this.special = DFA182_special;
            this.transition = DFA182_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:65: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA182_16 = input.LA(1);

                         
                        int index182_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index182_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 182, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA183_static {
    static final String DFA183_eotS =
        "\17\uffff";
    static final String DFA183_eofS =
        "\17\uffff";
    static final String DFA183_minS =
        "\1\46\6\45\2\uffff\6\0";
    static final String DFA183_maxS =
        "\1\u00b4\6\45\2\uffff\6\0";
    static final String DFA183_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA183_specialS =
        "\11\uffff\1\4\1\1\1\2\1\3\1\0\1\5}>";
    static final String[] DFA183_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7"+
            "\1\uffff\1\7\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10"+
            "\7\4\10\1\7\10\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA183_eot = DFA.unpackEncodedString(DFA183_static.DFA183_eotS);
    static final short[] DFA183_eof = DFA.unpackEncodedString(DFA183_static.DFA183_eofS);
    static final char[] DFA183_min = DFA.unpackEncodedStringToUnsignedChars(DFA183_static.DFA183_minS);
    static final char[] DFA183_max = DFA.unpackEncodedStringToUnsignedChars(DFA183_static.DFA183_maxS);
    static final short[] DFA183_accept = DFA.unpackEncodedString(DFA183_static.DFA183_acceptS);
    static final short[] DFA183_special = DFA.unpackEncodedString(DFA183_static.DFA183_specialS);
    static final short[][] DFA183_transition;

    static {
        int numStates = DFA183_static.DFA183_transitionS.length;
        DFA183_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA183_transition[i] = DFA.unpackEncodedString(DFA183_static.DFA183_transitionS[i]);
        }
    }

    class DFA183 extends DFA {

        public DFA183(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 183;
            this.eot = DFA183_eot;
            this.eof = DFA183_eof;
            this.min = DFA183_min;
            this.max = DFA183_max;
            this.accept = DFA183_accept;
            this.special = DFA183_special;
            this.transition = DFA183_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:78: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA183_13 = input.LA(1);

                         
                        int index183_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index183_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA183_10 = input.LA(1);

                         
                        int index183_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index183_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA183_11 = input.LA(1);

                         
                        int index183_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index183_11);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA183_12 = input.LA(1);

                         
                        int index183_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index183_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA183_9 = input.LA(1);

                         
                        int index183_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index183_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA183_14 = input.LA(1);

                         
                        int index183_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index183_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 183, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA184_static {
    static final String DFA184_eotS =
        "\107\uffff";
    static final String DFA184_eofS =
        "\107\uffff";
    static final String DFA184_minS =
        "\1\46\102\0\4\uffff";
    static final String DFA184_maxS =
        "\1\u00b4\102\0\4\uffff";
    static final String DFA184_acceptS =
        "\103\uffff\1\1\1\2\1\3\1\4";
    static final String DFA184_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\1\101\4\uffff}>";
    static final String[] DFA184_transitionS = {
            "\1\13\1\4\1\6\1\102\1\40\1\43\1\uffff\1\5\1\16\20\uffff\1\27"+
            "\1\41\1\uffff\1\46\1\uffff\1\42\1\47\1\56\1\21\1\44\1\12\1\45"+
            "\1\33\1\34\1\25\1\50\1\51\1\52\1\53\1\54\1\35\1\15\4\uffff\1"+
            "\26\1\61\11\uffff\1\31\1\uffff\1\55\4\uffff\1\62\1\uffff\1\63"+
            "\1\uffff\1\64\5\uffff\1\65\1\uffff\1\57\3\uffff\1\66\1\uffff"+
            "\1\37\1\60\3\uffff\1\32\2\uffff\1\14\5\uffff\1\17\1\uffff\1"+
            "\20\1\uffff\1\10\2\uffff\1\11\1\24\1\74\1\67\1\uffff\1\1\1\2"+
            "\1\3\1\77\1\uffff\1\30\1\36\1\7\1\100\1\75\1\101\1\22\1\23\4"+
            "\uffff\1\70\10\uffff\1\71\1\76\1\72\1\73",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_static.DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_static.DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_static.DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_static.DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_static.DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_static.DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_static.DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_static.DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "102:86: ( dissolvePhrase | ratio | noun | numeric )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA184_1 = input.LA(1);

                         
                        int index184_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA184_2 = input.LA(1);

                         
                        int index184_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA184_3 = input.LA(1);

                         
                        int index184_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA184_4 = input.LA(1);

                         
                        int index184_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA184_5 = input.LA(1);

                         
                        int index184_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA184_6 = input.LA(1);

                         
                        int index184_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA184_7 = input.LA(1);

                         
                        int index184_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA184_8 = input.LA(1);

                         
                        int index184_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred94_ChemicalChunker())) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred96_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred96_ChemicalChunker())) ) {s = 69;}

                         
                        input.seek(index184_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA184_9 = input.LA(1);

                         
                        int index184_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred94_ChemicalChunker())) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred96_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred96_ChemicalChunker())) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index184_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA184_10 = input.LA(1);

                         
                        int index184_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA184_11 = input.LA(1);

                         
                        int index184_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred94_ChemicalChunker())) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred96_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred96_ChemicalChunker())) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index184_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA184_12 = input.LA(1);

                         
                        int index184_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA184_13 = input.LA(1);

                         
                        int index184_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA184_14 = input.LA(1);

                         
                        int index184_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA184_15 = input.LA(1);

                         
                        int index184_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred94_ChemicalChunker())) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred96_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred96_ChemicalChunker())) ) {s = 69;}

                         
                        input.seek(index184_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA184_16 = input.LA(1);

                         
                        int index184_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred94_ChemicalChunker())) ) {s = 67;}

                        else if ( ((synpred95_ChemicalChunker()||(synpred95_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 68;}

                        else if ( (((synpred96_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred96_ChemicalChunker())) ) {s = 69;}

                         
                        input.seek(index184_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA184_17 = input.LA(1);

                         
                        int index184_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred94_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA184_18 = input.LA(1);

                         
                        int index184_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA184_19 = input.LA(1);

                         
                        int index184_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA184_20 = input.LA(1);

                         
                        int index184_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA184_21 = input.LA(1);

                         
                        int index184_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA184_22 = input.LA(1);

                         
                        int index184_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA184_23 = input.LA(1);

                         
                        int index184_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA184_24 = input.LA(1);

                         
                        int index184_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA184_25 = input.LA(1);

                         
                        int index184_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA184_26 = input.LA(1);

                         
                        int index184_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA184_27 = input.LA(1);

                         
                        int index184_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA184_28 = input.LA(1);

                         
                        int index184_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA184_29 = input.LA(1);

                         
                        int index184_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA184_30 = input.LA(1);

                         
                        int index184_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_30);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA184_31 = input.LA(1);

                         
                        int index184_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_31);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA184_32 = input.LA(1);

                         
                        int index184_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_32);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA184_33 = input.LA(1);

                         
                        int index184_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA184_34 = input.LA(1);

                         
                        int index184_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_34);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA184_35 = input.LA(1);

                         
                        int index184_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_35);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA184_36 = input.LA(1);

                         
                        int index184_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_36);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA184_37 = input.LA(1);

                         
                        int index184_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_37);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA184_38 = input.LA(1);

                         
                        int index184_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_38);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA184_39 = input.LA(1);

                         
                        int index184_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_39);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA184_40 = input.LA(1);

                         
                        int index184_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_40);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA184_41 = input.LA(1);

                         
                        int index184_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_41);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA184_42 = input.LA(1);

                         
                        int index184_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_42);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA184_43 = input.LA(1);

                         
                        int index184_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_43);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA184_44 = input.LA(1);

                         
                        int index184_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_44);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA184_45 = input.LA(1);

                         
                        int index184_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_45);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA184_46 = input.LA(1);

                         
                        int index184_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_46);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA184_47 = input.LA(1);

                         
                        int index184_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_47);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA184_48 = input.LA(1);

                         
                        int index184_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_48);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA184_49 = input.LA(1);

                         
                        int index184_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_49);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA184_50 = input.LA(1);

                         
                        int index184_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_50);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA184_51 = input.LA(1);

                         
                        int index184_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_51);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA184_52 = input.LA(1);

                         
                        int index184_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_52);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA184_53 = input.LA(1);

                         
                        int index184_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_53);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA184_54 = input.LA(1);

                         
                        int index184_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_54);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA184_55 = input.LA(1);

                         
                        int index184_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_55);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA184_56 = input.LA(1);

                         
                        int index184_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_56);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA184_57 = input.LA(1);

                         
                        int index184_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_57);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA184_58 = input.LA(1);

                         
                        int index184_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_58);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA184_59 = input.LA(1);

                         
                        int index184_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_59);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA184_60 = input.LA(1);

                         
                        int index184_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_60);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA184_61 = input.LA(1);

                         
                        int index184_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_61);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA184_62 = input.LA(1);

                         
                        int index184_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_62);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA184_63 = input.LA(1);

                         
                        int index184_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_63);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA184_64 = input.LA(1);

                         
                        int index184_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_64);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA184_65 = input.LA(1);

                         
                        int index184_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_65);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA184_66 = input.LA(1);

                         
                        int index184_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred96_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index184_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 184, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA188_static {
    static final String DFA188_eotS =
        "\17\uffff";
    static final String DFA188_eofS =
        "\17\uffff";
    static final String DFA188_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA188_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA188_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA188_specialS =
        "\10\uffff\1\4\1\1\1\0\1\5\1\2\1\3\1\uffff}>";
    static final String[] DFA188_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\30\uffff\1\7\1\uffff\1\7\12\uffff"+
            "\1\7\60\uffff\1\7\5\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff"+
            "\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA188_eot = DFA.unpackEncodedString(DFA188_static.DFA188_eotS);
    static final short[] DFA188_eof = DFA.unpackEncodedString(DFA188_static.DFA188_eofS);
    static final char[] DFA188_min = DFA.unpackEncodedStringToUnsignedChars(DFA188_static.DFA188_minS);
    static final char[] DFA188_max = DFA.unpackEncodedStringToUnsignedChars(DFA188_static.DFA188_maxS);
    static final short[] DFA188_accept = DFA.unpackEncodedString(DFA188_static.DFA188_acceptS);
    static final short[] DFA188_special = DFA.unpackEncodedString(DFA188_static.DFA188_specialS);
    static final short[][] DFA188_transition;

    static {
        int numStates = DFA188_static.DFA188_transitionS.length;
        DFA188_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA188_transition[i] = DFA.unpackEncodedString(DFA188_static.DFA188_transitionS[i]);
        }
    }

    class DFA188 extends DFA {

        public DFA188(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 188;
            this.eot = DFA188_eot;
            this.eof = DFA188_eof;
            this.min = DFA188_min;
            this.max = DFA188_max;
            this.accept = DFA188_accept;
            this.special = DFA188_special;
            this.transition = DFA188_transition;
        }
        public String getDescription() {
            return "107:73: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA188_10 = input.LA(1);

                         
                        int index188_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index188_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA188_9 = input.LA(1);

                         
                        int index188_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index188_9);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA188_12 = input.LA(1);

                         
                        int index188_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index188_12);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA188_13 = input.LA(1);

                         
                        int index188_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index188_13);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA188_8 = input.LA(1);

                         
                        int index188_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index188_8);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA188_11 = input.LA(1);

                         
                        int index188_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index188_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 188, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA190_static {
    static final String DFA190_eotS =
        "\21\uffff";
    static final String DFA190_eofS =
        "\21\uffff";
    static final String DFA190_minS =
        "\1\46\5\0\13\uffff";
    static final String DFA190_maxS =
        "\1\u0099\5\0\13\uffff";
    static final String DFA190_acceptS =
        "\6\uffff\1\1\6\uffff\1\2\3\uffff";
    static final String DFA190_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\13\uffff}>";
    static final String[] DFA190_transitionS = {
            "\1\4\2\6\4\uffff\1\6\1\15\30\uffff\1\15\1\uffff\1\3\12\uffff"+
            "\1\6\60\uffff\1\5\5\uffff\1\15\1\uffff\1\15\1\uffff\1\1\2\uffff"+
            "\1\2\4\uffff\3\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA190_eot = DFA.unpackEncodedString(DFA190_static.DFA190_eotS);
    static final short[] DFA190_eof = DFA.unpackEncodedString(DFA190_static.DFA190_eofS);
    static final char[] DFA190_min = DFA.unpackEncodedStringToUnsignedChars(DFA190_static.DFA190_minS);
    static final char[] DFA190_max = DFA.unpackEncodedStringToUnsignedChars(DFA190_static.DFA190_maxS);
    static final short[] DFA190_accept = DFA.unpackEncodedString(DFA190_static.DFA190_acceptS);
    static final short[] DFA190_special = DFA.unpackEncodedString(DFA190_static.DFA190_specialS);
    static final short[][] DFA190_transition;

    static {
        int numStates = DFA190_static.DFA190_transitionS.length;
        DFA190_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA190_transition[i] = DFA.unpackEncodedString(DFA190_static.DFA190_transitionS[i]);
        }
    }

    class DFA190 extends DFA {

        public DFA190(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 190;
            this.eot = DFA190_eot;
            this.eof = DFA190_eof;
            this.min = DFA190_min;
            this.max = DFA190_max;
            this.accept = DFA190_accept;
            this.special = DFA190_special;
            this.transition = DFA190_transition;
        }
        public String getDescription() {
            return "107:83: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA190_1 = input.LA(1);

                         
                        int index190_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index190_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA190_2 = input.LA(1);

                         
                        int index190_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index190_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA190_3 = input.LA(1);

                         
                        int index190_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index190_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA190_4 = input.LA(1);

                         
                        int index190_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index190_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA190_5 = input.LA(1);

                         
                        int index190_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index190_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 190, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA203_static {
    static final String DFA203_eotS =
        "\25\uffff";
    static final String DFA203_eofS =
        "\25\uffff";
    static final String DFA203_minS =
        "\1\46\15\uffff\1\0\6\uffff";
    static final String DFA203_maxS =
        "\1\u009c\15\uffff\1\0\6\uffff";
    static final String DFA203_acceptS =
        "\1\uffff\1\2\22\uffff\1\1";
    static final String DFA203_specialS =
        "\16\uffff\1\0\6\uffff}>";
    static final String[] DFA203_transitionS = {
            "\3\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\40\uffff\1\16\11\uffff"+
            "\1\1\1\uffff\1\24\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_static.DFA203_eotS);
    static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_static.DFA203_eofS);
    static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_static.DFA203_minS);
    static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_static.DFA203_maxS);
    static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_static.DFA203_acceptS);
    static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_static.DFA203_specialS);
    static final short[][] DFA203_transition;

    static {
        int numStates = DFA203_static.DFA203_transitionS.length;
        DFA203_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA203_transition[i] = DFA.unpackEncodedString(DFA203_static.DFA203_transitionS[i]);
        }
    }

    class DFA203 extends DFA {

        public DFA203(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 203;
            this.eot = DFA203_eot;
            this.eof = DFA203_eof;
            this.min = DFA203_min;
            this.max = DFA203_max;
            this.accept = DFA203_accept;
            this.special = DFA203_special;
            this.transition = DFA203_transition;
        }
        public String getDescription() {
            return "()* loopback of 163:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA203_14 = input.LA(1);

                         
                        int index203_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 20;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index203_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 203, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA211_static {
    static final String DFA211_eotS =
        "\11\uffff";
    static final String DFA211_eofS =
        "\11\uffff";
    static final String DFA211_minS =
        "\1\u008f\1\45\1\46\1\uffff\1\45\1\uffff\1\54\1\45\1\101";
    static final String DFA211_maxS =
        "\1\u008f\1\45\1\u009e\1\uffff\1\45\1\uffff\1\u009e\1\45\1\u009e";
    static final String DFA211_acceptS =
        "\3\uffff\1\2\1\uffff\1\1\3\uffff";
    static final String DFA211_specialS =
        "\11\uffff}>";
    static final String[] DFA211_transitionS = {
            "\1\1",
            "\1\2",
            "\1\5\42\uffff\1\5\73\uffff\1\3\13\uffff\1\3\1\4\2\uffff\1"+
            "\3\10\uffff\1\3",
            "",
            "\1\6",
            "",
            "\1\5\24\uffff\3\5\1\uffff\2\5\76\uffff\1\3\4\uffff\1\5\6\uffff"+
            "\1\3\1\7\2\uffff\1\3\6\uffff\1\5\1\uffff\1\3",
            "\1\10",
            "\3\5\1\uffff\2\5\76\uffff\1\3\12\uffff\2\3\1\7\2\uffff\1\3"+
            "\10\uffff\1\3"
    };
    }

    static final short[] DFA211_eot = DFA.unpackEncodedString(DFA211_static.DFA211_eotS);
    static final short[] DFA211_eof = DFA.unpackEncodedString(DFA211_static.DFA211_eofS);
    static final char[] DFA211_min = DFA.unpackEncodedStringToUnsignedChars(DFA211_static.DFA211_minS);
    static final char[] DFA211_max = DFA.unpackEncodedStringToUnsignedChars(DFA211_static.DFA211_maxS);
    static final short[] DFA211_accept = DFA.unpackEncodedString(DFA211_static.DFA211_acceptS);
    static final short[] DFA211_special = DFA.unpackEncodedString(DFA211_static.DFA211_specialS);
    static final short[][] DFA211_transition;

    static {
        int numStates = DFA211_static.DFA211_transitionS.length;
        DFA211_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA211_transition[i] = DFA.unpackEncodedString(DFA211_static.DFA211_transitionS[i]);
        }
    }

    class DFA211 extends DFA {

        public DFA211(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 211;
            this.eot = DFA211_eot;
            this.eof = DFA211_eof;
            this.min = DFA211_min;
            this.max = DFA211_max;
            this.accept = DFA211_accept;
            this.special = DFA211_special;
            this.transition = DFA211_transition;
        }
        public String getDescription() {
            return "194:59: ( quantity1Node | citationStructure )";
        }
    }
 

    static class FOLLOW_sentences_in_document202_static {
    public static final BitSet FOLLOW_sentences_in_document202 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFDFFL});

    }static class FOLLOW_sentenceStructure_in_sentences223_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentences223 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentences225_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences225 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_stop_in_sentences229_static {
    public static final BitSet FOLLOW_stop_in_sentences229 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_nounphrase_in_sentenceStructure239_static {
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure239 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_verbphrase_in_sentenceStructure241_static {
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure241 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphrase_in_sentenceStructure243_static {
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure243 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphraseAfter_in_sentenceStructure245_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure245 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_advAdj_in_sentenceStructure250_static {
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure250 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_colon_in_sentenceStructure252_static {
    public static final BitSet FOLLOW_colon_in_sentenceStructure252 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_conjunction_in_sentenceStructure257_static {
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure257 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_rbconj_in_sentenceStructure259_static {
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure259 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_comma_in_sentenceStructure261_static {
    public static final BitSet FOLLOW_comma_in_sentenceStructure261 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_unmatchedToken_in_unmatchedPhrase273_static {
    public static final BitSet FOLLOW_unmatchedToken_in_unmatchedPhrase273 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_unmatchedToken292_static {
    public static final BitSet FOLLOW_numeric_in_unmatchedToken292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_unmatchedToken294_static {
    public static final BitSet FOLLOW_advAdj_in_unmatchedToken294 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_unmatchedToken296_static {
    public static final BitSet FOLLOW_tmunicode_in_unmatchedToken296 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdunicode_in_unmatchedToken298_static {
    public static final BitSet FOLLOW_cdunicode_in_unmatchedToken298 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unmatchedToken300_static {
    public static final BitSet FOLLOW_jjcomp_in_unmatchedToken300 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_unmatchedToken302_static {
    public static final BitSet FOLLOW_inAll_in_unmatchedToken302 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unmatchedToken306_static {
    public static final BitSet FOLLOW_nnexample_in_unmatchedToken306 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_unmatchedToken308_static {
    public static final BitSet FOLLOW_nnstate_in_unmatchedToken308 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_unmatchedToken310_static {
    public static final BitSet FOLLOW_nntime_in_unmatchedToken310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmass_in_unmatchedToken312_static {
    public static final BitSet FOLLOW_nnmass_in_unmatchedToken312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_unmatchedToken314_static {
    public static final BitSet FOLLOW_nnmolar_in_unmatchedToken314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_unmatchedToken316_static {
    public static final BitSet FOLLOW_nnamount_in_unmatchedToken316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unmatchedToken318_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unmatchedToken318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_unmatchedToken320_static {
    public static final BitSet FOLLOW_nneq_in_unmatchedToken320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_unmatchedToken322_static {
    public static final BitSet FOLLOW_nnvol_in_unmatchedToken322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unmatchedToken324_static {
    public static final BitSet FOLLOW_nnchementity_in_unmatchedToken324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_unmatchedToken326_static {
    public static final BitSet FOLLOW_nntemp_in_unmatchedToken326 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_unmatchedToken328_static {
    public static final BitSet FOLLOW_nnph_in_unmatchedToken328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_unmatchedToken330_static {
    public static final BitSet FOLLOW_nnflash_in_unmatchedToken330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_unmatchedToken332_static {
    public static final BitSet FOLLOW_nngeneral_in_unmatchedToken332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_unmatchedToken334_static {
    public static final BitSet FOLLOW_nnmethod_in_unmatchedToken334 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_unmatchedToken336_static {
    public static final BitSet FOLLOW_nnpressure_in_unmatchedToken336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_unmatchedToken338_static {
    public static final BitSet FOLLOW_nncolumn_in_unmatchedToken338 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_unmatchedToken340_static {
    public static final BitSet FOLLOW_nnchromatography_in_unmatchedToken340 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_unmatchedToken342_static {
    public static final BitSet FOLLOW_nnvacuum_in_unmatchedToken342 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_unmatchedToken344_static {
    public static final BitSet FOLLOW_nncycle_in_unmatchedToken344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_unmatchedToken346_static {
    public static final BitSet FOLLOW_nntimes_in_unmatchedToken346 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_unmatchedToken350_static {
    public static final BitSet FOLLOW_oscarcm_in_unmatchedToken350 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_unmatchedToken352_static {
    public static final BitSet FOLLOW_oscaronts_in_unmatchedToken352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unmatchedToken354_static {
    public static final BitSet FOLLOW_oscarase_in_unmatchedToken354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_unmatchedToken356_static {
    public static final BitSet FOLLOW_verb_in_unmatchedToken356 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_unmatchedToken358_static {
    public static final BitSet FOLLOW_nnadd_in_unmatchedToken358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unmatchedToken360_static {
    public static final BitSet FOLLOW_nnmixture_in_unmatchedToken360 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_unmatchedToken362_static {
    public static final BitSet FOLLOW_nnapparatus_in_unmatchedToken362 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_unmatchedToken364_static {
    public static final BitSet FOLLOW_nnconcentrate_in_unmatchedToken364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_unmatchedToken366_static {
    public static final BitSet FOLLOW_nndry_in_unmatchedToken366 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_unmatchedToken368_static {
    public static final BitSet FOLLOW_nnextract_in_unmatchedToken368 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_unmatchedToken370_static {
    public static final BitSet FOLLOW_nnfilter_in_unmatchedToken370 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_unmatchedToken372_static {
    public static final BitSet FOLLOW_nnprecipitate_in_unmatchedToken372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_unmatchedToken374_static {
    public static final BitSet FOLLOW_nnpurify_in_unmatchedToken374 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_unmatchedToken376_static {
    public static final BitSet FOLLOW_nnremove_in_unmatchedToken376 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_unmatchedToken378_static {
    public static final BitSet FOLLOW_nnsynthesize_in_unmatchedToken378 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_unmatchedToken380_static {
    public static final BitSet FOLLOW_nnyield_in_unmatchedToken380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_unmatchedToken382_static {
    public static final BitSet FOLLOW_colon_in_unmatchedToken382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_unmatchedToken384_static {
    public static final BitSet FOLLOW_apost_in_unmatchedToken384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_unmatchedToken386_static {
    public static final BitSet FOLLOW_neg_in_unmatchedToken386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_unmatchedToken388_static {
    public static final BitSet FOLLOW_dash_in_unmatchedToken388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpercent_in_unmatchedToken390_static {
    public static final BitSet FOLLOW_nnpercent_in_unmatchedToken390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_unmatchedToken392_static {
    public static final BitSet FOLLOW_lsqb_in_unmatchedToken392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rsqb_in_unmatchedToken394_static {
    public static final BitSet FOLLOW_rsqb_in_unmatchedToken394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_unmatchedToken396_static {
    public static final BitSet FOLLOW_lrb_in_unmatchedToken396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_unmatchedToken398_static {
    public static final BitSet FOLLOW_rrb_in_unmatchedToken398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_unmatchedToken402_static {
    public static final BitSet FOLLOW_cc_in_unmatchedToken402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_unmatchedToken404_static {
    public static final BitSet FOLLOW_dt_in_unmatchedToken404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_unmatchedToken406_static {
    public static final BitSet FOLLOW_dtTHE_in_unmatchedToken406 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unmatchedToken408_static {
    public static final BitSet FOLLOW_fw_in_unmatchedToken408 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_unmatchedToken410_static {
    public static final BitSet FOLLOW_md_in_unmatchedToken410 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unmatchedToken412_static {
    public static final BitSet FOLLOW_nn_in_unmatchedToken412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unmatchedToken414_static {
    public static final BitSet FOLLOW_nns_in_unmatchedToken414 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unmatchedToken416_static {
    public static final BitSet FOLLOW_nnp_in_unmatchedToken416 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_in_unmatchedToken418_static {
    public static final BitSet FOLLOW_prp_in_unmatchedToken418 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_unmatchedToken420_static {
    public static final BitSet FOLLOW_prp_poss_in_unmatchedToken420 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_unmatchedToken422_static {
    public static final BitSet FOLLOW_rbconj_in_unmatchedToken422 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_unmatchedToken424_static {
    public static final BitSet FOLLOW_sym_in_unmatchedToken424 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_uh_in_unmatchedToken426_static {
    public static final BitSet FOLLOW_uh_in_unmatchedToken426 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_unmatchedToken428_static {
    public static final BitSet FOLLOW_clause_in_unmatchedToken428 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_unmatchedToken430_static {
    public static final BitSet FOLLOW_comma_in_unmatchedToken430 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_unmatchedToken432_static {
    public static final BitSet FOLLOW_ls_in_unmatchedToken432 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unmatchedToken434_static {
    public static final BitSet FOLLOW_nnps_in_unmatchedToken434 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_unmatchedToken436_static {
    public static final BitSet FOLLOW_pos_in_unmatchedToken436 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_unmatchedToken438_static {
    public static final BitSet FOLLOW_nnidentifier_in_unmatchedToken438 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure_in_nounphrase448_static {
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase448 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_nounphraseStructure467_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure2_in_nounphraseStructure469_static {
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_multiApparatus_in_nounphraseStructure1478_static {
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_nounphraseStructure2495_static {
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2495 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCA824L});

    }static class FOLLOW_dt_in_nounphraseStructure2498_static {
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2498 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCA824L});

    }static class FOLLOW_advAdj_in_nounphraseStructure2501_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2501 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCA824L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2506_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2506 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEA824L});

    }static class FOLLOW_ratio_in_nounphraseStructure2508_static {
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2508 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEA824L});

    }static class FOLLOW_noun_in_nounphraseStructure2510_static {
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2510 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEA824L});

    }static class FOLLOW_numeric_in_nounphraseStructure2512_static {
    public static final BitSet FOLLOW_numeric_in_nounphraseStructure2512 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEA824L});

    }static class FOLLOW_conjunction_in_nounphraseStructure2520_static {
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2520 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEA824L});

    }static class FOLLOW_advAdj_in_nounphraseStructure2523_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2523 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCA824L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2527_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2527 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEA824L});

    }static class FOLLOW_ratio_in_nounphraseStructure2529_static {
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2529 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEA824L});

    }static class FOLLOW_noun_in_nounphraseStructure2531_static {
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2531 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEA824L});

    }static class FOLLOW_numeric_in_nounphraseStructure2533_static {
    public static final BitSet FOLLOW_numeric_in_nounphraseStructure2533 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEA824L});

    }static class FOLLOW_prepphraseOf_in_nounphraseStructure2543_static {
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2543 = new BitSet(new long[]{0x010461C000000002L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_prepphraseIN_in_nounphraseStructure2546_static {
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2546 = new BitSet(new long[]{0x010461C000000002L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseStructure2549_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2549 = new BitSet(new long[]{0x0104000000000002L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase563_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase563 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_dissolvePhrase565_static {
    public static final BitSet FOLLOW_lrb_in_dissolvePhrase565 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase567_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_dissolvePhrase569_static {
    public static final BitSet FOLLOW_rrb_in_dissolvePhrase569 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dissolveStructure594_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure594 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_nnp_in_dissolveStructure598_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_dissolveStructure600_static {
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure600 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_nnp_in_dissolveStructure603_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure603 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_molecule_in_dissolveStructure606_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure606 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure608_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure608 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_inin_in_dissolveStructure613_static {
    public static final BitSet FOLLOW_inin_in_dissolveStructure613 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384E820L});

    }static class FOLLOW_dtTHE_in_dissolveStructure615_static {
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure615 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_adj_in_dissolveStructure618_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure618 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_nnp_in_dissolveStructure621_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure621 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_molecule_in_dissolveStructure625_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure625 = new BitSet(new long[]{0x0004000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure627_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure627 = new BitSet(new long[]{0x0004000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_conjunction_in_dissolveStructure631_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure631 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_molecule_in_dissolveStructure633_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure633 = new BitSet(new long[]{0x0004000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_verbphraseStructure_in_verbphrase648_static {
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_verbphraseStructure666_static {
    public static final BitSet FOLLOW_dt_in_verbphraseStructure666 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_to_in_verbphraseStructure669_static {
    public static final BitSet FOLLOW_to_in_verbphraseStructure669 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inAll_in_verbphraseStructure672_static {
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure672 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inafter_in_verbphraseStructure675_static {
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure675 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_md_in_verbphraseStructure679_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure679 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_verbphraseStructure682_static {
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure682 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_verbphraseStructure685_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure685 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_verbphraseStructure688_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure688 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_verb_in_verbphraseStructure691_static {
    public static final BitSet FOLLOW_verb_in_verbphraseStructure691 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_md_in_verbphraseStructure694_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure694 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adv_in_verbphraseStructure697_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure697 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adj_in_verbphraseStructure700_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure700 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_neg_in_verbphraseStructure703_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure703 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_inoff_in_verbphraseStructure709_static {
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure709 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_cc_in_verbphraseStructure713_static {
    public static final BitSet FOLLOW_cc_in_verbphraseStructure713 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_verbphraseStructure716_static {
    public static final BitSet FOLLOW_comma_in_verbphraseStructure716 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_verbphraseStructure719_static {
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure719 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_vb_in_verb731_static {
    public static final BitSet FOLLOW_vb_in_verb731 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbp_in_verb733_static {
    public static final BitSet FOLLOW_vbp_in_verb733 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbg_in_verb735_static {
    public static final BitSet FOLLOW_vbg_in_verb735 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbd_in_verb737_static {
    public static final BitSet FOLLOW_vbd_in_verb737 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbz_in_verb739_static {
    public static final BitSet FOLLOW_vbz_in_verb739 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbn_in_verb741_static {
    public static final BitSet FOLLOW_vbn_in_verb741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbuse_in_verb743_static {
    public static final BitSet FOLLOW_vbuse_in_verb743 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubmerge_in_verb745_static {
    public static final BitSet FOLLOW_vbsubmerge_in_verb745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbimmerse_in_verb747_static {
    public static final BitSet FOLLOW_vbimmerse_in_verb747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_verb749_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_verb749 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubject_in_verb751_static {
    public static final BitSet FOLLOW_vbsubject_in_verb751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbadd_in_verb753_static {
    public static final BitSet FOLLOW_vbadd_in_verb753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdilute_in_verb755_static {
    public static final BitSet FOLLOW_vbdilute_in_verb755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcharge_in_verb757_static {
    public static final BitSet FOLLOW_vbcharge_in_verb757 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcontain_in_verb759_static {
    public static final BitSet FOLLOW_vbcontain_in_verb759 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdrop_in_verb761_static {
    public static final BitSet FOLLOW_vbdrop_in_verb761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfill_in_verb763_static {
    public static final BitSet FOLLOW_vbfill_in_verb763 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsuspend_in_verb765_static {
    public static final BitSet FOLLOW_vbsuspend_in_verb765 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbtreat_in_verb767_static {
    public static final BitSet FOLLOW_vbtreat_in_verb767 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbapparatus_in_verb769_static {
    public static final BitSet FOLLOW_vbapparatus_in_verb769 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbconcentrate_in_verb771_static {
    public static final BitSet FOLLOW_vbconcentrate_in_verb771 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcool_in_verb773_static {
    public static final BitSet FOLLOW_vbcool_in_verb773 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_verb775_static {
    public static final BitSet FOLLOW_vbdegass_in_verb775 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdissolve_in_verb777_static {
    public static final BitSet FOLLOW_vbdissolve_in_verb777 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdry_in_verb779_static {
    public static final BitSet FOLLOW_vbdry_in_verb779 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbextract_in_verb781_static {
    public static final BitSet FOLLOW_vbextract_in_verb781 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfilter_in_verb783_static {
    public static final BitSet FOLLOW_vbfilter_in_verb783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbheat_in_verb786_static {
    public static final BitSet FOLLOW_vbheat_in_verb786 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbincrease_in_verb788_static {
    public static final BitSet FOLLOW_vbincrease_in_verb788 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpartition_in_verb790_static {
    public static final BitSet FOLLOW_vbpartition_in_verb790 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbprecipitate_in_verb792_static {
    public static final BitSet FOLLOW_vbprecipitate_in_verb792 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpurify_in_verb794_static {
    public static final BitSet FOLLOW_vbpurify_in_verb794 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbquench_in_verb796_static {
    public static final BitSet FOLLOW_vbquench_in_verb796 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbrecover_in_verb798_static {
    public static final BitSet FOLLOW_vbrecover_in_verb798 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbremove_in_verb800_static {
    public static final BitSet FOLLOW_vbremove_in_verb800 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbstir_in_verb802_static {
    public static final BitSet FOLLOW_vbstir_in_verb802 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_verb804_static {
    public static final BitSet FOLLOW_vbsynthesize_in_verb804 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwait_in_verb806_static {
    public static final BitSet FOLLOW_vbwait_in_verb806 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwash_in_verb808_static {
    public static final BitSet FOLLOW_vbwash_in_verb808 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbyield_in_verb810_static {
    public static final BitSet FOLLOW_vbyield_in_verb810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbchange_in_verb812_static {
    public static final BitSet FOLLOW_vbchange_in_verb812 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_degassMultiVerb821_static {
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_cc_in_degassMultiVerb823_static {
    public static final BitSet FOLLOW_cc_in_degassMultiVerb823 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});

    }static class FOLLOW_vbfill_in_degassMultiVerb825_static {
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb825 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounStructure_in_noun834_static {
    public static final BitSet FOLLOW_nounStructure_in_noun834 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_noun837_static {
    public static final BitSet FOLLOW_dash_in_noun837 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_noun839_static {
    public static final BitSet FOLLOW_nounStructure_in_noun839 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_prp_in_nounStructure850_static {
    public static final BitSet FOLLOW_prp_in_nounStructure850 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_nounStructure852_static {
    public static final BitSet FOLLOW_prp_poss_in_nounStructure852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_nounStructure854_static {
    public static final BitSet FOLLOW_citation_in_nounStructure854 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_nounStructure856_static {
    public static final BitSet FOLLOW_cycles_in_nounStructure856 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_nounStructure858_static {
    public static final BitSet FOLLOW_molecule_in_nounStructure858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_nounStructure860_static {
    public static final BitSet FOLLOW_apparatus_in_nounStructure860 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_nounStructure862_static {
    public static final BitSet FOLLOW_mixture_in_nounStructure862 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_nounStructure864_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure864 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_nounStructure866_static {
    public static final BitSet FOLLOW_nnyield_in_nounStructure866 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_nounStructure868_static {
    public static final BitSet FOLLOW_nnstate_in_nounStructure868 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_nounStructure870_static {
    public static final BitSet FOLLOW_procedureNode_in_nounStructure870 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_nounStructure872_static {
    public static final BitSet FOLLOW_nn_in_nounStructure872 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_nounStructure874_static {
    public static final BitSet FOLLOW_nns_in_nounStructure874 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_nounStructure876_static {
    public static final BitSet FOLLOW_nnp_in_nounStructure876 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_nounStructure878_static {
    public static final BitSet FOLLOW_nnadd_in_nounStructure878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_preparationphrase_in_nounStructure880_static {
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure880 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_nounStructure882_static {
    public static final BitSet FOLLOW_nnexample_in_nounStructure882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_nounStructure884_static {
    public static final BitSet FOLLOW_range_in_nounStructure884 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_nounStructure886_static {
    public static final BitSet FOLLOW_oscaronts_in_nounStructure886 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_nounStructure888_static {
    public static final BitSet FOLLOW_nntime_in_nounStructure888 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_nounStructure890_static {
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_nounStructure892_static {
    public static final BitSet FOLLOW_tmunicode_in_nounStructure892 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_nounStructure894_static {
    public static final BitSet FOLLOW_quantity_in_nounStructure894 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_nounStructure896_static {
    public static final BitSet FOLLOW_nnchementity_in_nounStructure896 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_nounStructure898_static {
    public static final BitSet FOLLOW_nntemp_in_nounStructure898 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_nounStructure900_static {
    public static final BitSet FOLLOW_nnph_in_nounStructure900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_nounStructure902_static {
    public static final BitSet FOLLOW_nnflash_in_nounStructure902 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_nounStructure904_static {
    public static final BitSet FOLLOW_nngeneral_in_nounStructure904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_nounStructure906_static {
    public static final BitSet FOLLOW_nnamount_in_nounStructure906 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_nounStructure908_static {
    public static final BitSet FOLLOW_nneq_in_nounStructure908 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_nounStructure910_static {
    public static final BitSet FOLLOW_nnpressure_in_nounStructure910 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_nounStructure912_static {
    public static final BitSet FOLLOW_nncolumn_in_nounStructure912 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_nounStructure914_static {
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure914 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_nounStructure916_static {
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure916 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_nounStructure918_static {
    public static final BitSet FOLLOW_nncycle_in_nounStructure918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_nounStructure920_static {
    public static final BitSet FOLLOW_nntimes_in_nounStructure920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_nounStructure922_static {
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure922 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_nounStructure924_static {
    public static final BitSet FOLLOW_nnvol_in_nounStructure924 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_nounStructure926_static {
    public static final BitSet FOLLOW_nnpurify_in_nounStructure926 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_nounStructure928_static {
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure928 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_nounStructure930_static {
    public static final BitSet FOLLOW_nnmixture_in_nounStructure930 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_nounStructure932_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_nounStructure932 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_nounStructure934_static {
    public static final BitSet FOLLOW_nndry_in_nounStructure934 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_nounStructure936_static {
    public static final BitSet FOLLOW_numeric_in_nounStructure936 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_nounStructure938_static {
    public static final BitSet FOLLOW_nnextract_in_nounStructure938 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_nounStructure940_static {
    public static final BitSet FOLLOW_nnfilter_in_nounStructure940 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_nounStructure942_static {
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure942 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_nounStructure944_static {
    public static final BitSet FOLLOW_nnremove_in_nounStructure944 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_nounStructure946_static {
    public static final BitSet FOLLOW_fw_in_nounStructure946 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_nounStructure948_static {
    public static final BitSet FOLLOW_sym_in_nounStructure948 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_nounStructure950_static {
    public static final BitSet FOLLOW_clause_in_nounStructure950 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_nounStructure952_static {
    public static final BitSet FOLLOW_ls_in_nounStructure952 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_nounStructure954_static {
    public static final BitSet FOLLOW_nnps_in_nounStructure954 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_nounStructure956_static {
    public static final BitSet FOLLOW_pos_in_nounStructure956 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_nounStructure958_static {
    public static final BitSet FOLLOW_oscarase_in_nounStructure958 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_prepphrase970_static {
    public static final BitSet FOLLOW_neg_in_prepphrase970 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphraseAtmosphere_in_prepphrase974_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_prepphrase976_static {
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_prepphrase978_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_prepphrase980_static {
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase980 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_prepphrase982_static {
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase982 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOther_in_prepphrase984_static {
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase984 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere996_static {
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_prepphraseAtmosphereContent1016_static {
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1016 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x000000F0038C8020L});

    }static class FOLLOW_dt_in_prepphraseAtmosphereContent1019_static {
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1019 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x000000F003848020L});

    }static class FOLLOW_advAdj_in_prepphraseAtmosphereContent1022_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1022 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x000000F003848020L});

    }static class FOLLOW_molecule_in_prepphraseAtmosphereContent1025_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1025 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});

    }static class FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1027_static {
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1027 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1037_static {
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1037 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1055_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1055 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000001L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepPhraseTimeStructure1058_static {
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1058 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepPhraseTimeStructure1062_static {
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1062 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1065_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1065 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_cd_in_prepPhraseTimeStructure1068_static {
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nntime_in_prepPhraseTimeStructure1071_static {
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1071 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});

    }static class FOLLOW_prepphraseTempContent_in_prepphraseTemp1081_static {
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1081 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1102_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1102 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000100L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepphraseTempContent1105_static {
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1105 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepphraseTempContent1108_static {
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1108 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1111_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000040000L});

    }static class FOLLOW_cd_in_prepphraseTempContent1114_static {
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nntemp_in_prepphraseTempContent1117_static {
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1117 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});

    }static class FOLLOW_inin_in_prepphraseIN1126_static {
    public static final BitSet FOLLOW_inin_in_prepphraseIN1126 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_molecule_in_prepphraseIN1128_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1128 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_prepphraseRole1149_static {
    public static final BitSet FOLLOW_inas_in_prepphraseRole1149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000080000L});

    }static class FOLLOW_dt_in_prepphraseRole1151_static {
    public static final BitSet FOLLOW_dt_in_prepphraseRole1151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_prepphraseRole1154_static {
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1154 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseOther1177_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1177 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_inMost_in_prepphraseOther1180_static {
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1180 = new BitSet(new long[]{0xFFFFEFC000000000L,0x68A0A850061FFFF5L,0x001E03FFF7FCE8A4L});

    }static class FOLLOW_nounphrase_in_prepphraseOther1184_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1184 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_prepphraseOf1210_static {
    public static final BitSet FOLLOW_inof_in_prepphraseOf1210 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseOf1213_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1213 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseAfter1235_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter1235 = new BitSet(new long[]{0x0002000000000000L});

    }static class FOLLOW_inafter_in_prepphraseAfter1238_static {
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter1238 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseAfter1241_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter1241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_preparationphrase1266_static {
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1266 = new BitSet(new long[]{0x0000800000000000L});

    }static class FOLLOW_inas_in_preparationphrase1268_static {
    public static final BitSet FOLLOW_inas_in_preparationphrase1268 = new BitSet(new long[]{0xFFFFA1C000000000L,0x0000000002183B81L,0x000002F013CC80A0L});

    }static class FOLLOW_nnexample_in_preparationphrase1271_static {
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_preparationphrase1273_static {
    public static final BitSet FOLLOW_cd_in_preparationphrase1273 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_preparationphrase1276_static {
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1276 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_multiApparatus1287_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1287 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138E8020L});

    }static class FOLLOW_conjunction_in_multiApparatus1290_static {
    public static final BitSet FOLLOW_conjunction_in_multiApparatus1290 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138E8020L});

    }static class FOLLOW_apparatus_in_multiApparatus1293_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1293 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138E8020L});

    }static class FOLLOW_dt_in_apparatus1304_static {
    public static final BitSet FOLLOW_dt_in_apparatus1304 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138C8020L});

    }static class FOLLOW_preapparatus_in_apparatus1307_static {
    public static final BitSet FOLLOW_preapparatus_in_apparatus1307 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138C8020L});

    }static class FOLLOW_nnApp_in_apparatus1310_static {
    public static final BitSet FOLLOW_nnApp_in_apparatus1310 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138C8020L});

    }static class FOLLOW_nnapparatus_in_nnApp1337_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1337 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138C8120L});

    }static class FOLLOW_dash_in_nnApp1341_static {
    public static final BitSet FOLLOW_dash_in_nnApp1341 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138C8020L});

    }static class FOLLOW_nnapparatus_in_nnApp1343_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1343 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_quantity_in_preapparatus1357_static {
    public static final BitSet FOLLOW_quantity_in_preapparatus1357 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_adj_in_preapparatus1359_static {
    public static final BitSet FOLLOW_adj_in_preapparatus1359 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_nnpressure_in_preapparatus1361_static {
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1361 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_nnadd_in_preapparatus1363_static {
    public static final BitSet FOLLOW_nnadd_in_preapparatus1363 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_molecule_in_preapparatus1365_static {
    public static final BitSet FOLLOW_molecule_in_preapparatus1365 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_nnchementity_in_preapparatus1367_static {
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1367 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_nnstate_in_preapparatus1369_static {
    public static final BitSet FOLLOW_nnstate_in_preapparatus1369 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_nn_in_preapparatus1371_static {
    public static final BitSet FOLLOW_nn_in_preapparatus1371 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_oscaront_in_oscaronts1383_static {
    public static final BitSet FOLLOW_oscaront_in_oscaronts1383 = new BitSet(new long[]{0x0000040000000002L});

    }static class FOLLOW_adj_in_oscarCompound1403_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1403 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_oscarCompoundStructure_in_oscarCompound1406_static {
    public static final BitSet FOLLOW_oscarCompoundStructure_in_oscarCompound1406 = new BitSet(new long[]{0x000061C000000002L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_adj_in_oscarCompound1408_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1408 = new BitSet(new long[]{0x000061C000000002L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_quantity_in_oscarCompound1412_static {
    public static final BitSet FOLLOW_quantity_in_oscarCompound1412 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_nnchementity_in_oscarCompound1416_static {
    public static final BitSet FOLLOW_nnchementity_in_oscarCompound1416 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_oscarCompound1422_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_oscarCompound1422 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_quantity_in_oscarCompound1426_static {
    public static final BitSet FOLLOW_quantity_in_oscarCompound1426 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_oscarcm_in_oscarCompoundStructure1435_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompoundStructure1435 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000140L});

    }static class FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1437_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1437 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1442_static {
    public static final BitSet FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1442 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1464_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1468_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1470_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1475_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1475 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1479_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1479 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_apost_in_afterOscarCompoundStructure1481_static {
    public static final BitSet FOLLOW_apost_in_afterOscarCompoundStructure1481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_lrb_in_bracketedOscarCompoundStructure1490_static {
    public static final BitSet FOLLOW_lrb_in_bracketedOscarCompoundStructure1490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1493_static {
    public static final BitSet FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedOscarCompoundStructure1496_static {
    public static final BitSet FOLLOW_rrb_in_bracketedOscarCompoundStructure1496 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount_in_molecule1506_static {
    public static final BitSet FOLLOW_moleculeamount_in_molecule1506 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_moleculeamount1524_static {
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount1524 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount1_in_moleculeamount1527_static {
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1527 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount2_in_moleculeamount1531_static {
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1531 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_moleculeamount1534_static {
    public static final BitSet FOLLOW_asAstate_in_moleculeamount1534 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount31545_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount31545 = new BitSet(new long[]{0x0100000000000000L});

    }static class FOLLOW_mixture_in_moleculeamount31547_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31547 = new BitSet(new long[]{0x0100000000000000L});

    }static class FOLLOW_inof_in_moleculeamount31550_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount31550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000C4000L});

    }static class FOLLOW_dtTHE_in_moleculeamount31553_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount31553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_dt_in_moleculeamount31557_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount31557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_mixtureRatio_in_moleculeamount31561_static {
    public static final BitSet FOLLOW_mixtureRatio_in_moleculeamount31561 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_mixture_in_moleculeamount31563_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31563 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_oscarCompound_in_moleculeamount31566_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount31566 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount11576_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11576 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_moleculeamount11578_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount11578 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_inof_in_moleculeamount11582_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11582 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x00000000038CC020L});

    }static class FOLLOW_quantity_in_moleculeamount11585_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11585 = new BitSet(new long[]{0x010021C000000000L,0x0000000000100200L,0x00000000038CC020L});

    }static class FOLLOW_inof_in_moleculeamount11587_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11587 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x00000000038CC020L});

    }static class FOLLOW_dtTHE_in_moleculeamount11593_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount11593 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_dt_in_moleculeamount11597_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount11597 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_oscarCompound_in_moleculeamount11601_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11601 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11604_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11604 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount21613_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount21613 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_mixture_in_moleculeamount21615_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount21615 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_oscarCompound_in_moleculeamount21619_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21619 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21622_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_afterCompoundCitationOrQuantity1630_static {
    public static final BitSet FOLLOW_citation_in_afterCompoundCitationOrQuantity1630 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_quantity_in_afterCompoundCitationOrQuantity1632_static {
    public static final BitSet FOLLOW_quantity_in_afterCompoundCitationOrQuantity1632 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_comma_in_afterCompoundCitationOrQuantity1634_static {
    public static final BitSet FOLLOW_comma_in_afterCompoundCitationOrQuantity1634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1637_static {
    public static final BitSet FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1637 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1639_static {
    public static final BitSet FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1639 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_afterCompoundCitationOrQuantity1642_static {
    public static final BitSet FOLLOW_mixture_in_afterCompoundCitationOrQuantity1642 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1653_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1653 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_unnamedmolecule1655_static {
    public static final BitSet FOLLOW_asAstate_in_unnamedmolecule1655 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_unnamedmoleculeDescription1676_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeDescription1676 = new BitSet(new long[]{0x0100000000000000L});

    }static class FOLLOW_inof_in_unnamedmoleculeDescription1678_static {
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeDescription1678 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCE824L});

    }static class FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeDescription1681_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeDescription1681 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeDescription1683_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeDescription1683 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeDescription1685_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeDescription1685 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeDescription1690_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeDescription1690 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeDescription1692_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeDescription1692 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeDescription1694_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeDescription1694 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeDescription1696_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeDescription1696 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToCompound_in_unnamedmoleculeDescription1698_static {
    public static final BitSet FOLLOW_referenceToCompound_in_unnamedmoleculeDescription1698 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount11710_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount11710 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount11713_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount11713 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount11715_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount11715 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_dtTHE_in_unnamedmoleculeamount21727_static {
    public static final BitSet FOLLOW_dtTHE_in_unnamedmoleculeamount21727 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_dt_in_unnamedmoleculeamount21731_static {
    public static final BitSet FOLLOW_dt_in_unnamedmoleculeamount21731 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_jj_in_unnamedmoleculeamount21736_static {
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount21736 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_jjchem_in_unnamedmoleculeamount21738_static {
    public static final BitSet FOLLOW_jjchem_in_unnamedmoleculeamount21738 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_jjcomp_in_unnamedmoleculeamount21740_static {
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount21740 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nnstate_in_unnamedmoleculeamount21745_static {
    public static final BitSet FOLLOW_nnstate_in_unnamedmoleculeamount21745 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unnamedmoleculeamount21747_static {
    public static final BitSet FOLLOW_nn_in_unnamedmoleculeamount21747 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unnamedmoleculeamount21749_static {
    public static final BitSet FOLLOW_nns_in_unnamedmoleculeamount21749 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unnamedmoleculeamount21751_static {
    public static final BitSet FOLLOW_nnp_in_unnamedmoleculeamount21751 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_unnamedmoleculeamount21753_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_unnamedmoleculeamount21753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unnamedmoleculeamount21755_static {
    public static final BitSet FOLLOW_nnexample_in_unnamedmoleculeamount21755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_unnamedmoleculeamount21757_static {
    public static final BitSet FOLLOW_oscaronts_in_unnamedmoleculeamount21757 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unnamedmoleculeamount21759_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unnamedmoleculeamount21759 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount21761_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount21761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unnamedmoleculeamount21763_static {
    public static final BitSet FOLLOW_nnmixture_in_unnamedmoleculeamount21763 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unnamedmoleculeamount21765_static {
    public static final BitSet FOLLOW_fw_in_unnamedmoleculeamount21765 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unnamedmoleculeamount21767_static {
    public static final BitSet FOLLOW_nnps_in_unnamedmoleculeamount21767 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unnamedmoleculeamount21769_static {
    public static final BitSet FOLLOW_oscarase_in_unnamedmoleculeamount21769 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unnamedmoleculeamount31779_static {
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount31779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount31781_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount31781 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeamount31783_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeamount31783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_optionalUnnamedMoleculeEnding1795_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_optionalUnnamedMoleculeEnding1795 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1799_static {
    public static final BitSet FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1799 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_optionalUnnamedMoleculeEnding1801_static {
    public static final BitSet FOLLOW_mixture_in_optionalUnnamedMoleculeEnding1801 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_unnamedmoleculeamount41812_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_unnamedmoleculeamount41812 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount41815_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount41815 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount41817_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount41817 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount41819_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount41819 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference1832_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference1832 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference1834_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference1834 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference1836_static {
    public static final BitSet FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference1836 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference1838_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference1838 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_unnamedmoleculeamount51866_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_unnamedmoleculeamount51866 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount51868_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount51868 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount51871_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount51871 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount51874_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount51874 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount51876_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount51876 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount51878_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount51878 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_cd_in_numberCompoundReference1890_static {
    public static final BitSet FOLLOW_cd_in_numberCompoundReference1890 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount61907_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount61907 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000080L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount61909_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount61909 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000080L});

    }static class FOLLOW_jjcomp_in_unnamedmoleculeamount61912_static {
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount61912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount61915_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount61915 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount61918_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount61918 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount61920_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount61920 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_inas_in_asAstate1931_static {
    public static final BitSet FOLLOW_inas_in_asAstate1931 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000880000L});

    }static class FOLLOW_dt_in_asAstate1933_static {
    public static final BitSet FOLLOW_dt_in_asAstate1933 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jj_in_asAstate1937_static {
    public static final BitSet FOLLOW_jj_in_asAstate1937 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_asAstate1939_static {
    public static final BitSet FOLLOW_jjchem_in_asAstate1939 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_nnstate_in_asAstate1943_static {
    public static final BitSet FOLLOW_nnstate_in_asAstate1943 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_quantity_in_asAstate1945_static {
    public static final BitSet FOLLOW_quantity_in_asAstate1945 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_nnchementity_in_referenceToCompound1956_static {
    public static final BitSet FOLLOW_nnchementity_in_referenceToCompound1956 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_referenceToCompound1963_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_referenceToCompound1963 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference1974_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference1974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference1976_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference1976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference1978_static {
    public static final BitSet FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference1978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_squareBracketedReference2004_static {
    public static final BitSet FOLLOW_lsqb_in_squareBracketedReference2004 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_numeric_in_squareBracketedReference2006_static {
    public static final BitSet FOLLOW_numeric_in_squareBracketedReference2006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_rsqb_in_squareBracketedReference2008_static {
    public static final BitSet FOLLOW_rsqb_in_squareBracketedReference2008 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1Node_in_quantity2019_static {
    public static final BitSet FOLLOW_quantity1Node_in_quantity2019 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_quantity2021_static {
    public static final BitSet FOLLOW_quantity2Node_in_quantity2021 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1_in_quantity1Node2030_static {
    public static final BitSet FOLLOW_quantity1_in_quantity1Node2030 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_quantity12050_static {
    public static final BitSet FOLLOW_lrb_in_quantity12050 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_measurements_in_quantity12052_static {
    public static final BitSet FOLLOW_measurements_in_quantity12052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12055_static {
    public static final BitSet FOLLOW_comma_in_quantity12055 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_measurements_in_quantity12058_static {
    public static final BitSet FOLLOW_measurements_in_quantity12058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12063_static {
    public static final BitSet FOLLOW_comma_in_quantity12063 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12065_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_stop_in_quantity12070_static {
    public static final BitSet FOLLOW_stop_in_quantity12070 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12072_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});

    }static class FOLLOW_rrb_in_quantity12077_static {
    public static final BitSet FOLLOW_rrb_in_quantity12077 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2_in_quantity2Node2085_static {
    public static final BitSet FOLLOW_quantity2_in_quantity2Node2085 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_quantity22106_static {
    public static final BitSet FOLLOW_measurements_in_quantity22106 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_quantity22109_static {
    public static final BitSet FOLLOW_comma_in_quantity22109 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_measurements_in_quantity22112_static {
    public static final BitSet FOLLOW_measurements_in_quantity22112 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_cd_in_measurements2125_static {
    public static final BitSet FOLLOW_cd_in_measurements2125 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_nn_in_measurements2127_static {
    public static final BitSet FOLLOW_nn_in_measurements2127 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_multiple_in_measurements2132_static {
    public static final BitSet FOLLOW_multiple_in_measurements2132 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_measurementtypes_in_measurements2134_static {
    public static final BitSet FOLLOW_measurementtypes_in_measurements2134 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_dt_in_measurements2137_static {
    public static final BitSet FOLLOW_dt_in_measurements2137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_multiple2145_static {
    public static final BitSet FOLLOW_cd_in_multiple2145 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_cdunicode_in_multiple2147_static {
    public static final BitSet FOLLOW_cdunicode_in_multiple2147 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_measurementtypes_in_multiple2149_static {
    public static final BitSet FOLLOW_measurementtypes_in_multiple2149 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molar_in_measurementtypes2174_static {
    public static final BitSet FOLLOW_molar_in_measurementtypes2174 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_measurementtypes2176_static {
    public static final BitSet FOLLOW_amount_in_measurementtypes2176 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mass_in_measurementtypes2178_static {
    public static final BitSet FOLLOW_mass_in_measurementtypes2178 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_volume_in_measurementtypes2180_static {
    public static final BitSet FOLLOW_volume_in_measurementtypes2180 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_logHydrogenActivity_in_measurementtypes2182_static {
    public static final BitSet FOLLOW_logHydrogenActivity_in_measurementtypes2182 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_equivalent_in_measurementtypes2184_static {
    public static final BitSet FOLLOW_equivalent_in_measurementtypes2184 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_measurementtypes2186_static {
    public static final BitSet FOLLOW_yield_in_measurementtypes2186 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_measurementtypes2188_static {
    public static final BitSet FOLLOW_percent_in_measurementtypes2188 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_molar2196_static {
    public static final BitSet FOLLOW_cd_in_molar2196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000040000L});

    }static class FOLLOW_nnmolar_in_molar2199_static {
    public static final BitSet FOLLOW_nnmolar_in_molar2199 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_amount2220_static {
    public static final BitSet FOLLOW_cd_in_amount2220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000040000L});

    }static class FOLLOW_nnamount_in_amount2223_static {
    public static final BitSet FOLLOW_nnamount_in_amount2223 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mass2244_static {
    public static final BitSet FOLLOW_cd_in_mass2244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000040000L});

    }static class FOLLOW_nnmass_in_mass2247_static {
    public static final BitSet FOLLOW_nnmass_in_mass2247 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_volume2267_static {
    public static final BitSet FOLLOW_cd_in_volume2267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000040000L});

    }static class FOLLOW_nnvol_in_volume2270_static {
    public static final BitSet FOLLOW_nnvol_in_volume2270 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_logHydrogenActivity2291_static {
    public static final BitSet FOLLOW_nnph_in_logHydrogenActivity2291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000040000L});

    }static class FOLLOW_sym_in_logHydrogenActivity2293_static {
    public static final BitSet FOLLOW_sym_in_logHydrogenActivity2293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_logHydrogenActivity2296_static {
    public static final BitSet FOLLOW_cd_in_logHydrogenActivity2296 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_equivalent2316_static {
    public static final BitSet FOLLOW_cd_in_equivalent2316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000000000040000L});

    }static class FOLLOW_nneq_in_equivalent2319_static {
    public static final BitSet FOLLOW_nneq_in_equivalent2319 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_yield2337_static {
    public static final BitSet FOLLOW_percent_in_yield2337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnyield_in_yield2339_static {
    public static final BitSet FOLLOW_nnyield_in_yield2339 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_percent2357_static {
    public static final BitSet FOLLOW_numeric_in_percent2357 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x0000000013848420L});

    }static class FOLLOW_nn_in_percent2359_static {
    public static final BitSet FOLLOW_nn_in_percent2359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_nnpercent_in_percent2362_static {
    public static final BitSet FOLLOW_nnpercent_in_percent2362 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureRatio_in_mixture2385_static {
    public static final BitSet FOLLOW_mixtureRatio_in_mixture2385 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048020L});

    }static class FOLLOW_mixtureStructure3_in_mixture2390_static {
    public static final BitSet FOLLOW_mixtureStructure3_in_mixture2390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure2_in_mixture2392_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture2392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_mixture2394_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture2394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_mixtureStructure22421_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_lrb_in_mixtureStructure22423_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure22423 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureContent_in_mixtureStructure22425_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure22425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure22427_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure22427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_mixtureStructure22429_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22429 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure12435_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure12435 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureContent_in_mixtureStructure12437_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure12437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure12439_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure12439 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure32447_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure32447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_nnpercent_in_mixtureStructure32450_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureStructure32450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure32452_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure32452 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mixtureRatio2461_static {
    public static final BitSet FOLLOW_cd_in_mixtureRatio2461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_mixtureRatio2463_static {
    public static final BitSet FOLLOW_colon_in_mixtureRatio2463 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_numeric_in_mixtureRatio2465_static {
    public static final BitSet FOLLOW_numeric_in_mixtureRatio2465 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_mixtureContent2474_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent2474 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_verb_in_mixtureContent2476_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2476 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nn_in_mixtureContent2478_static {
    public static final BitSet FOLLOW_nn_in_mixtureContent2478 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_quantity2Node_in_mixtureContent2480_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2480 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_md_in_mixtureContent2482_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2482 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nnpercent_in_mixtureContent2484_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent2484 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_oscarCompound_in_mixtureContent2486_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2486 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_molecule_in_mixtureContent2488_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent2488 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent2490_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent2490 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_dash_in_mixtureContent2492_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2492 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_sym_in_mixtureContent2494_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent2494 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_noun_in_mixtureContent2496_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2496 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_inAll_in_mixtureContent2498_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2498 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_cd_in_mixtureContent2500_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2500 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_comma_in_mixtureContent2502_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2502 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_adj_in_mixtureContent2504_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2504 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_colon_in_mixtureContent2506_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2506 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_stop_in_mixtureContent2508_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2508 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_minimixture_in_mixtureContent2512_static {
    public static final BitSet FOLLOW_minimixture_in_mixtureContent2512 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_fw_in_mixtureContent2514_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent2514 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_verb_in_mixtureContent2516_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2516 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_quantity2Node_in_mixtureContent2518_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2518 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nnyield_in_mixtureContent2520_static {
    public static final BitSet FOLLOW_nnyield_in_mixtureContent2520 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_md_in_mixtureContent2522_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2522 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nnpercent_in_mixtureContent2524_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent2524 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_oscarCompound_in_mixtureContent2526_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2526 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_molecule_in_mixtureContent2528_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent2528 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent2530_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent2530 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_dash_in_mixtureContent2532_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2532 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_sym_in_mixtureContent2534_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent2534 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_noun_in_mixtureContent2536_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2536 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_inAll_in_mixtureContent2538_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2538 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_cd_in_mixtureContent2540_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2540 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_comma_in_mixtureContent2542_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2542 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_adj_in_mixtureContent2544_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2544 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_colon_in_mixtureContent2546_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2546 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_stop_in_mixtureContent2548_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2548 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureStructure2_in_minimixture2559_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_minimixture2559 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_minimixture2561_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_minimixture2561 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_method_in_procedureNode2582_static {
    public static final BitSet FOLLOW_method_in_procedureNode2582 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_method2602_static {
    public static final BitSet FOLLOW_nngeneral_in_method2602 = new BitSet(new long[]{0x800021C000000000L,0x0000000002103A80L,0x0000000013848020L});

    }static class FOLLOW_nn_in_method2604_static {
    public static final BitSet FOLLOW_nn_in_method2604 = new BitSet(new long[]{0x800021C000000000L,0x0000000002103A80L,0x0000000013848020L});

    }static class FOLLOW_nnmethod_in_method2608_static {
    public static final BitSet FOLLOW_nnmethod_in_method2608 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_method2611_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_method2611 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_method2613_static {
    public static final BitSet FOLLOW_numeric_in_method2613 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_method2619_static {
    public static final BitSet FOLLOW_nnexample_in_method2619 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_method2622_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_method2622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_method2624_static {
    public static final BitSet FOLLOW_numeric_in_method2624 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_referenceToExampleCompound2635_static {
    public static final BitSet FOLLOW_nnexample_in_referenceToExampleCompound2635 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A000L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2638_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2638 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_referenceToExampleCompound2640_static {
    public static final BitSet FOLLOW_numeric_in_referenceToExampleCompound2640 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_advAdj2663_static {
    public static final BitSet FOLLOW_adv_in_advAdj2663 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_advAdj2665_static {
    public static final BitSet FOLLOW_adj_in_advAdj2665 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_range2672_static {
    public static final BitSet FOLLOW_numeric_in_range2672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_range2674_static {
    public static final BitSet FOLLOW_dash_in_range2674 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_numeric_in_range2676_static {
    public static final BitSet FOLLOW_numeric_in_range2676 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycleStructure_in_cycles2683_static {
    public static final BitSet FOLLOW_cycleStructure_in_cycles2683 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cycleStructure2700_static {
    public static final BitSet FOLLOW_cd_in_cycleStructure2700 = new BitSet(new long[]{0x800021C000000000L,0x0000000002122280L,0x0000000013848020L});

    }static class FOLLOW_dashNN_in_cycleStructure2702_static {
    public static final BitSet FOLLOW_dashNN_in_cycleStructure2702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_nncycle_in_cycleStructure2705_static {
    public static final BitSet FOLLOW_nncycle_in_cycleStructure2705 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dashNN2713_static {
    public static final BitSet FOLLOW_adj_in_dashNN2713 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN2715_static {
    public static final BitSet FOLLOW_nn_in_dashNN2715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN2717_static {
    public static final BitSet FOLLOW_cd_in_dashNN2717 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_dashNN2721_static {
    public static final BitSet FOLLOW_dash_in_dashNN2721 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x0000000013848020L});

    }static class FOLLOW_adj_in_dashNN2724_static {
    public static final BitSet FOLLOW_adj_in_dashNN2724 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN2726_static {
    public static final BitSet FOLLOW_nn_in_dashNN2726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN2728_static {
    public static final BitSet FOLLOW_cd_in_dashNN2728 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_numericratio_in_ratio2739_static {
    public static final BitSet FOLLOW_numericratio_in_ratio2739 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounratio_in_ratio2741_static {
    public static final BitSet FOLLOW_nounratio_in_ratio2741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numericratio2764_static {
    public static final BitSet FOLLOW_cd_in_numericratio2764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_numericratio2767_static {
    public static final BitSet FOLLOW_colon_in_numericratio2767 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_numeric_in_numericratio2769_static {
    public static final BitSet FOLLOW_numeric_in_numericratio2769 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_noun_in_nounratio2781_static {
    public static final BitSet FOLLOW_noun_in_nounratio2781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_nounratio2785_static {
    public static final BitSet FOLLOW_colon_in_nounratio2785 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_noun_in_nounratio2787_static {
    public static final BitSet FOLLOW_noun_in_nounratio2787 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_citationStructure_in_citation2799_static {
    public static final BitSet FOLLOW_citationStructure_in_citation2799 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_citation2801_static {
    public static final BitSet FOLLOW_comma_in_citation2801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_citationContent_in_citation2803_static {
    public static final BitSet FOLLOW_citationContent_in_citation2803 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_citation2805_static {
    public static final BitSet FOLLOW_comma_in_citation2805 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationContent_in_citationStructure2813_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure2813 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_citationContent2829_static {
    public static final BitSet FOLLOW_lrb_in_citationContent2829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent2832_static {
    public static final BitSet FOLLOW_nnp_in_citationContent2832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_fw_in_citationContent2834_static {
    public static final BitSet FOLLOW_fw_in_citationContent2834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_cd_in_citationContent2836_static {
    public static final BitSet FOLLOW_cd_in_citationContent2836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_conjunction_in_citationContent2838_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent2838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent2842_static {
    public static final BitSet FOLLOW_nnp_in_citationContent2842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_fw_in_citationContent2844_static {
    public static final BitSet FOLLOW_fw_in_citationContent2844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_cd_in_citationContent2846_static {
    public static final BitSet FOLLOW_cd_in_citationContent2846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_conjunction_in_citationContent2848_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent2848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_rrb_in_citationContent2852_static {
    public static final BitSet FOLLOW_rrb_in_citationContent2852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_numericOrBracketedNumeric2862_static {
    public static final BitSet FOLLOW_numeric_in_numericOrBracketedNumeric2862 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2866_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2866 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedNumeric2874_static {
    public static final BitSet FOLLOW_lrb_in_bracketedNumeric2874 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_numeric_in_bracketedNumeric2876_static {
    public static final BitSet FOLLOW_numeric_in_bracketedNumeric2876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedNumeric2878_static {
    public static final BitSet FOLLOW_rrb_in_bracketedNumeric2878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_identifierOrBracketedIdentifier2885_static {
    public static final BitSet FOLLOW_cd_in_identifierOrBracketedIdentifier2885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier2888_static {
    public static final BitSet FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier2888 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier2892_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier2892 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedIdentifier2900_static {
    public static final BitSet FOLLOW_lrb_in_bracketedIdentifier2900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_cd_in_bracketedIdentifier2902_static {
    public static final BitSet FOLLOW_cd_in_bracketedIdentifier2902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_nnidentifier_in_bracketedIdentifier2905_static {
    public static final BitSet FOLLOW_nnidentifier_in_bracketedIdentifier2905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedIdentifier2907_static {
    public static final BitSet FOLLOW_rrb_in_bracketedIdentifier2907 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_adj2915_static {
    public static final BitSet FOLLOW_jj_in_adj2915 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjr_in_adj2917_static {
    public static final BitSet FOLLOW_jjr_in_adj2917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjs_in_adj2919_static {
    public static final BitSet FOLLOW_jjs_in_adj2919 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcj_in_adj2921_static {
    public static final BitSet FOLLOW_oscarcj_in_adj2921 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjchem_in_adj2923_static {
    public static final BitSet FOLLOW_jjchem_in_adj2923 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarrn_in_adj2925_static {
    public static final BitSet FOLLOW_oscarrn_in_adj2925 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rb_in_adv2932_static {
    public static final BitSet FOLLOW_rb_in_adv2932 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbr_in_adv2934_static {
    public static final BitSet FOLLOW_rbr_in_adv2934 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rp_in_adv2936_static {
    public static final BitSet FOLLOW_rp_in_adv2936 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbs_in_adv2938_static {
    public static final BitSet FOLLOW_rbs_in_adv2938 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_clause2945_static {
    public static final BitSet FOLLOW_wdt_in_clause2945 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_clause2947_static {
    public static final BitSet FOLLOW_wp_poss_in_clause2947 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wrb_in_clause2949_static {
    public static final BitSet FOLLOW_wrb_in_clause2949 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ex_in_clause2951_static {
    public static final BitSet FOLLOW_ex_in_clause2951 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pdt_in_clause2953_static {
    public static final BitSet FOLLOW_pdt_in_clause2953 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_in_clause2955_static {
    public static final BitSet FOLLOW_wp_in_clause2955 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_conjunction2962_static {
    public static final BitSet FOLLOW_cc_in_conjunction2962 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_conjunction2964_static {
    public static final BitSet FOLLOW_comma_in_conjunction2964 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inAll2971_static {
    public static final BitSet FOLLOW_in_in_inAll2971 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inafter_in_inAll2973_static {
    public static final BitSet FOLLOW_inafter_in_inAll2973 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inAll2975_static {
    public static final BitSet FOLLOW_inas_in_inAll2975 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inAll2977_static {
    public static final BitSet FOLLOW_inbefore_in_inAll2977 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inAll2979_static {
    public static final BitSet FOLLOW_inby_in_inAll2979 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inAll2981_static {
    public static final BitSet FOLLOW_infor_in_inAll2981 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inAll2983_static {
    public static final BitSet FOLLOW_infrom_in_inAll2983 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inAll2985_static {
    public static final BitSet FOLLOW_inin_in_inAll2985 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inAll2987_static {
    public static final BitSet FOLLOW_ininto_in_inAll2987 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inAll2989_static {
    public static final BitSet FOLLOW_inof_in_inAll2989 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inAll2991_static {
    public static final BitSet FOLLOW_inoff_in_inAll2991 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inAll2993_static {
    public static final BitSet FOLLOW_inon_in_inAll2993 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inAll2995_static {
    public static final BitSet FOLLOW_inover_in_inAll2995 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inAll2997_static {
    public static final BitSet FOLLOW_inunder_in_inAll2997 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inAll2999_static {
    public static final BitSet FOLLOW_invia_in_inAll2999 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inAll3001_static {
    public static final BitSet FOLLOW_inwith_in_inAll3001 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inAll3003_static {
    public static final BitSet FOLLOW_inwithout_in_inAll3003 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inAll3005_static {
    public static final BitSet FOLLOW_to_in_inAll3005 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inMost3012_static {
    public static final BitSet FOLLOW_in_in_inMost3012 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inMost3014_static {
    public static final BitSet FOLLOW_inas_in_inMost3014 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inMost3016_static {
    public static final BitSet FOLLOW_inbefore_in_inMost3016 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inMost3018_static {
    public static final BitSet FOLLOW_inby_in_inMost3018 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inMost3020_static {
    public static final BitSet FOLLOW_infor_in_inMost3020 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inMost3022_static {
    public static final BitSet FOLLOW_infrom_in_inMost3022 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inMost3024_static {
    public static final BitSet FOLLOW_inin_in_inMost3024 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inMost3026_static {
    public static final BitSet FOLLOW_ininto_in_inMost3026 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inMost3028_static {
    public static final BitSet FOLLOW_inof_in_inMost3028 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inMost3030_static {
    public static final BitSet FOLLOW_inoff_in_inMost3030 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inMost3032_static {
    public static final BitSet FOLLOW_inon_in_inMost3032 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inMost3034_static {
    public static final BitSet FOLLOW_inover_in_inMost3034 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inMost3036_static {
    public static final BitSet FOLLOW_inunder_in_inMost3036 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inMost3038_static {
    public static final BitSet FOLLOW_invia_in_inMost3038 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inMost3040_static {
    public static final BitSet FOLLOW_inwith_in_inMost3040 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inMost3042_static {
    public static final BitSet FOLLOW_inwithout_in_inMost3042 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inMost3044_static {
    public static final BitSet FOLLOW_to_in_inMost3044 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numeric3051_static {
    public static final BitSet FOLLOW_cd_in_numeric3051 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_numeric3053_static {
    public static final BitSet FOLLOW_cdAlphanum_in_numeric3053 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_38_in_cdAlphanum3061_static {
    public static final BitSet FOLLOW_38_in_cdAlphanum3061 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdAlphanum3063_static {
    public static final BitSet FOLLOW_TOKEN_in_cdAlphanum3063 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_39_in_oscarcj3076_static {
    public static final BitSet FOLLOW_39_in_oscarcj3076 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcj3078_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcj3078 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_40_in_oscarrn3091_static {
    public static final BitSet FOLLOW_40_in_oscarrn3091 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarrn3093_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarrn3093 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_41_in_oscarase3106_static {
    public static final BitSet FOLLOW_41_in_oscarase3106 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarase3108_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarase3108 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_42_in_oscaront3121_static {
    public static final BitSet FOLLOW_42_in_oscaront3121 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscaront3123_static {
    public static final BitSet FOLLOW_TOKEN_in_oscaront3123 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_43_in_tmunicode3136_static {
    public static final BitSet FOLLOW_43_in_tmunicode3136 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_tmunicode3138_static {
    public static final BitSet FOLLOW_TOKEN_in_tmunicode3138 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_44_in_cdunicode3151_static {
    public static final BitSet FOLLOW_44_in_cdunicode3151 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdunicode3153_static {
    public static final BitSet FOLLOW_TOKEN_in_cdunicode3153 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_45_in_jjchem3166_static {
    public static final BitSet FOLLOW_45_in_jjchem3166 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjchem3168_static {
    public static final BitSet FOLLOW_TOKEN_in_jjchem3168 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_46_in_jjcomp3181_static {
    public static final BitSet FOLLOW_46_in_jjcomp3181 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjcomp3183_static {
    public static final BitSet FOLLOW_TOKEN_in_jjcomp3183 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_47_in_inas3197_static {
    public static final BitSet FOLLOW_47_in_inas3197 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inas3199_static {
    public static final BitSet FOLLOW_TOKEN_in_inas3199 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_48_in_inbefore3212_static {
    public static final BitSet FOLLOW_48_in_inbefore3212 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inbefore3214_static {
    public static final BitSet FOLLOW_TOKEN_in_inbefore3214 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_49_in_inafter3227_static {
    public static final BitSet FOLLOW_49_in_inafter3227 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inafter3229_static {
    public static final BitSet FOLLOW_TOKEN_in_inafter3229 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_50_in_inin3242_static {
    public static final BitSet FOLLOW_50_in_inin3242 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inin3244_static {
    public static final BitSet FOLLOW_TOKEN_in_inin3244 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_51_in_ininto3257_static {
    public static final BitSet FOLLOW_51_in_ininto3257 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ininto3259_static {
    public static final BitSet FOLLOW_TOKEN_in_ininto3259 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_52_in_inwith3272_static {
    public static final BitSet FOLLOW_52_in_inwith3272 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwith3274_static {
    public static final BitSet FOLLOW_TOKEN_in_inwith3274 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_53_in_inwithout3287_static {
    public static final BitSet FOLLOW_53_in_inwithout3287 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwithout3289_static {
    public static final BitSet FOLLOW_TOKEN_in_inwithout3289 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_54_in_inby3302_static {
    public static final BitSet FOLLOW_54_in_inby3302 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inby3304_static {
    public static final BitSet FOLLOW_TOKEN_in_inby3304 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_55_in_invia3317_static {
    public static final BitSet FOLLOW_55_in_invia3317 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_invia3319_static {
    public static final BitSet FOLLOW_TOKEN_in_invia3319 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_56_in_inof3332_static {
    public static final BitSet FOLLOW_56_in_inof3332 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inof3334_static {
    public static final BitSet FOLLOW_TOKEN_in_inof3334 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_57_in_inon3347_static {
    public static final BitSet FOLLOW_57_in_inon3347 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inon3349_static {
    public static final BitSet FOLLOW_TOKEN_in_inon3349 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_58_in_infor3362_static {
    public static final BitSet FOLLOW_58_in_infor3362 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infor3364_static {
    public static final BitSet FOLLOW_TOKEN_in_infor3364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_59_in_infrom3377_static {
    public static final BitSet FOLLOW_59_in_infrom3377 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infrom3379_static {
    public static final BitSet FOLLOW_TOKEN_in_infrom3379 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_60_in_inunder3392_static {
    public static final BitSet FOLLOW_60_in_inunder3392 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inunder3394_static {
    public static final BitSet FOLLOW_TOKEN_in_inunder3394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_61_in_inover3407_static {
    public static final BitSet FOLLOW_61_in_inover3407 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inover3409_static {
    public static final BitSet FOLLOW_TOKEN_in_inover3409 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_62_in_inoff3422_static {
    public static final BitSet FOLLOW_62_in_inoff3422 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inoff3424_static {
    public static final BitSet FOLLOW_TOKEN_in_inoff3424 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_63_in_nnstate3439_static {
    public static final BitSet FOLLOW_63_in_nnstate3439 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnstate3441_static {
    public static final BitSet FOLLOW_TOKEN_in_nnstate3441 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_64_in_nntime3454_static {
    public static final BitSet FOLLOW_64_in_nntime3454 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntime3456_static {
    public static final BitSet FOLLOW_TOKEN_in_nntime3456 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_65_in_nnmass3469_static {
    public static final BitSet FOLLOW_65_in_nnmass3469 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmass3471_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmass3471 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_66_in_nnamount3484_static {
    public static final BitSet FOLLOW_66_in_nnamount3484 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnamount3486_static {
    public static final BitSet FOLLOW_TOKEN_in_nnamount3486 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_67_in_nnmolar3499_static {
    public static final BitSet FOLLOW_67_in_nnmolar3499 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmolar3501_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3501 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_68_in_nnatmosphere3514_static {
    public static final BitSet FOLLOW_68_in_nnatmosphere3514 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnatmosphere3516_static {
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3516 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_69_in_nneq3529_static {
    public static final BitSet FOLLOW_69_in_nneq3529 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nneq3531_static {
    public static final BitSet FOLLOW_TOKEN_in_nneq3531 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_70_in_nnvol3544_static {
    public static final BitSet FOLLOW_70_in_nnvol3544 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvol3546_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvol3546 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_71_in_nnchementity3559_static {
    public static final BitSet FOLLOW_71_in_nnchementity3559 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchementity3561_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3561 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_72_in_nntemp3574_static {
    public static final BitSet FOLLOW_72_in_nntemp3574 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntemp3576_static {
    public static final BitSet FOLLOW_TOKEN_in_nntemp3576 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_73_in_nnph3589_static {
    public static final BitSet FOLLOW_73_in_nnph3589 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnph3591_static {
    public static final BitSet FOLLOW_TOKEN_in_nnph3591 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_74_in_nnflash3604_static {
    public static final BitSet FOLLOW_74_in_nnflash3604 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnflash3606_static {
    public static final BitSet FOLLOW_TOKEN_in_nnflash3606 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_75_in_nngeneral3619_static {
    public static final BitSet FOLLOW_75_in_nngeneral3619 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nngeneral3621_static {
    public static final BitSet FOLLOW_TOKEN_in_nngeneral3621 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_76_in_nnmethod3634_static {
    public static final BitSet FOLLOW_76_in_nnmethod3634 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmethod3636_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmethod3636 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_77_in_nnpressure3649_static {
    public static final BitSet FOLLOW_77_in_nnpressure3649 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpressure3651_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpressure3651 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_78_in_nncolumn3664_static {
    public static final BitSet FOLLOW_78_in_nncolumn3664 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncolumn3666_static {
    public static final BitSet FOLLOW_TOKEN_in_nncolumn3666 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_79_in_nnchromatography3679_static {
    public static final BitSet FOLLOW_79_in_nnchromatography3679 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchromatography3681_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography3681 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_80_in_nnvacuum3694_static {
    public static final BitSet FOLLOW_80_in_nnvacuum3694 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvacuum3696_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum3696 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_81_in_nncycle3709_static {
    public static final BitSet FOLLOW_81_in_nncycle3709 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncycle3711_static {
    public static final BitSet FOLLOW_TOKEN_in_nncycle3711 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_82_in_nntimes3724_static {
    public static final BitSet FOLLOW_82_in_nntimes3724 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntimes3726_static {
    public static final BitSet FOLLOW_TOKEN_in_nntimes3726 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_83_in_nnexample3739_static {
    public static final BitSet FOLLOW_83_in_nnexample3739 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnexample3741_static {
    public static final BitSet FOLLOW_TOKEN_in_nnexample3741 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_84_in_oscarcm3756_static {
    public static final BitSet FOLLOW_84_in_oscarcm3756 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcm3758_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcm3758 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_85_in_vbuse3773_static {
    public static final BitSet FOLLOW_85_in_vbuse3773 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbuse3775_static {
    public static final BitSet FOLLOW_TOKEN_in_vbuse3775 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_86_in_vbchange3788_static {
    public static final BitSet FOLLOW_86_in_vbchange3788 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbchange3790_static {
    public static final BitSet FOLLOW_TOKEN_in_vbchange3790 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_87_in_vbsubmerge3803_static {
    public static final BitSet FOLLOW_87_in_vbsubmerge3803 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubmerge3805_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge3805 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_88_in_vbsubject3818_static {
    public static final BitSet FOLLOW_88_in_vbsubject3818 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubject3820_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubject3820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_89_in_nnadd3835_static {
    public static final BitSet FOLLOW_89_in_nnadd3835 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnadd3837_static {
    public static final BitSet FOLLOW_TOKEN_in_nnadd3837 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_90_in_nnmixture3850_static {
    public static final BitSet FOLLOW_90_in_nnmixture3850 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmixture3852_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmixture3852 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_91_in_vbdilute3865_static {
    public static final BitSet FOLLOW_91_in_vbdilute3865 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdilute3867_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdilute3867 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_92_in_vbadd3880_static {
    public static final BitSet FOLLOW_92_in_vbadd3880 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbadd3882_static {
    public static final BitSet FOLLOW_TOKEN_in_vbadd3882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_93_in_vbcharge3895_static {
    public static final BitSet FOLLOW_93_in_vbcharge3895 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcharge3897_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcharge3897 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_94_in_vbcontain3910_static {
    public static final BitSet FOLLOW_94_in_vbcontain3910 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcontain3912_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcontain3912 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_95_in_vbdrop3925_static {
    public static final BitSet FOLLOW_95_in_vbdrop3925 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdrop3927_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdrop3927 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_96_in_vbfill3940_static {
    public static final BitSet FOLLOW_96_in_vbfill3940 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfill3942_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfill3942 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_97_in_vbsuspend3955_static {
    public static final BitSet FOLLOW_97_in_vbsuspend3955 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsuspend3957_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend3957 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_98_in_vbtreat3970_static {
    public static final BitSet FOLLOW_98_in_vbtreat3970 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbtreat3972_static {
    public static final BitSet FOLLOW_TOKEN_in_vbtreat3972 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_99_in_vbapparatus3987_static {
    public static final BitSet FOLLOW_99_in_vbapparatus3987 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbapparatus3989_static {
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus3989 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_100_in_nnapparatus4002_static {
    public static final BitSet FOLLOW_100_in_nnapparatus4002 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnapparatus4004_static {
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus4004 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_101_in_vbconcentrate4019_static {
    public static final BitSet FOLLOW_101_in_vbconcentrate4019 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbconcentrate4021_static {
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate4021 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_102_in_nnconcentrate4034_static {
    public static final BitSet FOLLOW_102_in_nnconcentrate4034 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnconcentrate4036_static {
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate4036 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_103_in_vbcool4051_static {
    public static final BitSet FOLLOW_103_in_vbcool4051 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcool4053_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcool4053 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_104_in_vbdegass4068_static {
    public static final BitSet FOLLOW_104_in_vbdegass4068 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdegass4070_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdegass4070 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_105_in_vbdissolve4085_static {
    public static final BitSet FOLLOW_105_in_vbdissolve4085 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdissolve4087_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve4087 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_106_in_vbdry4102_static {
    public static final BitSet FOLLOW_106_in_vbdry4102 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdry4104_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdry4104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_107_in_nndry4117_static {
    public static final BitSet FOLLOW_107_in_nndry4117 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nndry4119_static {
    public static final BitSet FOLLOW_TOKEN_in_nndry4119 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_108_in_vbextract4134_static {
    public static final BitSet FOLLOW_108_in_vbextract4134 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbextract4136_static {
    public static final BitSet FOLLOW_TOKEN_in_vbextract4136 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_109_in_nnextract4149_static {
    public static final BitSet FOLLOW_109_in_nnextract4149 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnextract4151_static {
    public static final BitSet FOLLOW_TOKEN_in_nnextract4151 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_110_in_vbfilter4166_static {
    public static final BitSet FOLLOW_110_in_vbfilter4166 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfilter4168_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfilter4168 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_111_in_nnfilter4181_static {
    public static final BitSet FOLLOW_111_in_nnfilter4181 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnfilter4183_static {
    public static final BitSet FOLLOW_TOKEN_in_nnfilter4183 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_112_in_vbheat4198_static {
    public static final BitSet FOLLOW_112_in_vbheat4198 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbheat4200_static {
    public static final BitSet FOLLOW_TOKEN_in_vbheat4200 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_113_in_vbincrease4213_static {
    public static final BitSet FOLLOW_113_in_vbincrease4213 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbincrease4215_static {
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4215 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_114_in_vbimmerse4230_static {
    public static final BitSet FOLLOW_114_in_vbimmerse4230 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbimmerse4232_static {
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4232 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_115_in_vbpartition4247_static {
    public static final BitSet FOLLOW_115_in_vbpartition4247 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpartition4249_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4249 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_116_in_vbprecipitate4264_static {
    public static final BitSet FOLLOW_116_in_vbprecipitate4264 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbprecipitate4266_static {
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4266 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_117_in_nnprecipitate4279_static {
    public static final BitSet FOLLOW_117_in_nnprecipitate4279 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnprecipitate4281_static {
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4281 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_118_in_vbpurify4296_static {
    public static final BitSet FOLLOW_118_in_vbpurify4296 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpurify4298_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4298 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_119_in_nnpurify4311_static {
    public static final BitSet FOLLOW_119_in_nnpurify4311 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpurify4313_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4313 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_120_in_vbquench4328_static {
    public static final BitSet FOLLOW_120_in_vbquench4328 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbquench4330_static {
    public static final BitSet FOLLOW_TOKEN_in_vbquench4330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_121_in_vbrecover4345_static {
    public static final BitSet FOLLOW_121_in_vbrecover4345 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbrecover4347_static {
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4347 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_122_in_vbremove4362_static {
    public static final BitSet FOLLOW_122_in_vbremove4362 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbremove4364_static {
    public static final BitSet FOLLOW_TOKEN_in_vbremove4364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_123_in_nnremove4377_static {
    public static final BitSet FOLLOW_123_in_nnremove4377 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnremove4379_static {
    public static final BitSet FOLLOW_TOKEN_in_nnremove4379 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_124_in_vbstir4394_static {
    public static final BitSet FOLLOW_124_in_vbstir4394 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbstir4396_static {
    public static final BitSet FOLLOW_TOKEN_in_vbstir4396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_125_in_vbsynthesize4411_static {
    public static final BitSet FOLLOW_125_in_vbsynthesize4411 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsynthesize4413_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4413 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_126_in_nnsynthesize4426_static {
    public static final BitSet FOLLOW_126_in_nnsynthesize4426 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnsynthesize4428_static {
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4428 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_127_in_vbwait4443_static {
    public static final BitSet FOLLOW_127_in_vbwait4443 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwait4445_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwait4445 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_128_in_vbwash4460_static {
    public static final BitSet FOLLOW_128_in_vbwash4460 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwash4462_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwash4462 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_129_in_vbyield4477_static {
    public static final BitSet FOLLOW_129_in_vbyield4477 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbyield4479_static {
    public static final BitSet FOLLOW_TOKEN_in_vbyield4479 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_130_in_nnyield4494_static {
    public static final BitSet FOLLOW_130_in_nnyield4494 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnyield4496_static {
    public static final BitSet FOLLOW_TOKEN_in_nnyield4496 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_131_in_rbconj4512_static {
    public static final BitSet FOLLOW_131_in_rbconj4512 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbconj4514_static {
    public static final BitSet FOLLOW_TOKEN_in_rbconj4514 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_132_in_colon4527_static {
    public static final BitSet FOLLOW_132_in_colon4527 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_colon4529_static {
    public static final BitSet FOLLOW_TOKEN_in_colon4529 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_133_in_comma4542_static {
    public static final BitSet FOLLOW_133_in_comma4542 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_comma4544_static {
    public static final BitSet FOLLOW_TOKEN_in_comma4544 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_134_in_apost4557_static {
    public static final BitSet FOLLOW_134_in_apost4557 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_apost4559_static {
    public static final BitSet FOLLOW_TOKEN_in_apost4559 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_135_in_neg4572_static {
    public static final BitSet FOLLOW_135_in_neg4572 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_neg4574_static {
    public static final BitSet FOLLOW_TOKEN_in_neg4574 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_136_in_dash4587_static {
    public static final BitSet FOLLOW_136_in_dash4587 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dash4589_static {
    public static final BitSet FOLLOW_TOKEN_in_dash4589 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_137_in_stop4602_static {
    public static final BitSet FOLLOW_137_in_stop4602 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_stop4604_static {
    public static final BitSet FOLLOW_TOKEN_in_stop4604 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_138_in_nnpercent4617_static {
    public static final BitSet FOLLOW_138_in_nnpercent4617 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpercent4619_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpercent4619 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_139_in_lsqb4632_static {
    public static final BitSet FOLLOW_139_in_lsqb4632 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lsqb4634_static {
    public static final BitSet FOLLOW_TOKEN_in_lsqb4634 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_140_in_rsqb4647_static {
    public static final BitSet FOLLOW_140_in_rsqb4647 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rsqb4649_static {
    public static final BitSet FOLLOW_TOKEN_in_rsqb4649 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_141_in_nnidentifier4663_static {
    public static final BitSet FOLLOW_141_in_nnidentifier4663 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnidentifier4665_static {
    public static final BitSet FOLLOW_TOKEN_in_nnidentifier4665 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_142_in_dtTHE4680_static {
    public static final BitSet FOLLOW_142_in_dtTHE4680 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dtTHE4682_static {
    public static final BitSet FOLLOW_TOKEN_in_dtTHE4682 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_143_in_lrb4696_static {
    public static final BitSet FOLLOW_143_in_lrb4696 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lrb4698_static {
    public static final BitSet FOLLOW_TOKEN_in_lrb4698 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_144_in_rrb4711_static {
    public static final BitSet FOLLOW_144_in_rrb4711 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rrb4713_static {
    public static final BitSet FOLLOW_TOKEN_in_rrb4713 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_145_in_cc4730_static {
    public static final BitSet FOLLOW_145_in_cc4730 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cc4732_static {
    public static final BitSet FOLLOW_TOKEN_in_cc4732 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_146_in_cd4747_static {
    public static final BitSet FOLLOW_146_in_cd4747 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cd4749_static {
    public static final BitSet FOLLOW_TOKEN_in_cd4749 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_147_in_dt4764_static {
    public static final BitSet FOLLOW_147_in_dt4764 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dt4766_static {
    public static final BitSet FOLLOW_TOKEN_in_dt4766 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_148_in_ex4781_static {
    public static final BitSet FOLLOW_148_in_ex4781 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ex4783_static {
    public static final BitSet FOLLOW_TOKEN_in_ex4783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_149_in_fw4798_static {
    public static final BitSet FOLLOW_149_in_fw4798 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_fw4800_static {
    public static final BitSet FOLLOW_TOKEN_in_fw4800 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_150_in_in4815_static {
    public static final BitSet FOLLOW_150_in_in4815 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_in4817_static {
    public static final BitSet FOLLOW_TOKEN_in_in4817 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_151_in_jj4832_static {
    public static final BitSet FOLLOW_151_in_jj4832 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jj4834_static {
    public static final BitSet FOLLOW_TOKEN_in_jj4834 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_152_in_jjr4849_static {
    public static final BitSet FOLLOW_152_in_jjr4849 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjr4851_static {
    public static final BitSet FOLLOW_TOKEN_in_jjr4851 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_153_in_jjs4866_static {
    public static final BitSet FOLLOW_153_in_jjs4866 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjs4868_static {
    public static final BitSet FOLLOW_TOKEN_in_jjs4868 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_154_in_ls4883_static {
    public static final BitSet FOLLOW_154_in_ls4883 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ls4885_static {
    public static final BitSet FOLLOW_TOKEN_in_ls4885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_155_in_md4900_static {
    public static final BitSet FOLLOW_155_in_md4900 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_md4902_static {
    public static final BitSet FOLLOW_TOKEN_in_md4902 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_156_in_nn4917_static {
    public static final BitSet FOLLOW_156_in_nn4917 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nn4919_static {
    public static final BitSet FOLLOW_TOKEN_in_nn4919 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_157_in_nns4934_static {
    public static final BitSet FOLLOW_157_in_nns4934 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nns4936_static {
    public static final BitSet FOLLOW_TOKEN_in_nns4936 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_158_in_nnp4951_static {
    public static final BitSet FOLLOW_158_in_nnp4951 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnp4953_static {
    public static final BitSet FOLLOW_TOKEN_in_nnp4953 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_159_in_nnps4968_static {
    public static final BitSet FOLLOW_159_in_nnps4968 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnps4970_static {
    public static final BitSet FOLLOW_TOKEN_in_nnps4970 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_160_in_pdt4985_static {
    public static final BitSet FOLLOW_160_in_pdt4985 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pdt4987_static {
    public static final BitSet FOLLOW_TOKEN_in_pdt4987 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_161_in_pos5002_static {
    public static final BitSet FOLLOW_161_in_pos5002 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pos5004_static {
    public static final BitSet FOLLOW_TOKEN_in_pos5004 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_162_in_prp5019_static {
    public static final BitSet FOLLOW_162_in_prp5019 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp5021_static {
    public static final BitSet FOLLOW_TOKEN_in_prp5021 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_163_in_prp_poss5036_static {
    public static final BitSet FOLLOW_163_in_prp_poss5036 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp_poss5038_static {
    public static final BitSet FOLLOW_TOKEN_in_prp_poss5038 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_164_in_rb5053_static {
    public static final BitSet FOLLOW_164_in_rb5053 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rb5055_static {
    public static final BitSet FOLLOW_TOKEN_in_rb5055 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_165_in_rbr5070_static {
    public static final BitSet FOLLOW_165_in_rbr5070 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbr5072_static {
    public static final BitSet FOLLOW_TOKEN_in_rbr5072 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_166_in_rbs5087_static {
    public static final BitSet FOLLOW_166_in_rbs5087 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbs5089_static {
    public static final BitSet FOLLOW_TOKEN_in_rbs5089 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_167_in_rp5104_static {
    public static final BitSet FOLLOW_167_in_rp5104 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rp5106_static {
    public static final BitSet FOLLOW_TOKEN_in_rp5106 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_168_in_sym5121_static {
    public static final BitSet FOLLOW_168_in_sym5121 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_sym5123_static {
    public static final BitSet FOLLOW_TOKEN_in_sym5123 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_169_in_to5138_static {
    public static final BitSet FOLLOW_169_in_to5138 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_to5140_static {
    public static final BitSet FOLLOW_TOKEN_in_to5140 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_170_in_uh5155_static {
    public static final BitSet FOLLOW_170_in_uh5155 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_uh5157_static {
    public static final BitSet FOLLOW_TOKEN_in_uh5157 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_171_in_vb5172_static {
    public static final BitSet FOLLOW_171_in_vb5172 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vb5174_static {
    public static final BitSet FOLLOW_TOKEN_in_vb5174 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_172_in_vbd5189_static {
    public static final BitSet FOLLOW_172_in_vbd5189 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbd5191_static {
    public static final BitSet FOLLOW_TOKEN_in_vbd5191 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_173_in_vbg5206_static {
    public static final BitSet FOLLOW_173_in_vbg5206 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbg5208_static {
    public static final BitSet FOLLOW_TOKEN_in_vbg5208 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_174_in_vbn5223_static {
    public static final BitSet FOLLOW_174_in_vbn5223 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbn5225_static {
    public static final BitSet FOLLOW_TOKEN_in_vbn5225 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_175_in_vbp5240_static {
    public static final BitSet FOLLOW_175_in_vbp5240 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbp5242_static {
    public static final BitSet FOLLOW_TOKEN_in_vbp5242 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_176_in_vbz5257_static {
    public static final BitSet FOLLOW_176_in_vbz5257 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbz5259_static {
    public static final BitSet FOLLOW_TOKEN_in_vbz5259 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_177_in_wdt5274_static {
    public static final BitSet FOLLOW_177_in_wdt5274 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wdt5276_static {
    public static final BitSet FOLLOW_TOKEN_in_wdt5276 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_178_in_wp5291_static {
    public static final BitSet FOLLOW_178_in_wp5291 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp5293_static {
    public static final BitSet FOLLOW_TOKEN_in_wp5293 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_179_in_wp_poss5308_static {
    public static final BitSet FOLLOW_179_in_wp_poss5308 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp_poss5310_static {
    public static final BitSet FOLLOW_TOKEN_in_wp_poss5310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_180_in_wrb5325_static {
    public static final BitSet FOLLOW_180_in_wrb5325 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wrb5327_static {
    public static final BitSet FOLLOW_TOKEN_in_wrb5327 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker223_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker223 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker225_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker225 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_synpred5_ChemicalChunker239_static {
    public static final BitSet FOLLOW_nounphrase_in_synpred5_ChemicalChunker239 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphrase_in_synpred6_ChemicalChunker241_static {
    public static final BitSet FOLLOW_verbphrase_in_synpred6_ChemicalChunker241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_synpred7_ChemicalChunker243_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred7_ChemicalChunker243 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker245_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred9_ChemicalChunker250_static {
    public static final BitSet FOLLOW_advAdj_in_synpred9_ChemicalChunker250 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred10_ChemicalChunker252_static {
    public static final BitSet FOLLOW_colon_in_synpred10_ChemicalChunker252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred11_ChemicalChunker257_static {
    public static final BitSet FOLLOW_conjunction_in_synpred11_ChemicalChunker257 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_synpred12_ChemicalChunker259_static {
    public static final BitSet FOLLOW_rbconj_in_synpred12_ChemicalChunker259 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred13_ChemicalChunker261_static {
    public static final BitSet FOLLOW_comma_in_synpred13_ChemicalChunker261 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_synpred84_ChemicalChunker467_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred84_ChemicalChunker467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred86_ChemicalChunker498_static {
    public static final BitSet FOLLOW_dt_in_synpred86_ChemicalChunker498 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred87_ChemicalChunker501_static {
    public static final BitSet FOLLOW_advAdj_in_synpred87_ChemicalChunker501 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred88_ChemicalChunker506_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred88_ChemicalChunker506 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred89_ChemicalChunker508_static {
    public static final BitSet FOLLOW_ratio_in_synpred89_ChemicalChunker508 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred90_ChemicalChunker510_static {
    public static final BitSet FOLLOW_noun_in_synpred90_ChemicalChunker510 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred91_ChemicalChunker512_static {
    public static final BitSet FOLLOW_numeric_in_synpred91_ChemicalChunker512 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred92_ChemicalChunker520_static {
    public static final BitSet FOLLOW_conjunction_in_synpred92_ChemicalChunker520 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred93_ChemicalChunker523_static {
    public static final BitSet FOLLOW_advAdj_in_synpred93_ChemicalChunker523 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred94_ChemicalChunker527_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred94_ChemicalChunker527 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred95_ChemicalChunker529_static {
    public static final BitSet FOLLOW_ratio_in_synpred95_ChemicalChunker529 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred96_ChemicalChunker531_static {
    public static final BitSet FOLLOW_noun_in_synpred96_ChemicalChunker531 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred97_ChemicalChunker520_static {
    public static final BitSet FOLLOW_conjunction_in_synpred97_ChemicalChunker520 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEA824L});

    }static class FOLLOW_advAdj_in_synpred97_ChemicalChunker523_static {
    public static final BitSet FOLLOW_advAdj_in_synpred97_ChemicalChunker523 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCA824L});

    }static class FOLLOW_dissolvePhrase_in_synpred97_ChemicalChunker527_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred97_ChemicalChunker527 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred97_ChemicalChunker529_static {
    public static final BitSet FOLLOW_ratio_in_synpred97_ChemicalChunker529 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred97_ChemicalChunker531_static {
    public static final BitSet FOLLOW_noun_in_synpred97_ChemicalChunker531 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred97_ChemicalChunker533_static {
    public static final BitSet FOLLOW_numeric_in_synpred97_ChemicalChunker533 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker549_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred99_ChemicalChunker549 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOf_in_synpred100_ChemicalChunker543_static {
    public static final BitSet FOLLOW_prepphraseOf_in_synpred100_ChemicalChunker543 = new BitSet(new long[]{0x000061C000000002L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_prepphraseIN_in_synpred100_ChemicalChunker546_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred100_ChemicalChunker546 = new BitSet(new long[]{0x000061C000000002L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_dissolvePhrase_in_synpred100_ChemicalChunker549_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred100_ChemicalChunker549 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure_in_synpred101_ChemicalChunker563_static {
    public static final BitSet FOLLOW_dissolveStructure_in_synpred101_ChemicalChunker563 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred102_ChemicalChunker594_static {
    public static final BitSet FOLLOW_adj_in_synpred102_ChemicalChunker594 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred105_ChemicalChunker606_static {
    public static final BitSet FOLLOW_molecule_in_synpred105_ChemicalChunker606 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred107_ChemicalChunker618_static {
    public static final BitSet FOLLOW_adj_in_synpred107_ChemicalChunker618 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred109_ChemicalChunker625_static {
    public static final BitSet FOLLOW_molecule_in_synpred109_ChemicalChunker625 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred110_ChemicalChunker631_static {
    public static final BitSet FOLLOW_conjunction_in_synpred110_ChemicalChunker631 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_molecule_in_synpred110_ChemicalChunker633_static {
    public static final BitSet FOLLOW_molecule_in_synpred110_ChemicalChunker633 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_synpred111_ChemicalChunker613_static {
    public static final BitSet FOLLOW_inin_in_synpred111_ChemicalChunker613 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384E820L});

    }static class FOLLOW_dtTHE_in_synpred111_ChemicalChunker615_static {
    public static final BitSet FOLLOW_dtTHE_in_synpred111_ChemicalChunker615 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_adj_in_synpred111_ChemicalChunker618_static {
    public static final BitSet FOLLOW_adj_in_synpred111_ChemicalChunker618 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_nnp_in_synpred111_ChemicalChunker621_static {
    public static final BitSet FOLLOW_nnp_in_synpred111_ChemicalChunker621 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_molecule_in_synpred111_ChemicalChunker625_static {
    public static final BitSet FOLLOW_molecule_in_synpred111_ChemicalChunker625 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_unnamedmolecule_in_synpred111_ChemicalChunker627_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred111_ChemicalChunker627 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_conjunction_in_synpred111_ChemicalChunker631_static {
    public static final BitSet FOLLOW_conjunction_in_synpred111_ChemicalChunker631 = new BitSet(new long[]{0x000021C000000000L,0x0000000000100200L,0x0000000003848020L});

    }static class FOLLOW_molecule_in_synpred111_ChemicalChunker633_static {
    public static final BitSet FOLLOW_molecule_in_synpred111_ChemicalChunker633 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_to_in_synpred113_ChemicalChunker669_static {
    public static final BitSet FOLLOW_to_in_synpred113_ChemicalChunker669 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred114_ChemicalChunker672_static {
    public static final BitSet FOLLOW_inAll_in_synpred114_ChemicalChunker672 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred120_ChemicalChunker691_static {
    public static final BitSet FOLLOW_verb_in_synpred120_ChemicalChunker691 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred121_ChemicalChunker694_static {
    public static final BitSet FOLLOW_md_in_synpred121_ChemicalChunker694 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred122_ChemicalChunker697_static {
    public static final BitSet FOLLOW_adv_in_synpred122_ChemicalChunker697 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred123_ChemicalChunker700_static {
    public static final BitSet FOLLOW_adj_in_synpred123_ChemicalChunker700 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred124_ChemicalChunker703_static {
    public static final BitSet FOLLOW_neg_in_synpred124_ChemicalChunker703 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred125_ChemicalChunker679_static {
    public static final BitSet FOLLOW_md_in_synpred125_ChemicalChunker679 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_synpred125_ChemicalChunker682_static {
    public static final BitSet FOLLOW_rbconj_in_synpred125_ChemicalChunker682 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_synpred125_ChemicalChunker685_static {
    public static final BitSet FOLLOW_adv_in_synpred125_ChemicalChunker685 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_synpred125_ChemicalChunker688_static {
    public static final BitSet FOLLOW_adj_in_synpred125_ChemicalChunker688 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_verb_in_synpred125_ChemicalChunker691_static {
    public static final BitSet FOLLOW_verb_in_synpred125_ChemicalChunker691 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00000L,0x0001FAF00BC8008BL});

    }static class FOLLOW_md_in_synpred125_ChemicalChunker694_static {
    public static final BitSet FOLLOW_md_in_synpred125_ChemicalChunker694 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F00B800080L});

    }static class FOLLOW_adv_in_synpred125_ChemicalChunker697_static {
    public static final BitSet FOLLOW_adv_in_synpred125_ChemicalChunker697 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003800080L});

    }static class FOLLOW_adj_in_synpred125_ChemicalChunker700_static {
    public static final BitSet FOLLOW_adj_in_synpred125_ChemicalChunker700 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_neg_in_synpred125_ChemicalChunker703_static {
    public static final BitSet FOLLOW_neg_in_synpred125_ChemicalChunker703 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_synpred126_ChemicalChunker709_static {
    public static final BitSet FOLLOW_inoff_in_synpred126_ChemicalChunker709 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_synpred129_ChemicalChunker713_static {
    public static final BitSet FOLLOW_cc_in_synpred129_ChemicalChunker713 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_synpred129_ChemicalChunker716_static {
    public static final BitSet FOLLOW_comma_in_synpred129_ChemicalChunker716 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_synpred129_ChemicalChunker719_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred129_ChemicalChunker719 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_synpred139_ChemicalChunker749_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred139_ChemicalChunker749 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_synpred152_ChemicalChunker775_static {
    public static final BitSet FOLLOW_vbdegass_in_synpred152_ChemicalChunker775 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred170_ChemicalChunker837_static {
    public static final BitSet FOLLOW_dash_in_synpred170_ChemicalChunker837 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_synpred170_ChemicalChunker839_static {
    public static final BitSet FOLLOW_nounStructure_in_synpred170_ChemicalChunker839 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred173_ChemicalChunker854_static {
    public static final BitSet FOLLOW_citation_in_synpred173_ChemicalChunker854 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_synpred174_ChemicalChunker856_static {
    public static final BitSet FOLLOW_cycles_in_synpred174_ChemicalChunker856 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred175_ChemicalChunker858_static {
    public static final BitSet FOLLOW_molecule_in_synpred175_ChemicalChunker858 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_synpred176_ChemicalChunker860_static {
    public static final BitSet FOLLOW_apparatus_in_synpred176_ChemicalChunker860 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred177_ChemicalChunker862_static {
    public static final BitSet FOLLOW_mixture_in_synpred177_ChemicalChunker862 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred178_ChemicalChunker864_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred178_ChemicalChunker864 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred180_ChemicalChunker868_static {
    public static final BitSet FOLLOW_nnstate_in_synpred180_ChemicalChunker868 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_synpred181_ChemicalChunker870_static {
    public static final BitSet FOLLOW_procedureNode_in_synpred181_ChemicalChunker870 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred182_ChemicalChunker872_static {
    public static final BitSet FOLLOW_nn_in_synpred182_ChemicalChunker872 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred185_ChemicalChunker878_static {
    public static final BitSet FOLLOW_nnadd_in_synpred185_ChemicalChunker878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred187_ChemicalChunker882_static {
    public static final BitSet FOLLOW_nnexample_in_synpred187_ChemicalChunker882 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_synpred188_ChemicalChunker884_static {
    public static final BitSet FOLLOW_range_in_synpred188_ChemicalChunker884 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred193_ChemicalChunker894_static {
    public static final BitSet FOLLOW_quantity_in_synpred193_ChemicalChunker894 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred194_ChemicalChunker896_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred194_ChemicalChunker896 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_synpred196_ChemicalChunker900_static {
    public static final BitSet FOLLOW_nnph_in_synpred196_ChemicalChunker900 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_synpred198_ChemicalChunker904_static {
    public static final BitSet FOLLOW_nngeneral_in_synpred198_ChemicalChunker904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred201_ChemicalChunker910_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred201_ChemicalChunker910 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_synpred212_ChemicalChunker932_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_synpred212_ChemicalChunker932 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred214_ChemicalChunker936_static {
    public static final BitSet FOLLOW_numeric_in_synpred214_ChemicalChunker936 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphere_in_synpred226_ChemicalChunker974_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred226_ChemicalChunker974 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_synpred227_ChemicalChunker976_static {
    public static final BitSet FOLLOW_prepphraseTime_in_synpred227_ChemicalChunker976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_synpred228_ChemicalChunker978_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred228_ChemicalChunker978 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred229_ChemicalChunker980_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred229_ChemicalChunker980 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_synpred230_ChemicalChunker982_static {
    public static final BitSet FOLLOW_prepphraseRole_in_synpred230_ChemicalChunker982 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred232_ChemicalChunker1022_static {
    public static final BitSet FOLLOW_advAdj_in_synpred232_ChemicalChunker1022 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred233_ChemicalChunker1027_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred233_ChemicalChunker1027 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred234_ChemicalChunker1055_static {
    public static final BitSet FOLLOW_advAdj_in_synpred234_ChemicalChunker1055 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_synpred239_ChemicalChunker1071_static {
    public static final BitSet FOLLOW_nntime_in_synpred239_ChemicalChunker1071 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred240_ChemicalChunker1102_static {
    public static final BitSet FOLLOW_advAdj_in_synpred240_ChemicalChunker1102 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_synpred245_ChemicalChunker1117_static {
    public static final BitSet FOLLOW_nntemp_in_synpred245_ChemicalChunker1117 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred251_ChemicalChunker1290_static {
    public static final BitSet FOLLOW_conjunction_in_synpred251_ChemicalChunker1290 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred252_ChemicalChunker1290_static {
    public static final BitSet FOLLOW_conjunction_in_synpred252_ChemicalChunker1290 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138E8020L});

    }static class FOLLOW_apparatus_in_synpred252_ChemicalChunker1293_static {
    public static final BitSet FOLLOW_apparatus_in_synpred252_ChemicalChunker1293 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnApp_in_synpred255_ChemicalChunker1310_static {
    public static final BitSet FOLLOW_nnApp_in_synpred255_ChemicalChunker1310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1337_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred256_ChemicalChunker1337 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred257_ChemicalChunker1341_static {
    public static final BitSet FOLLOW_dash_in_synpred257_ChemicalChunker1341 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138C8020L});

    }static class FOLLOW_nnapparatus_in_synpred257_ChemicalChunker1343_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred257_ChemicalChunker1343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred258_ChemicalChunker1357_static {
    public static final BitSet FOLLOW_quantity_in_synpred258_ChemicalChunker1357 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred259_ChemicalChunker1359_static {
    public static final BitSet FOLLOW_adj_in_synpred259_ChemicalChunker1359 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred260_ChemicalChunker1361_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred260_ChemicalChunker1361 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred261_ChemicalChunker1363_static {
    public static final BitSet FOLLOW_nnadd_in_synpred261_ChemicalChunker1363 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred262_ChemicalChunker1365_static {
    public static final BitSet FOLLOW_molecule_in_synpred262_ChemicalChunker1365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred263_ChemicalChunker1367_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred263_ChemicalChunker1367 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred264_ChemicalChunker1369_static {
    public static final BitSet FOLLOW_nnstate_in_synpred264_ChemicalChunker1369 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred265_ChemicalChunker1371_static {
    public static final BitSet FOLLOW_nn_in_synpred265_ChemicalChunker1371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaront_in_synpred266_ChemicalChunker1383_static {
    public static final BitSet FOLLOW_oscaront_in_synpred266_ChemicalChunker1383 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred268_ChemicalChunker1408_static {
    public static final BitSet FOLLOW_adj_in_synpred268_ChemicalChunker1408 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred269_ChemicalChunker1412_static {
    public static final BitSet FOLLOW_quantity_in_synpred269_ChemicalChunker1412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred270_ChemicalChunker1416_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred270_ChemicalChunker1416 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_synpred271_ChemicalChunker1422_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_synpred271_ChemicalChunker1422 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred272_ChemicalChunker1426_static {
    public static final BitSet FOLLOW_quantity_in_synpred272_ChemicalChunker1426 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_afterOscarCompoundStructure_in_synpred273_ChemicalChunker1437_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_synpred273_ChemicalChunker1437 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred275_ChemicalChunker1464_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred275_ChemicalChunker1464 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred277_ChemicalChunker1470_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred277_ChemicalChunker1470 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred278_ChemicalChunker1468_static {
    public static final BitSet FOLLOW_dash_in_synpred278_ChemicalChunker1468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred278_ChemicalChunker1470_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred278_ChemicalChunker1470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_synpred279_ChemicalChunker1475_static {
    public static final BitSet FOLLOW_dash_in_synpred279_ChemicalChunker1475 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred280_ChemicalChunker1468_static {
    public static final BitSet FOLLOW_dash_in_synpred280_ChemicalChunker1468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred280_ChemicalChunker1470_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred280_ChemicalChunker1470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_synpred280_ChemicalChunker1475_static {
    public static final BitSet FOLLOW_dash_in_synpred280_ChemicalChunker1475 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred281_ChemicalChunker1479_static {
    public static final BitSet FOLLOW_dash_in_synpred281_ChemicalChunker1479 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_synpred282_ChemicalChunker1481_static {
    public static final BitSet FOLLOW_apost_in_synpred282_ChemicalChunker1481 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_synpred284_ChemicalChunker1524_static {
    public static final BitSet FOLLOW_moleculeamount3_in_synpred284_ChemicalChunker1524 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_synpred285_ChemicalChunker1527_static {
    public static final BitSet FOLLOW_moleculeamount1_in_synpred285_ChemicalChunker1527 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred286_ChemicalChunker1534_static {
    public static final BitSet FOLLOW_asAstate_in_synpred286_ChemicalChunker1534 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred287_ChemicalChunker1545_static {
    public static final BitSet FOLLOW_quantity_in_synpred287_ChemicalChunker1545 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred290_ChemicalChunker1563_static {
    public static final BitSet FOLLOW_mixture_in_synpred290_ChemicalChunker1563 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred291_ChemicalChunker1576_static {
    public static final BitSet FOLLOW_quantity_in_synpred291_ChemicalChunker1576 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred292_ChemicalChunker1578_static {
    public static final BitSet FOLLOW_mixture_in_synpred292_ChemicalChunker1578 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred297_ChemicalChunker1601_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred297_ChemicalChunker1601 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred298_ChemicalChunker1613_static {
    public static final BitSet FOLLOW_quantity_in_synpred298_ChemicalChunker1613 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred299_ChemicalChunker1615_static {
    public static final BitSet FOLLOW_mixture_in_synpred299_ChemicalChunker1615 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred300_ChemicalChunker1619_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred300_ChemicalChunker1619 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred301_ChemicalChunker1630_static {
    public static final BitSet FOLLOW_citation_in_synpred301_ChemicalChunker1630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred302_ChemicalChunker1632_static {
    public static final BitSet FOLLOW_quantity_in_synpred302_ChemicalChunker1632 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred304_ChemicalChunker1634_static {
    public static final BitSet FOLLOW_comma_in_synpred304_ChemicalChunker1634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_synpred304_ChemicalChunker1637_static {
    public static final BitSet FOLLOW_quantity1Node_in_synpred304_ChemicalChunker1637 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure_in_synpred304_ChemicalChunker1639_static {
    public static final BitSet FOLLOW_citationStructure_in_synpred304_ChemicalChunker1639 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred305_ChemicalChunker1642_static {
    public static final BitSet FOLLOW_mixture_in_synpred305_ChemicalChunker1642 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred306_ChemicalChunker1655_static {
    public static final BitSet FOLLOW_asAstate_in_synpred306_ChemicalChunker1655 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_synpred308_ChemicalChunker1685_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_synpred308_ChemicalChunker1685 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred309_ChemicalChunker1676_static {
    public static final BitSet FOLLOW_quantity_in_synpred309_ChemicalChunker1676 = new BitSet(new long[]{0x0100000000000000L});

    }static class FOLLOW_inof_in_synpred309_ChemicalChunker1678_static {
    public static final BitSet FOLLOW_inof_in_synpred309_ChemicalChunker1678 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCE824L});

    }static class FOLLOW_unnamedmoleculeamount1_in_synpred309_ChemicalChunker1681_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred309_ChemicalChunker1681 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_synpred309_ChemicalChunker1683_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_synpred309_ChemicalChunker1683 = new BitSet(new long[]{0x000061C000000000L,0x0000000000100280L,0x000000004384A820L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_synpred309_ChemicalChunker1685_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_synpred309_ChemicalChunker1685 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount4_in_synpred311_ChemicalChunker1692_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_synpred311_ChemicalChunker1692 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount5_in_synpred312_ChemicalChunker1694_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount5_in_synpred312_ChemicalChunker1694 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount6_in_synpred313_ChemicalChunker1696_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount6_in_synpred313_ChemicalChunker1696 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred314_ChemicalChunker1713_static {
    public static final BitSet FOLLOW_quantity_in_synpred314_ChemicalChunker1713 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred315_ChemicalChunker1715_static {
    public static final BitSet FOLLOW_mixture_in_synpred315_ChemicalChunker1715 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_synpred325_ChemicalChunker1753_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_synpred325_ChemicalChunker1753 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred326_ChemicalChunker1755_static {
    public static final BitSet FOLLOW_nnexample_in_synpred326_ChemicalChunker1755 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_synpred333_ChemicalChunker1783_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_synpred333_ChemicalChunker1783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_synpred334_ChemicalChunker1795_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_synpred334_ChemicalChunker1795 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred335_ChemicalChunker1799_static {
    public static final BitSet FOLLOW_quantity_in_synpred335_ChemicalChunker1799 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred336_ChemicalChunker1801_static {
    public static final BitSet FOLLOW_mixture_in_synpred336_ChemicalChunker1801 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred337_ChemicalChunker1815_static {
    public static final BitSet FOLLOW_citation_in_synpred337_ChemicalChunker1815 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred338_ChemicalChunker1817_static {
    public static final BitSet FOLLOW_quantity_in_synpred338_ChemicalChunker1817 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred339_ChemicalChunker1819_static {
    public static final BitSet FOLLOW_mixture_in_synpred339_ChemicalChunker1819 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred344_ChemicalChunker1874_static {
    public static final BitSet FOLLOW_citation_in_synpred344_ChemicalChunker1874 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred345_ChemicalChunker1876_static {
    public static final BitSet FOLLOW_quantity_in_synpred345_ChemicalChunker1876 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred346_ChemicalChunker1878_static {
    public static final BitSet FOLLOW_mixture_in_synpred346_ChemicalChunker1878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred347_ChemicalChunker1907_static {
    public static final BitSet FOLLOW_quantity_in_synpred347_ChemicalChunker1907 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred349_ChemicalChunker1918_static {
    public static final BitSet FOLLOW_quantity_in_synpred349_ChemicalChunker1918 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred350_ChemicalChunker1920_static {
    public static final BitSet FOLLOW_mixture_in_synpred350_ChemicalChunker1920 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred354_ChemicalChunker1945_static {
    public static final BitSet FOLLOW_quantity_in_synpred354_ChemicalChunker1945 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred357_ChemicalChunker1976_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred357_ChemicalChunker1976 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred362_ChemicalChunker2109_static {
    public static final BitSet FOLLOW_comma_in_synpred362_ChemicalChunker2109 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048000L});

    }static class FOLLOW_measurements_in_synpred362_ChemicalChunker2112_static {
    public static final BitSet FOLLOW_measurements_in_synpred362_ChemicalChunker2112 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred365_ChemicalChunker2137_static {
    public static final BitSet FOLLOW_dt_in_synpred365_ChemicalChunker2137 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurementtypes_in_synpred366_ChemicalChunker2149_static {
    public static final BitSet FOLLOW_measurementtypes_in_synpred366_ChemicalChunker2149 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_synpred373_ChemicalChunker2186_static {
    public static final BitSet FOLLOW_yield_in_synpred373_ChemicalChunker2186 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred384_ChemicalChunker2474_static {
    public static final BitSet FOLLOW_fw_in_synpred384_ChemicalChunker2474 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred385_ChemicalChunker2476_static {
    public static final BitSet FOLLOW_verb_in_synpred385_ChemicalChunker2476 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred386_ChemicalChunker2478_static {
    public static final BitSet FOLLOW_nn_in_synpred386_ChemicalChunker2478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred387_ChemicalChunker2480_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred387_ChemicalChunker2480 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred390_ChemicalChunker2486_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred390_ChemicalChunker2486 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred391_ChemicalChunker2488_static {
    public static final BitSet FOLLOW_molecule_in_synpred391_ChemicalChunker2488 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred392_ChemicalChunker2490_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred392_ChemicalChunker2490 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred394_ChemicalChunker2494_static {
    public static final BitSet FOLLOW_sym_in_synpred394_ChemicalChunker2494 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred395_ChemicalChunker2496_static {
    public static final BitSet FOLLOW_noun_in_synpred395_ChemicalChunker2496 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred397_ChemicalChunker2500_static {
    public static final BitSet FOLLOW_cd_in_synpred397_ChemicalChunker2500 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred398_ChemicalChunker2502_static {
    public static final BitSet FOLLOW_comma_in_synpred398_ChemicalChunker2502 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred399_ChemicalChunker2504_static {
    public static final BitSet FOLLOW_adj_in_synpred399_ChemicalChunker2504 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_minimixture_in_synpred401_ChemicalChunker2512_static {
    public static final BitSet FOLLOW_minimixture_in_synpred401_ChemicalChunker2512 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred402_ChemicalChunker2514_static {
    public static final BitSet FOLLOW_fw_in_synpred402_ChemicalChunker2514 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred403_ChemicalChunker2516_static {
    public static final BitSet FOLLOW_verb_in_synpred403_ChemicalChunker2516 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred404_ChemicalChunker2518_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred404_ChemicalChunker2518 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred405_ChemicalChunker2520_static {
    public static final BitSet FOLLOW_nnyield_in_synpred405_ChemicalChunker2520 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred408_ChemicalChunker2526_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred408_ChemicalChunker2526 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred409_ChemicalChunker2528_static {
    public static final BitSet FOLLOW_molecule_in_synpred409_ChemicalChunker2528 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred410_ChemicalChunker2530_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred410_ChemicalChunker2530 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred412_ChemicalChunker2534_static {
    public static final BitSet FOLLOW_sym_in_synpred412_ChemicalChunker2534 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred413_ChemicalChunker2536_static {
    public static final BitSet FOLLOW_noun_in_synpred413_ChemicalChunker2536 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred415_ChemicalChunker2540_static {
    public static final BitSet FOLLOW_cd_in_synpred415_ChemicalChunker2540 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred416_ChemicalChunker2542_static {
    public static final BitSet FOLLOW_comma_in_synpred416_ChemicalChunker2542 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred417_ChemicalChunker2544_static {
    public static final BitSet FOLLOW_adj_in_synpred417_ChemicalChunker2544 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred423_ChemicalChunker2611_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred423_ChemicalChunker2611 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred424_ChemicalChunker2613_static {
    public static final BitSet FOLLOW_numeric_in_synpred424_ChemicalChunker2613 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred426_ChemicalChunker2622_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred426_ChemicalChunker2622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred427_ChemicalChunker2638_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred427_ChemicalChunker2638 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericratio_in_synpred435_ChemicalChunker2739_static {
    public static final BitSet FOLLOW_numericratio_in_synpred435_ChemicalChunker2739 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred436_ChemicalChunker2767_static {
    public static final BitSet FOLLOW_colon_in_synpred436_ChemicalChunker2767 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_numeric_in_synpred436_ChemicalChunker2769_static {
    public static final BitSet FOLLOW_numeric_in_synpred436_ChemicalChunker2769 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred437_ChemicalChunker2785_static {
    public static final BitSet FOLLOW_colon_in_synpred437_ChemicalChunker2785 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_noun_in_synpred437_ChemicalChunker2787_static {
    public static final BitSet FOLLOW_noun_in_synpred437_ChemicalChunker2787 = new BitSet(new long[]{0x0000000000000002L});

    }
}