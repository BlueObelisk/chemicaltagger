// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g 2011-02-24 10:48:21

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NODE", "WS", "NEWLINE", "ACHAR", "DIGIT", "UNICODE", "TOKEN", "'OSCAR-CD'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-CPR'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-EXAMPLE'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-MOLAR'", "'NN-AMOUNT'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'-LRB-'", "'-RRB-'", "'ABL'", "'ABN'", "'ABX'", "'AP'", "'AT'", "'BE'", "'BED'", "'BEDZ'", "'BEG'", "'BEM'", "'BEN'", "'BER'", "'BEZ'", "'CC'", "'CD'", "'CS'", "'DO'", "'DOD'", "'DOZ'", "'DT'", "'DT-THE'", "'DTI'", "'DTS'", "'DTX'", "'EX'", "'FW'", "'FW-IN'", "'HV'", "'HVD'", "'HVG'", "'HVN'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'JJT'", "'MD'", "'NC'", "'NN'", "'NN$'", "'NNS'", "'NNS$'", "'NP'", "'NNP'", "'NP$'", "'NPS'", "'NPS$'", "'NR'", "'OD'", "'PN'", "'PN$'", "'PP$'", "'PP$$'", "'PPL'", "'PPLS'", "'PRP'", "'PRP$'", "'PPO'", "'PPS'", "'PPSS'", "'QL'", "'QLP'", "'RB'", "'RBR'", "'RB-CONJ'", "'RBT'", "'RBS'", "'RN'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBP'", "'VBD'", "'VBG'", "'VBN'", "'VBZ'", "'WDT'", "'WP$'", "'WPO'", "'WPS'", "'WQL'", "'WRB'", "'PDT'"
    };
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int EOF=-1;
    public static final int T__168=168;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int TOKEN=10;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__90=90;
    public static final int T__147=147;
    public static final int T__149=149;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__99=99;
    public static final int T__157=157;
    public static final int T__98=98;
    public static final int T__150=150;
    public static final int T__97=97;
    public static final int T__151=151;
    public static final int T__96=96;
    public static final int T__152=152;
    public static final int T__95=95;
    public static final int T__153=153;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__85=85;
    public static final int T__141=141;
    public static final int T__84=84;
    public static final int T__142=142;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int T__140=140;
    public static final int T__89=89;
    public static final int T__145=145;
    public static final int T__88=88;
    public static final int T__146=146;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=5;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__129=129;
    public static final int T__70=70;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int T__74=74;
    public static final int T__130=130;
    public static final int T__73=73;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__79=79;
    public static final int T__133=133;
    public static final int T__78=78;
    public static final int T__134=134;
    public static final int T__77=77;
    public static final int T__135=135;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int UNICODE=9;
    public static final int ACHAR=7;
    public static final int T__29=29;
    public static final int T__28=28;
    public static final int T__27=27;
    public static final int T__26=26;
    public static final int T__25=25;
    public static final int T__24=24;
    public static final int T__23=23;
    public static final int T__22=22;
    public static final int T__21=21;
    public static final int T__20=20;
    public static final int T__19=19;
    public static final int T__16=16;
    public static final int T__15=15;
    public static final int T__18=18;
    public static final int T__17=17;
    public static final int T__12=12;
    public static final int T__11=11;
    public static final int T__14=14;
    public static final int T__13=13;
    public static final int NODE=4;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__197=197;
    public static final int T__51=51;
    public static final int T__196=196;
    public static final int T__52=52;
    public static final int T__195=195;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__194=194;
    public static final int T__193=193;
    public static final int T__192=192;
    public static final int T__191=191;
    public static final int T__190=190;
    public static final int T__59=59;
    public static final int DIGIT=8;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int T__184=184;
    public static final int T__43=43;
    public static final int T__183=183;
    public static final int T__40=40;
    public static final int T__186=186;
    public static final int T__41=41;
    public static final int T__185=185;
    public static final int T__46=46;
    public static final int T__188=188;
    public static final int T__47=47;
    public static final int T__187=187;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__189=189;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int T__175=175;
    public static final int T__30=30;
    public static final int T__174=174;
    public static final int T__31=31;
    public static final int T__173=173;
    public static final int T__32=32;
    public static final int T__172=172;
    public static final int T__33=33;
    public static final int T__179=179;
    public static final int T__34=34;
    public static final int T__178=178;
    public static final int NEWLINE=6;
    public static final int T__35=35;
    public static final int T__177=177;
    public static final int T__36=36;
    public static final int T__176=176;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int T__169=169;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g"; }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:33:1: document : ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:33:9: ( ( sentences )+ -> ( ^( NODE[\"Sentence\"] sentences ) )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:33:11: ( sentences )+
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:33:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 105:
                case 109:
                case 110:
                case 111:
                case 112:
                case 127:
                case 132:
                case 133:
                case 137:
                case 138:
                case 139:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 151:
                case 153:
                case 156:
                case 168:
                case 169:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 181:
                case 182:
                case 183:
                case 185:
                case 186:
                case 187:
                case 188:
                case 189:
                case 190:
                case 191:
                case 192:
                case 193:
                case 194:
                case 195:
                case 196:
                case 197:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document209);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 33:21: -> ( ^( NODE[\"Sentence\"] sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:33:24: ^( NODE[\"Sentence\"] sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:1: sentences : ( sentence | unmatchedPhrase )+ ( comma | stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.sentence_return sentence2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.comma_return comma4 = null;

        ChemicalChunkerParser.stop_return stop5 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:10: ( ( sentence | unmatchedPhrase )+ ( comma | stop )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:13: ( sentence | unmatchedPhrase )+ ( comma | stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:13: ( sentence | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:14: sentence
            	    {
            	    pushFollow(FOLLOW_sentence_in_sentences231);
            	    sentence2=sentence();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentence2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:23: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences233);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:44: ( comma | stop )*
            loop3:
            do {
                int alt3=3;
                switch ( input.LA(1) ) {
                case 103:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA3_4 = input.LA(3);

                        if ( (synpred4_ChemicalChunker()) ) {
                            alt3=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 107:
                    {
                    alt3=2;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:45: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentences241);
            	    comma4=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma4.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:51: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences243);
            	    stop5=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop5.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentence_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentence"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:1: sentence : ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction | rbconj )* ;
    public final ChemicalChunkerParser.sentence_return sentence() throws RecognitionException {
        ChemicalChunkerParser.sentence_return retval = new ChemicalChunkerParser.sentence_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase6 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase7 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase8 = null;

        ChemicalChunkerParser.advAdj_return advAdj9 = null;

        ChemicalChunkerParser.colon_return colon10 = null;

        ChemicalChunkerParser.conjunction_return conjunction11 = null;

        ChemicalChunkerParser.rbconj_return rbconj12 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:9: ( ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction | rbconj )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:12: ( nounphrase | verbphrase | prepphrase )+ ( advAdj | colon )* ( conjunction | rbconj )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:12: ( nounphrase | verbphrase | prepphrase )+
            int cnt4=0;
            loop4:
            do {
                int alt4=4;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:13: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentence254);
            	    nounphrase6=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase6.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:24: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentence256);
            	    verbphrase7=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase7.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:35: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentence258);
            	    prepphrase8=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase8.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:48: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:49: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentence263);
            	    advAdj9=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:56: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentence265);
            	    colon10=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:65: ( conjunction | rbconj )*
            loop6:
            do {
                int alt6=3;
                switch ( input.LA(1) ) {
                case 103:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA6_5 = input.LA(3);

                        if ( (synpred11_ChemicalChunker()) ) {
                            alt6=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 177:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA6_6 = input.LA(3);

                        if ( (synpred12_ChemicalChunker()) ) {
                            alt6=2;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 126:
                    {
                    alt6=1;
                    }
                    break;

                }

                switch (alt6) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:66: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentence271);
            	    conjunction11=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:78: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentence273);
            	    rbconj12=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj12.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sentence"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:40:1: unmatchedPhrase : unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens13 = null;


        RewriteRuleSubtreeStream stream_unmatchedTokens=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedTokens");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:41:2: ( unmatchedTokens -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:41:5: unmatchedTokens
            {
            pushFollow(FOLLOW_unmatchedTokens_in_unmatchedPhrase286);
            unmatchedTokens13=unmatchedTokens();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedTokens.add(unmatchedTokens13.getTree());


            // AST REWRITE
            // elements: unmatchedTokens
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 41:21: -> ( ^( NODE[\"Unmatched\"] unmatchedTokens ) )+
            {
                if ( !(stream_unmatchedTokens.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_unmatchedTokens.hasNext() ) {
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:41:24: ^( NODE[\"Unmatched\"] unmatchedTokens )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "Unmatched"), root_1);

                    adaptor.addChild(root_1, stream_unmatchedTokens.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_unmatchedTokens.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedTokens_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedTokens"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:43:1: unmatchedTokens : ( fw | noun | tmunicode | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference ) ;
    public final ChemicalChunkerParser.unmatchedTokens_return unmatchedTokens() throws RecognitionException {
        ChemicalChunkerParser.unmatchedTokens_return retval = new ChemicalChunkerParser.unmatchedTokens_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw14 = null;

        ChemicalChunkerParser.noun_return noun15 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode16 = null;

        ChemicalChunkerParser.verb_return verb17 = null;

        ChemicalChunkerParser.inAll_return inAll18 = null;

        ChemicalChunkerParser.dt_return dt19 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE20 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd21 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm22 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn23 = null;

        ChemicalChunkerParser.oscaront_return oscaront24 = null;

        ChemicalChunkerParser.brackets_return brackets25 = null;

        ChemicalChunkerParser.sym_return sym26 = null;

        ChemicalChunkerParser.colon_return colon27 = null;

        ChemicalChunkerParser.md_return md28 = null;

        ChemicalChunkerParser.neg_return neg29 = null;

        ChemicalChunkerParser.number_return number30 = null;

        ChemicalChunkerParser.comma_return comma31 = null;

        ChemicalChunkerParser.advAdj_return advAdj32 = null;

        ChemicalChunkerParser.rbconj_return rbconj33 = null;

        ChemicalChunkerParser.reference_return reference34 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:2: ( ( fw | noun | tmunicode | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:4: ( fw | noun | tmunicode | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:4: ( fw | noun | tmunicode | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference )
            int alt7=21;
            alt7 = dfa7.predict(input);
            switch (alt7) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:5: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedTokens307);
                    fw14=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw14.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:8: noun
                    {
                    pushFollow(FOLLOW_noun_in_unmatchedTokens309);
                    noun15=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun15.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:13: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedTokens311);
                    tmunicode16=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode16.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedTokens313);
                    verb17=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb17.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:28: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedTokens315);
                    inAll18=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll18.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:34: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedTokens317);
                    dt19=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt19.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:37: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedTokens319);
                    dtTHE20=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE20.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:43: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unmatchedTokens321);
                    oscarcd21=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd21.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:51: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedTokens323);
                    oscarcm22=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm22.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:59: oscarrn
                    {
                    pushFollow(FOLLOW_oscarrn_in_unmatchedTokens325);
                    oscarrn23=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn23.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:67: oscaront
                    {
                    pushFollow(FOLLOW_oscaront_in_unmatchedTokens327);
                    oscaront24=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront24.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:76: brackets
                    {
                    pushFollow(FOLLOW_brackets_in_unmatchedTokens329);
                    brackets25=brackets();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, brackets25.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:85: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedTokens331);
                    sym26=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym26.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:89: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedTokens333);
                    colon27=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon27.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:95: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedTokens335);
                    md28=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md28.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:98: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedTokens337);
                    neg29=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg29.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:102: number
                    {
                    pushFollow(FOLLOW_number_in_unmatchedTokens339);
                    number30=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number30.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:109: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedTokens341);
                    comma31=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma31.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:115: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedTokens343);
                    advAdj32=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj32.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:122: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedTokens345);
                    rbconj33=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj33.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:129: reference
                    {
                    pushFollow(FOLLOW_reference_in_unmatchedTokens347);
                    reference34=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference34.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unmatchedTokens"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:47:1: nounphrase : nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure35 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:48:2: ( nounphraseStructure -> ^( NODE[\"NounPhrase\"] nounphraseStructure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:48:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase359);
            nounphraseStructure35=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure35.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 48:24: -> ^( NODE[\"NounPhrase\"] nounphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:48:28: ^( NODE[\"NounPhrase\"] nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:50:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure136 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure237 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:51:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:51:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure382);
                    nounphraseStructure136=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure136.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:51:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure384);
                    nounphraseStructure237=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure237.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:52:1: nounphraseStructure1 : multiApparatus -> ^( NODE[\"MultipleApparatus\"] multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus38 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:53:2: ( multiApparatus -> ^( NODE[\"MultipleApparatus\"] multiApparatus ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:53:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1393);
            multiApparatus38=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus38.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 53:20: -> ^( NODE[\"MultipleApparatus\"] multiApparatus )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:53:24: ^( NODE[\"MultipleApparatus\"] multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:54:1: nounphraseStructure2 : ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE39 = null;

        ChemicalChunkerParser.dt_return dt40 = null;

        ChemicalChunkerParser.advAdj_return advAdj41 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase42 = null;

        ChemicalChunkerParser.noun_return noun43 = null;

        ChemicalChunkerParser.number_return number44 = null;

        ChemicalChunkerParser.ratio_return ratio45 = null;

        ChemicalChunkerParser.conjunction_return conjunction46 = null;

        ChemicalChunkerParser.advAdj_return advAdj47 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase48 = null;

        ChemicalChunkerParser.noun_return noun49 = null;

        ChemicalChunkerParser.number_return number50 = null;

        ChemicalChunkerParser.ratio_return ratio51 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf52 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN53 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase54 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:2: ( ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:4: ( dtTHE )? ( dt )? ( advAdj )* ( dissolvePhrase | noun | number | ratio )+ ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )* ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:4: ( dtTHE )?
            int alt9=2;
            switch ( input.LA(1) ) {
                case 133:
                    {
                    alt9=1;
                    }
                    break;
            }

            switch (alt9) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2414);
                    dtTHE39=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE39.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:11: ( dt )?
            int alt10=2;
            switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA10_3 = input.LA(3);

                            if ( (synpred35_ChemicalChunker()) ) {
                                alt10=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt10) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2417);
                    dt40=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt40.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:15: ( advAdj )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2420);
            	    advAdj41=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj41.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:24: ( dissolvePhrase | noun | number | ratio )+
            int cnt12=0;
            loop12:
            do {
                int alt12=5;
                alt12 = dfa12.predict(input);
                switch (alt12) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:25: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2425);
            	    dissolvePhrase42=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase42.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:40: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseStructure2427);
            	    noun43=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun43.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:45: number
            	    {
            	    pushFollow(FOLLOW_number_in_nounphraseStructure2429);
            	    number44=number();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, number44.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:52: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseStructure2431);
            	    ratio45=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio45.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt12 >= 1 ) break loop12;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(12, input);
                        throw eee;
                }
                cnt12++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )*
            loop16:
            do {
                int alt16=2;
                alt16 = dfa16.predict(input);
                switch (alt16) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio )
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:64: ( conjunction )*
            	    loop13:
            	    do {
            	        int alt13=2;
            	        alt13 = dfa13.predict(input);
            	        switch (alt13) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2439);
            	    	    conjunction46=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction46.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop13;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:77: ( advAdj )*
            	    loop14:
            	    do {
            	        int alt14=2;
            	        alt14 = dfa14.predict(input);
            	        switch (alt14) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    	    {
            	    	    pushFollow(FOLLOW_advAdj_in_nounphraseStructure2442);
            	    	    advAdj47=advAdj();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj47.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop14;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:85: ( dissolvePhrase | noun | number | ratio )
            	    int alt15=4;
            	    alt15 = dfa15.predict(input);
            	    switch (alt15) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:86: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2446);
            	            dissolvePhrase48=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase48.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:101: noun
            	            {
            	            pushFollow(FOLLOW_noun_in_nounphraseStructure2448);
            	            noun49=noun();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun49.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:106: number
            	            {
            	            pushFollow(FOLLOW_number_in_nounphraseStructure2450);
            	            number50=number();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, number50.getTree());

            	            }
            	            break;
            	        case 4 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:113: ratio
            	            {
            	            pushFollow(FOLLOW_ratio_in_nounphraseStructure2452);
            	            ratio51=ratio();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio51.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:125: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )*
            loop19:
            do {
                int alt19=2;
                switch ( input.LA(1) ) {
                case 22:
                    {
                    int LA19_2 = input.LA(2);

                    if ( (synpred49_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;
                case 28:
                    {
                    int LA19_3 = input.LA(2);

                    if ( (synpred49_ChemicalChunker()) ) {
                        alt19=1;
                    }


                    }
                    break;

                }

                switch (alt19) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:126: ( prepphraseOf | prepphraseIN )
            	    int alt17=2;
            	    switch ( input.LA(1) ) {
            	    case 28:
            	        {
            	        alt17=1;
            	        }
            	        break;
            	    case 22:
            	        {
            	        alt17=2;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 17, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt17) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:127: prepphraseOf
            	            {
            	            pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2462);
            	            prepphraseOf52=prepphraseOf();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf52.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:141: prepphraseIN
            	            {
            	            pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2465);
            	            prepphraseIN53=prepphraseIN();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN53.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:155: ( dissolvePhrase )?
            	    int alt18=2;
            	    alt18 = dfa18.predict(input);
            	    switch (alt18) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dissolvePhrase
            	            {
            	            pushFollow(FOLLOW_dissolvePhrase_in_nounphraseStructure2468);
            	            dissolvePhrase54=dissolvePhrase();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase54.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:56:1: dissolvePhrase : ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 ) -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure1_return dissolveStructure155 = null;

        ChemicalChunkerParser.dissolveStructure2_return dissolveStructure256 = null;

        ChemicalChunkerParser.dissolveStructure3_return dissolveStructure357 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure1=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure1");
        RewriteRuleSubtreeStream stream_dissolveStructure3=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure3");
        RewriteRuleSubtreeStream stream_dissolveStructure2=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure2");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:2: ( ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 ) -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:4: ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:4: ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 )
            int alt20=3;
            alt20 = dfa20.predict(input);
            switch (alt20) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:5: dissolveStructure1
                    {
                    pushFollow(FOLLOW_dissolveStructure1_in_dissolvePhrase483);
                    dissolveStructure155=dissolveStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure1.add(dissolveStructure155.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:24: dissolveStructure2
                    {
                    pushFollow(FOLLOW_dissolveStructure2_in_dissolvePhrase485);
                    dissolveStructure256=dissolveStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure2.add(dissolveStructure256.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:43: dissolveStructure3
                    {
                    pushFollow(FOLLOW_dissolveStructure3_in_dissolvePhrase487);
                    dissolveStructure357=dissolveStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure3.add(dissolveStructure357.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dissolveStructure3, dissolveStructure1, dissolveStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 57:63: -> ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:67: ^( NODE[\"DissolvePhrase\"] ( dissolveStructure1 )? ( dissolveStructure2 )? ( dissolveStructure3 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "DissolvePhrase"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:92: ( dissolveStructure1 )?
                if ( stream_dissolveStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure1.nextTree());

                }
                stream_dissolveStructure1.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:112: ( dissolveStructure2 )?
                if ( stream_dissolveStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure2.nextTree());

                }
                stream_dissolveStructure2.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:132: ( dissolveStructure3 )?
                if ( stream_dissolveStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_dissolveStructure3.nextTree());

                }
                stream_dissolveStructure3.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:59:1: dissolveStructure1 : lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ rrb ;
    public final ChemicalChunkerParser.dissolveStructure1_return dissolveStructure1() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure1_return retval = new ChemicalChunkerParser.dissolveStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb58 = null;

        ChemicalChunkerParser.adj_return adj59 = null;

        ChemicalChunkerParser.nnp_return nnp60 = null;

        ChemicalChunkerParser.molecule_return molecule61 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule62 = null;

        ChemicalChunkerParser.inin_return inin63 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE64 = null;

        ChemicalChunkerParser.adj_return adj65 = null;

        ChemicalChunkerParser.nnp_return nnp66 = null;

        ChemicalChunkerParser.molecule_return molecule67 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule68 = null;

        ChemicalChunkerParser.conjunction_return conjunction69 = null;

        ChemicalChunkerParser.molecule_return molecule70 = null;

        ChemicalChunkerParser.rrb_return rrb71 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:2: ( lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:4: lrb ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_dissolveStructure1514);
            lrb58=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb58.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:8: ( adj )?
            int alt21=2;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure1516);
                    adj59=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj59.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:13: ( nnp )?
            int alt22=2;
            switch ( input.LA(1) ) {
                case 156:
                    {
                    alt22=1;
                    }
                    break;
            }

            switch (alt22) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure1519);
                    nnp60=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp60.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:18: ( molecule | unnamedmolecule )
            int alt23=2;
            alt23 = dfa23.predict(input);
            switch (alt23) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:19: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure1523);
                    molecule61=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule61.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:28: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure1525);
                    unnamedmolecule62=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule62.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:45: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt29=0;
            loop29:
            do {
                int alt29=2;
                switch ( input.LA(1) ) {
                case 22:
                    {
                    alt29=1;
                    }
                    break;

                }

                switch (alt29) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:46: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure1529);
            	    inin63=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin63.getTree());
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:51: ( dtTHE )?
            	    int alt24=2;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt24=1;
            	            }
            	            break;
            	    }

            	    switch (alt24) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure1531);
            	            dtTHE64=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE64.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:58: ( adj )?
            	    int alt25=2;
            	    alt25 = dfa25.predict(input);
            	    switch (alt25) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure1534);
            	            adj65=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj65.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:63: ( nnp )?
            	    int alt26=2;
            	    switch ( input.LA(1) ) {
            	        case 156:
            	            {
            	            alt26=1;
            	            }
            	            break;
            	    }

            	    switch (alt26) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure1537);
            	            nnp66=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp66.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:68: ( molecule | unnamedmolecule )
            	    int alt27=2;
            	    alt27 = dfa27.predict(input);
            	    switch (alt27) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:69: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure1541);
            	            molecule67=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule67.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:78: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure1543);
            	            unnamedmolecule68=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule68.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:95: ( conjunction molecule )*
            	    loop28:
            	    do {
            	        int alt28=2;
            	        switch ( input.LA(1) ) {
            	        case 103:
            	        case 126:
            	            {
            	            alt28=1;
            	            }
            	            break;

            	        }

            	        switch (alt28) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:96: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure1547);
            	    	    conjunction69=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction69.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure1549);
            	    	    molecule70=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule70.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop28;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt29 >= 1 ) break loop29;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(29, input);
                        throw eee;
                }
                cnt29++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_dissolveStructure1555);
            rrb71=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb71.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure1"

    public static class dissolveStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:61:1: dissolveStructure2 : ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ ;
    public final ChemicalChunkerParser.dissolveStructure2_return dissolveStructure2() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure2_return retval = new ChemicalChunkerParser.dissolveStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj72 = null;

        ChemicalChunkerParser.nnp_return nnp73 = null;

        ChemicalChunkerParser.molecule_return molecule74 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule75 = null;

        ChemicalChunkerParser.inin_return inin76 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE77 = null;

        ChemicalChunkerParser.adj_return adj78 = null;

        ChemicalChunkerParser.nnp_return nnp79 = null;

        ChemicalChunkerParser.molecule_return molecule80 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule81 = null;

        ChemicalChunkerParser.conjunction_return conjunction82 = null;

        ChemicalChunkerParser.molecule_return molecule83 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:2: ( ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:4: ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:4: ( adj )?
            int alt30=2;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure2564);
                    adj72=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj72.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:9: ( nnp )?
            int alt31=2;
            switch ( input.LA(1) ) {
                case 156:
                    {
                    alt31=1;
                    }
                    break;
            }

            switch (alt31) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure2567);
                    nnp73=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp73.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:14: ( molecule | unnamedmolecule )
            int alt32=2;
            alt32 = dfa32.predict(input);
            switch (alt32) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:15: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure2571);
                    molecule74=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule74.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:24: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure2573);
                    unnamedmolecule75=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule75.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:41: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt38=0;
            loop38:
            do {
                int alt38=2;
                switch ( input.LA(1) ) {
                case 22:
                    {
                    int LA38_2 = input.LA(2);

                    if ( (synpred69_ChemicalChunker()) ) {
                        alt38=1;
                    }


                    }
                    break;

                }

                switch (alt38) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:42: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure2577);
            	    inin76=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin76.getTree());
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:47: ( dtTHE )?
            	    int alt33=2;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt33=1;
            	            }
            	            break;
            	    }

            	    switch (alt33) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure2579);
            	            dtTHE77=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE77.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:54: ( adj )?
            	    int alt34=2;
            	    alt34 = dfa34.predict(input);
            	    switch (alt34) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure2582);
            	            adj78=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj78.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:59: ( nnp )?
            	    int alt35=2;
            	    switch ( input.LA(1) ) {
            	        case 156:
            	            {
            	            alt35=1;
            	            }
            	            break;
            	    }

            	    switch (alt35) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure2585);
            	            nnp79=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp79.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:64: ( molecule | unnamedmolecule )
            	    int alt36=2;
            	    alt36 = dfa36.predict(input);
            	    switch (alt36) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:65: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure2589);
            	            molecule80=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule80.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:74: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure2591);
            	            unnamedmolecule81=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule81.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:91: ( conjunction molecule )*
            	    loop37:
            	    do {
            	        int alt37=2;
            	        switch ( input.LA(1) ) {
            	        case 126:
            	            {
            	            int LA37_1 = input.LA(2);

            	            if ( (synpred68_ChemicalChunker()) ) {
            	                alt37=1;
            	            }


            	            }
            	            break;
            	        case 103:
            	            {
            	            int LA37_2 = input.LA(2);

            	            if ( (synpred68_ChemicalChunker()) ) {
            	                alt37=1;
            	            }


            	            }
            	            break;

            	        }

            	        switch (alt37) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:92: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure2595);
            	    	    conjunction82=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction82.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure2597);
            	    	    molecule83=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule83.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop37;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt38 >= 1 ) break loop38;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(38, input);
                        throw eee;
                }
                cnt38++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure2"

    public static class dissolveStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure3"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:64:1: dissolveStructure3 : ( adj )? nnp ( molecule | unnamedmolecule | nnchementity ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ ;
    public final ChemicalChunkerParser.dissolveStructure3_return dissolveStructure3() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure3_return retval = new ChemicalChunkerParser.dissolveStructure3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj84 = null;

        ChemicalChunkerParser.nnp_return nnp85 = null;

        ChemicalChunkerParser.molecule_return molecule86 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule87 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity88 = null;

        ChemicalChunkerParser.inin_return inin89 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE90 = null;

        ChemicalChunkerParser.adj_return adj91 = null;

        ChemicalChunkerParser.nnp_return nnp92 = null;

        ChemicalChunkerParser.molecule_return molecule93 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule94 = null;

        ChemicalChunkerParser.conjunction_return conjunction95 = null;

        ChemicalChunkerParser.molecule_return molecule96 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:2: ( ( adj )? nnp ( molecule | unnamedmolecule | nnchementity ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:4: ( adj )? nnp ( molecule | unnamedmolecule | nnchementity ) ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:4: ( adj )?
            int alt39=2;
            switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 18:
                case 145:
                case 146:
                case 147:
                case 148:
                    {
                    alt39=1;
                    }
                    break;
            }

            switch (alt39) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure3611);
                    adj84=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj84.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnp_in_dissolveStructure3614);
            nnp85=nnp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp85.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:13: ( molecule | unnamedmolecule | nnchementity )
            int alt40=3;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:14: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_dissolveStructure3617);
                    molecule86=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule86.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:23: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure3619);
                    unnamedmolecule87=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule87.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:39: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure3621);
                    nnchementity88=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity88.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:53: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )+
            int cnt46=0;
            loop46:
            do {
                int alt46=2;
                switch ( input.LA(1) ) {
                case 22:
                    {
                    int LA46_2 = input.LA(2);

                    if ( (synpred78_ChemicalChunker()) ) {
                        alt46=1;
                    }


                    }
                    break;

                }

                switch (alt46) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:54: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
            	    {
            	    pushFollow(FOLLOW_inin_in_dissolveStructure3625);
            	    inin89=inin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin89.getTree());
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:59: ( dtTHE )?
            	    int alt41=2;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt41=1;
            	            }
            	            break;
            	    }

            	    switch (alt41) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
            	            {
            	            pushFollow(FOLLOW_dtTHE_in_dissolveStructure3627);
            	            dtTHE90=dtTHE();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE90.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:66: ( adj )?
            	    int alt42=2;
            	    alt42 = dfa42.predict(input);
            	    switch (alt42) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dissolveStructure3630);
            	            adj91=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj91.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:71: ( nnp )?
            	    int alt43=2;
            	    switch ( input.LA(1) ) {
            	        case 156:
            	            {
            	            alt43=1;
            	            }
            	            break;
            	    }

            	    switch (alt43) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
            	            {
            	            pushFollow(FOLLOW_nnp_in_dissolveStructure3633);
            	            nnp92=nnp();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp92.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:76: ( molecule | unnamedmolecule )
            	    int alt44=2;
            	    alt44 = dfa44.predict(input);
            	    switch (alt44) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:77: molecule
            	            {
            	            pushFollow(FOLLOW_molecule_in_dissolveStructure3637);
            	            molecule93=molecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule93.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:86: unnamedmolecule
            	            {
            	            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure3639);
            	            unnamedmolecule94=unnamedmolecule();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule94.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:103: ( conjunction molecule )*
            	    loop45:
            	    do {
            	        int alt45=2;
            	        switch ( input.LA(1) ) {
            	        case 126:
            	            {
            	            int LA45_1 = input.LA(2);

            	            if ( (synpred77_ChemicalChunker()) ) {
            	                alt45=1;
            	            }


            	            }
            	            break;
            	        case 103:
            	            {
            	            int LA45_2 = input.LA(2);

            	            if ( (synpred77_ChemicalChunker()) ) {
            	                alt45=1;
            	            }


            	            }
            	            break;

            	        }

            	        switch (alt45) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:104: conjunction molecule
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_dissolveStructure3643);
            	    	    conjunction95=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction95.getTree());
            	    	    pushFollow(FOLLOW_molecule_in_dissolveStructure3645);
            	    	    molecule96=molecule();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule96.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop45;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt46 >= 1 ) break loop46;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(46, input);
                        throw eee;
                }
                cnt46++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure3"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:68:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc97 = null;

        ChemicalChunkerParser.comma_return comma98 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:69:2: ( cc | comma )
            int alt47=2;
            switch ( input.LA(1) ) {
            case 126:
                {
                alt47=1;
                }
                break;
            case 103:
                {
                alt47=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }

            switch (alt47) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:69:5: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction662);
                    cc97=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc97.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:69:8: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction664);
                    comma98=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma98.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:74:1: verbphrase : verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure99 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:75:2: ( verbphraseStructure -> ^( NODE[\"VerbPhrase\"] verbphraseStructure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:75:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase676);
            verbphraseStructure99=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure99.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 75:24: -> ^( NODE[\"VerbPhrase\"] verbphraseStructure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:75:28: ^( NODE[\"VerbPhrase\"] verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt100 = null;

        ChemicalChunkerParser.to_return to101 = null;

        ChemicalChunkerParser.inAll_return inAll102 = null;

        ChemicalChunkerParser.inafter_return inafter103 = null;

        ChemicalChunkerParser.md_return md104 = null;

        ChemicalChunkerParser.rbconj_return rbconj105 = null;

        ChemicalChunkerParser.adv_return adv106 = null;

        ChemicalChunkerParser.adj_return adj107 = null;

        ChemicalChunkerParser.verb_return verb108 = null;

        ChemicalChunkerParser.md_return md109 = null;

        ChemicalChunkerParser.adv_return adv110 = null;

        ChemicalChunkerParser.adj_return adj111 = null;

        ChemicalChunkerParser.neg_return neg112 = null;

        ChemicalChunkerParser.inoff_return inoff113 = null;

        ChemicalChunkerParser.cc_return cc114 = null;

        ChemicalChunkerParser.comma_return comma115 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase116 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:24: ( dt )?
            int alt48=2;
            switch ( input.LA(1) ) {
                case 132:
                    {
                    alt48=1;
                    }
                    break;
            }

            switch (alt48) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure695);
                    dt100=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt100.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:28: ( to )?
            int alt49=2;
            switch ( input.LA(1) ) {
                case 183:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA49_3 = input.LA(3);

                            if ( (synpred81_ChemicalChunker()) ) {
                                alt49=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt49) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure698);
                    to101=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to101.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:32: ( inAll )?
            int alt50=2;
            switch ( input.LA(1) ) {
                case 19:
                case 20:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 144:
                case 183:
                    {
                    alt50=1;
                    }
                    break;
                case 21:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA50_4 = input.LA(3);

                            if ( (synpred82_ChemicalChunker()) ) {
                                alt50=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt50) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure701);
                    inAll102=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll102.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:39: ( inafter )?
            int alt51=2;
            switch ( input.LA(1) ) {
                case 21:
                    {
                    alt51=1;
                    }
                    break;
            }

            switch (alt51) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure704);
                    inafter103=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter103.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt61=0;
            loop61:
            do {
                int alt61=2;
                alt61 = dfa61.predict(input);
                switch (alt61) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:49: ( md )*
            	    loop52:
            	    do {
            	        int alt52=2;
            	        switch ( input.LA(1) ) {
            	        case 149:
            	            {
            	            alt52=1;
            	            }
            	            break;

            	        }

            	        switch (alt52) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure708);
            	    	    md104=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md104.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop52;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:53: ( rbconj )?
            	    int alt53=2;
            	    switch ( input.LA(1) ) {
            	        case 177:
            	            {
            	            alt53=1;
            	            }
            	            break;
            	    }

            	    switch (alt53) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure711);
            	            rbconj105=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj105.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:61: ( adv )*
            	    loop54:
            	    do {
            	        int alt54=2;
            	        switch ( input.LA(1) ) {
            	        case 175:
            	        case 176:
            	        case 178:
            	        case 179:
            	        case 181:
            	            {
            	            alt54=1;
            	            }
            	            break;

            	        }

            	        switch (alt54) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure714);
            	    	    adv106=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv106.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop54;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:66: ( adj )?
            	    int alt55=2;
            	    switch ( input.LA(1) ) {
            	        case 12:
            	        case 13:
            	        case 18:
            	        case 145:
            	        case 146:
            	        case 147:
            	        case 148:
            	            {
            	            alt55=1;
            	            }
            	            break;
            	    }

            	    switch (alt55) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure717);
            	            adj107=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj107.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:71: ( verb )+
            	    int cnt56=0;
            	    loop56:
            	    do {
            	        int alt56=2;
            	        alt56 = dfa56.predict(input);
            	        switch (alt56) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure720);
            	    	    verb108=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb108.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt56 >= 1 ) break loop56;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(56, input);
            	                throw eee;
            	        }
            	        cnt56++;
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:77: ( md )*
            	    loop57:
            	    do {
            	        int alt57=2;
            	        switch ( input.LA(1) ) {
            	        case 149:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA57_3 = input.LA(3);

            	                if ( (synpred89_ChemicalChunker()) ) {
            	                    alt57=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt57) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure723);
            	    	    md109=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md109.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop57;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:81: ( adv )*
            	    loop58:
            	    do {
            	        int alt58=2;
            	        alt58 = dfa58.predict(input);
            	        switch (alt58) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure726);
            	    	    adv110=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv110.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop58;
            	        }
            	    } while (true);

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:86: ( adj )?
            	    int alt59=2;
            	    alt59 = dfa59.predict(input);
            	    switch (alt59) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure729);
            	            adj111=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj111.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:91: ( neg )?
            	    int alt60=2;
            	    switch ( input.LA(1) ) {
            	        case 105:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA60_3 = input.LA(3);

            	                    if ( (synpred92_ChemicalChunker()) ) {
            	                        alt60=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt60) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure732);
            	            neg112=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg112.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt61 >= 1 ) break loop61;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(61, input);
                        throw eee;
                }
                cnt61++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:99: ( inoff )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 34:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA62_3 = input.LA(3);

                            if ( (synpred94_ChemicalChunker()) ) {
                                alt62=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure738);
                    inoff113=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff113.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:106: ( ( cc )? ( comma )? prepphrase )*
            loop65:
            do {
                int alt65=2;
                alt65 = dfa65.predict(input);
                switch (alt65) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:107: ( cc )?
            	    int alt63=2;
            	    switch ( input.LA(1) ) {
            	        case 126:
            	            {
            	            alt63=1;
            	            }
            	            break;
            	    }

            	    switch (alt63) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure742);
            	            cc114=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc114.getTree());

            	            }
            	            break;

            	    }

            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:111: ( comma )?
            	    int alt64=2;
            	    switch ( input.LA(1) ) {
            	        case 103:
            	            {
            	            alt64=1;
            	            }
            	            break;
            	    }

            	    switch (alt64) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure745);
            	            comma115=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma115.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure748);
            	    prepphrase116=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase116.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb117 = null;

        ChemicalChunkerParser.vbp_return vbp118 = null;

        ChemicalChunkerParser.vbg_return vbg119 = null;

        ChemicalChunkerParser.vbd_return vbd120 = null;

        ChemicalChunkerParser.vbz_return vbz121 = null;

        ChemicalChunkerParser.vbn_return vbn122 = null;

        ChemicalChunkerParser.vbuse_return vbuse123 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge124 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse125 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb126 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject127 = null;

        ChemicalChunkerParser.vbadd_return vbadd128 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute129 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge130 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain131 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop132 = null;

        ChemicalChunkerParser.vbfill_return vbfill133 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend134 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat135 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus136 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate137 = null;

        ChemicalChunkerParser.vbcool_return vbcool138 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass139 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve140 = null;

        ChemicalChunkerParser.vbdry_return vbdry141 = null;

        ChemicalChunkerParser.vbextract_return vbextract142 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter143 = null;

        ChemicalChunkerParser.vbheat_return vbheat144 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease145 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition146 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate147 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify148 = null;

        ChemicalChunkerParser.vbquench_return vbquench149 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover150 = null;

        ChemicalChunkerParser.vbremove_return vbremove151 = null;

        ChemicalChunkerParser.vbstir_return vbstir152 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize153 = null;

        ChemicalChunkerParser.vbwait_return vbwait154 = null;

        ChemicalChunkerParser.vbwash_return vbwash155 = null;

        ChemicalChunkerParser.vbyield_return vbyield156 = null;

        ChemicalChunkerParser.vbchange_return vbchange157 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt66=41;
            alt66 = dfa66.predict(input);
            switch (alt66) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb760);
                    vb117=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb117.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb762);
                    vbp118=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp118.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb764);
                    vbg119=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg119.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb766);
                    vbd120=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd120.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb768);
                    vbz121=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz121.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb770);
                    vbn122=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn122.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb772);
                    vbuse123=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse123.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb774);
                    vbsubmerge124=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge124.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb776);
                    vbimmerse125=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse125.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb778);
                    degassMultiVerb126=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb126.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb780);
                    vbsubject127=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject127.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb782);
                    vbadd128=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd128.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:90: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_verb784);
                    vbdilute129=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute129.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:99: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb786);
                    vbcharge130=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge130.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:108: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb788);
                    vbcontain131=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain131.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:118: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb790);
                    vbdrop132=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop132.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:125: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb792);
                    vbfill133=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill133.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:132: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb794);
                    vbsuspend134=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend134.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:142: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb796);
                    vbtreat135=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat135.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:150: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb798);
                    vbapparatus136=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus136.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:162: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb800);
                    vbconcentrate137=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate137.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:176: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb802);
                    vbcool138=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool138.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:183: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb804);
                    vbdegass139=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass139.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:192: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb806);
                    vbdissolve140=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve140.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:203: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb808);
                    vbdry141=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry141.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:209: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb810);
                    vbextract142=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract142.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:219: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb812);
                    vbfilter143=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter143.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:229: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb815);
                    vbheat144=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat144.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:236: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb817);
                    vbincrease145=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease145.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:247: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb819);
                    vbpartition146=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition146.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:259: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb821);
                    vbprecipitate147=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate147.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:273: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb823);
                    vbpurify148=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify148.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:282: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb825);
                    vbquench149=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench149.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:291: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb827);
                    vbrecover150=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover150.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:301: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb829);
                    vbremove151=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove151.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:310: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb831);
                    vbstir152=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir152.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:317: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb833);
                    vbsynthesize153=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize153.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:330: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb835);
                    vbwait154=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait154.getTree());

                    }
                    break;
                case 39 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:337: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb837);
                    vbwash155=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash155.getTree());

                    }
                    break;
                case 40 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:344: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb839);
                    vbyield156=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield156.getTree());

                    }
                    break;
                case 41 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:352: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb841);
                    vbchange157=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange157.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:79:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass158 = null;

        ChemicalChunkerParser.cc_return cc159 = null;

        ChemicalChunkerParser.vbfill_return vbfill160 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:80:2: ( vbdegass cc vbfill )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:80:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb850);
            vbdegass158=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass158.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb852);
            cc159=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc159.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb854);
            vbfill160=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill160.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:81:1: number : ( cd | oscarcd | oscarcpr );
    public final ChemicalChunkerParser.number_return number() throws RecognitionException {
        ChemicalChunkerParser.number_return retval = new ChemicalChunkerParser.number_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd161 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd162 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr163 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:81:8: ( cd | oscarcd | oscarcpr )
            int alt67=3;
            switch ( input.LA(1) ) {
            case 127:
                {
                alt67=1;
                }
                break;
            case 11:
                {
                alt67=2;
                }
                break;
            case 14:
                {
                alt67=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;
            }

            switch (alt67) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:81:10: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_number861);
                    cd161=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd161.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:81:13: oscarcd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcd_in_number863);
                    oscarcd162=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd162.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:81:21: oscarcpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcpr_in_number865);
                    oscarcpr163=oscarcpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr163.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt164 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss165 = null;

        ChemicalChunkerParser.wpo_return wpo166 = null;

        ChemicalChunkerParser.wpo_return wpo167 = null;

        ChemicalChunkerParser.wps_return wps168 = null;

        ChemicalChunkerParser.wql_return wql169 = null;

        ChemicalChunkerParser.wrb_return wrb170 = null;

        ChemicalChunkerParser.ex_return ex171 = null;

        ChemicalChunkerParser.pdt_return pdt172 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:8: ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt )
            int alt68=9;
            alt68 = dfa68.predict(input);
            switch (alt68) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause873);
                    wdt164=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt164.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause875);
                    wp_poss165=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss165.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:22: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause877);
                    wpo166=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo166.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:26: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_clause879);
                    wpo167=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo167.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:30: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_clause881);
                    wps168=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps168.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:34: wql
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wql_in_clause883);
                    wql169=wql();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wql169.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:38: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause885);
                    wrb170=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb170.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:42: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause887);
                    ex171=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex171.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:45: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause889);
                    pdt172=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt172.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:83:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure173 = null;

        ChemicalChunkerParser.dash_return dash174 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure175 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:83:7: ( nounStructure ( dash nounStructure )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:83:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun897);
            nounStructure173=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure173.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:83:23: ( dash nounStructure )*
            loop69:
            do {
                int alt69=2;
                switch ( input.LA(1) ) {
                case 106:
                    {
                    int LA69_2 = input.LA(2);

                    if ( (synpred148_ChemicalChunker()) ) {
                        alt69=1;
                    }


                    }
                    break;

                }

                switch (alt69) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:83:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun900);
            	    dash174=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash174.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun902);
            	    nounStructure175=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure175.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | reference | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp176 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss177 = null;

        ChemicalChunkerParser.citation_return citation178 = null;

        ChemicalChunkerParser.cycles_return cycles179 = null;

        ChemicalChunkerParser.molecule_return molecule180 = null;

        ChemicalChunkerParser.apparatus_return apparatus181 = null;

        ChemicalChunkerParser.mixture_return mixture182 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule183 = null;

        ChemicalChunkerParser.nnyield_return nnyield184 = null;

        ChemicalChunkerParser.nnstate_return nnstate185 = null;

        ChemicalChunkerParser.nn_return nn186 = null;

        ChemicalChunkerParser.nns_return nns187 = null;

        ChemicalChunkerParser.nnp_return nnp188 = null;

        ChemicalChunkerParser.nnadd_return nnadd189 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase190 = null;

        ChemicalChunkerParser.nnexample_return nnexample191 = null;

        ChemicalChunkerParser.oscarcpr_return oscarcpr192 = null;

        ChemicalChunkerParser.range_return range193 = null;

        ChemicalChunkerParser.amount_return amount194 = null;

        ChemicalChunkerParser.nntime_return nntime195 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere196 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode197 = null;

        ChemicalChunkerParser.nneq_return nneq198 = null;

        ChemicalChunkerParser.quantity_return quantity199 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity200 = null;

        ChemicalChunkerParser.measurements_return measurements201 = null;

        ChemicalChunkerParser.nntemp_return nntemp202 = null;

        ChemicalChunkerParser.nnflash_return nnflash203 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral204 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod205 = null;

        ChemicalChunkerParser.nnamount_return nnamount206 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure207 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn208 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography209 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum210 = null;

        ChemicalChunkerParser.nncycle_return nncycle211 = null;

        ChemicalChunkerParser.nntimes_return nntimes212 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate213 = null;

        ChemicalChunkerParser.nnvol_return nnvol214 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify215 = null;

        ChemicalChunkerParser.wdt_return wdt216 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss217 = null;

        ChemicalChunkerParser.wpo_return wpo218 = null;

        ChemicalChunkerParser.wps_return wps219 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize220 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture221 = null;

        ChemicalChunkerParser.reference_return reference222 = null;

        ChemicalChunkerParser.oscaront_return oscaront223 = null;

        ChemicalChunkerParser.nndry_return nndry224 = null;

        ChemicalChunkerParser.number_return number225 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound226 = null;

        ChemicalChunkerParser.nnextract_return nnextract227 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter228 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate229 = null;

        ChemicalChunkerParser.nnremove_return nnremove230 = null;

        ChemicalChunkerParser.fw_return fw231 = null;

        ChemicalChunkerParser.fwin_return fwin232 = null;

        ChemicalChunkerParser.sym_return sym233 = null;

        ChemicalChunkerParser.clause_return clause234 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | reference | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause )
            int alt70=59;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure913);
                    prp176=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp176.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure915);
                    prp_poss177=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss177.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure917);
                    citation178=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation178.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure919);
                    cycles179=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles179.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure921);
                    molecule180=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule180.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure923);
                    apparatus181=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus181.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:66: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_nounStructure925);
                    mixture182=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture182.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:74: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure927);
                    unnamedmolecule183=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule183.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:90: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure929);
                    nnyield184=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield184.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:98: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure931);
                    nnstate185=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate185.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:106: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure933);
                    nn186=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn186.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:109: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure935);
                    nns187=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns187.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:113: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure937);
                    nnp188=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp188.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:117: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure939);
                    nnadd189=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd189.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:123: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure941);
                    preparationphrase190=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase190.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:141: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure943);
                    nnexample191=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample191.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:151: oscarcpr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcpr_in_nounStructure945);
                    oscarcpr192=oscarcpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcpr192.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:160: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure947);
                    range193=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range193.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:166: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_nounStructure949);
                    amount194=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount194.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:173: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure951);
                    nntime195=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime195.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:180: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure953);
                    nnatmosphere196=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere196.getTree());

                    }
                    break;
                case 22 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:193: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure955);
                    tmunicode197=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode197.getTree());

                    }
                    break;
                case 23 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:203: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure957);
                    nneq198=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq198.getTree());

                    }
                    break;
                case 24 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:208: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure959);
                    quantity199=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity199.getTree());

                    }
                    break;
                case 25 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:217: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure961);
                    nnchementity200=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity200.getTree());

                    }
                    break;
                case 26 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:230: measurements
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_measurements_in_nounStructure963);
                    measurements201=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements201.getTree());

                    }
                    break;
                case 27 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:243: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure965);
                    nntemp202=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp202.getTree());

                    }
                    break;
                case 28 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:250: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure967);
                    nnflash203=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash203.getTree());

                    }
                    break;
                case 29 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:258: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure969);
                    nngeneral204=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral204.getTree());

                    }
                    break;
                case 30 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:268: nnmethod
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmethod_in_nounStructure971);
                    nnmethod205=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod205.getTree());

                    }
                    break;
                case 31 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:277: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure973);
                    nnamount206=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount206.getTree());

                    }
                    break;
                case 32 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:286: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure975);
                    nnpressure207=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure207.getTree());

                    }
                    break;
                case 33 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:297: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure977);
                    nncolumn208=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn208.getTree());

                    }
                    break;
                case 34 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:306: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure979);
                    nnchromatography209=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography209.getTree());

                    }
                    break;
                case 35 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:323: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure981);
                    nnvacuum210=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum210.getTree());

                    }
                    break;
                case 36 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:332: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure983);
                    nncycle211=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle211.getTree());

                    }
                    break;
                case 37 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:340: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure985);
                    nntimes212=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes212.getTree());

                    }
                    break;
                case 38 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:348: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure987);
                    nnconcentrate213=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate213.getTree());

                    }
                    break;
                case 39 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:362: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure989);
                    nnvol214=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol214.getTree());

                    }
                    break;
                case 40 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:368: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure991);
                    nnpurify215=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify215.getTree());

                    }
                    break;
                case 41 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:377: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_nounStructure993);
                    wdt216=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt216.getTree());

                    }
                    break;
                case 42 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:381: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_nounStructure995);
                    wp_poss217=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss217.getTree());

                    }
                    break;
                case 43 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:389: wpo
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wpo_in_nounStructure997);
                    wpo218=wpo();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wpo218.getTree());

                    }
                    break;
                case 44 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:393: wps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wps_in_nounStructure999);
                    wps219=wps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wps219.getTree());

                    }
                    break;
                case 45 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:397: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure1001);
                    nnsynthesize220=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize220.getTree());

                    }
                    break;
                case 46 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:410: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure1003);
                    nnmixture221=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture221.getTree());

                    }
                    break;
                case 47 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:420: reference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_reference_in_nounStructure1005);
                    reference222=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference222.getTree());

                    }
                    break;
                case 48 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:430: oscaront
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaront_in_nounStructure1007);
                    oscaront223=oscaront();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaront223.getTree());

                    }
                    break;
                case 49 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:439: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure1009);
                    nndry224=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry224.getTree());

                    }
                    break;
                case 50 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:445: number
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_number_in_nounStructure1011);
                    number225=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, number225.getTree());

                    }
                    break;
                case 51 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:452: oscarCompound
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarCompound_in_nounStructure1013);
                    oscarCompound226=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound226.getTree());

                    }
                    break;
                case 52 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:466: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure1015);
                    nnextract227=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract227.getTree());

                    }
                    break;
                case 53 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:476: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure1017);
                    nnfilter228=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter228.getTree());

                    }
                    break;
                case 54 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:485: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure1019);
                    nnprecipitate229=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate229.getTree());

                    }
                    break;
                case 55 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:499: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure1021);
                    nnremove230=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove230.getTree());

                    }
                    break;
                case 56 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:508: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure1023);
                    fw231=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw231.getTree());

                    }
                    break;
                case 57 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:511: fwin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fwin_in_nounStructure1025);
                    fwin232=fwin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fwin232.getTree());

                    }
                    break;
                case 58 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:516: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure1027);
                    sym233=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym233.getTree());

                    }
                    break;
                case 59 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:520: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure1029);
                    clause234=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause234.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:86:1: range : number dash number ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.number_return number235 = null;

        ChemicalChunkerParser.dash_return dash236 = null;

        ChemicalChunkerParser.number_return number237 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:86:6: ( number dash number )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:86:8: number dash number
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_number_in_range1035);
            number235=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, number235.getTree());
            pushFollow(FOLLOW_dash_in_range1037);
            dash236=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash236.getTree());
            pushFollow(FOLLOW_number_in_range1039);
            number237=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, number237.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:1: cycles : cycleStructure -> ^( NODE[\"CYCLES\"] cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure238 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:8: ( cycleStructure -> ^( NODE[\"CYCLES\"] cycleStructure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles1046);
            cycleStructure238=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure238.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 87:25: -> ^( NODE[\"CYCLES\"] cycleStructure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:87:28: ^( NODE[\"CYCLES\"] cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:88:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd239 = null;

        ChemicalChunkerParser.dashNN_return dashNN240 = null;

        ChemicalChunkerParser.nncycle_return nncycle241 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:88:16: ( cd ( dashNN )? nncycle )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:88:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure1064);
            cd239=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd239.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:88:21: ( dashNN )?
            int alt71=2;
            switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 18:
                case 127:
                case 145:
                case 146:
                case 147:
                case 148:
                case 151:
                    {
                    alt71=1;
                    }
                    break;
            }

            switch (alt71) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure1066);
                    dashNN240=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN240.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure1069);
            nncycle241=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle241.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj242 = null;

        ChemicalChunkerParser.nn_return nn243 = null;

        ChemicalChunkerParser.cd_return cd244 = null;

        ChemicalChunkerParser.dash_return dash245 = null;

        ChemicalChunkerParser.adj_return adj246 = null;

        ChemicalChunkerParser.nn_return nn247 = null;

        ChemicalChunkerParser.cd_return cd248 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:10: ( adj | nn | cd )
            int alt72=3;
            switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 18:
            case 145:
            case 146:
            case 147:
            case 148:
                {
                alt72=1;
                }
                break;
            case 151:
                {
                alt72=2;
                }
                break;
            case 127:
                {
                alt72=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }

            switch (alt72) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN1079);
                    adj242=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj242.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN1081);
                    nn243=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn243.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN1083);
                    cd244=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd244.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:22: ( dash ( adj | nn | cd ) )*
            loop74:
            do {
                int alt74=2;
                switch ( input.LA(1) ) {
                case 106:
                    {
                    alt74=1;
                    }
                    break;

                }

                switch (alt74) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN1087);
            	    dash245=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash245.getTree());
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:28: ( adj | nn | cd )
            	    int alt73=3;
            	    switch ( input.LA(1) ) {
            	    case 12:
            	    case 13:
            	    case 18:
            	    case 145:
            	    case 146:
            	    case 147:
            	    case 148:
            	        {
            	        alt73=1;
            	        }
            	        break;
            	    case 151:
            	        {
            	        alt73=2;
            	        }
            	        break;
            	    case 127:
            	        {
            	        alt73=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 73, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt73) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN1090);
            	            adj246=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj246.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN1092);
            	            nn247=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn247.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:89:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN1094);
            	            cd248=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd248.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:90:1: ratio : ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) ;
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.numberratio_return numberratio249 = null;

        ChemicalChunkerParser.nounratio_return nounratio250 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        RewriteRuleSubtreeStream stream_numberratio=new RewriteRuleSubtreeStream(adaptor,"rule numberratio");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:90:7: ( ( numberratio | nounratio ) -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:90:9: ( numberratio | nounratio )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:90:9: ( numberratio | nounratio )
            int alt75=2;
            alt75 = dfa75.predict(input);
            switch (alt75) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:90:10: numberratio
                    {
                    pushFollow(FOLLOW_numberratio_in_ratio1107);
                    numberratio249=numberratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberratio.add(numberratio249.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:90:22: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio1109);
                    nounratio250=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio250.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: nounratio, numberratio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 90:33: -> ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:90:36: ^( NODE[\"RATIO\"] ( numberratio )? ( nounratio )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "RATIO"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:90:52: ( numberratio )?
                if ( stream_numberratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_numberratio.nextTree());

                }
                stream_numberratio.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:90:65: ( nounratio )?
                if ( stream_nounratio.hasNext() ) {
                    adaptor.addChild(root_1, stream_nounratio.nextTree());

                }
                stream_nounratio.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class numberratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberratio"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:91:1: numberratio : cd ( colon oscarcd | cd )+ ;
    public final ChemicalChunkerParser.numberratio_return numberratio() throws RecognitionException {
        ChemicalChunkerParser.numberratio_return retval = new ChemicalChunkerParser.numberratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd251 = null;

        ChemicalChunkerParser.colon_return colon252 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd253 = null;

        ChemicalChunkerParser.cd_return cd254 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:91:13: ( cd ( colon oscarcd | cd )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:91:16: cd ( colon oscarcd | cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_numberratio1133);
            cd251=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd251.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:91:19: ( colon oscarcd | cd )+
            int cnt76=0;
            loop76:
            do {
                int alt76=3;
                alt76 = dfa76.predict(input);
                switch (alt76) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:91:20: colon oscarcd
            	    {
            	    pushFollow(FOLLOW_colon_in_numberratio1136);
            	    colon252=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon252.getTree());
            	    pushFollow(FOLLOW_oscarcd_in_numberratio1138);
            	    oscarcd253=oscarcd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd253.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:91:34: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_numberratio1140);
            	    cd254=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd254.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt76 >= 1 ) break loop76;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(76, input);
                        throw eee;
                }
                cnt76++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberratio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:92:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun255 = null;

        ChemicalChunkerParser.colon_return colon256 = null;

        ChemicalChunkerParser.noun_return noun257 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:93:2: ( noun ( colon noun )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:93:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio1153);
            noun255=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun255.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:93:11: ( colon noun )+
            int cnt77=0;
            loop77:
            do {
                int alt77=2;
                switch ( input.LA(1) ) {
                case 102:
                    {
                    int LA77_2 = input.LA(2);

                    if ( (synpred216_ChemicalChunker()) ) {
                        alt77=1;
                    }


                    }
                    break;

                }

                switch (alt77) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:93:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio1157);
            	    colon256=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon256.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio1159);
            	    noun257=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun257.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt77 >= 1 ) break loop77;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(77, input);
                        throw eee;
                }
                cnt77++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class reference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:95:1: reference : lsqb cd rsqb ;
    public final ChemicalChunkerParser.reference_return reference() throws RecognitionException {
        ChemicalChunkerParser.reference_return retval = new ChemicalChunkerParser.reference_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb258 = null;

        ChemicalChunkerParser.cd_return cd259 = null;

        ChemicalChunkerParser.rsqb_return rsqb260 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:96:2: ( lsqb cd rsqb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:96:4: lsqb cd rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_reference1173);
            lsqb258=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb258.getTree());
            pushFollow(FOLLOW_cd_in_reference1175);
            cd259=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd259.getTree());
            pushFollow(FOLLOW_rsqb_in_reference1177);
            rsqb260=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb260.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "reference"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:97:1: citation : ( citationStructure1 | citationStructure2 ) -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? ) ;
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.citationStructure1_return citationStructure1261 = null;

        ChemicalChunkerParser.citationStructure2_return citationStructure2262 = null;


        RewriteRuleSubtreeStream stream_citationStructure2=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure2");
        RewriteRuleSubtreeStream stream_citationStructure1=new RewriteRuleSubtreeStream(adaptor,"rule citationStructure1");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:97:9: ( ( citationStructure1 | citationStructure2 ) -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:97:11: ( citationStructure1 | citationStructure2 )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:97:11: ( citationStructure1 | citationStructure2 )
            int alt78=2;
            switch ( input.LA(1) ) {
            case 111:
                {
                alt78=1;
                }
                break;
            case 103:
                {
                alt78=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }

            switch (alt78) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:97:12: citationStructure1
                    {
                    pushFollow(FOLLOW_citationStructure1_in_citation1184);
                    citationStructure1261=citationStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure1.add(citationStructure1261.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:97:31: citationStructure2
                    {
                    pushFollow(FOLLOW_citationStructure2_in_citation1186);
                    citationStructure2262=citationStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_citationStructure2.add(citationStructure2262.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: citationStructure1, citationStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 97:51: -> ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:97:54: ^( NODE[\"CITATION\"] ( citationStructure1 )? ( citationStructure2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "CITATION"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:97:74: ( citationStructure1 )?
                if ( stream_citationStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure1.nextTree());

                }
                stream_citationStructure1.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:97:94: ( citationStructure2 )?
                if ( stream_citationStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_citationStructure2.nextTree());

                }
                stream_citationStructure2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:99:1: citationStructure1 : lrb citationContent rrb ;
    public final ChemicalChunkerParser.citationStructure1_return citationStructure1() throws RecognitionException {
        ChemicalChunkerParser.citationStructure1_return retval = new ChemicalChunkerParser.citationStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb263 = null;

        ChemicalChunkerParser.citationContent_return citationContent264 = null;

        ChemicalChunkerParser.rrb_return rrb265 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:99:19: ( lrb citationContent rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:99:22: lrb citationContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationStructure11209);
            lrb263=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb263.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure11211);
            citationContent264=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent264.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure11213);
            rrb265=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb265.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationStructure1"

    public static class citationStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:100:1: citationStructure2 : comma lrb citationContent rrb comma ;
    public final ChemicalChunkerParser.citationStructure2_return citationStructure2() throws RecognitionException {
        ChemicalChunkerParser.citationStructure2_return retval = new ChemicalChunkerParser.citationStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma266 = null;

        ChemicalChunkerParser.lrb_return lrb267 = null;

        ChemicalChunkerParser.citationContent_return citationContent268 = null;

        ChemicalChunkerParser.rrb_return rrb269 = null;

        ChemicalChunkerParser.comma_return comma270 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:100:19: ( comma lrb citationContent rrb comma )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:100:21: comma lrb citationContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_citationStructure21219);
            comma266=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma266.getTree());
            pushFollow(FOLLOW_lrb_in_citationStructure21221);
            lrb267=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb267.getTree());
            pushFollow(FOLLOW_citationContent_in_citationStructure21223);
            citationContent268=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent268.getTree());
            pushFollow(FOLLOW_rrb_in_citationStructure21225);
            rrb269=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb269.getTree());
            pushFollow(FOLLOW_comma_in_citationStructure21227);
            comma270=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma270.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationStructure2"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:1: citationContent : ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nnp_return nnp271 = null;

        ChemicalChunkerParser.fw_return fw272 = null;

        ChemicalChunkerParser.cd_return cd273 = null;

        ChemicalChunkerParser.conjunction_return conjunction274 = null;

        ChemicalChunkerParser.nnp_return nnp275 = null;

        ChemicalChunkerParser.fw_return fw276 = null;

        ChemicalChunkerParser.cd_return cd277 = null;

        ChemicalChunkerParser.conjunction_return conjunction278 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:16: ( ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:20: ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:20: ( nnp | fw | cd | conjunction )
            int alt79=4;
            switch ( input.LA(1) ) {
            case 156:
                {
                alt79=1;
                }
                break;
            case 138:
                {
                alt79=2;
                }
                break;
            case 127:
                {
                alt79=3;
                }
                break;
            case 103:
            case 126:
                {
                alt79=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }

            switch (alt79) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:21: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent1236);
                    nnp271=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp271.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:25: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent1238);
                    fw272=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw272.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:28: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent1240);
                    cd273=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd273.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:31: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent1242);
                    conjunction274=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction274.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:44: ( nnp | fw | cd | conjunction )+
            int cnt80=0;
            loop80:
            do {
                int alt80=5;
                switch ( input.LA(1) ) {
                case 156:
                    {
                    alt80=1;
                    }
                    break;
                case 138:
                    {
                    alt80=2;
                    }
                    break;
                case 127:
                    {
                    alt80=3;
                    }
                    break;
                case 103:
                case 126:
                    {
                    alt80=4;
                    }
                    break;

                }

                switch (alt80) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:45: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent1246);
            	    nnp275=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp275.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:49: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent1248);
            	    fw276=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw276.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:52: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent1250);
            	    cd277=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd277.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:101:55: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent1252);
            	    conjunction278=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction278.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:1: mixture : ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio279 = null;

        ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3280 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2281 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1282 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        RewriteRuleSubtreeStream stream_mixtureRatio=new RewriteRuleSubtreeStream(adaptor,"rule mixtureRatio");
        RewriteRuleSubtreeStream stream_mixtureStructure3=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure3");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:8: ( ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:10: ( mixtureRatio )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:10: ( mixtureRatio )?
            int alt81=2;
            switch ( input.LA(1) ) {
                case 127:
                    {
                    alt81=1;
                    }
                    break;
            }

            switch (alt81) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: mixtureRatio
                    {
                    pushFollow(FOLLOW_mixtureRatio_in_mixture1262);
                    mixtureRatio279=mixtureRatio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureRatio.add(mixtureRatio279.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:25: ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            int alt82=3;
            switch ( input.LA(1) ) {
            case 111:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 108:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 112:
                                {
                                alt82=1;
                                }
                                break;
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 16:
                            case 18:
                            case 19:
                            case 20:
                            case 21:
                            case 22:
                            case 23:
                            case 24:
                            case 25:
                            case 26:
                            case 27:
                            case 28:
                            case 29:
                            case 30:
                            case 31:
                            case 32:
                            case 33:
                            case 34:
                            case 35:
                            case 36:
                            case 37:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 65:
                            case 66:
                            case 67:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 111:
                            case 127:
                            case 132:
                            case 137:
                            case 138:
                            case 139:
                            case 144:
                            case 145:
                            case 146:
                            case 147:
                            case 148:
                            case 149:
                            case 151:
                            case 153:
                            case 156:
                            case 168:
                            case 169:
                            case 182:
                            case 183:
                            case 185:
                            case 186:
                            case 187:
                            case 188:
                            case 189:
                            case 190:
                            case 191:
                            case 192:
                            case 193:
                            case 194:
                            case 195:
                            case 196:
                            case 197:
                                {
                                alt82=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 82, 6, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 82, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 106:
                    case 107:
                    case 109:
                    case 111:
                    case 127:
                    case 132:
                    case 137:
                    case 138:
                    case 139:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 151:
                    case 153:
                    case 156:
                    case 168:
                    case 169:
                    case 182:
                    case 183:
                    case 185:
                    case 186:
                    case 187:
                    case 188:
                    case 189:
                    case 190:
                    case 191:
                    case 192:
                    case 193:
                    case 194:
                    case 195:
                    case 196:
                    case 197:
                        {
                        alt82=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 82, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 82, 1, input);

                    throw nvae;
                }

                }
                break;
            case 103:
                {
                alt82=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }

            switch (alt82) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:26: mixtureStructure3
                    {
                    pushFollow(FOLLOW_mixtureStructure3_in_mixture1267);
                    mixtureStructure3280=mixtureStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure3.add(mixtureStructure3280.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:44: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture1269);
                    mixtureStructure2281=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2281.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:62: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture1271);
                    mixtureStructure1282=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1282.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure2, mixtureStructure1, mixtureStructure3, mixtureRatio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 103:81: -> ^( NODE[\"MIXTURE\"] ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:84: ^( NODE[\"MIXTURE\"] ( mixtureRatio )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MIXTURE"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:104: ( mixtureRatio )?
                if ( stream_mixtureRatio.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureRatio.nextTree());

                }
                stream_mixtureRatio.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:118: ( mixtureStructure3 )?
                if ( stream_mixtureStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure3.nextTree());

                }
                stream_mixtureStructure3.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:137: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:103:156: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma283 = null;

        ChemicalChunkerParser.lrb_return lrb284 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent285 = null;

        ChemicalChunkerParser.rrb_return rrb286 = null;

        ChemicalChunkerParser.comma_return comma287 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:18: ( comma lrb mixtureContent rrb comma )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:104:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure21299);
            comma283=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma283.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure21301);
            lrb284=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb284.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure21303);
            mixtureContent285=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent285.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure21305);
            rrb286=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb286.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure21307);
            comma287=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma287.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:105:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb288 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent289 = null;

        ChemicalChunkerParser.rrb_return rrb290 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:105:18: ( lrb mixtureContent rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:105:20: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure11313);
            lrb288=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb288.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure11315);
            mixtureContent289=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent289.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure11317);
            rrb290=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb290.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure3"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:106:1: mixtureStructure3 : lrb nnpercent rrb ;
    public final ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure3_return retval = new ChemicalChunkerParser.mixtureStructure3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb291 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent292 = null;

        ChemicalChunkerParser.rrb_return rrb293 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:107:2: ( lrb nnpercent rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:107:4: lrb nnpercent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure31325);
            lrb291=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb291.getTree());
            pushFollow(FOLLOW_nnpercent_in_mixtureStructure31328);
            nnpercent292=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent292.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure31330);
            rrb293=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb293.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure3"

    public static class mixtureRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureRatio"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:109:1: mixtureRatio : cd colon ( cd | oscarcd ) ;
    public final ChemicalChunkerParser.mixtureRatio_return mixtureRatio() throws RecognitionException {
        ChemicalChunkerParser.mixtureRatio_return retval = new ChemicalChunkerParser.mixtureRatio_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd294 = null;

        ChemicalChunkerParser.colon_return colon295 = null;

        ChemicalChunkerParser.cd_return cd296 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd297 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:110:2: ( cd colon ( cd | oscarcd ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:110:4: cd colon ( cd | oscarcd )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_mixtureRatio1341);
            cd294=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd294.getTree());
            pushFollow(FOLLOW_colon_in_mixtureRatio1343);
            colon295=colon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, colon295.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:110:13: ( cd | oscarcd )
            int alt83=2;
            switch ( input.LA(1) ) {
            case 127:
                {
                alt83=1;
                }
                break;
            case 11:
                {
                alt83=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }

            switch (alt83) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:110:14: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureRatio1346);
                    cd296=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd296.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:110:17: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_mixtureRatio1348);
                    oscarcd297=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd297.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureRatio"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:1: mixtureContent : ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw298 = null;

        ChemicalChunkerParser.verb_return verb299 = null;

        ChemicalChunkerParser.nn_return nn300 = null;

        ChemicalChunkerParser.measurements_return measurements301 = null;

        ChemicalChunkerParser.md_return md302 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent303 = null;

        ChemicalChunkerParser.stop_return stop304 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound305 = null;

        ChemicalChunkerParser.molecule_return molecule306 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule307 = null;

        ChemicalChunkerParser.dash_return dash308 = null;

        ChemicalChunkerParser.sym_return sym309 = null;

        ChemicalChunkerParser.cd_return cd310 = null;

        ChemicalChunkerParser.noun_return noun311 = null;

        ChemicalChunkerParser.inof_return inof312 = null;

        ChemicalChunkerParser.inAll_return inAll313 = null;

        ChemicalChunkerParser.cd_return cd314 = null;

        ChemicalChunkerParser.comma_return comma315 = null;

        ChemicalChunkerParser.adj_return adj316 = null;

        ChemicalChunkerParser.colon_return colon317 = null;

        ChemicalChunkerParser.stop_return stop318 = null;

        ChemicalChunkerParser.minimixture_return minimixture319 = null;

        ChemicalChunkerParser.fw_return fw320 = null;

        ChemicalChunkerParser.verb_return verb321 = null;

        ChemicalChunkerParser.measurements_return measurements322 = null;

        ChemicalChunkerParser.nnyield_return nnyield323 = null;

        ChemicalChunkerParser.md_return md324 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent325 = null;

        ChemicalChunkerParser.stop_return stop326 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound327 = null;

        ChemicalChunkerParser.molecule_return molecule328 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule329 = null;

        ChemicalChunkerParser.dash_return dash330 = null;

        ChemicalChunkerParser.sym_return sym331 = null;

        ChemicalChunkerParser.cd_return cd332 = null;

        ChemicalChunkerParser.noun_return noun333 = null;

        ChemicalChunkerParser.inof_return inof334 = null;

        ChemicalChunkerParser.inAll_return inAll335 = null;

        ChemicalChunkerParser.cd_return cd336 = null;

        ChemicalChunkerParser.comma_return comma337 = null;

        ChemicalChunkerParser.adj_return adj338 = null;

        ChemicalChunkerParser.colon_return colon339 = null;

        ChemicalChunkerParser.stop_return stop340 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:15: ( ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:19: ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:19: ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt84=21;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent1358);
                    fw298=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw298.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent1360);
                    verb299=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb299.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:28: nn
                    {
                    pushFollow(FOLLOW_nn_in_mixtureContent1362);
                    nn300=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn300.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:31: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_mixtureContent1364);
                    measurements301=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements301.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:44: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent1366);
                    md302=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md302.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:47: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_mixtureContent1368);
                    nnpercent303=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent303.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:57: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1370);
                    stop304=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop304.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:62: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1372);
                    oscarCompound305=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound305.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:76: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent1374);
                    molecule306=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule306.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:85: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1376);
                    unnamedmolecule307=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule307.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:101: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent1378);
                    dash308=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash308.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:106: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent1380);
                    sym309=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym309.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:110: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1382);
                    cd310=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd310.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:113: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent1384);
                    noun311=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun311.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:118: inof
                    {
                    pushFollow(FOLLOW_inof_in_mixtureContent1386);
                    inof312=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof312.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:123: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent1388);
                    inAll313=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll313.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:129: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent1390);
                    cd314=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd314.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:132: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent1392);
                    comma315=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma315.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:138: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent1394);
                    adj316=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj316.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:142: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent1396);
                    colon317=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon317.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:148: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent1398);
                    stop318=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop318.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:154: ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt85=0;
            loop85:
            do {
                int alt85=23;
                alt85 = dfa85.predict(input);
                switch (alt85) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:155: minimixture
            	    {
            	    pushFollow(FOLLOW_minimixture_in_mixtureContent1402);
            	    minimixture319=minimixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, minimixture319.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:167: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent1404);
            	    fw320=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw320.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:170: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent1406);
            	    verb321=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb321.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:175: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_mixtureContent1408);
            	    measurements322=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements322.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:188: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_mixtureContent1410);
            	    nnyield323=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield323.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:196: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent1412);
            	    md324=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md324.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:199: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_mixtureContent1414);
            	    nnpercent325=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent325.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:209: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1416);
            	    stop326=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop326.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:214: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent1418);
            	    oscarCompound327=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound327.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:228: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent1420);
            	    molecule328=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule328.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:237: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent1422);
            	    unnamedmolecule329=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule329.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:253: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent1424);
            	    dash330=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash330.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:258: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent1426);
            	    sym331=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym331.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:262: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1428);
            	    cd332=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd332.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:265: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent1430);
            	    noun333=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun333.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:270: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_mixtureContent1432);
            	    inof334=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof334.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:275: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent1434);
            	    inAll335=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll335.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:281: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent1436);
            	    cd336=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd336.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:284: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent1438);
            	    comma337=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma337.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:290: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent1440);
            	    adj338=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj338.getTree());

            	    }
            	    break;
            	case 21 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:294: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent1442);
            	    colon339=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon339.getTree());

            	    }
            	    break;
            	case 22 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:300: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent1444);
            	    stop340=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop340.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt85 >= 1 ) break loop85;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(85, input);
                        throw eee;
                }
                cnt85++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class minimixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixture"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:113:1: minimixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.minimixture_return minimixture() throws RecognitionException {
        ChemicalChunkerParser.minimixture_return retval = new ChemicalChunkerParser.minimixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2341 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1342 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:113:12: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:113:14: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:113:14: ( mixtureStructure2 | mixtureStructure1 )
            int alt86=2;
            switch ( input.LA(1) ) {
            case 103:
                {
                alt86=1;
                }
                break;
            case 111:
                {
                alt86=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:113:15: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_minimixture1455);
                    mixtureStructure2341=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2341.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:113:33: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_minimixture1457);
                    mixtureStructure1342=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1342.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure1, mixtureStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 113:52: -> ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:113:55: ^( NODE[\"MIXTURE\"] ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MIXTURE"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:113:74: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:113:93: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixture"

    public static class minimixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:114:1: minimixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.minimixtureStructure2_return minimixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure2_return retval = new ChemicalChunkerParser.minimixtureStructure2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma343 = null;

        ChemicalChunkerParser.lrb_return lrb344 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent345 = null;

        ChemicalChunkerParser.rrb_return rrb346 = null;

        ChemicalChunkerParser.comma_return comma347 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:114:22: ( comma lrb mixtureContent rrb comma )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:114:24: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_minimixtureStructure21478);
            comma343=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma343.getTree());
            pushFollow(FOLLOW_lrb_in_minimixtureStructure21480);
            lrb344=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb344.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure21482);
            mixtureContent345=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent345.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure21484);
            rrb346=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb346.getTree());
            pushFollow(FOLLOW_comma_in_minimixtureStructure21486);
            comma347=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma347.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure2"

    public static class minimixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureStructure1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:115:1: minimixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.minimixtureStructure1_return minimixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.minimixtureStructure1_return retval = new ChemicalChunkerParser.minimixtureStructure1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb348 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent349 = null;

        ChemicalChunkerParser.rrb_return rrb350 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:115:22: ( lrb mixtureContent rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:115:25: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_minimixtureStructure11493);
            lrb348=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb348.getTree());
            pushFollow(FOLLOW_mixtureContent_in_minimixtureStructure11495);
            mixtureContent349=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent349.getTree());
            pushFollow(FOLLOW_rrb_in_minimixtureStructure11497);
            rrb350=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb350.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixtureStructure1"

    public static class minimixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixtureContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:1: minimixtureContent : ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.minimixtureContent_return minimixtureContent() throws RecognitionException {
        ChemicalChunkerParser.minimixtureContent_return retval = new ChemicalChunkerParser.minimixtureContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw351 = null;

        ChemicalChunkerParser.nn_return nn352 = null;

        ChemicalChunkerParser.verb_return verb353 = null;

        ChemicalChunkerParser.measurements_return measurements354 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent355 = null;

        ChemicalChunkerParser.md_return md356 = null;

        ChemicalChunkerParser.stop_return stop357 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound358 = null;

        ChemicalChunkerParser.molecule_return molecule359 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule360 = null;

        ChemicalChunkerParser.dash_return dash361 = null;

        ChemicalChunkerParser.sym_return sym362 = null;

        ChemicalChunkerParser.cd_return cd363 = null;

        ChemicalChunkerParser.noun_return noun364 = null;

        ChemicalChunkerParser.inof_return inof365 = null;

        ChemicalChunkerParser.inAll_return inAll366 = null;

        ChemicalChunkerParser.cd_return cd367 = null;

        ChemicalChunkerParser.comma_return comma368 = null;

        ChemicalChunkerParser.adj_return adj369 = null;

        ChemicalChunkerParser.colon_return colon370 = null;

        ChemicalChunkerParser.stop_return stop371 = null;

        ChemicalChunkerParser.fw_return fw372 = null;

        ChemicalChunkerParser.verb_return verb373 = null;

        ChemicalChunkerParser.measurements_return measurements374 = null;

        ChemicalChunkerParser.nnyield_return nnyield375 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent376 = null;

        ChemicalChunkerParser.md_return md377 = null;

        ChemicalChunkerParser.stop_return stop378 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound379 = null;

        ChemicalChunkerParser.molecule_return molecule380 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule381 = null;

        ChemicalChunkerParser.dash_return dash382 = null;

        ChemicalChunkerParser.sym_return sym383 = null;

        ChemicalChunkerParser.cd_return cd384 = null;

        ChemicalChunkerParser.noun_return noun385 = null;

        ChemicalChunkerParser.inof_return inof386 = null;

        ChemicalChunkerParser.inAll_return inAll387 = null;

        ChemicalChunkerParser.cd_return cd388 = null;

        ChemicalChunkerParser.comma_return comma389 = null;

        ChemicalChunkerParser.adj_return adj390 = null;

        ChemicalChunkerParser.colon_return colon391 = null;

        ChemicalChunkerParser.stop_return stop392 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:19: ( ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:23: ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop ) ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:23: ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )
            int alt87=21;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:24: fw
                    {
                    pushFollow(FOLLOW_fw_in_minimixtureContent1506);
                    fw351=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw351.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:27: nn
                    {
                    pushFollow(FOLLOW_nn_in_minimixtureContent1508);
                    nn352=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn352.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:30: verb
                    {
                    pushFollow(FOLLOW_verb_in_minimixtureContent1510);
                    verb353=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb353.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:35: measurements
                    {
                    pushFollow(FOLLOW_measurements_in_minimixtureContent1512);
                    measurements354=measurements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements354.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:48: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_minimixtureContent1514);
                    nnpercent355=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent355.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:58: md
                    {
                    pushFollow(FOLLOW_md_in_minimixtureContent1516);
                    md356=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md356.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:61: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent1518);
                    stop357=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop357.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:66: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent1520);
                    oscarCompound358=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound358.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:80: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_minimixtureContent1522);
                    molecule359=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule359.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:89: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent1524);
                    unnamedmolecule360=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule360.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:105: dash
                    {
                    pushFollow(FOLLOW_dash_in_minimixtureContent1526);
                    dash361=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash361.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:110: sym
                    {
                    pushFollow(FOLLOW_sym_in_minimixtureContent1528);
                    sym362=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym362.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:114: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent1530);
                    cd363=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd363.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:117: noun
                    {
                    pushFollow(FOLLOW_noun_in_minimixtureContent1532);
                    noun364=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun364.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:122: inof
                    {
                    pushFollow(FOLLOW_inof_in_minimixtureContent1534);
                    inof365=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof365.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:127: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_minimixtureContent1536);
                    inAll366=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll366.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:133: cd
                    {
                    pushFollow(FOLLOW_cd_in_minimixtureContent1538);
                    cd367=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd367.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:136: comma
                    {
                    pushFollow(FOLLOW_comma_in_minimixtureContent1540);
                    comma368=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma368.getTree());

                    }
                    break;
                case 19 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:142: adj
                    {
                    pushFollow(FOLLOW_adj_in_minimixtureContent1542);
                    adj369=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj369.getTree());

                    }
                    break;
                case 20 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:146: colon
                    {
                    pushFollow(FOLLOW_colon_in_minimixtureContent1544);
                    colon370=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon370.getTree());

                    }
                    break;
                case 21 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:152: stop
                    {
                    pushFollow(FOLLOW_stop_in_minimixtureContent1546);
                    stop371=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop371.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:158: ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+
            int cnt88=0;
            loop88:
            do {
                int alt88=22;
                alt88 = dfa88.predict(input);
                switch (alt88) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:159: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_minimixtureContent1550);
            	    fw372=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw372.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:162: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_minimixtureContent1552);
            	    verb373=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb373.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:167: measurements
            	    {
            	    pushFollow(FOLLOW_measurements_in_minimixtureContent1554);
            	    measurements374=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements374.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:180: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_minimixtureContent1556);
            	    nnyield375=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield375.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:188: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_minimixtureContent1558);
            	    nnpercent376=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent376.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:198: md
            	    {
            	    pushFollow(FOLLOW_md_in_minimixtureContent1560);
            	    md377=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md377.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:201: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent1562);
            	    stop378=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop378.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:206: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_minimixtureContent1564);
            	    oscarCompound379=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound379.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:220: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_minimixtureContent1566);
            	    molecule380=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule380.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:229: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_minimixtureContent1568);
            	    unnamedmolecule381=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule381.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:245: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_minimixtureContent1570);
            	    dash382=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash382.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:250: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_minimixtureContent1572);
            	    sym383=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym383.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:254: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent1574);
            	    cd384=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd384.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:257: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_minimixtureContent1576);
            	    noun385=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun385.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:262: inof
            	    {
            	    pushFollow(FOLLOW_inof_in_minimixtureContent1578);
            	    inof386=inof();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof386.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:267: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_minimixtureContent1580);
            	    inAll387=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll387.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:273: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_minimixtureContent1582);
            	    cd388=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd388.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:276: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_minimixtureContent1584);
            	    comma389=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma389.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:282: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_minimixtureContent1586);
            	    adj390=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj390.getTree());

            	    }
            	    break;
            	case 20 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:286: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_minimixtureContent1588);
            	    colon391=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon391.getTree());

            	    }
            	    break;
            	case 21 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:292: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_minimixtureContent1590);
            	    stop392=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop392.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt88 >= 1 ) break loop88;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(88, input);
                        throw eee;
                }
                cnt88++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minimixtureContent"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:1: adj : ( jj | jjr | jjs | jjt | oscarcj | jjchem | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj393 = null;

        ChemicalChunkerParser.jjr_return jjr394 = null;

        ChemicalChunkerParser.jjs_return jjs395 = null;

        ChemicalChunkerParser.jjt_return jjt396 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj397 = null;

        ChemicalChunkerParser.jjchem_return jjchem398 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn399 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:5: ( jj | jjr | jjs | jjt | oscarcj | jjchem | oscarrn )
            int alt89=7;
            switch ( input.LA(1) ) {
            case 145:
                {
                alt89=1;
                }
                break;
            case 146:
                {
                alt89=2;
                }
                break;
            case 147:
                {
                alt89=3;
                }
                break;
            case 148:
                {
                alt89=4;
                }
                break;
            case 12:
                {
                alt89=5;
                }
                break;
            case 18:
                {
                alt89=6;
                }
                break;
            case 13:
                {
                alt89=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }

            switch (alt89) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj1601);
                    jj393=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj393.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj1603);
                    jjr394=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr394.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj1605);
                    jjs395=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs395.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:18: jjt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjt_in_adj1607);
                    jjt396=jjt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjt396.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:22: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj1609);
                    oscarcj397=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj397.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:30: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj1611);
                    jjchem398=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem398.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:118:37: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj1613);
                    oscarrn399=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn399.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:119:1: adv : ( rb | rbr | rbt | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb400 = null;

        ChemicalChunkerParser.rbr_return rbr401 = null;

        ChemicalChunkerParser.rbt_return rbt402 = null;

        ChemicalChunkerParser.rp_return rp403 = null;

        ChemicalChunkerParser.rbs_return rbs404 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:119:5: ( rb | rbr | rbt | rp | rbs )
            int alt90=5;
            switch ( input.LA(1) ) {
            case 175:
                {
                alt90=1;
                }
                break;
            case 176:
                {
                alt90=2;
                }
                break;
            case 178:
                {
                alt90=3;
                }
                break;
            case 181:
                {
                alt90=4;
                }
                break;
            case 179:
                {
                alt90=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:119:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv1620);
                    rb400=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb400.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:119:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv1622);
                    rbr401=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr401.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:119:14: rbt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbt_in_adv1624);
                    rbt402=rbt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbt402.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:119:18: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv1626);
                    rp403=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp403.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:119:21: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv1628);
                    rbs404=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs404.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:123:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg405 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere406 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime407 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp408 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN409 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole410 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther411 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:5: ( neg )?
            int alt91=2;
            switch ( input.LA(1) ) {
                case 105:
                    {
                    alt91=1;
                    }
                    break;
            }

            switch (alt91) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase1641);
                    neg405=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg405.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt92=6;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase1645);
                    prepphraseAtmosphere406=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere406.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase1647);
                    prepphraseTime407=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime407.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase1649);
                    prepphraseTemp408=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp408.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase1651);
                    prepphraseIN409=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN409.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase1653);
                    prepphraseRole410=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole410.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase1655);
                    prepphraseOther411=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther411.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:126:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv412 = null;

        ChemicalChunkerParser.adj_return adj413 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:127:2: ( adv | adj )
            int alt93=2;
            switch ( input.LA(1) ) {
            case 175:
            case 176:
            case 178:
            case 179:
            case 181:
                {
                alt93=1;
                }
                break;
            case 12:
            case 13:
            case 18:
            case 145:
            case 146:
            case 147:
            case 148:
                {
                alt93=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }

            switch (alt93) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:127:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj1669);
                    adv412=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv412.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:127:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj1671);
                    adj413=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj413.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:128:1: prepphraseOther : ( advAdj )* ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj414 = null;

        ChemicalChunkerParser.inAll_return inAll415 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase416 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inAll=new RewriteRuleSubtreeStream(adaptor,"rule inAll");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:129:2: ( ( advAdj )* ( inAll )+ nounphrase -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:129:4: ( advAdj )* ( inAll )+ nounphrase
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:129:4: ( advAdj )*
            loop94:
            do {
                int alt94=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 18:
                case 145:
                case 146:
                case 147:
                case 148:
                case 175:
                case 176:
                case 178:
                case 179:
                case 181:
                    {
                    alt94=1;
                    }
                    break;

                }

                switch (alt94) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1680);
            	    advAdj414=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj414.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:129:12: ( inAll )+
            int cnt95=0;
            loop95:
            do {
                int alt95=2;
                switch ( input.LA(1) ) {
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 144:
                case 183:
                    {
                    alt95=1;
                    }
                    break;

                }

                switch (alt95) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_prepphraseOther1683);
            	    inAll415=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inAll.add(inAll415.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt95 >= 1 ) break loop95;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(95, input);
                        throw eee;
                }
                cnt95++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1687);
            nounphrase416=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase416.getTree());


            // AST REWRITE
            // elements: inAll, nounphrase, advAdj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 129:31: -> ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:129:35: ^( NODE[\"PrepPhrase\"] ( advAdj )* ( inAll )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:129:57: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inAll.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inAll.hasNext() ) {
                    adaptor.addChild(root_1, stream_inAll.nextTree());

                }
                stream_inAll.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:130:1: prepphraseOf : inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof417 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase418 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:131:2: ( inof nounphrase -> ^( NODE[\"PrepPhrase\"] inof nounphrase ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:131:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1714);
            inof417=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof417.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1717);
            nounphrase418=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase418.getTree());


            // AST REWRITE
            // elements: nounphrase, inof
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 131:20: -> ^( NODE[\"PrepPhrase\"] inof nounphrase )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:131:24: ^( NODE[\"PrepPhrase\"] inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:133:1: prepphraseTime : prepPhraseTimeStructure -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure419 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:134:2: ( prepPhraseTimeStructure -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:134:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1739);
            prepPhraseTimeStructure419=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure419.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 134:27: -> ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:134:31: ^( NODE[\"TimePhrase\"] prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:135:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj420 = null;

        ChemicalChunkerParser.inAll_return inAll421 = null;

        ChemicalChunkerParser.dt_return dt422 = null;

        ChemicalChunkerParser.advAdj_return advAdj423 = null;

        ChemicalChunkerParser.cd_return cd424 = null;

        ChemicalChunkerParser.nntime_return nntime425 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:136:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:136:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:136:3: ( advAdj )*
            loop96:
            do {
                int alt96=2;
                alt96 = dfa96.predict(input);
                switch (alt96) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1757);
            	    advAdj420=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj420.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:136:11: ( inAll )?
            int alt97=2;
            switch ( input.LA(1) ) {
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 144:
                case 183:
                    {
                    alt97=1;
                    }
                    break;
            }

            switch (alt97) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1760);
                    inAll421=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll421.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:136:19: ( dt )?
            int alt98=2;
            switch ( input.LA(1) ) {
                case 132:
                    {
                    alt98=1;
                    }
                    break;
            }

            switch (alt98) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1764);
                    dt422=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt422.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:136:23: ( advAdj )*
            loop99:
            do {
                int alt99=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 18:
                case 145:
                case 146:
                case 147:
                case 148:
                case 175:
                case 176:
                case 178:
                case 179:
                case 181:
                    {
                    alt99=1;
                    }
                    break;

                }

                switch (alt99) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1767);
            	    advAdj423=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj423.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:136:31: ( cd )?
            int alt100=2;
            switch ( input.LA(1) ) {
                case 127:
                    {
                    alt100=1;
                    }
                    break;
            }

            switch (alt100) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1770);
                    cd424=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd424.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:136:35: ( nntime )+
            int cnt101=0;
            loop101:
            do {
                int alt101=2;
                switch ( input.LA(1) ) {
                case 37:
                    {
                    int LA101_2 = input.LA(2);

                    if ( (synpred337_ChemicalChunker()) ) {
                        alt101=1;
                    }


                    }
                    break;

                }

                switch (alt101) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1773);
            	    nntime425=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime425.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt101 >= 1 ) break loop101;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(101, input);
                        throw eee;
                }
                cnt101++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:138:1: prepphraseIN : inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin426 = null;

        ChemicalChunkerParser.molecule_return molecule427 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:139:2: ( inin molecule -> ^( NODE[\"PrepPhrase\"] inin molecule ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:139:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1785);
            inin426=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin426.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1787);
            molecule427=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule427.getTree());


            // AST REWRITE
            // elements: inin, molecule
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 139:17: -> ^( NODE[\"PrepPhrase\"] inin molecule )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:139:21: ^( NODE[\"PrepPhrase\"] inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:141:1: prepphraseRole : inas ( dt )? nnchementity -> ^( NODE[\"RolePrepPhrase\"] inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas428 = null;

        ChemicalChunkerParser.dt_return dt429 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity430 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:142:2: ( inas ( dt )? nnchementity -> ^( NODE[\"RolePrepPhrase\"] inas ( dt )? nnchementity ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:142:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1809);
            inas428=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas428.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:142:8: ( dt )?
            int alt102=2;
            switch ( input.LA(1) ) {
                case 132:
                    {
                    alt102=1;
                    }
                    break;
            }

            switch (alt102) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1811);
                    dt429=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt429.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1814);
            nnchementity430=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity430.getTree());


            // AST REWRITE
            // elements: dt, inas, nnchementity
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 142:25: -> ^( NODE[\"RolePrepPhrase\"] inas ( dt )? nnchementity )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:142:28: ^( NODE[\"RolePrepPhrase\"] inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:142:59: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:143:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent431 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:144:2: ( prepphraseAtmosphereContent -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:144:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1838);
            prepphraseAtmosphereContent431=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent431.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 144:32: -> ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:144:36: ^( NODE[\"AtmospherePhrase\"] prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:145:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder432 = null;

        ChemicalChunkerParser.dt_return dt433 = null;

        ChemicalChunkerParser.advAdj_return advAdj434 = null;

        ChemicalChunkerParser.molecule_return molecule435 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere436 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1858);
            inunder432=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder432.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:12: ( dt )?
            int alt103=2;
            switch ( input.LA(1) ) {
                case 132:
                    {
                    alt103=1;
                    }
                    break;
            }

            switch (alt103) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1861);
                    dt433=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt433.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:16: ( advAdj )*
            loop104:
            do {
                int alt104=2;
                alt104 = dfa104.predict(input);
                switch (alt104) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1864);
            	    advAdj434=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj434.getTree());

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1867);
            molecule435=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule435.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:33: ( nnatmosphere )?
            int alt105=2;
            switch ( input.LA(1) ) {
                case 41:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA105_3 = input.LA(3);

                            if ( (synpred341_ChemicalChunker()) ) {
                                alt105=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt105) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1869);
                    nnatmosphere436=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere436.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.in_return in437 = null;

        ChemicalChunkerParser.inafter_return inafter438 = null;

        ChemicalChunkerParser.inas_return inas439 = null;

        ChemicalChunkerParser.inbefore_return inbefore440 = null;

        ChemicalChunkerParser.inby_return inby441 = null;

        ChemicalChunkerParser.infor_return infor442 = null;

        ChemicalChunkerParser.infrom_return infrom443 = null;

        ChemicalChunkerParser.inin_return inin444 = null;

        ChemicalChunkerParser.ininto_return ininto445 = null;

        ChemicalChunkerParser.inof_return inof446 = null;

        ChemicalChunkerParser.inoff_return inoff447 = null;

        ChemicalChunkerParser.inon_return inon448 = null;

        ChemicalChunkerParser.inover_return inover449 = null;

        ChemicalChunkerParser.inunder_return inunder450 = null;

        ChemicalChunkerParser.invia_return invia451 = null;

        ChemicalChunkerParser.inwith_return inwith452 = null;

        ChemicalChunkerParser.inwithout_return inwithout453 = null;

        ChemicalChunkerParser.to_return to454 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt106=18;
            switch ( input.LA(1) ) {
            case 144:
                {
                alt106=1;
                }
                break;
            case 21:
                {
                alt106=2;
                }
                break;
            case 19:
                {
                alt106=3;
                }
                break;
            case 20:
                {
                alt106=4;
                }
                break;
            case 26:
                {
                alt106=5;
                }
                break;
            case 30:
                {
                alt106=6;
                }
                break;
            case 31:
                {
                alt106=7;
                }
                break;
            case 22:
                {
                alt106=8;
                }
                break;
            case 23:
                {
                alt106=9;
                }
                break;
            case 28:
                {
                alt106=10;
                }
                break;
            case 34:
                {
                alt106=11;
                }
                break;
            case 29:
                {
                alt106=12;
                }
                break;
            case 33:
                {
                alt106=13;
                }
                break;
            case 32:
                {
                alt106=14;
                }
                break;
            case 27:
                {
                alt106=15;
                }
                break;
            case 24:
                {
                alt106=16;
                }
                break;
            case 25:
                {
                alt106=17;
                }
                break;
            case 183:
                {
                alt106=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;
            }

            switch (alt106) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll1881);
                    in437=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in437.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll1883);
                    inafter438=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter438.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll1885);
                    inas439=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas439.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll1887);
                    inbefore440=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore440.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll1889);
                    inby441=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby441.getTree());

                    }
                    break;
                case 6 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll1891);
                    infor442=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor442.getTree());

                    }
                    break;
                case 7 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll1893);
                    infrom443=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom443.getTree());

                    }
                    break;
                case 8 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll1895);
                    inin444=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin444.getTree());

                    }
                    break;
                case 9 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll1897);
                    ininto445=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto445.getTree());

                    }
                    break;
                case 10 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll1899);
                    inof446=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof446.getTree());

                    }
                    break;
                case 11 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll1901);
                    inoff447=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff447.getTree());

                    }
                    break;
                case 12 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll1903);
                    inon448=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon448.getTree());

                    }
                    break;
                case 13 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll1905);
                    inover449=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover449.getTree());

                    }
                    break;
                case 14 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll1907);
                    inunder450=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder450.getTree());

                    }
                    break;
                case 15 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll1909);
                    invia451=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia451.getTree());

                    }
                    break;
                case 16 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll1911);
                    inwith452=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith452.getTree());

                    }
                    break;
                case 17 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll1913);
                    inwithout453=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout453.getTree());

                    }
                    break;
                case 18 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:149:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll1915);
                    to454=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to454.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:150:1: prepphraseTemp : prepphraseTempContent -> ^( NODE[\"TempPhrase\"] prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent455 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:150:15: ( prepphraseTempContent -> ^( NODE[\"TempPhrase\"] prepphraseTempContent ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:150:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1922);
            prepphraseTempContent455=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent455.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 150:40: -> ^( NODE[\"TempPhrase\"] prepphraseTempContent )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:150:44: ^( NODE[\"TempPhrase\"] prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:152:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj456 = null;

        ChemicalChunkerParser.inAll_return inAll457 = null;

        ChemicalChunkerParser.dt_return dt458 = null;

        ChemicalChunkerParser.advAdj_return advAdj459 = null;

        ChemicalChunkerParser.cd_return cd460 = null;

        ChemicalChunkerParser.nntemp_return nntemp461 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:153:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:153:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:153:5: ( advAdj )?
            int alt107=2;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1944);
                    advAdj456=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj456.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:153:13: ( inAll )?
            int alt108=2;
            switch ( input.LA(1) ) {
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 144:
                case 183:
                    {
                    alt108=1;
                    }
                    break;
            }

            switch (alt108) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1947);
                    inAll457=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll457.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:153:20: ( dt )?
            int alt109=2;
            switch ( input.LA(1) ) {
                case 132:
                    {
                    alt109=1;
                    }
                    break;
            }

            switch (alt109) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1950);
                    dt458=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt458.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:153:24: ( advAdj )?
            int alt110=2;
            switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 18:
                case 145:
                case 146:
                case 147:
                case 148:
                case 175:
                case 176:
                case 178:
                case 179:
                case 181:
                    {
                    alt110=1;
                    }
                    break;
            }

            switch (alt110) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1953);
                    advAdj459=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj459.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:153:32: ( cd )?
            int alt111=2;
            switch ( input.LA(1) ) {
                case 127:
                    {
                    alt111=1;
                    }
                    break;
            }

            switch (alt111) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1956);
                    cd460=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd460.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:153:36: ( nntemp )+
            int cnt112=0;
            loop112:
            do {
                int alt112=2;
                switch ( input.LA(1) ) {
                case 45:
                    {
                    int LA112_2 = input.LA(2);

                    if ( (synpred364_ChemicalChunker()) ) {
                        alt112=1;
                    }


                    }
                    break;

                }

                switch (alt112) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1959);
            	    nntemp461=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp461.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt112 >= 1 ) break loop112;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(112, input);
                        throw eee;
                }
                cnt112++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:156:1: amount : ( cd )+ nnamount -> ^( NODE[\"AMOUNT\"] ( cd )+ nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd462 = null;

        ChemicalChunkerParser.nnamount_return nnamount463 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:156:8: ( ( cd )+ nnamount -> ^( NODE[\"AMOUNT\"] ( cd )+ nnamount ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:156:10: ( cd )+ nnamount
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:156:10: ( cd )+
            int cnt113=0;
            loop113:
            do {
                int alt113=2;
                switch ( input.LA(1) ) {
                case 127:
                    {
                    alt113=1;
                    }
                    break;

                }

                switch (alt113) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_amount1974);
            	    cd462=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd462.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt113 >= 1 ) break loop113;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(113, input);
                        throw eee;
                }
                cnt113++;
            } while (true);

            pushFollow(FOLLOW_nnamount_in_amount1977);
            nnamount463=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount463.getTree());


            // AST REWRITE
            // elements: nnamount, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 156:23: -> ^( NODE[\"AMOUNT\"] ( cd )+ nnamount )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:156:26: ^( NODE[\"AMOUNT\"] ( cd )+ nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "AMOUNT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:157:1: mass : ( cd )+ nnmass -> ^( NODE[\"MASS\"] ( cd )+ nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd464 = null;

        ChemicalChunkerParser.nnmass_return nnmass465 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:157:6: ( ( cd )+ nnmass -> ^( NODE[\"MASS\"] ( cd )+ nnmass ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:157:8: ( cd )+ nnmass
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:157:8: ( cd )+
            int cnt114=0;
            loop114:
            do {
                int alt114=2;
                switch ( input.LA(1) ) {
                case 127:
                    {
                    alt114=1;
                    }
                    break;

                }

                switch (alt114) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mass1999);
            	    cd464=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd464.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt114 >= 1 ) break loop114;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(114, input);
                        throw eee;
                }
                cnt114++;
            } while (true);

            pushFollow(FOLLOW_nnmass_in_mass2002);
            nnmass465=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass465.getTree());


            // AST REWRITE
            // elements: nnmass, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 157:18: -> ^( NODE[\"MASS\"] ( cd )+ nnmass )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:157:21: ^( NODE[\"MASS\"] ( cd )+ nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MASS"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:1: percent : number ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] number ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.number_return number466 = null;

        ChemicalChunkerParser.nn_return nn467 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent468 = null;


        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:9: ( number ( nn )? nnpercent -> ^( NODE[\"PERCENT\"] number ( nn )? nnpercent ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:11: number ( nn )? nnpercent
            {
            pushFollow(FOLLOW_number_in_percent2024);
            number466=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number466.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:18: ( nn )?
            int alt115=2;
            switch ( input.LA(1) ) {
                case 151:
                    {
                    alt115=1;
                    }
                    break;
            }

            switch (alt115) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2026);
                    nn467=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn467.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent2029);
            nnpercent468=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent468.getTree());


            // AST REWRITE
            // elements: number, nnpercent, nn
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 158:32: -> ^( NODE[\"PERCENT\"] number ( nn )? nnpercent )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:35: ^( NODE[\"PERCENT\"] number ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_number.nextTree());
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:158:62: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:159:1: volume : ( cd )+ nnvol -> ^( NODE[\"VOLUME\"] ( cd )+ nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd469 = null;

        ChemicalChunkerParser.nnvol_return nnvol470 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:159:8: ( ( cd )+ nnvol -> ^( NODE[\"VOLUME\"] ( cd )+ nnvol ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:159:10: ( cd )+ nnvol
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:159:10: ( cd )+
            int cnt116=0;
            loop116:
            do {
                int alt116=2;
                switch ( input.LA(1) ) {
                case 127:
                    {
                    alt116=1;
                    }
                    break;

                }

                switch (alt116) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_volume2053);
            	    cd469=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd469.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt116 >= 1 ) break loop116;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(116, input);
                        throw eee;
                }
                cnt116++;
            } while (true);

            pushFollow(FOLLOW_nnvol_in_volume2056);
            nnvol470=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol470.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 159:20: -> ^( NODE[\"VOLUME\"] ( cd )+ nnvol )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:159:23: ^( NODE[\"VOLUME\"] ( cd )+ nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "VOLUME"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:1: molar : ( cd )* nnmolar -> ^( NODE[\"MOLAR\"] ( cd )* nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd471 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar472 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:7: ( ( cd )* nnmolar -> ^( NODE[\"MOLAR\"] ( cd )* nnmolar ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:9: ( cd )* nnmolar
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:9: ( cd )*
            loop117:
            do {
                int alt117=2;
                switch ( input.LA(1) ) {
                case 127:
                    {
                    alt117=1;
                    }
                    break;

                }

                switch (alt117) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_molar2078);
            	    cd471=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd471.getTree());

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);

            pushFollow(FOLLOW_nnmolar_in_molar2081);
            nnmolar472=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar472.getTree());


            // AST REWRITE
            // elements: nnmolar, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 160:21: -> ^( NODE[\"MOLAR\"] ( cd )* nnmolar )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:24: ^( NODE[\"MOLAR\"] ( cd )* nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLAR"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:160:42: ( cd )*
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:162:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize473 = null;

        ChemicalChunkerParser.inas_return inas474 = null;

        ChemicalChunkerParser.nnexample_return nnexample475 = null;

        ChemicalChunkerParser.cd_return cd476 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase477 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase2105);
            vbsynthesize473=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize473.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase2107);
            inas474=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas474.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:22: ( nnexample cd | prepphrase )
            int alt118=2;
            switch ( input.LA(1) ) {
            case 35:
                {
                alt118=1;
                }
                break;
            case 12:
            case 13:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 37:
            case 45:
            case 105:
            case 127:
            case 132:
            case 144:
            case 145:
            case 146:
            case 147:
            case 148:
            case 175:
            case 176:
            case 178:
            case 179:
            case 181:
            case 183:
                {
                alt118=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;
            }

            switch (alt118) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase2110);
                    nnexample475=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample475.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase2112);
                    cd476=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd476.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:163:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase2115);
                    prepphrase477=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase477.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:165:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus478 = null;

        ChemicalChunkerParser.conjunction_return conjunction479 = null;

        ChemicalChunkerParser.apparatus_return apparatus480 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:166:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:166:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus2128);
            apparatus478=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus478.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:166:14: ( ( conjunction )* apparatus )*
            loop120:
            do {
                int alt120=2;
                alt120 = dfa120.predict(input);
                switch (alt120) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:166:15: ( conjunction )* apparatus
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:166:15: ( conjunction )*
            	    loop119:
            	    do {
            	        int alt119=2;
            	        alt119 = dfa119.predict(input);
            	        switch (alt119) {
            	    	case 1 :
            	    	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus2131);
            	    	    conjunction479=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction479.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop119;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus2134);
            	    apparatus480=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus480.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:167:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( NODE[\"APPARATUS\"] ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt481 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus482 = null;

        ChemicalChunkerParser.nnApp_return nnApp483 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( NODE[\"APPARATUS\"] ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:4: ( dt )?
            int alt121=2;
            switch ( input.LA(1) ) {
                case 132:
                    {
                    alt121=1;
                    }
                    break;
            }

            switch (alt121) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus2146);
                    dt481=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt481.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:8: ( preapparatus )*
            loop122:
            do {
                int alt122=2;
                switch ( input.LA(1) ) {
                case 11:
                case 12:
                case 13:
                case 14:
                case 18:
                case 36:
                case 39:
                case 44:
                case 49:
                case 55:
                case 60:
                case 103:
                case 111:
                case 127:
                case 145:
                case 146:
                case 147:
                case 148:
                case 151:
                    {
                    alt122=1;
                    }
                    break;

                }

                switch (alt122) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus2149);
            	    preapparatus482=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus482.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:22: ( nnApp )+
            int cnt123=0;
            loop123:
            do {
                int alt123=2;
                switch ( input.LA(1) ) {
                case 71:
                    {
                    int LA123_2 = input.LA(2);

                    if ( (synpred375_ChemicalChunker()) ) {
                        alt123=1;
                    }


                    }
                    break;

                }

                switch (alt123) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus2152);
            	    nnApp483=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp483.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt123 >= 1 ) break loop123;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(123, input);
                        throw eee;
                }
                cnt123++;
            } while (true);



            // AST REWRITE
            // elements: dt, preapparatus, nnApp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 168:28: -> ^( NODE[\"APPARATUS\"] ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:31: ^( NODE[\"APPARATUS\"] ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "APPARATUS"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:53: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:57: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:170:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus484 = null;

        ChemicalChunkerParser.dash_return dash485 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus486 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:4: ( nnapparatus )+
            int cnt124=0;
            loop124:
            do {
                int alt124=2;
                switch ( input.LA(1) ) {
                case 71:
                    {
                    int LA124_2 = input.LA(2);

                    if ( (synpred376_ChemicalChunker()) ) {
                        alt124=1;
                    }


                    }
                    break;

                }

                switch (alt124) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp2181);
            	    nnapparatus484=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus484.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:17: ( dash nnapparatus )*
            loop125:
            do {
                int alt125=2;
                switch ( input.LA(1) ) {
                case 106:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 71:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA125_5 = input.LA(5);

                                if ( (synpred377_ChemicalChunker()) ) {
                                    alt125=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt125) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp2185);
            	    dash485=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash485.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp2187);
            	    nnapparatus486=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus486.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:172:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity487 = null;

        ChemicalChunkerParser.adj_return adj488 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure489 = null;

        ChemicalChunkerParser.nnadd_return nnadd490 = null;

        ChemicalChunkerParser.molecule_return molecule491 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity492 = null;

        ChemicalChunkerParser.nnstate_return nnstate493 = null;

        ChemicalChunkerParser.nn_return nn494 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt126=0;
            loop126:
            do {
                int alt126=9;
                alt126 = dfa126.predict(input);
                switch (alt126) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus2201);
            	    quantity487=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity487.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus2203);
            	    adj488=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj488.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus2205);
            	    nnpressure489=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure489.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus2207);
            	    nnadd490=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd490.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus2209);
            	    molecule491=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule491.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus2211);
            	    nnchementity492=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity492.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus2213);
            	    nnstate493=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate493.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus2215);
            	    nn494=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn494.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:174:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd495 = null;

        ChemicalChunkerParser.nn_return nn496 = null;

        ChemicalChunkerParser.multiple_return multiple497 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes498 = null;

        ChemicalChunkerParser.dt_return dt499 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:3: ( cd nn )?
            int alt127=2;
            switch ( input.LA(1) ) {
                case 127:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 151:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 11:
                                                case 14:
                                                case 39:
                                                case 127:
                                                    {
                                                    alt127=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt127) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2226);
                    cd495=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd495.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2228);
                    nn496=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn496.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:12: ( multiple | measurementtypes )
            int alt128=2;
            switch ( input.LA(1) ) {
            case 127:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 38:
                    case 39:
                    case 40:
                    case 43:
                    case 108:
                    case 127:
                    case 151:
                        {
                        alt128=2;
                        }
                        break;
                    case 17:
                        {
                        alt128=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 128, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 1, input);

                    throw nvae;
                }

                }
                break;
            case 11:
            case 14:
            case 39:
                {
                alt128=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }

            switch (alt128) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2233);
                    multiple497=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple497.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2235);
                    measurementtypes498=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes498.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:43: ( dt )?
            int alt129=2;
            switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA129_3 = input.LA(3);

                            if ( (synpred388_ChemicalChunker()) ) {
                                alt129=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt129) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2241);
                    dt499=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt499.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:176:1: multiple : cd cdunicode ( measurementtypes )? -> ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd500 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode501 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes502 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:176:10: ( cd cdunicode ( measurementtypes )? -> ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:176:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2249);
            cd500=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd500.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2251);
            cdunicode501=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode501.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:176:25: ( measurementtypes )?
            int alt130=2;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2253);
                    measurementtypes502=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes502.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: measurementtypes, cd, cdunicode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 176:43: -> ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:176:46: ^( NODE[\"MULTIPLE\"] cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:176:80: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:177:1: measurementtypes : ( molar | amount | mass | percent | volume );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar503 = null;

        ChemicalChunkerParser.amount_return amount504 = null;

        ChemicalChunkerParser.mass_return mass505 = null;

        ChemicalChunkerParser.percent_return percent506 = null;

        ChemicalChunkerParser.volume_return volume507 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:178:2: ( molar | amount | mass | percent | volume )
            int alt131=5;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:178:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2281);
                    molar503=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar503.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:178:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2283);
                    amount504=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount504.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:178:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2285);
                    mass505=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass505.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:178:22: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2287);
                    percent506=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent506.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:178:30: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2289);
                    volume507=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume507.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:1: oscarCompound : ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj508 = null;

        ChemicalChunkerParser.oscarCompound1_return oscarCompound1509 = null;

        ChemicalChunkerParser.oscarCompound2_return oscarCompound2510 = null;

        ChemicalChunkerParser.oscarCompound3_return oscarCompound3511 = null;

        ChemicalChunkerParser.oscarCompound4_return oscarCompound4512 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm513 = null;

        ChemicalChunkerParser.adj_return adj514 = null;

        ChemicalChunkerParser.reference_return reference515 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:15: ( ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:18: ( adj )* ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm ) ( adj )? ( reference )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:18: ( adj )*
            loop132:
            do {
                int alt132=2;
                switch ( input.LA(1) ) {
                case 12:
                case 13:
                case 18:
                case 145:
                case 146:
                case 147:
                case 148:
                    {
                    alt132=1;
                    }
                    break;

                }

                switch (alt132) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound2301);
            	    adj508=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj508.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )
            int alt133=5;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:24: oscarCompound1
                    {
                    pushFollow(FOLLOW_oscarCompound1_in_oscarCompound2305);
                    oscarCompound1509=oscarCompound1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound1509.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:39: oscarCompound2
                    {
                    pushFollow(FOLLOW_oscarCompound2_in_oscarCompound2307);
                    oscarCompound2510=oscarCompound2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound2510.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:54: oscarCompound3
                    {
                    pushFollow(FOLLOW_oscarCompound3_in_oscarCompound2309);
                    oscarCompound3511=oscarCompound3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound3511.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:69: oscarCompound4
                    {
                    pushFollow(FOLLOW_oscarCompound4_in_oscarCompound2311);
                    oscarCompound4512=oscarCompound4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound4512.getTree());

                    }
                    break;
                case 5 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:84: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompound2313);
                    oscarcm513=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm513.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:93: ( adj )?
            int alt134=2;
            alt134 = dfa134.predict(input);
            switch (alt134) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound2316);
                    adj514=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj514.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:98: ( reference )?
            int alt135=2;
            switch ( input.LA(1) ) {
                case 109:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 127:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 110:
                                                    {
                                                    switch ( input.LA(6) ) {
                                                        case TOKEN:
                                                            {
                                                            int LA135_7 = input.LA(7);

                                                            if ( (synpred400_ChemicalChunker()) ) {
                                                                alt135=1;
                                                            }
                                                            }
                                                            break;
                                                    }

                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt135) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: reference
                    {
                    pushFollow(FOLLOW_reference_in_oscarCompound2319);
                    reference515=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference515.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompound4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound4"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:1: oscarCompound4 : lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) ;
    public final ChemicalChunkerParser.oscarCompound4_return oscarCompound4() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound4_return retval = new ChemicalChunkerParser.oscarCompound4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb516 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm517 = null;

        ChemicalChunkerParser.rrb_return rrb518 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:16: ( lrb oscarcm rrb -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:18: lrb oscarcm rrb
            {
            pushFollow(FOLLOW_lrb_in_oscarCompound42328);
            lrb516=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_lrb.add(lrb516.getTree());
            pushFollow(FOLLOW_oscarcm_in_oscarCompound42331);
            oscarcm517=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm517.getTree());
            pushFollow(FOLLOW_rrb_in_oscarCompound42333);
            rrb518=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_rrb.add(rrb518.getTree());


            // AST REWRITE
            // elements: oscarcm, rrb, lrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 183:35: -> ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:183:38: ^( NODE[\"OSCARCM\"] lrb oscarcm rrb )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_lrb.nextTree());
                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                adaptor.addChild(root_1, stream_rrb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound4"

    public static class oscarCompound3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:184:1: oscarCompound3 : oscarCompound3Structure -> ^( NODE[\"OSCARCM\"] oscarCompound3Structure ) ;
    public final ChemicalChunkerParser.oscarCompound3_return oscarCompound3() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3_return retval = new ChemicalChunkerParser.oscarCompound3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound3Structure_return oscarCompound3Structure519 = null;


        RewriteRuleSubtreeStream stream_oscarCompound3Structure=new RewriteRuleSubtreeStream(adaptor,"rule oscarCompound3Structure");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:184:16: ( oscarCompound3Structure -> ^( NODE[\"OSCARCM\"] oscarCompound3Structure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:184:18: oscarCompound3Structure
            {
            pushFollow(FOLLOW_oscarCompound3Structure_in_oscarCompound32357);
            oscarCompound3Structure519=oscarCompound3Structure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarCompound3Structure.add(oscarCompound3Structure519.getTree());


            // AST REWRITE
            // elements: oscarCompound3Structure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 184:42: -> ^( NODE[\"OSCARCM\"] oscarCompound3Structure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:184:45: ^( NODE[\"OSCARCM\"] oscarCompound3Structure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarCompound3Structure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3"

    public static class oscarCompound2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:185:1: oscarCompound2 : oscarCompound2Structure -> ^( NODE[\"OSCARCM\"] oscarCompound2Structure ) ;
    public final ChemicalChunkerParser.oscarCompound2_return oscarCompound2() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2_return retval = new ChemicalChunkerParser.oscarCompound2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarCompound2Structure_return oscarCompound2Structure520 = null;


        RewriteRuleSubtreeStream stream_oscarCompound2Structure=new RewriteRuleSubtreeStream(adaptor,"rule oscarCompound2Structure");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:185:16: ( oscarCompound2Structure -> ^( NODE[\"OSCARCM\"] oscarCompound2Structure ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:185:18: oscarCompound2Structure
            {
            pushFollow(FOLLOW_oscarCompound2Structure_in_oscarCompound22376);
            oscarCompound2Structure520=oscarCompound2Structure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarCompound2Structure.add(oscarCompound2Structure520.getTree());


            // AST REWRITE
            // elements: oscarCompound2Structure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 185:42: -> ^( NODE[\"OSCARCM\"] oscarCompound2Structure )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:185:45: ^( NODE[\"OSCARCM\"] oscarCompound2Structure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarCompound2Structure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2"

    public static class oscarCompound1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:186:1: oscarCompound1 : oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) ;
    public final ChemicalChunkerParser.oscarCompound1_return oscarCompound1() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound1_return retval = new ChemicalChunkerParser.oscarCompound1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm521 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm522 = null;


        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:186:16: ( oscarcm ( oscarcm )+ -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:186:18: oscarcm ( oscarcm )+
            {
            pushFollow(FOLLOW_oscarcm_in_oscarCompound12395);
            oscarcm521=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm521.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:186:26: ( oscarcm )+
            int cnt136=0;
            loop136:
            do {
                int alt136=2;
                switch ( input.LA(1) ) {
                case 55:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA136_3 = input.LA(3);

                        if ( (synpred401_ChemicalChunker()) ) {
                            alt136=1;
                        }


                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt136) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound12397);
            	    oscarcm522=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm522.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt136 >= 1 ) break loop136;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(136, input);
                        throw eee;
                }
                cnt136++;
            } while (true);



            // AST REWRITE
            // elements: oscarcm, oscarcm
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 186:35: -> ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:186:38: ^( NODE[\"OSCARCM\"] oscarcm ( oscarcm )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "OSCARCM"), root_1);

                adaptor.addChild(root_1, stream_oscarcm.nextTree());
                if ( !(stream_oscarcm.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound1"

    public static class oscarCompound3Structure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound3Structure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:189:1: oscarCompound3Structure : oscarcm ( dash | apost )+ ;
    public final ChemicalChunkerParser.oscarCompound3Structure_return oscarCompound3Structure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound3Structure_return retval = new ChemicalChunkerParser.oscarCompound3Structure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm523 = null;

        ChemicalChunkerParser.dash_return dash524 = null;

        ChemicalChunkerParser.apost_return apost525 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:190:2: ( oscarcm ( dash | apost )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:190:5: oscarcm ( dash | apost )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarcm_in_oscarCompound3Structure2423);
            oscarcm523=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm523.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:190:13: ( dash | apost )+
            int cnt137=0;
            loop137:
            do {
                int alt137=3;
                switch ( input.LA(1) ) {
                case 106:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA137_4 = input.LA(3);

                        if ( (synpred402_ChemicalChunker()) ) {
                            alt137=1;
                        }


                        }
                        break;

                    }

                    }
                    break;
                case 104:
                    {
                    alt137=2;
                    }
                    break;

                }

                switch (alt137) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:190:14: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound3Structure2426);
            	    dash524=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash524.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:190:19: apost
            	    {
            	    pushFollow(FOLLOW_apost_in_oscarCompound3Structure2428);
            	    apost525=apost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost525.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt137 >= 1 ) break loop137;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(137, input);
                        throw eee;
                }
                cnt137++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound3Structure"

    public static class oscarCompound2Structure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound2Structure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:191:1: oscarCompound2Structure : oscarcm ( dash oscarcm )+ ( dash )? ;
    public final ChemicalChunkerParser.oscarCompound2Structure_return oscarCompound2Structure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound2Structure_return retval = new ChemicalChunkerParser.oscarCompound2Structure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm526 = null;

        ChemicalChunkerParser.dash_return dash527 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm528 = null;

        ChemicalChunkerParser.dash_return dash529 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:192:2: ( oscarcm ( dash oscarcm )+ ( dash )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:192:5: oscarcm ( dash oscarcm )+ ( dash )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_oscarcm_in_oscarCompound2Structure2442);
            oscarcm526=oscarcm();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm526.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:192:13: ( dash oscarcm )+
            int cnt138=0;
            loop138:
            do {
                int alt138=2;
                switch ( input.LA(1) ) {
                case 106:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 55:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA138_5 = input.LA(5);

                                if ( (synpred404_ChemicalChunker()) ) {
                                    alt138=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt138) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:192:14: dash oscarcm
            	    {
            	    pushFollow(FOLLOW_dash_in_oscarCompound2Structure2445);
            	    dash527=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash527.getTree());
            	    pushFollow(FOLLOW_oscarcm_in_oscarCompound2Structure2447);
            	    oscarcm528=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm528.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt138 >= 1 ) break loop138;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(138, input);
                        throw eee;
                }
                cnt138++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:192:30: ( dash )?
            int alt139=2;
            switch ( input.LA(1) ) {
                case 106:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA139_3 = input.LA(3);

                            if ( (synpred405_ChemicalChunker()) ) {
                                alt139=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt139) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dash
                    {
                    pushFollow(FOLLOW_dash_in_oscarCompound2Structure2452);
                    dash529=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash529.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarCompound2Structure"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:196:1: moleculeamount1 : ( quantity | mixture )+ inof oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity530 = null;

        ChemicalChunkerParser.mixture_return mixture531 = null;

        ChemicalChunkerParser.inof_return inof532 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound533 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:2: ( ( quantity | mixture )+ inof oscarCompound )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:3: ( quantity | mixture )+ inof oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:3: ( quantity | mixture )+
            int cnt140=0;
            loop140:
            do {
                int alt140=3;
                switch ( input.LA(1) ) {
                case 111:
                    {
                    int LA140_2 = input.LA(2);

                    if ( (synpred406_ChemicalChunker()) ) {
                        alt140=1;
                    }
                    else if ( (synpred407_ChemicalChunker()) ) {
                        alt140=2;
                    }


                    }
                    break;
                case 127:
                    {
                    int LA140_3 = input.LA(2);

                    if ( (synpred406_ChemicalChunker()) ) {
                        alt140=1;
                    }
                    else if ( (synpred407_ChemicalChunker()) ) {
                        alt140=2;
                    }


                    }
                    break;
                case 11:
                case 14:
                case 39:
                    {
                    alt140=1;
                    }
                    break;
                case 103:
                    {
                    alt140=2;
                    }
                    break;

                }

                switch (alt140) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount12466);
            	    quantity530=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity530.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount12468);
            	    mixture531=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture531.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt140 >= 1 ) break loop140;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(140, input);
                        throw eee;
                }
                cnt140++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount12472);
            inof532=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof532.getTree());
            pushFollow(FOLLOW_oscarCompound_in_moleculeamount12474);
            oscarCompound533=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound533.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:199:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity534 = null;

        ChemicalChunkerParser.mixture_return mixture535 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound536 = null;

        ChemicalChunkerParser.citation_return citation537 = null;

        ChemicalChunkerParser.quantity_return quantity538 = null;

        ChemicalChunkerParser.mixture_return mixture539 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:2: ( ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:3: ( quantity | mixture )* ( oscarCompound )+ ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:3: ( quantity | mixture )*
            loop141:
            do {
                int alt141=3;
                alt141 = dfa141.predict(input);
                switch (alt141) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount22484);
            	    quantity534=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity534.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount22486);
            	    mixture535=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture535.getTree());

            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:23: ( oscarCompound )+
            int cnt142=0;
            loop142:
            do {
                int alt142=2;
                alt142 = dfa142.predict(input);
                switch (alt142) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount22490);
            	    oscarCompound536=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound536.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt142 >= 1 ) break loop142;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(142, input);
                        throw eee;
                }
                cnt142++;
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:39: ( citation | quantity | mixture )*
            loop143:
            do {
                int alt143=4;
                alt143 = dfa143.predict(input);
                switch (alt143) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:40: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_moleculeamount22495);
            	    citation537=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation537.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:49: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount22497);
            	    quantity538=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity538.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:58: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount22499);
            	    mixture539=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture539.getTree());

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:203:1: moleculeamount3 : ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity540 = null;

        ChemicalChunkerParser.mixture_return mixture541 = null;

        ChemicalChunkerParser.inof_return inof542 = null;

        ChemicalChunkerParser.mixtureRatio_return mixtureRatio543 = null;

        ChemicalChunkerParser.mixture_return mixture544 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound545 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:2: ( ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:3: ( quantity | mixture ) inof mixtureRatio ( mixture )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:3: ( quantity | mixture )
            int alt144=2;
            switch ( input.LA(1) ) {
            case 111:
                {
                int LA144_1 = input.LA(2);

                if ( (synpred414_ChemicalChunker()) ) {
                    alt144=1;
                }
                else if ( (true) ) {
                    alt144=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 1, input);

                    throw nvae;
                }
                }
                break;
            case 127:
                {
                int LA144_2 = input.LA(2);

                if ( (synpred414_ChemicalChunker()) ) {
                    alt144=1;
                }
                else if ( (true) ) {
                    alt144=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 144, 2, input);

                    throw nvae;
                }
                }
                break;
            case 11:
            case 14:
            case 39:
                {
                alt144=1;
                }
                break;
            case 103:
                {
                alt144=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }

            switch (alt144) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount32513);
                    quantity540=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity540.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount32515);
                    mixture541=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture541.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inof_in_moleculeamount32518);
            inof542=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof542.getTree());
            pushFollow(FOLLOW_mixtureRatio_in_moleculeamount32520);
            mixtureRatio543=mixtureRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureRatio543.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:40: ( mixture )?
            int alt145=2;
            switch ( input.LA(1) ) {
                case 103:
                case 127:
                    {
                    alt145=1;
                    }
                    break;
                case 111:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 55:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 11:
                                                case 12:
                                                case 13:
                                                case 14:
                                                case 15:
                                                case 16:
                                                case 18:
                                                case 19:
                                                case 20:
                                                case 21:
                                                case 22:
                                                case 23:
                                                case 24:
                                                case 25:
                                                case 26:
                                                case 27:
                                                case 28:
                                                case 29:
                                                case 30:
                                                case 31:
                                                case 32:
                                                case 33:
                                                case 34:
                                                case 35:
                                                case 36:
                                                case 37:
                                                case 39:
                                                case 40:
                                                case 41:
                                                case 42:
                                                case 43:
                                                case 44:
                                                case 45:
                                                case 46:
                                                case 47:
                                                case 48:
                                                case 49:
                                                case 50:
                                                case 51:
                                                case 52:
                                                case 53:
                                                case 54:
                                                case 55:
                                                case 56:
                                                case 57:
                                                case 58:
                                                case 59:
                                                case 60:
                                                case 61:
                                                case 62:
                                                case 63:
                                                case 64:
                                                case 65:
                                                case 66:
                                                case 67:
                                                case 68:
                                                case 69:
                                                case 70:
                                                case 71:
                                                case 72:
                                                case 73:
                                                case 74:
                                                case 75:
                                                case 76:
                                                case 77:
                                                case 78:
                                                case 79:
                                                case 80:
                                                case 81:
                                                case 82:
                                                case 83:
                                                case 84:
                                                case 85:
                                                case 86:
                                                case 87:
                                                case 88:
                                                case 89:
                                                case 90:
                                                case 91:
                                                case 92:
                                                case 93:
                                                case 94:
                                                case 95:
                                                case 96:
                                                case 97:
                                                case 98:
                                                case 99:
                                                case 100:
                                                case 101:
                                                case 102:
                                                case 103:
                                                case 104:
                                                case 106:
                                                case 107:
                                                case 108:
                                                case 109:
                                                case 111:
                                                case 127:
                                                case 132:
                                                case 137:
                                                case 138:
                                                case 139:
                                                case 144:
                                                case 145:
                                                case 146:
                                                case 147:
                                                case 148:
                                                case 149:
                                                case 151:
                                                case 153:
                                                case 156:
                                                case 168:
                                                case 169:
                                                case 182:
                                                case 183:
                                                case 185:
                                                case 186:
                                                case 187:
                                                case 188:
                                                case 189:
                                                case 190:
                                                case 191:
                                                case 192:
                                                case 193:
                                                case 194:
                                                case 195:
                                                case 196:
                                                case 197:
                                                    {
                                                    alt145=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                                case 11:
                                case 12:
                                case 13:
                                case 14:
                                case 15:
                                case 16:
                                case 18:
                                case 19:
                                case 20:
                                case 21:
                                case 22:
                                case 23:
                                case 24:
                                case 25:
                                case 26:
                                case 27:
                                case 28:
                                case 29:
                                case 30:
                                case 31:
                                case 32:
                                case 33:
                                case 34:
                                case 35:
                                case 36:
                                case 37:
                                case 39:
                                case 40:
                                case 41:
                                case 42:
                                case 43:
                                case 44:
                                case 45:
                                case 46:
                                case 47:
                                case 48:
                                case 49:
                                case 50:
                                case 51:
                                case 52:
                                case 53:
                                case 54:
                                case 56:
                                case 57:
                                case 58:
                                case 59:
                                case 60:
                                case 61:
                                case 62:
                                case 63:
                                case 64:
                                case 65:
                                case 66:
                                case 67:
                                case 68:
                                case 69:
                                case 70:
                                case 71:
                                case 72:
                                case 73:
                                case 74:
                                case 75:
                                case 76:
                                case 77:
                                case 78:
                                case 79:
                                case 80:
                                case 81:
                                case 82:
                                case 83:
                                case 84:
                                case 85:
                                case 86:
                                case 87:
                                case 88:
                                case 89:
                                case 90:
                                case 91:
                                case 92:
                                case 93:
                                case 94:
                                case 95:
                                case 96:
                                case 97:
                                case 98:
                                case 99:
                                case 100:
                                case 101:
                                case 102:
                                case 103:
                                case 106:
                                case 107:
                                case 108:
                                case 109:
                                case 111:
                                case 127:
                                case 132:
                                case 137:
                                case 138:
                                case 139:
                                case 144:
                                case 145:
                                case 146:
                                case 147:
                                case 148:
                                case 149:
                                case 151:
                                case 153:
                                case 156:
                                case 168:
                                case 169:
                                case 182:
                                case 183:
                                case 185:
                                case 186:
                                case 187:
                                case 188:
                                case 189:
                                case 190:
                                case 191:
                                case 192:
                                case 193:
                                case 194:
                                case 195:
                                case 196:
                                case 197:
                                    {
                                    alt145=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt145) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount32522);
                    mixture544=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture544.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount32525);
            oscarCompound545=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound545.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:205:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 );
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3546 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1547 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2548 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:205:16: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt146=3;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:205:18: moleculeamount3
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount2535);
                    moleculeamount3546=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3546.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:205:34: moleculeamount1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount2537);
                    moleculeamount1547=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1547.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:205:52: moleculeamount2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount2541);
                    moleculeamount2548=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2548.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:206:1: molecule : moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount549 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:2: ( moleculeamount -> ^( NODE[\"MOLECULE\"] moleculeamount ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule2562);
            moleculeamount549=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount549.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 207:19: -> ^( NODE[\"MOLECULE\"] moleculeamount )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:207:22: ^( NODE[\"MOLECULE\"] moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class oscarcdType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcdType"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:1: oscarcdType : lrb ( oscarcd | cd ) rrb ;
    public final ChemicalChunkerParser.oscarcdType_return oscarcdType() throws RecognitionException {
        ChemicalChunkerParser.oscarcdType_return retval = new ChemicalChunkerParser.oscarcdType_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb550 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd551 = null;

        ChemicalChunkerParser.cd_return cd552 = null;

        ChemicalChunkerParser.rrb_return rrb553 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:13: ( lrb ( oscarcd | cd ) rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:16: lrb ( oscarcd | cd ) rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_oscarcdType2585);
            lrb550=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb550.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:20: ( oscarcd | cd )
            int alt147=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt147=1;
                }
                break;
            case 127:
                {
                alt147=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }

            switch (alt147) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:21: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_oscarcdType2588);
                    oscarcd551=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd551.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:212:29: cd
                    {
                    pushFollow(FOLLOW_cd_in_oscarcdType2590);
                    cd552=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd552.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rrb_in_oscarcdType2593);
            rrb553=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb553.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcdType"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:213:1: unnamedmoleculeamount1 : quantity inof ( oscarcd | cd ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity554 = null;

        ChemicalChunkerParser.inof_return inof555 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd556 = null;

        ChemicalChunkerParser.cd_return cd557 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:214:2: ( quantity inof ( oscarcd | cd ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:214:4: quantity inof ( oscarcd | cd )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount12602);
            quantity554=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity554.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount12604);
            inof555=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof555.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:214:18: ( oscarcd | cd )
            int alt148=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt148=1;
                }
                break;
            case 127:
                {
                alt148=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }

            switch (alt148) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:214:19: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount12607);
                    oscarcd556=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd556.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:214:27: cd
                    {
                    pushFollow(FOLLOW_cd_in_unnamedmoleculeamount12609);
                    cd557=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd557.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:215:1: unnamedmoleculeamount2 : ( oscarcd | oscarcdType ) ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd558 = null;

        ChemicalChunkerParser.oscarcdType_return oscarcdType559 = null;

        ChemicalChunkerParser.citation_return citation560 = null;

        ChemicalChunkerParser.quantity_return quantity561 = null;

        ChemicalChunkerParser.mixture_return mixture562 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:2: ( ( oscarcd | oscarcdType ) ( citation | quantity | mixture )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:3: ( oscarcd | oscarcdType ) ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:3: ( oscarcd | oscarcdType )
            int alt149=2;
            switch ( input.LA(1) ) {
            case 11:
                {
                alt149=1;
                }
                break;
            case 111:
                {
                alt149=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:4: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_unnamedmoleculeamount22618);
                    oscarcd558=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd558.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:12: oscarcdType
                    {
                    pushFollow(FOLLOW_oscarcdType_in_unnamedmoleculeamount22620);
                    oscarcdType559=oscarcdType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcdType559.getTree());

                    }
                    break;

            }

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:25: ( citation | quantity | mixture )*
            loop150:
            do {
                int alt150=4;
                alt150 = dfa150.predict(input);
                switch (alt150) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:26: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount22624);
            	    citation560=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation560.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:35: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount22626);
            	    quantity561=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity561.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:44: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount22628);
            	    mixture562=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture562.getTree());

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:221:1: unnamedmoleculeamount3 : quantity inof ( ( jj )? noun )+ ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity563 = null;

        ChemicalChunkerParser.inof_return inof564 = null;

        ChemicalChunkerParser.jj_return jj565 = null;

        ChemicalChunkerParser.noun_return noun566 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:2: ( quantity inof ( ( jj )? noun )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:3: quantity inof ( ( jj )? noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount32644);
            quantity563=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity563.getTree());
            pushFollow(FOLLOW_inof_in_unnamedmoleculeamount32646);
            inof564=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof564.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:17: ( ( jj )? noun )+
            int cnt152=0;
            loop152:
            do {
                int alt152=2;
                alt152 = dfa152.predict(input);
                switch (alt152) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:18: ( jj )? noun
            	    {
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:18: ( jj )?
            	    int alt151=2;
            	    switch ( input.LA(1) ) {
            	        case 145:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA151_3 = input.LA(3);

            	                    if ( (synpred424_ChemicalChunker()) ) {
            	                        alt151=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt151) {
            	        case 1 :
            	            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: jj
            	            {
            	            pushFollow(FOLLOW_jj_in_unnamedmoleculeamount32649);
            	            jj565=jj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, jj565.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_noun_in_unnamedmoleculeamount32652);
            	    noun566=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun566.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt152 >= 1 ) break loop152;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(152, input);
                        throw eee;
                }
                cnt152++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class unnamedmoleculeamount4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount4"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:225:1: unnamedmoleculeamount4 : ( quantity | mixture ) nnchementity ;
    public final ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount4_return retval = new ChemicalChunkerParser.unnamedmoleculeamount4_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity567 = null;

        ChemicalChunkerParser.mixture_return mixture568 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity569 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:226:2: ( ( quantity | mixture ) nnchementity )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:226:3: ( quantity | mixture ) nnchementity
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:226:3: ( quantity | mixture )
            int alt153=2;
            switch ( input.LA(1) ) {
            case 111:
                {
                int LA153_1 = input.LA(2);

                if ( (synpred426_ChemicalChunker()) ) {
                    alt153=1;
                }
                else if ( (true) ) {
                    alt153=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 1, input);

                    throw nvae;
                }
                }
                break;
            case 127:
                {
                int LA153_2 = input.LA(2);

                if ( (synpred426_ChemicalChunker()) ) {
                    alt153=1;
                }
                else if ( (true) ) {
                    alt153=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 153, 2, input);

                    throw nvae;
                }
                }
                break;
            case 11:
            case 14:
            case 39:
                {
                alt153=1;
                }
                break;
            case 103:
                {
                alt153=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }

            switch (alt153) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:226:4: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount42665);
                    quantity567=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity567.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:226:13: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount42667);
                    mixture568=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture568.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount42670);
            nnchementity569=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity569.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount4"

    public static class unnamedmoleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:227:1: unnamedmoleculeamount : ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount_return retval = new ChemicalChunkerParser.unnamedmoleculeamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1570 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2571 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3572 = null;

        ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4573 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:2: ( ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:3: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:3: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )
            int alt154=4;
            alt154 = dfa154.predict(input);
            switch (alt154) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:4: unnamedmoleculeamount1
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2679);
                    unnamedmoleculeamount1570=unnamedmoleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1570.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:29: unnamedmoleculeamount2
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2683);
                    unnamedmoleculeamount2571=unnamedmoleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2571.getTree());

                    }
                    break;
                case 3 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:54: unnamedmoleculeamount3
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2687);
                    unnamedmoleculeamount3572=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3572.getTree());

                    }
                    break;
                case 4 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:77: unnamedmoleculeamount4
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2689);
                    unnamedmoleculeamount4573=unnamedmoleculeamount4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount4573.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:231:1: unnamedmolecule : unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeamount_return unnamedmoleculeamount574 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeamount");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:232:2: ( unnamedmoleculeamount -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:232:4: unnamedmoleculeamount
            {
            pushFollow(FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2703);
            unnamedmoleculeamount574=unnamedmoleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeamount.add(unnamedmoleculeamount574.getTree());


            // AST REWRITE
            // elements: unnamedmoleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 232:26: -> ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:232:29: ^( NODE[\"UNNAMEDMOLECULE\"] unnamedmoleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:1: quantity : ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1575 = null;

        ChemicalChunkerParser.quantity2_return quantity2576 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:11: ( ( quantity1 | quantity2 ) -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? ) )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:14: ( quantity1 | quantity2 )
            {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:14: ( quantity1 | quantity2 )
            int alt155=2;
            switch ( input.LA(1) ) {
            case 111:
                {
                alt155=1;
                }
                break;
            case 11:
            case 14:
            case 39:
            case 127:
                {
                alt155=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }

            switch (alt155) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:15: quantity1
                    {
                    pushFollow(FOLLOW_quantity1_in_quantity2726);
                    quantity1575=quantity1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity1.add(quantity1575.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:25: quantity2
                    {
                    pushFollow(FOLLOW_quantity2_in_quantity2728);
                    quantity2576=quantity2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quantity2.add(quantity2576.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: quantity1, quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 234:36: -> ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
            {
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:41: ^( NODE[\"QUANTITY\"] ( quantity1 )? ( quantity2 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NODE, "QUANTITY"), root_1);

                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:61: ( quantity1 )?
                if ( stream_quantity1.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity1.nextTree());

                }
                stream_quantity1.reset();
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:234:72: ( quantity2 )?
                if ( stream_quantity2.hasNext() ) {
                    adaptor.addChild(root_1, stream_quantity2.nextTree());

                }
                stream_quantity2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:236:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb577 = null;

        ChemicalChunkerParser.measurements_return measurements578 = null;

        ChemicalChunkerParser.comma_return comma579 = null;

        ChemicalChunkerParser.measurements_return measurements580 = null;

        ChemicalChunkerParser.comma_return comma581 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase582 = null;

        ChemicalChunkerParser.stop_return stop583 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase584 = null;

        ChemicalChunkerParser.rrb_return rrb585 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:237:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:237:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12754);
            lrb577=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb577.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12756);
            measurements578=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements578.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:237:21: ( comma measurements )*
            loop156:
            do {
                int alt156=2;
                switch ( input.LA(1) ) {
                case 103:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 11:
                        case 14:
                        case 39:
                        case 127:
                            {
                            alt156=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt156) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:237:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12759);
            	    comma579=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma579.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12762);
            	    measurements580=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements580.getTree());

            	    }
            	    break;

            	default :
            	    break loop156;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:237:44: ( comma preparationphrase )*
            loop157:
            do {
                int alt157=2;
                switch ( input.LA(1) ) {
                case 103:
                    {
                    alt157=1;
                    }
                    break;

                }

                switch (alt157) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:237:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12767);
            	    comma581=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma581.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12769);
            	    preparationphrase582=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase582.getTree());

            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:237:71: ( stop preparationphrase )*
            loop158:
            do {
                int alt158=2;
                switch ( input.LA(1) ) {
                case 107:
                    {
                    alt158=1;
                    }
                    break;

                }

                switch (alt158) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:237:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12774);
            	    stop583=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop583.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12776);
            	    preparationphrase584=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase584.getTree());

            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12781);
            rrb585=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb585.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:239:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements586 = null;

        ChemicalChunkerParser.comma_return comma587 = null;

        ChemicalChunkerParser.measurements_return measurements588 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:2: ( measurements ( comma measurements )* )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22793);
            measurements586=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements586.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:18: ( comma measurements )*
            loop159:
            do {
                int alt159=2;
                alt159 = dfa159.predict(input);
                switch (alt159) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22796);
            	    comma587=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma587.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22799);
            	    measurements588=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements588.getTree());

            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:241:1: method : ( nngeneral | nn )? nnmethod ( oscarcd | cd )? ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral589 = null;

        ChemicalChunkerParser.nn_return nn590 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod591 = null;

        ChemicalChunkerParser.oscarcd_return oscarcd592 = null;

        ChemicalChunkerParser.cd_return cd593 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:241:7: ( ( nngeneral | nn )? nnmethod ( oscarcd | cd )? )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:242:5: ( nngeneral | nn )? nnmethod ( oscarcd | cd )?
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:242:5: ( nngeneral | nn )?
            int alt160=3;
            switch ( input.LA(1) ) {
                case 47:
                    {
                    alt160=1;
                    }
                    break;
                case 151:
                    {
                    alt160=2;
                    }
                    break;
            }

            switch (alt160) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:242:6: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_method2814);
                    nngeneral589=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral589.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:242:16: nn
                    {
                    pushFollow(FOLLOW_nn_in_method2816);
                    nn590=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn590.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnmethod_in_method2820);
            nnmethod591=nnmethod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod591.getTree());
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:242:30: ( oscarcd | cd )?
            int alt161=3;
            switch ( input.LA(1) ) {
                case 11:
                    {
                    alt161=1;
                    }
                    break;
                case 127:
                    {
                    alt161=2;
                    }
                    break;
            }

            switch (alt161) {
                case 1 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:242:31: oscarcd
                    {
                    pushFollow(FOLLOW_oscarcd_in_method2823);
                    oscarcd592=oscarcd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcd592.getTree());

                    }
                    break;
                case 2 :
                    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:242:39: cd
                    {
                    pushFollow(FOLLOW_cd_in_method2825);
                    cd593=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd593.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "brackets"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:243:5: brackets : ( lrb | rrb | lsqb | rsqb )+ ;
    public final ChemicalChunkerParser.brackets_return brackets() throws RecognitionException {
        ChemicalChunkerParser.brackets_return retval = new ChemicalChunkerParser.brackets_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb594 = null;

        ChemicalChunkerParser.rrb_return rrb595 = null;

        ChemicalChunkerParser.lsqb_return lsqb596 = null;

        ChemicalChunkerParser.rsqb_return rsqb597 = null;



        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:6: ( ( lrb | rrb | lsqb | rsqb )+ )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:8: ( lrb | rrb | lsqb | rsqb )+
            {
            root_0 = (Object)adaptor.nil();

            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:8: ( lrb | rrb | lsqb | rsqb )+
            int cnt162=0;
            loop162:
            do {
                int alt162=5;
                alt162 = dfa162.predict(input);
                switch (alt162) {
            	case 1 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:9: lrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_brackets2847);
            	    lrb594=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb594.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:13: rrb
            	    {
            	    pushFollow(FOLLOW_rrb_in_brackets2849);
            	    rrb595=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb595.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:17: lsqb
            	    {
            	    pushFollow(FOLLOW_lsqb_in_brackets2851);
            	    lsqb596=lsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb596.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:22: rsqb
            	    {
            	    pushFollow(FOLLOW_rsqb_in_brackets2853);
            	    rsqb597=rsqb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb597.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt162 >= 1 ) break loop162;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(162, input);
                        throw eee;
                }
                cnt162++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "brackets"

    public static class oscarcd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:1: oscarcd : 'OSCAR-CD' TOKEN ;
    public final ChemicalChunkerParser.oscarcd_return oscarcd() throws RecognitionException {
        ChemicalChunkerParser.oscarcd_return retval = new ChemicalChunkerParser.oscarcd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal598=null;
        Token TOKEN599=null;

        Object string_literal598_tree=null;
        Object TOKEN599_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:8: ( 'OSCAR-CD' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:251:9: 'OSCAR-CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal598=(Token)match(input,11,FOLLOW_11_in_oscarcd2866); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal598_tree = (Object)adaptor.create(string_literal598);
            adaptor.addChild(root_0, string_literal598_tree);
            }
            TOKEN599=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcd2868); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN599_tree = (Object)adaptor.create(TOKEN599);
            adaptor.addChild(root_0, TOKEN599_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcd"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:252:1: oscarcj : 'OSCAR-CJ' TOKEN ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal600=null;
        Token TOKEN601=null;

        Object string_literal600_tree=null;
        Object TOKEN601_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:252:8: ( 'OSCAR-CJ' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:252:9: 'OSCAR-CJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal600=(Token)match(input,12,FOLLOW_12_in_oscarcj2873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal600_tree = (Object)adaptor.create(string_literal600);
            adaptor.addChild(root_0, string_literal600_tree);
            }
            TOKEN601=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj2875); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN601_tree = (Object)adaptor.create(TOKEN601);
            adaptor.addChild(root_0, TOKEN601_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:1: oscarrn : 'OSCAR-RN' TOKEN ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal602=null;
        Token TOKEN603=null;

        Object string_literal602_tree=null;
        Object TOKEN603_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:8: ( 'OSCAR-RN' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:253:9: 'OSCAR-RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal602=(Token)match(input,13,FOLLOW_13_in_oscarrn2880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal602_tree = (Object)adaptor.create(string_literal602);
            adaptor.addChild(root_0, string_literal602_tree);
            }
            TOKEN603=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn2882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN603_tree = (Object)adaptor.create(TOKEN603);
            adaptor.addChild(root_0, TOKEN603_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarcpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcpr"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:254:1: oscarcpr : 'OSCAR-CPR' TOKEN ;
    public final ChemicalChunkerParser.oscarcpr_return oscarcpr() throws RecognitionException {
        ChemicalChunkerParser.oscarcpr_return retval = new ChemicalChunkerParser.oscarcpr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal604=null;
        Token TOKEN605=null;

        Object string_literal604_tree=null;
        Object TOKEN605_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:254:9: ( 'OSCAR-CPR' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:254:10: 'OSCAR-CPR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal604=(Token)match(input,14,FOLLOW_14_in_oscarcpr2887); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal604_tree = (Object)adaptor.create(string_literal604);
            adaptor.addChild(root_0, string_literal604_tree);
            }
            TOKEN605=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcpr2889); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN605_tree = (Object)adaptor.create(TOKEN605);
            adaptor.addChild(root_0, TOKEN605_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcpr"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:255:1: oscaront : 'OSCAR-ONT' TOKEN ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal606=null;
        Token TOKEN607=null;

        Object string_literal606_tree=null;
        Object TOKEN607_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:255:9: ( 'OSCAR-ONT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:255:11: 'OSCAR-ONT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal606=(Token)match(input,15,FOLLOW_15_in_oscaront2895); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal606_tree = (Object)adaptor.create(string_literal606);
            adaptor.addChild(root_0, string_literal606_tree);
            }
            TOKEN607=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront2897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN607_tree = (Object)adaptor.create(TOKEN607);
            adaptor.addChild(root_0, TOKEN607_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:256:1: tmunicode : 'TM-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal608=null;
        Token TOKEN609=null;

        Object string_literal608_tree=null;
        Object TOKEN609_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:256:10: ( 'TM-UNICODE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:256:11: 'TM-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal608=(Token)match(input,16,FOLLOW_16_in_tmunicode2902); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal608_tree = (Object)adaptor.create(string_literal608);
            adaptor.addChild(root_0, string_literal608_tree);
            }
            TOKEN609=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode2904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN609_tree = (Object)adaptor.create(TOKEN609);
            adaptor.addChild(root_0, TOKEN609_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:1: cdunicode : 'CD-UNICODE' TOKEN ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal610=null;
        Token TOKEN611=null;

        Object string_literal610_tree=null;
        Object TOKEN611_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:10: ( 'CD-UNICODE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:257:11: 'CD-UNICODE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal610=(Token)match(input,17,FOLLOW_17_in_cdunicode2909); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal610_tree = (Object)adaptor.create(string_literal610);
            adaptor.addChild(root_0, string_literal610_tree);
            }
            TOKEN611=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode2911); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN611_tree = (Object)adaptor.create(TOKEN611);
            adaptor.addChild(root_0, TOKEN611_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:258:1: jjchem : 'JJ-CHEM' TOKEN ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal612=null;
        Token TOKEN613=null;

        Object string_literal612_tree=null;
        Object TOKEN613_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:258:7: ( 'JJ-CHEM' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:258:9: 'JJ-CHEM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal612=(Token)match(input,18,FOLLOW_18_in_jjchem2917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal612_tree = (Object)adaptor.create(string_literal612);
            adaptor.addChild(root_0, string_literal612_tree);
            }
            TOKEN613=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem2920); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN613_tree = (Object)adaptor.create(TOKEN613);
            adaptor.addChild(root_0, TOKEN613_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:261:1: inas : 'IN-AS' TOKEN ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal614=null;
        Token TOKEN615=null;

        Object string_literal614_tree=null;
        Object TOKEN615_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:261:5: ( 'IN-AS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:261:6: 'IN-AS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal614=(Token)match(input,19,FOLLOW_19_in_inas2927); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal614_tree = (Object)adaptor.create(string_literal614);
            adaptor.addChild(root_0, string_literal614_tree);
            }
            TOKEN615=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas2929); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN615_tree = (Object)adaptor.create(TOKEN615);
            adaptor.addChild(root_0, TOKEN615_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:262:1: inbefore : 'IN-BEFORE' TOKEN ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal616=null;
        Token TOKEN617=null;

        Object string_literal616_tree=null;
        Object TOKEN617_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:262:9: ( 'IN-BEFORE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:262:10: 'IN-BEFORE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal616=(Token)match(input,20,FOLLOW_20_in_inbefore2934); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal616_tree = (Object)adaptor.create(string_literal616);
            adaptor.addChild(root_0, string_literal616_tree);
            }
            TOKEN617=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore2936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN617_tree = (Object)adaptor.create(TOKEN617);
            adaptor.addChild(root_0, TOKEN617_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:1: inafter : 'IN-AFTER' TOKEN ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal618=null;
        Token TOKEN619=null;

        Object string_literal618_tree=null;
        Object TOKEN619_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:8: ( 'IN-AFTER' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:263:9: 'IN-AFTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal618=(Token)match(input,21,FOLLOW_21_in_inafter2941); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal618_tree = (Object)adaptor.create(string_literal618);
            adaptor.addChild(root_0, string_literal618_tree);
            }
            TOKEN619=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter2943); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN619_tree = (Object)adaptor.create(TOKEN619);
            adaptor.addChild(root_0, TOKEN619_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:264:1: inin : 'IN-IN' TOKEN ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal620=null;
        Token TOKEN621=null;

        Object string_literal620_tree=null;
        Object TOKEN621_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:264:5: ( 'IN-IN' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:264:6: 'IN-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal620=(Token)match(input,22,FOLLOW_22_in_inin2948); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal620_tree = (Object)adaptor.create(string_literal620);
            adaptor.addChild(root_0, string_literal620_tree);
            }
            TOKEN621=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin2950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN621_tree = (Object)adaptor.create(TOKEN621);
            adaptor.addChild(root_0, TOKEN621_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:265:1: ininto : 'IN-INTO' TOKEN ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal622=null;
        Token TOKEN623=null;

        Object string_literal622_tree=null;
        Object TOKEN623_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:265:7: ( 'IN-INTO' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:265:8: 'IN-INTO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal622=(Token)match(input,23,FOLLOW_23_in_ininto2955); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal622_tree = (Object)adaptor.create(string_literal622);
            adaptor.addChild(root_0, string_literal622_tree);
            }
            TOKEN623=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto2957); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN623_tree = (Object)adaptor.create(TOKEN623);
            adaptor.addChild(root_0, TOKEN623_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:266:1: inwith : 'IN-WITH' TOKEN ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal624=null;
        Token TOKEN625=null;

        Object string_literal624_tree=null;
        Object TOKEN625_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:266:7: ( 'IN-WITH' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:266:8: 'IN-WITH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal624=(Token)match(input,24,FOLLOW_24_in_inwith2962); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal624_tree = (Object)adaptor.create(string_literal624);
            adaptor.addChild(root_0, string_literal624_tree);
            }
            TOKEN625=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith2964); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN625_tree = (Object)adaptor.create(TOKEN625);
            adaptor.addChild(root_0, TOKEN625_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:267:1: inwithout : 'IN-WITHOUT' TOKEN ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal626=null;
        Token TOKEN627=null;

        Object string_literal626_tree=null;
        Object TOKEN627_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:267:10: ( 'IN-WITHOUT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:267:11: 'IN-WITHOUT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal626=(Token)match(input,25,FOLLOW_25_in_inwithout2969); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal626_tree = (Object)adaptor.create(string_literal626);
            adaptor.addChild(root_0, string_literal626_tree);
            }
            TOKEN627=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout2971); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN627_tree = (Object)adaptor.create(TOKEN627);
            adaptor.addChild(root_0, TOKEN627_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:268:1: inby : 'IN-BY' TOKEN ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal628=null;
        Token TOKEN629=null;

        Object string_literal628_tree=null;
        Object TOKEN629_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:268:5: ( 'IN-BY' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:268:6: 'IN-BY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal628=(Token)match(input,26,FOLLOW_26_in_inby2976); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal628_tree = (Object)adaptor.create(string_literal628);
            adaptor.addChild(root_0, string_literal628_tree);
            }
            TOKEN629=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby2978); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN629_tree = (Object)adaptor.create(TOKEN629);
            adaptor.addChild(root_0, TOKEN629_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:269:1: invia : 'IN-VIA' TOKEN ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal630=null;
        Token TOKEN631=null;

        Object string_literal630_tree=null;
        Object TOKEN631_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:269:6: ( 'IN-VIA' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:269:7: 'IN-VIA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal630=(Token)match(input,27,FOLLOW_27_in_invia2983); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal630_tree = (Object)adaptor.create(string_literal630);
            adaptor.addChild(root_0, string_literal630_tree);
            }
            TOKEN631=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia2985); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN631_tree = (Object)adaptor.create(TOKEN631);
            adaptor.addChild(root_0, TOKEN631_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:270:1: inof : 'IN-OF' TOKEN ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal632=null;
        Token TOKEN633=null;

        Object string_literal632_tree=null;
        Object TOKEN633_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:270:5: ( 'IN-OF' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:270:6: 'IN-OF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal632=(Token)match(input,28,FOLLOW_28_in_inof2990); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal632_tree = (Object)adaptor.create(string_literal632);
            adaptor.addChild(root_0, string_literal632_tree);
            }
            TOKEN633=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof2992); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN633_tree = (Object)adaptor.create(TOKEN633);
            adaptor.addChild(root_0, TOKEN633_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:271:1: inon : 'IN-ON' TOKEN ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal634=null;
        Token TOKEN635=null;

        Object string_literal634_tree=null;
        Object TOKEN635_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:271:5: ( 'IN-ON' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:271:6: 'IN-ON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal634=(Token)match(input,29,FOLLOW_29_in_inon2997); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal634_tree = (Object)adaptor.create(string_literal634);
            adaptor.addChild(root_0, string_literal634_tree);
            }
            TOKEN635=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon2999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN635_tree = (Object)adaptor.create(TOKEN635);
            adaptor.addChild(root_0, TOKEN635_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:1: infor : 'IN-FOR' TOKEN ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal636=null;
        Token TOKEN637=null;

        Object string_literal636_tree=null;
        Object TOKEN637_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:6: ( 'IN-FOR' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:272:7: 'IN-FOR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal636=(Token)match(input,30,FOLLOW_30_in_infor3004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal636_tree = (Object)adaptor.create(string_literal636);
            adaptor.addChild(root_0, string_literal636_tree);
            }
            TOKEN637=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN637_tree = (Object)adaptor.create(TOKEN637);
            adaptor.addChild(root_0, TOKEN637_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:273:1: infrom : 'IN-FROM' TOKEN ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal638=null;
        Token TOKEN639=null;

        Object string_literal638_tree=null;
        Object TOKEN639_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:273:7: ( 'IN-FROM' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:273:8: 'IN-FROM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal638=(Token)match(input,31,FOLLOW_31_in_infrom3011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal638_tree = (Object)adaptor.create(string_literal638);
            adaptor.addChild(root_0, string_literal638_tree);
            }
            TOKEN639=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3013); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN639_tree = (Object)adaptor.create(TOKEN639);
            adaptor.addChild(root_0, TOKEN639_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:1: inunder : 'IN-UNDER' TOKEN ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal640=null;
        Token TOKEN641=null;

        Object string_literal640_tree=null;
        Object TOKEN641_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:8: ( 'IN-UNDER' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:274:9: 'IN-UNDER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal640=(Token)match(input,32,FOLLOW_32_in_inunder3018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal640_tree = (Object)adaptor.create(string_literal640);
            adaptor.addChild(root_0, string_literal640_tree);
            }
            TOKEN641=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3020); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN641_tree = (Object)adaptor.create(TOKEN641);
            adaptor.addChild(root_0, TOKEN641_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:275:1: inover : 'IN-OVER' TOKEN ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal642=null;
        Token TOKEN643=null;

        Object string_literal642_tree=null;
        Object TOKEN643_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:275:7: ( 'IN-OVER' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:275:8: 'IN-OVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal642=(Token)match(input,33,FOLLOW_33_in_inover3025); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal642_tree = (Object)adaptor.create(string_literal642);
            adaptor.addChild(root_0, string_literal642_tree);
            }
            TOKEN643=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3027); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN643_tree = (Object)adaptor.create(TOKEN643);
            adaptor.addChild(root_0, TOKEN643_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:276:1: inoff : 'IN-OFF' TOKEN ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal644=null;
        Token TOKEN645=null;

        Object string_literal644_tree=null;
        Object TOKEN645_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:276:6: ( 'IN-OFF' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:276:7: 'IN-OFF' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal644=(Token)match(input,34,FOLLOW_34_in_inoff3032); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal644_tree = (Object)adaptor.create(string_literal644);
            adaptor.addChild(root_0, string_literal644_tree);
            }
            TOKEN645=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3034); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN645_tree = (Object)adaptor.create(TOKEN645);
            adaptor.addChild(root_0, TOKEN645_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:1: nnexample : 'NN-EXAMPLE' TOKEN ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal646=null;
        Token TOKEN647=null;

        Object string_literal646_tree=null;
        Object TOKEN647_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:10: ( 'NN-EXAMPLE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:279:11: 'NN-EXAMPLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal646=(Token)match(input,35,FOLLOW_35_in_nnexample3041); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal646_tree = (Object)adaptor.create(string_literal646);
            adaptor.addChild(root_0, string_literal646_tree);
            }
            TOKEN647=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample3043); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN647_tree = (Object)adaptor.create(TOKEN647);
            adaptor.addChild(root_0, TOKEN647_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:280:1: nnstate : 'NN-STATE' TOKEN ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal648=null;
        Token TOKEN649=null;

        Object string_literal648_tree=null;
        Object TOKEN649_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:280:8: ( 'NN-STATE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:280:9: 'NN-STATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal648=(Token)match(input,36,FOLLOW_36_in_nnstate3048); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal648_tree = (Object)adaptor.create(string_literal648);
            adaptor.addChild(root_0, string_literal648_tree);
            }
            TOKEN649=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3050); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN649_tree = (Object)adaptor.create(TOKEN649);
            adaptor.addChild(root_0, TOKEN649_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:1: nntime : 'NN-TIME' TOKEN ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal650=null;
        Token TOKEN651=null;

        Object string_literal650_tree=null;
        Object TOKEN651_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:7: ( 'NN-TIME' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:281:8: 'NN-TIME' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal650=(Token)match(input,37,FOLLOW_37_in_nntime3055); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal650_tree = (Object)adaptor.create(string_literal650);
            adaptor.addChild(root_0, string_literal650_tree);
            }
            TOKEN651=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3057); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN651_tree = (Object)adaptor.create(TOKEN651);
            adaptor.addChild(root_0, TOKEN651_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:282:1: nnmass : 'NN-MASS' TOKEN ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal652=null;
        Token TOKEN653=null;

        Object string_literal652_tree=null;
        Object TOKEN653_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:282:7: ( 'NN-MASS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:282:8: 'NN-MASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal652=(Token)match(input,38,FOLLOW_38_in_nnmass3062); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal652_tree = (Object)adaptor.create(string_literal652);
            adaptor.addChild(root_0, string_literal652_tree);
            }
            TOKEN653=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN653_tree = (Object)adaptor.create(TOKEN653);
            adaptor.addChild(root_0, TOKEN653_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:1: nnmolar : 'NN-MOLAR' TOKEN ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal654=null;
        Token TOKEN655=null;

        Object string_literal654_tree=null;
        Object TOKEN655_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:8: ( 'NN-MOLAR' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:283:10: 'NN-MOLAR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal654=(Token)match(input,39,FOLLOW_39_in_nnmolar3070); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal654_tree = (Object)adaptor.create(string_literal654);
            adaptor.addChild(root_0, string_literal654_tree);
            }
            TOKEN655=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3073); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN655_tree = (Object)adaptor.create(TOKEN655);
            adaptor.addChild(root_0, TOKEN655_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:1: nnamount : 'NN-AMOUNT' TOKEN ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal656=null;
        Token TOKEN657=null;

        Object string_literal656_tree=null;
        Object TOKEN657_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:9: ( 'NN-AMOUNT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:284:10: 'NN-AMOUNT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal656=(Token)match(input,40,FOLLOW_40_in_nnamount3078); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal656_tree = (Object)adaptor.create(string_literal656);
            adaptor.addChild(root_0, string_literal656_tree);
            }
            TOKEN657=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3080); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN657_tree = (Object)adaptor.create(TOKEN657);
            adaptor.addChild(root_0, TOKEN657_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:285:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal658=null;
        Token TOKEN659=null;

        Object string_literal658_tree=null;
        Object TOKEN659_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:285:13: ( 'NN-ATMOSPHERE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:285:14: 'NN-ATMOSPHERE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal658=(Token)match(input,41,FOLLOW_41_in_nnatmosphere3085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal658_tree = (Object)adaptor.create(string_literal658);
            adaptor.addChild(root_0, string_literal658_tree);
            }
            TOKEN659=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN659_tree = (Object)adaptor.create(TOKEN659);
            adaptor.addChild(root_0, TOKEN659_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:286:1: nneq : 'NN-EQ' TOKEN ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal660=null;
        Token TOKEN661=null;

        Object string_literal660_tree=null;
        Object TOKEN661_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:286:5: ( 'NN-EQ' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:286:6: 'NN-EQ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal660=(Token)match(input,42,FOLLOW_42_in_nneq3092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal660_tree = (Object)adaptor.create(string_literal660);
            adaptor.addChild(root_0, string_literal660_tree);
            }
            TOKEN661=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3094); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN661_tree = (Object)adaptor.create(TOKEN661);
            adaptor.addChild(root_0, TOKEN661_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:287:1: nnvol : 'NN-VOL' TOKEN ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal662=null;
        Token TOKEN663=null;

        Object string_literal662_tree=null;
        Object TOKEN663_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:287:6: ( 'NN-VOL' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:287:7: 'NN-VOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal662=(Token)match(input,43,FOLLOW_43_in_nnvol3099); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal662_tree = (Object)adaptor.create(string_literal662);
            adaptor.addChild(root_0, string_literal662_tree);
            }
            TOKEN663=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3101); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN663_tree = (Object)adaptor.create(TOKEN663);
            adaptor.addChild(root_0, TOKEN663_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:288:1: nnchementity : 'NN-CHEMENTITY' TOKEN ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal664=null;
        Token TOKEN665=null;

        Object string_literal664_tree=null;
        Object TOKEN665_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:288:13: ( 'NN-CHEMENTITY' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:288:14: 'NN-CHEMENTITY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal664=(Token)match(input,44,FOLLOW_44_in_nnchementity3106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal664_tree = (Object)adaptor.create(string_literal664);
            adaptor.addChild(root_0, string_literal664_tree);
            }
            TOKEN665=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3108); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN665_tree = (Object)adaptor.create(TOKEN665);
            adaptor.addChild(root_0, TOKEN665_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:289:1: nntemp : 'NN-TEMP' TOKEN ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal666=null;
        Token TOKEN667=null;

        Object string_literal666_tree=null;
        Object TOKEN667_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:289:7: ( 'NN-TEMP' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:289:8: 'NN-TEMP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal666=(Token)match(input,45,FOLLOW_45_in_nntemp3113); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal666_tree = (Object)adaptor.create(string_literal666);
            adaptor.addChild(root_0, string_literal666_tree);
            }
            TOKEN667=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3115); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN667_tree = (Object)adaptor.create(TOKEN667);
            adaptor.addChild(root_0, TOKEN667_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:1: nnflash : 'NN-FLASH' TOKEN ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal668=null;
        Token TOKEN669=null;

        Object string_literal668_tree=null;
        Object TOKEN669_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:8: ( 'NN-FLASH' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:290:9: 'NN-FLASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal668=(Token)match(input,46,FOLLOW_46_in_nnflash3120); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal668_tree = (Object)adaptor.create(string_literal668);
            adaptor.addChild(root_0, string_literal668_tree);
            }
            TOKEN669=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3122); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN669_tree = (Object)adaptor.create(TOKEN669);
            adaptor.addChild(root_0, TOKEN669_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:291:1: nngeneral : 'NN-GENERAL' TOKEN ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal670=null;
        Token TOKEN671=null;

        Object string_literal670_tree=null;
        Object TOKEN671_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:291:10: ( 'NN-GENERAL' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:291:11: 'NN-GENERAL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal670=(Token)match(input,47,FOLLOW_47_in_nngeneral3127); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal670_tree = (Object)adaptor.create(string_literal670);
            adaptor.addChild(root_0, string_literal670_tree);
            }
            TOKEN671=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral3129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN671_tree = (Object)adaptor.create(TOKEN671);
            adaptor.addChild(root_0, TOKEN671_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:292:1: nnmethod : 'NN-METHOD' TOKEN ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal672=null;
        Token TOKEN673=null;

        Object string_literal672_tree=null;
        Object TOKEN673_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:292:9: ( 'NN-METHOD' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:292:10: 'NN-METHOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal672=(Token)match(input,48,FOLLOW_48_in_nnmethod3134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal672_tree = (Object)adaptor.create(string_literal672);
            adaptor.addChild(root_0, string_literal672_tree);
            }
            TOKEN673=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod3136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN673_tree = (Object)adaptor.create(TOKEN673);
            adaptor.addChild(root_0, TOKEN673_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:1: nnpressure : 'NN-PRESSURE' TOKEN ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal674=null;
        Token TOKEN675=null;

        Object string_literal674_tree=null;
        Object TOKEN675_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:11: ( 'NN-PRESSURE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:293:12: 'NN-PRESSURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal674=(Token)match(input,49,FOLLOW_49_in_nnpressure3141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal674_tree = (Object)adaptor.create(string_literal674);
            adaptor.addChild(root_0, string_literal674_tree);
            }
            TOKEN675=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure3143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN675_tree = (Object)adaptor.create(TOKEN675);
            adaptor.addChild(root_0, TOKEN675_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:294:1: nncolumn : 'NN-COLUMN' TOKEN ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal676=null;
        Token TOKEN677=null;

        Object string_literal676_tree=null;
        Object TOKEN677_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:294:9: ( 'NN-COLUMN' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:294:10: 'NN-COLUMN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal676=(Token)match(input,50,FOLLOW_50_in_nncolumn3148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal676_tree = (Object)adaptor.create(string_literal676);
            adaptor.addChild(root_0, string_literal676_tree);
            }
            TOKEN677=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn3150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN677_tree = (Object)adaptor.create(TOKEN677);
            adaptor.addChild(root_0, TOKEN677_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:295:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal678=null;
        Token TOKEN679=null;

        Object string_literal678_tree=null;
        Object TOKEN679_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:295:17: ( 'NN-CHROMATOGRAPHY' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:295:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal678=(Token)match(input,51,FOLLOW_51_in_nnchromatography3155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal678_tree = (Object)adaptor.create(string_literal678);
            adaptor.addChild(root_0, string_literal678_tree);
            }
            TOKEN679=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography3157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN679_tree = (Object)adaptor.create(TOKEN679);
            adaptor.addChild(root_0, TOKEN679_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:1: nnvacuum : 'NN-VACUUM' TOKEN ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal680=null;
        Token TOKEN681=null;

        Object string_literal680_tree=null;
        Object TOKEN681_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:9: ( 'NN-VACUUM' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:296:10: 'NN-VACUUM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal680=(Token)match(input,52,FOLLOW_52_in_nnvacuum3162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal680_tree = (Object)adaptor.create(string_literal680);
            adaptor.addChild(root_0, string_literal680_tree);
            }
            TOKEN681=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum3164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN681_tree = (Object)adaptor.create(TOKEN681);
            adaptor.addChild(root_0, TOKEN681_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:297:1: nncycle : 'NN-CYCLE' TOKEN ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal682=null;
        Token TOKEN683=null;

        Object string_literal682_tree=null;
        Object TOKEN683_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:297:8: ( 'NN-CYCLE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:297:9: 'NN-CYCLE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal682=(Token)match(input,53,FOLLOW_53_in_nncycle3169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal682_tree = (Object)adaptor.create(string_literal682);
            adaptor.addChild(root_0, string_literal682_tree);
            }
            TOKEN683=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle3171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN683_tree = (Object)adaptor.create(TOKEN683);
            adaptor.addChild(root_0, TOKEN683_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:298:1: nntimes : 'NN-TIMES' TOKEN ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal684=null;
        Token TOKEN685=null;

        Object string_literal684_tree=null;
        Object TOKEN685_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:298:8: ( 'NN-TIMES' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:298:9: 'NN-TIMES' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal684=(Token)match(input,54,FOLLOW_54_in_nntimes3176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal684_tree = (Object)adaptor.create(string_literal684);
            adaptor.addChild(root_0, string_literal684_tree);
            }
            TOKEN685=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes3178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN685_tree = (Object)adaptor.create(TOKEN685);
            adaptor.addChild(root_0, TOKEN685_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:1: oscarcm : 'OSCAR-CM' TOKEN ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal686=null;
        Token TOKEN687=null;

        Object string_literal686_tree=null;
        Object TOKEN687_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:8: ( 'OSCAR-CM' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:301:9: 'OSCAR-CM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal686=(Token)match(input,55,FOLLOW_55_in_oscarcm3185); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal686_tree = (Object)adaptor.create(string_literal686);
            adaptor.addChild(root_0, string_literal686_tree);
            }
            TOKEN687=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm3187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN687_tree = (Object)adaptor.create(TOKEN687);
            adaptor.addChild(root_0, TOKEN687_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:304:1: vbuse : 'VB-USE' TOKEN ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal688=null;
        Token TOKEN689=null;

        Object string_literal688_tree=null;
        Object TOKEN689_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:304:6: ( 'VB-USE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:304:7: 'VB-USE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal688=(Token)match(input,56,FOLLOW_56_in_vbuse3194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal688_tree = (Object)adaptor.create(string_literal688);
            adaptor.addChild(root_0, string_literal688_tree);
            }
            TOKEN689=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse3196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN689_tree = (Object)adaptor.create(TOKEN689);
            adaptor.addChild(root_0, TOKEN689_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:305:1: vbchange : 'VB-CHANGE' TOKEN ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal690=null;
        Token TOKEN691=null;

        Object string_literal690_tree=null;
        Object TOKEN691_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:305:9: ( 'VB-CHANGE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:305:10: 'VB-CHANGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal690=(Token)match(input,57,FOLLOW_57_in_vbchange3201); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal690_tree = (Object)adaptor.create(string_literal690);
            adaptor.addChild(root_0, string_literal690_tree);
            }
            TOKEN691=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange3203); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN691_tree = (Object)adaptor.create(TOKEN691);
            adaptor.addChild(root_0, TOKEN691_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:306:1: vbsubmerge : 'VB-SUBMERGE' TOKEN ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal692=null;
        Token TOKEN693=null;

        Object string_literal692_tree=null;
        Object TOKEN693_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:306:11: ( 'VB-SUBMERGE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:306:12: 'VB-SUBMERGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal692=(Token)match(input,58,FOLLOW_58_in_vbsubmerge3208); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal692_tree = (Object)adaptor.create(string_literal692);
            adaptor.addChild(root_0, string_literal692_tree);
            }
            TOKEN693=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge3210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN693_tree = (Object)adaptor.create(TOKEN693);
            adaptor.addChild(root_0, TOKEN693_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:307:1: vbsubject : 'VB-SUBJECT' TOKEN ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal694=null;
        Token TOKEN695=null;

        Object string_literal694_tree=null;
        Object TOKEN695_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:307:10: ( 'VB-SUBJECT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:307:11: 'VB-SUBJECT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal694=(Token)match(input,59,FOLLOW_59_in_vbsubject3215); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal694_tree = (Object)adaptor.create(string_literal694);
            adaptor.addChild(root_0, string_literal694_tree);
            }
            TOKEN695=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject3217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN695_tree = (Object)adaptor.create(TOKEN695);
            adaptor.addChild(root_0, TOKEN695_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:1: nnadd : 'NN-ADD' TOKEN ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal696=null;
        Token TOKEN697=null;

        Object string_literal696_tree=null;
        Object TOKEN697_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:6: ( 'NN-ADD' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:310:7: 'NN-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal696=(Token)match(input,60,FOLLOW_60_in_nnadd3224); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal696_tree = (Object)adaptor.create(string_literal696);
            adaptor.addChild(root_0, string_literal696_tree);
            }
            TOKEN697=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd3226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN697_tree = (Object)adaptor.create(TOKEN697);
            adaptor.addChild(root_0, TOKEN697_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:311:1: nnmixture : 'NN-MIXTURE' TOKEN ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal698=null;
        Token TOKEN699=null;

        Object string_literal698_tree=null;
        Object TOKEN699_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:311:10: ( 'NN-MIXTURE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:311:11: 'NN-MIXTURE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal698=(Token)match(input,61,FOLLOW_61_in_nnmixture3231); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal698_tree = (Object)adaptor.create(string_literal698);
            adaptor.addChild(root_0, string_literal698_tree);
            }
            TOKEN699=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture3233); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN699_tree = (Object)adaptor.create(TOKEN699);
            adaptor.addChild(root_0, TOKEN699_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:312:1: vbdilute : 'VB-DILUTE' TOKEN ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal700=null;
        Token TOKEN701=null;

        Object string_literal700_tree=null;
        Object TOKEN701_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:312:9: ( 'VB-DILUTE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:312:10: 'VB-DILUTE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal700=(Token)match(input,62,FOLLOW_62_in_vbdilute3238); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal700_tree = (Object)adaptor.create(string_literal700);
            adaptor.addChild(root_0, string_literal700_tree);
            }
            TOKEN701=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute3240); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN701_tree = (Object)adaptor.create(TOKEN701);
            adaptor.addChild(root_0, TOKEN701_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:1: vbadd : 'VB-ADD' TOKEN ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal702=null;
        Token TOKEN703=null;

        Object string_literal702_tree=null;
        Object TOKEN703_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:6: ( 'VB-ADD' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:313:7: 'VB-ADD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal702=(Token)match(input,63,FOLLOW_63_in_vbadd3246); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal702_tree = (Object)adaptor.create(string_literal702);
            adaptor.addChild(root_0, string_literal702_tree);
            }
            TOKEN703=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd3248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN703_tree = (Object)adaptor.create(TOKEN703);
            adaptor.addChild(root_0, TOKEN703_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:314:1: vbcharge : 'VB-CHARGE' TOKEN ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal704=null;
        Token TOKEN705=null;

        Object string_literal704_tree=null;
        Object TOKEN705_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:314:9: ( 'VB-CHARGE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:314:10: 'VB-CHARGE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal704=(Token)match(input,64,FOLLOW_64_in_vbcharge3253); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal704_tree = (Object)adaptor.create(string_literal704);
            adaptor.addChild(root_0, string_literal704_tree);
            }
            TOKEN705=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge3255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN705_tree = (Object)adaptor.create(TOKEN705);
            adaptor.addChild(root_0, TOKEN705_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:315:1: vbcontain : 'VB-CONTAIN' TOKEN ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal706=null;
        Token TOKEN707=null;

        Object string_literal706_tree=null;
        Object TOKEN707_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:315:10: ( 'VB-CONTAIN' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:315:11: 'VB-CONTAIN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal706=(Token)match(input,65,FOLLOW_65_in_vbcontain3260); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal706_tree = (Object)adaptor.create(string_literal706);
            adaptor.addChild(root_0, string_literal706_tree);
            }
            TOKEN707=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain3262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN707_tree = (Object)adaptor.create(TOKEN707);
            adaptor.addChild(root_0, TOKEN707_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:1: vbdrop : 'VB-DROP' TOKEN ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal708=null;
        Token TOKEN709=null;

        Object string_literal708_tree=null;
        Object TOKEN709_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:7: ( 'VB-DROP' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:316:8: 'VB-DROP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal708=(Token)match(input,66,FOLLOW_66_in_vbdrop3267); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal708_tree = (Object)adaptor.create(string_literal708);
            adaptor.addChild(root_0, string_literal708_tree);
            }
            TOKEN709=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop3269); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN709_tree = (Object)adaptor.create(TOKEN709);
            adaptor.addChild(root_0, TOKEN709_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:317:1: vbfill : 'VB-FILL' TOKEN ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal710=null;
        Token TOKEN711=null;

        Object string_literal710_tree=null;
        Object TOKEN711_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:317:7: ( 'VB-FILL' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:317:8: 'VB-FILL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal710=(Token)match(input,67,FOLLOW_67_in_vbfill3274); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal710_tree = (Object)adaptor.create(string_literal710);
            adaptor.addChild(root_0, string_literal710_tree);
            }
            TOKEN711=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill3276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN711_tree = (Object)adaptor.create(TOKEN711);
            adaptor.addChild(root_0, TOKEN711_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:318:1: vbsuspend : 'VB-SUSPEND' TOKEN ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal712=null;
        Token TOKEN713=null;

        Object string_literal712_tree=null;
        Object TOKEN713_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:318:10: ( 'VB-SUSPEND' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:318:11: 'VB-SUSPEND' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal712=(Token)match(input,68,FOLLOW_68_in_vbsuspend3281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal712_tree = (Object)adaptor.create(string_literal712);
            adaptor.addChild(root_0, string_literal712_tree);
            }
            TOKEN713=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend3283); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN713_tree = (Object)adaptor.create(TOKEN713);
            adaptor.addChild(root_0, TOKEN713_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:1: vbtreat : 'VB-TREAT' TOKEN ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal714=null;
        Token TOKEN715=null;

        Object string_literal714_tree=null;
        Object TOKEN715_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:8: ( 'VB-TREAT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:319:9: 'VB-TREAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal714=(Token)match(input,69,FOLLOW_69_in_vbtreat3288); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal714_tree = (Object)adaptor.create(string_literal714);
            adaptor.addChild(root_0, string_literal714_tree);
            }
            TOKEN715=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat3290); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN715_tree = (Object)adaptor.create(TOKEN715);
            adaptor.addChild(root_0, TOKEN715_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:1: vbapparatus : 'VB-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal716=null;
        Token TOKEN717=null;

        Object string_literal716_tree=null;
        Object TOKEN717_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:12: ( 'VB-APPARATUS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:322:13: 'VB-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal716=(Token)match(input,70,FOLLOW_70_in_vbapparatus3297); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal716_tree = (Object)adaptor.create(string_literal716);
            adaptor.addChild(root_0, string_literal716_tree);
            }
            TOKEN717=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus3299); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN717_tree = (Object)adaptor.create(TOKEN717);
            adaptor.addChild(root_0, TOKEN717_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:323:1: nnapparatus : 'NN-APPARATUS' TOKEN ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal718=null;
        Token TOKEN719=null;

        Object string_literal718_tree=null;
        Object TOKEN719_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:323:12: ( 'NN-APPARATUS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:323:13: 'NN-APPARATUS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal718=(Token)match(input,71,FOLLOW_71_in_nnapparatus3304); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal718_tree = (Object)adaptor.create(string_literal718);
            adaptor.addChild(root_0, string_literal718_tree);
            }
            TOKEN719=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus3306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN719_tree = (Object)adaptor.create(TOKEN719);
            adaptor.addChild(root_0, TOKEN719_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:326:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal720=null;
        Token TOKEN721=null;

        Object string_literal720_tree=null;
        Object TOKEN721_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:326:14: ( 'VB-CONCENTRATE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:326:15: 'VB-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal720=(Token)match(input,72,FOLLOW_72_in_vbconcentrate3313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal720_tree = (Object)adaptor.create(string_literal720);
            adaptor.addChild(root_0, string_literal720_tree);
            }
            TOKEN721=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate3315); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN721_tree = (Object)adaptor.create(TOKEN721);
            adaptor.addChild(root_0, TOKEN721_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:327:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal722=null;
        Token TOKEN723=null;

        Object string_literal722_tree=null;
        Object TOKEN723_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:327:14: ( 'NN-CONCENTRATE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:327:15: 'NN-CONCENTRATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal722=(Token)match(input,73,FOLLOW_73_in_nnconcentrate3320); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal722_tree = (Object)adaptor.create(string_literal722);
            adaptor.addChild(root_0, string_literal722_tree);
            }
            TOKEN723=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate3322); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN723_tree = (Object)adaptor.create(TOKEN723);
            adaptor.addChild(root_0, TOKEN723_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:330:1: vbcool : 'VB-COOL' TOKEN ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal724=null;
        Token TOKEN725=null;

        Object string_literal724_tree=null;
        Object TOKEN725_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:330:7: ( 'VB-COOL' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:330:8: 'VB-COOL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal724=(Token)match(input,74,FOLLOW_74_in_vbcool3329); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal724_tree = (Object)adaptor.create(string_literal724);
            adaptor.addChild(root_0, string_literal724_tree);
            }
            TOKEN725=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool3331); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN725_tree = (Object)adaptor.create(TOKEN725);
            adaptor.addChild(root_0, TOKEN725_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:333:1: vbdegass : 'VB-DEGASS' TOKEN ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal726=null;
        Token TOKEN727=null;

        Object string_literal726_tree=null;
        Object TOKEN727_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:333:9: ( 'VB-DEGASS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:333:10: 'VB-DEGASS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal726=(Token)match(input,75,FOLLOW_75_in_vbdegass3338); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal726_tree = (Object)adaptor.create(string_literal726);
            adaptor.addChild(root_0, string_literal726_tree);
            }
            TOKEN727=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass3340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN727_tree = (Object)adaptor.create(TOKEN727);
            adaptor.addChild(root_0, TOKEN727_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:336:1: vbdissolve : 'VB-DISSOLVE' TOKEN ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal728=null;
        Token TOKEN729=null;

        Object string_literal728_tree=null;
        Object TOKEN729_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:336:11: ( 'VB-DISSOLVE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:336:12: 'VB-DISSOLVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal728=(Token)match(input,76,FOLLOW_76_in_vbdissolve3347); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal728_tree = (Object)adaptor.create(string_literal728);
            adaptor.addChild(root_0, string_literal728_tree);
            }
            TOKEN729=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve3349); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN729_tree = (Object)adaptor.create(TOKEN729);
            adaptor.addChild(root_0, TOKEN729_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:339:1: vbdry : 'VB-DRY' TOKEN ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal730=null;
        Token TOKEN731=null;

        Object string_literal730_tree=null;
        Object TOKEN731_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:339:6: ( 'VB-DRY' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:339:7: 'VB-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal730=(Token)match(input,77,FOLLOW_77_in_vbdry3356); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal730_tree = (Object)adaptor.create(string_literal730);
            adaptor.addChild(root_0, string_literal730_tree);
            }
            TOKEN731=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry3358); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN731_tree = (Object)adaptor.create(TOKEN731);
            adaptor.addChild(root_0, TOKEN731_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:340:1: nndry : 'NN-DRY' TOKEN ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal732=null;
        Token TOKEN733=null;

        Object string_literal732_tree=null;
        Object TOKEN733_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:340:6: ( 'NN-DRY' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:340:7: 'NN-DRY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal732=(Token)match(input,78,FOLLOW_78_in_nndry3363); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal732_tree = (Object)adaptor.create(string_literal732);
            adaptor.addChild(root_0, string_literal732_tree);
            }
            TOKEN733=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry3365); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN733_tree = (Object)adaptor.create(TOKEN733);
            adaptor.addChild(root_0, TOKEN733_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:343:1: vbextract : 'VB-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal734=null;
        Token TOKEN735=null;

        Object string_literal734_tree=null;
        Object TOKEN735_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:343:10: ( 'VB-EXTRACT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:343:11: 'VB-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal734=(Token)match(input,79,FOLLOW_79_in_vbextract3372); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal734_tree = (Object)adaptor.create(string_literal734);
            adaptor.addChild(root_0, string_literal734_tree);
            }
            TOKEN735=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract3374); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN735_tree = (Object)adaptor.create(TOKEN735);
            adaptor.addChild(root_0, TOKEN735_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:344:1: nnextract : 'NN-EXTRACT' TOKEN ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal736=null;
        Token TOKEN737=null;

        Object string_literal736_tree=null;
        Object TOKEN737_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:344:10: ( 'NN-EXTRACT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:344:11: 'NN-EXTRACT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal736=(Token)match(input,80,FOLLOW_80_in_nnextract3379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal736_tree = (Object)adaptor.create(string_literal736);
            adaptor.addChild(root_0, string_literal736_tree);
            }
            TOKEN737=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract3381); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN737_tree = (Object)adaptor.create(TOKEN737);
            adaptor.addChild(root_0, TOKEN737_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:347:1: vbfilter : 'VB-FILTER' TOKEN ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal738=null;
        Token TOKEN739=null;

        Object string_literal738_tree=null;
        Object TOKEN739_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:347:9: ( 'VB-FILTER' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:347:10: 'VB-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal738=(Token)match(input,81,FOLLOW_81_in_vbfilter3388); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal738_tree = (Object)adaptor.create(string_literal738);
            adaptor.addChild(root_0, string_literal738_tree);
            }
            TOKEN739=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter3390); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN739_tree = (Object)adaptor.create(TOKEN739);
            adaptor.addChild(root_0, TOKEN739_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:348:1: nnfilter : 'NN-FILTER' TOKEN ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal740=null;
        Token TOKEN741=null;

        Object string_literal740_tree=null;
        Object TOKEN741_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:348:9: ( 'NN-FILTER' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:348:10: 'NN-FILTER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal740=(Token)match(input,82,FOLLOW_82_in_nnfilter3395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal740_tree = (Object)adaptor.create(string_literal740);
            adaptor.addChild(root_0, string_literal740_tree);
            }
            TOKEN741=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter3397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN741_tree = (Object)adaptor.create(TOKEN741);
            adaptor.addChild(root_0, TOKEN741_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:351:1: vbheat : 'VB-HEAT' TOKEN ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal742=null;
        Token TOKEN743=null;

        Object string_literal742_tree=null;
        Object TOKEN743_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:351:7: ( 'VB-HEAT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:351:8: 'VB-HEAT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal742=(Token)match(input,83,FOLLOW_83_in_vbheat3404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal742_tree = (Object)adaptor.create(string_literal742);
            adaptor.addChild(root_0, string_literal742_tree);
            }
            TOKEN743=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat3406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN743_tree = (Object)adaptor.create(TOKEN743);
            adaptor.addChild(root_0, TOKEN743_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:1: vbincrease : 'VB-INCREASE' TOKEN ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal744=null;
        Token TOKEN745=null;

        Object string_literal744_tree=null;
        Object TOKEN745_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:11: ( 'VB-INCREASE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:352:12: 'VB-INCREASE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal744=(Token)match(input,84,FOLLOW_84_in_vbincrease3411); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal744_tree = (Object)adaptor.create(string_literal744);
            adaptor.addChild(root_0, string_literal744_tree);
            }
            TOKEN745=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease3413); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN745_tree = (Object)adaptor.create(TOKEN745);
            adaptor.addChild(root_0, TOKEN745_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:355:1: vbimmerse : 'VB-IMMERSE' TOKEN ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal746=null;
        Token TOKEN747=null;

        Object string_literal746_tree=null;
        Object TOKEN747_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:355:10: ( 'VB-IMMERSE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:355:11: 'VB-IMMERSE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal746=(Token)match(input,85,FOLLOW_85_in_vbimmerse3420); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal746_tree = (Object)adaptor.create(string_literal746);
            adaptor.addChild(root_0, string_literal746_tree);
            }
            TOKEN747=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse3422); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN747_tree = (Object)adaptor.create(TOKEN747);
            adaptor.addChild(root_0, TOKEN747_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:357:1: vbpartition : 'VB-PARTITION' TOKEN ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal748=null;
        Token TOKEN749=null;

        Object string_literal748_tree=null;
        Object TOKEN749_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:357:12: ( 'VB-PARTITION' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:357:13: 'VB-PARTITION' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal748=(Token)match(input,86,FOLLOW_86_in_vbpartition3428); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal748_tree = (Object)adaptor.create(string_literal748);
            adaptor.addChild(root_0, string_literal748_tree);
            }
            TOKEN749=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition3430); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN749_tree = (Object)adaptor.create(TOKEN749);
            adaptor.addChild(root_0, TOKEN749_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:360:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal750=null;
        Token TOKEN751=null;

        Object string_literal750_tree=null;
        Object TOKEN751_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:360:14: ( 'VB-PRECIPITATE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:360:15: 'VB-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal750=(Token)match(input,87,FOLLOW_87_in_vbprecipitate3437); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal750_tree = (Object)adaptor.create(string_literal750);
            adaptor.addChild(root_0, string_literal750_tree);
            }
            TOKEN751=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate3439); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN751_tree = (Object)adaptor.create(TOKEN751);
            adaptor.addChild(root_0, TOKEN751_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:361:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal752=null;
        Token TOKEN753=null;

        Object string_literal752_tree=null;
        Object TOKEN753_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:361:14: ( 'NN-PRECIPITATE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:361:15: 'NN-PRECIPITATE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal752=(Token)match(input,88,FOLLOW_88_in_nnprecipitate3444); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal752_tree = (Object)adaptor.create(string_literal752);
            adaptor.addChild(root_0, string_literal752_tree);
            }
            TOKEN753=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate3446); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN753_tree = (Object)adaptor.create(TOKEN753);
            adaptor.addChild(root_0, TOKEN753_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:364:1: vbpurify : 'VB-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal754=null;
        Token TOKEN755=null;

        Object string_literal754_tree=null;
        Object TOKEN755_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:364:9: ( 'VB-PURIFY' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:364:10: 'VB-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal754=(Token)match(input,89,FOLLOW_89_in_vbpurify3453); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal754_tree = (Object)adaptor.create(string_literal754);
            adaptor.addChild(root_0, string_literal754_tree);
            }
            TOKEN755=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify3455); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN755_tree = (Object)adaptor.create(TOKEN755);
            adaptor.addChild(root_0, TOKEN755_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:365:1: nnpurify : 'NN-PURIFY' TOKEN ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal756=null;
        Token TOKEN757=null;

        Object string_literal756_tree=null;
        Object TOKEN757_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:365:9: ( 'NN-PURIFY' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:365:10: 'NN-PURIFY' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal756=(Token)match(input,90,FOLLOW_90_in_nnpurify3460); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal756_tree = (Object)adaptor.create(string_literal756);
            adaptor.addChild(root_0, string_literal756_tree);
            }
            TOKEN757=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify3462); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN757_tree = (Object)adaptor.create(TOKEN757);
            adaptor.addChild(root_0, TOKEN757_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:368:1: vbquench : 'VB-QUENCH' TOKEN ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal758=null;
        Token TOKEN759=null;

        Object string_literal758_tree=null;
        Object TOKEN759_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:368:9: ( 'VB-QUENCH' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:368:10: 'VB-QUENCH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal758=(Token)match(input,91,FOLLOW_91_in_vbquench3469); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal758_tree = (Object)adaptor.create(string_literal758);
            adaptor.addChild(root_0, string_literal758_tree);
            }
            TOKEN759=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench3471); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN759_tree = (Object)adaptor.create(TOKEN759);
            adaptor.addChild(root_0, TOKEN759_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:371:1: vbrecover : 'VB-RECOVER' TOKEN ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal760=null;
        Token TOKEN761=null;

        Object string_literal760_tree=null;
        Object TOKEN761_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:371:10: ( 'VB-RECOVER' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:371:11: 'VB-RECOVER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal760=(Token)match(input,92,FOLLOW_92_in_vbrecover3478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal760_tree = (Object)adaptor.create(string_literal760);
            adaptor.addChild(root_0, string_literal760_tree);
            }
            TOKEN761=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover3480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN761_tree = (Object)adaptor.create(TOKEN761);
            adaptor.addChild(root_0, TOKEN761_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:374:1: vbremove : 'VB-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal762=null;
        Token TOKEN763=null;

        Object string_literal762_tree=null;
        Object TOKEN763_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:374:9: ( 'VB-REMOVE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:374:10: 'VB-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal762=(Token)match(input,93,FOLLOW_93_in_vbremove3487); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal762_tree = (Object)adaptor.create(string_literal762);
            adaptor.addChild(root_0, string_literal762_tree);
            }
            TOKEN763=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove3489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN763_tree = (Object)adaptor.create(TOKEN763);
            adaptor.addChild(root_0, TOKEN763_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:375:1: nnremove : 'NN-REMOVE' TOKEN ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal764=null;
        Token TOKEN765=null;

        Object string_literal764_tree=null;
        Object TOKEN765_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:375:9: ( 'NN-REMOVE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:375:10: 'NN-REMOVE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal764=(Token)match(input,94,FOLLOW_94_in_nnremove3494); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal764_tree = (Object)adaptor.create(string_literal764);
            adaptor.addChild(root_0, string_literal764_tree);
            }
            TOKEN765=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove3496); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN765_tree = (Object)adaptor.create(TOKEN765);
            adaptor.addChild(root_0, TOKEN765_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:378:1: vbstir : 'VB-STIR' TOKEN ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal766=null;
        Token TOKEN767=null;

        Object string_literal766_tree=null;
        Object TOKEN767_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:378:7: ( 'VB-STIR' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:378:8: 'VB-STIR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal766=(Token)match(input,95,FOLLOW_95_in_vbstir3503); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal766_tree = (Object)adaptor.create(string_literal766);
            adaptor.addChild(root_0, string_literal766_tree);
            }
            TOKEN767=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir3505); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN767_tree = (Object)adaptor.create(TOKEN767);
            adaptor.addChild(root_0, TOKEN767_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal768=null;
        Token TOKEN769=null;

        Object string_literal768_tree=null;
        Object TOKEN769_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:13: ( 'VB-SYNTHESIZE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:381:14: 'VB-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal768=(Token)match(input,96,FOLLOW_96_in_vbsynthesize3512); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal768_tree = (Object)adaptor.create(string_literal768);
            adaptor.addChild(root_0, string_literal768_tree);
            }
            TOKEN769=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize3514); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN769_tree = (Object)adaptor.create(TOKEN769);
            adaptor.addChild(root_0, TOKEN769_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:382:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal770=null;
        Token TOKEN771=null;

        Object string_literal770_tree=null;
        Object TOKEN771_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:382:13: ( 'NN-SYNTHESIZE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:382:14: 'NN-SYNTHESIZE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal770=(Token)match(input,97,FOLLOW_97_in_nnsynthesize3519); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal770_tree = (Object)adaptor.create(string_literal770);
            adaptor.addChild(root_0, string_literal770_tree);
            }
            TOKEN771=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize3521); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN771_tree = (Object)adaptor.create(TOKEN771);
            adaptor.addChild(root_0, TOKEN771_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:385:1: vbwait : 'VB-WAIT' TOKEN ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal772=null;
        Token TOKEN773=null;

        Object string_literal772_tree=null;
        Object TOKEN773_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:385:7: ( 'VB-WAIT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:385:8: 'VB-WAIT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal772=(Token)match(input,98,FOLLOW_98_in_vbwait3528); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal772_tree = (Object)adaptor.create(string_literal772);
            adaptor.addChild(root_0, string_literal772_tree);
            }
            TOKEN773=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait3530); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN773_tree = (Object)adaptor.create(TOKEN773);
            adaptor.addChild(root_0, TOKEN773_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:1: vbwash : 'VB-WASH' TOKEN ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal774=null;
        Token TOKEN775=null;

        Object string_literal774_tree=null;
        Object TOKEN775_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:7: ( 'VB-WASH' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:388:8: 'VB-WASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal774=(Token)match(input,99,FOLLOW_99_in_vbwash3537); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal774_tree = (Object)adaptor.create(string_literal774);
            adaptor.addChild(root_0, string_literal774_tree);
            }
            TOKEN775=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash3539); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN775_tree = (Object)adaptor.create(TOKEN775);
            adaptor.addChild(root_0, TOKEN775_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:391:1: vbyield : 'VB-YIELD' TOKEN ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal776=null;
        Token TOKEN777=null;

        Object string_literal776_tree=null;
        Object TOKEN777_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:391:8: ( 'VB-YIELD' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:391:9: 'VB-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal776=(Token)match(input,100,FOLLOW_100_in_vbyield3546); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal776_tree = (Object)adaptor.create(string_literal776);
            adaptor.addChild(root_0, string_literal776_tree);
            }
            TOKEN777=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield3548); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN777_tree = (Object)adaptor.create(TOKEN777);
            adaptor.addChild(root_0, TOKEN777_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:394:1: nnyield : 'NN-YIELD' TOKEN ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal778=null;
        Token TOKEN779=null;

        Object string_literal778_tree=null;
        Object TOKEN779_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:394:8: ( 'NN-YIELD' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:394:9: 'NN-YIELD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal778=(Token)match(input,101,FOLLOW_101_in_nnyield3555); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal778_tree = (Object)adaptor.create(string_literal778);
            adaptor.addChild(root_0, string_literal778_tree);
            }
            TOKEN779=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield3557); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN779_tree = (Object)adaptor.create(TOKEN779);
            adaptor.addChild(root_0, TOKEN779_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:396:1: colon : 'COLON' TOKEN ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal780=null;
        Token TOKEN781=null;

        Object string_literal780_tree=null;
        Object TOKEN781_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:396:6: ( 'COLON' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:396:7: 'COLON' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal780=(Token)match(input,102,FOLLOW_102_in_colon3563); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal780_tree = (Object)adaptor.create(string_literal780);
            adaptor.addChild(root_0, string_literal780_tree);
            }
            TOKEN781=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon3565); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN781_tree = (Object)adaptor.create(TOKEN781);
            adaptor.addChild(root_0, TOKEN781_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:1: comma : 'COMMA' TOKEN ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal782=null;
        Token TOKEN783=null;

        Object string_literal782_tree=null;
        Object TOKEN783_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:6: ( 'COMMA' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:397:7: 'COMMA' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal782=(Token)match(input,103,FOLLOW_103_in_comma3570); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal782_tree = (Object)adaptor.create(string_literal782);
            adaptor.addChild(root_0, string_literal782_tree);
            }
            TOKEN783=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma3572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN783_tree = (Object)adaptor.create(TOKEN783);
            adaptor.addChild(root_0, TOKEN783_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:398:1: apost : 'APOST' TOKEN ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal784=null;
        Token TOKEN785=null;

        Object string_literal784_tree=null;
        Object TOKEN785_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:398:6: ( 'APOST' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:398:7: 'APOST' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal784=(Token)match(input,104,FOLLOW_104_in_apost3577); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal784_tree = (Object)adaptor.create(string_literal784);
            adaptor.addChild(root_0, string_literal784_tree);
            }
            TOKEN785=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost3579); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN785_tree = (Object)adaptor.create(TOKEN785);
            adaptor.addChild(root_0, TOKEN785_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:399:1: neg : 'NEG' TOKEN ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal786=null;
        Token TOKEN787=null;

        Object string_literal786_tree=null;
        Object TOKEN787_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:399:4: ( 'NEG' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:399:5: 'NEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal786=(Token)match(input,105,FOLLOW_105_in_neg3584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal786_tree = (Object)adaptor.create(string_literal786);
            adaptor.addChild(root_0, string_literal786_tree);
            }
            TOKEN787=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg3586); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN787_tree = (Object)adaptor.create(TOKEN787);
            adaptor.addChild(root_0, TOKEN787_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:400:1: dash : 'DASH' TOKEN ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal788=null;
        Token TOKEN789=null;

        Object string_literal788_tree=null;
        Object TOKEN789_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:400:5: ( 'DASH' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:400:6: 'DASH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal788=(Token)match(input,106,FOLLOW_106_in_dash3591); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal788_tree = (Object)adaptor.create(string_literal788);
            adaptor.addChild(root_0, string_literal788_tree);
            }
            TOKEN789=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash3593); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN789_tree = (Object)adaptor.create(TOKEN789);
            adaptor.addChild(root_0, TOKEN789_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:401:1: stop : 'STOP' TOKEN ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal790=null;
        Token TOKEN791=null;

        Object string_literal790_tree=null;
        Object TOKEN791_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:401:5: ( 'STOP' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:401:6: 'STOP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal790=(Token)match(input,107,FOLLOW_107_in_stop3598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal790_tree = (Object)adaptor.create(string_literal790);
            adaptor.addChild(root_0, string_literal790_tree);
            }
            TOKEN791=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop3600); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN791_tree = (Object)adaptor.create(TOKEN791);
            adaptor.addChild(root_0, TOKEN791_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:1: nnpercent : 'NN-PERCENT' TOKEN ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal792=null;
        Token TOKEN793=null;

        Object string_literal792_tree=null;
        Object TOKEN793_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:10: ( 'NN-PERCENT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:402:11: 'NN-PERCENT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal792=(Token)match(input,108,FOLLOW_108_in_nnpercent3605); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal792_tree = (Object)adaptor.create(string_literal792);
            adaptor.addChild(root_0, string_literal792_tree);
            }
            TOKEN793=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent3607); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN793_tree = (Object)adaptor.create(TOKEN793);
            adaptor.addChild(root_0, TOKEN793_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:403:1: lsqb : 'LSQB' TOKEN ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal794=null;
        Token TOKEN795=null;

        Object string_literal794_tree=null;
        Object TOKEN795_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:403:5: ( 'LSQB' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:403:6: 'LSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal794=(Token)match(input,109,FOLLOW_109_in_lsqb3612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal794_tree = (Object)adaptor.create(string_literal794);
            adaptor.addChild(root_0, string_literal794_tree);
            }
            TOKEN795=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb3614); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN795_tree = (Object)adaptor.create(TOKEN795);
            adaptor.addChild(root_0, TOKEN795_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:404:1: rsqb : 'RSQB' TOKEN ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal796=null;
        Token TOKEN797=null;

        Object string_literal796_tree=null;
        Object TOKEN797_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:404:5: ( 'RSQB' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:404:6: 'RSQB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal796=(Token)match(input,110,FOLLOW_110_in_rsqb3619); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal796_tree = (Object)adaptor.create(string_literal796);
            adaptor.addChild(root_0, string_literal796_tree);
            }
            TOKEN797=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb3621); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN797_tree = (Object)adaptor.create(TOKEN797);
            adaptor.addChild(root_0, TOKEN797_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:406:1: lrb : '-LRB-' TOKEN ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal798=null;
        Token TOKEN799=null;

        Object string_literal798_tree=null;
        Object TOKEN799_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:406:4: ( '-LRB-' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:406:5: '-LRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal798=(Token)match(input,111,FOLLOW_111_in_lrb3627); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal798_tree = (Object)adaptor.create(string_literal798);
            adaptor.addChild(root_0, string_literal798_tree);
            }
            TOKEN799=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb3629); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN799_tree = (Object)adaptor.create(TOKEN799);
            adaptor.addChild(root_0, TOKEN799_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:407:1: rrb : '-RRB-' TOKEN ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal800=null;
        Token TOKEN801=null;

        Object string_literal800_tree=null;
        Object TOKEN801_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:407:4: ( '-RRB-' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:407:5: '-RRB-' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal800=(Token)match(input,112,FOLLOW_112_in_rrb3634); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal800_tree = (Object)adaptor.create(string_literal800);
            adaptor.addChild(root_0, string_literal800_tree);
            }
            TOKEN801=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb3636); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN801_tree = (Object)adaptor.create(TOKEN801);
            adaptor.addChild(root_0, TOKEN801_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class abl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abl"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:412:1: abl : 'ABL' TOKEN ;
    public final ChemicalChunkerParser.abl_return abl() throws RecognitionException {
        ChemicalChunkerParser.abl_return retval = new ChemicalChunkerParser.abl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal802=null;
        Token TOKEN803=null;

        Object string_literal802_tree=null;
        Object TOKEN803_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:412:4: ( 'ABL' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:412:5: 'ABL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal802=(Token)match(input,113,FOLLOW_113_in_abl3645); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal802_tree = (Object)adaptor.create(string_literal802);
            adaptor.addChild(root_0, string_literal802_tree);
            }
            TOKEN803=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abl3647); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN803_tree = (Object)adaptor.create(TOKEN803);
            adaptor.addChild(root_0, TOKEN803_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abl"

    public static class abn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:1: abn : 'ABN' TOKEN ;
    public final ChemicalChunkerParser.abn_return abn() throws RecognitionException {
        ChemicalChunkerParser.abn_return retval = new ChemicalChunkerParser.abn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal804=null;
        Token TOKEN805=null;

        Object string_literal804_tree=null;
        Object TOKEN805_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:4: ( 'ABN' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:415:5: 'ABN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal804=(Token)match(input,114,FOLLOW_114_in_abn3654); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal804_tree = (Object)adaptor.create(string_literal804);
            adaptor.addChild(root_0, string_literal804_tree);
            }
            TOKEN805=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abn3656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN805_tree = (Object)adaptor.create(TOKEN805);
            adaptor.addChild(root_0, TOKEN805_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abn"

    public static class abx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "abx"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:418:1: abx : 'ABX' TOKEN ;
    public final ChemicalChunkerParser.abx_return abx() throws RecognitionException {
        ChemicalChunkerParser.abx_return retval = new ChemicalChunkerParser.abx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal806=null;
        Token TOKEN807=null;

        Object string_literal806_tree=null;
        Object TOKEN807_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:418:4: ( 'ABX' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:418:5: 'ABX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal806=(Token)match(input,115,FOLLOW_115_in_abx3663); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal806_tree = (Object)adaptor.create(string_literal806);
            adaptor.addChild(root_0, string_literal806_tree);
            }
            TOKEN807=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_abx3665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN807_tree = (Object)adaptor.create(TOKEN807);
            adaptor.addChild(root_0, TOKEN807_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "abx"

    public static class ap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ap"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:421:1: ap : 'AP' TOKEN ;
    public final ChemicalChunkerParser.ap_return ap() throws RecognitionException {
        ChemicalChunkerParser.ap_return retval = new ChemicalChunkerParser.ap_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal808=null;
        Token TOKEN809=null;

        Object string_literal808_tree=null;
        Object TOKEN809_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:421:3: ( 'AP' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:421:4: 'AP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal808=(Token)match(input,116,FOLLOW_116_in_ap3672); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal808_tree = (Object)adaptor.create(string_literal808);
            adaptor.addChild(root_0, string_literal808_tree);
            }
            TOKEN809=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ap3674); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN809_tree = (Object)adaptor.create(TOKEN809);
            adaptor.addChild(root_0, TOKEN809_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ap"

    public static class at_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "at"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:1: at : 'AT' TOKEN ;
    public final ChemicalChunkerParser.at_return at() throws RecognitionException {
        ChemicalChunkerParser.at_return retval = new ChemicalChunkerParser.at_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal810=null;
        Token TOKEN811=null;

        Object string_literal810_tree=null;
        Object TOKEN811_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:3: ( 'AT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:424:4: 'AT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal810=(Token)match(input,117,FOLLOW_117_in_at3681); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal810_tree = (Object)adaptor.create(string_literal810);
            adaptor.addChild(root_0, string_literal810_tree);
            }
            TOKEN811=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_at3683); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN811_tree = (Object)adaptor.create(TOKEN811);
            adaptor.addChild(root_0, TOKEN811_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "at"

    public static class be_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "be"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:427:1: be : 'BE' TOKEN ;
    public final ChemicalChunkerParser.be_return be() throws RecognitionException {
        ChemicalChunkerParser.be_return retval = new ChemicalChunkerParser.be_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal812=null;
        Token TOKEN813=null;

        Object string_literal812_tree=null;
        Object TOKEN813_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:427:3: ( 'BE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:427:4: 'BE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal812=(Token)match(input,118,FOLLOW_118_in_be3690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal812_tree = (Object)adaptor.create(string_literal812);
            adaptor.addChild(root_0, string_literal812_tree);
            }
            TOKEN813=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_be3692); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN813_tree = (Object)adaptor.create(TOKEN813);
            adaptor.addChild(root_0, TOKEN813_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "be"

    public static class bed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bed"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:430:1: bed : 'BED' TOKEN ;
    public final ChemicalChunkerParser.bed_return bed() throws RecognitionException {
        ChemicalChunkerParser.bed_return retval = new ChemicalChunkerParser.bed_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal814=null;
        Token TOKEN815=null;

        Object string_literal814_tree=null;
        Object TOKEN815_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:430:4: ( 'BED' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:430:5: 'BED' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal814=(Token)match(input,119,FOLLOW_119_in_bed3699); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal814_tree = (Object)adaptor.create(string_literal814);
            adaptor.addChild(root_0, string_literal814_tree);
            }
            TOKEN815=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bed3701); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN815_tree = (Object)adaptor.create(TOKEN815);
            adaptor.addChild(root_0, TOKEN815_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bed"

    public static class bedz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bedz"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:433:1: bedz : 'BEDZ' TOKEN ;
    public final ChemicalChunkerParser.bedz_return bedz() throws RecognitionException {
        ChemicalChunkerParser.bedz_return retval = new ChemicalChunkerParser.bedz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal816=null;
        Token TOKEN817=null;

        Object string_literal816_tree=null;
        Object TOKEN817_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:433:5: ( 'BEDZ' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:433:6: 'BEDZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal816=(Token)match(input,120,FOLLOW_120_in_bedz3708); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal816_tree = (Object)adaptor.create(string_literal816);
            adaptor.addChild(root_0, string_literal816_tree);
            }
            TOKEN817=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bedz3710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN817_tree = (Object)adaptor.create(TOKEN817);
            adaptor.addChild(root_0, TOKEN817_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bedz"

    public static class beg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "beg"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:436:1: beg : 'BEG' TOKEN ;
    public final ChemicalChunkerParser.beg_return beg() throws RecognitionException {
        ChemicalChunkerParser.beg_return retval = new ChemicalChunkerParser.beg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal818=null;
        Token TOKEN819=null;

        Object string_literal818_tree=null;
        Object TOKEN819_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:436:4: ( 'BEG' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:436:5: 'BEG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal818=(Token)match(input,121,FOLLOW_121_in_beg3717); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal818_tree = (Object)adaptor.create(string_literal818);
            adaptor.addChild(root_0, string_literal818_tree);
            }
            TOKEN819=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_beg3719); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN819_tree = (Object)adaptor.create(TOKEN819);
            adaptor.addChild(root_0, TOKEN819_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "beg"

    public static class bem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bem"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:1: bem : 'BEM' TOKEN ;
    public final ChemicalChunkerParser.bem_return bem() throws RecognitionException {
        ChemicalChunkerParser.bem_return retval = new ChemicalChunkerParser.bem_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal820=null;
        Token TOKEN821=null;

        Object string_literal820_tree=null;
        Object TOKEN821_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:4: ( 'BEM' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:439:5: 'BEM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal820=(Token)match(input,122,FOLLOW_122_in_bem3726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal820_tree = (Object)adaptor.create(string_literal820);
            adaptor.addChild(root_0, string_literal820_tree);
            }
            TOKEN821=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bem3728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN821_tree = (Object)adaptor.create(TOKEN821);
            adaptor.addChild(root_0, TOKEN821_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bem"

    public static class ben_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ben"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:442:1: ben : 'BEN' TOKEN ;
    public final ChemicalChunkerParser.ben_return ben() throws RecognitionException {
        ChemicalChunkerParser.ben_return retval = new ChemicalChunkerParser.ben_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal822=null;
        Token TOKEN823=null;

        Object string_literal822_tree=null;
        Object TOKEN823_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:442:4: ( 'BEN' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:442:5: 'BEN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal822=(Token)match(input,123,FOLLOW_123_in_ben3735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal822_tree = (Object)adaptor.create(string_literal822);
            adaptor.addChild(root_0, string_literal822_tree);
            }
            TOKEN823=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ben3737); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN823_tree = (Object)adaptor.create(TOKEN823);
            adaptor.addChild(root_0, TOKEN823_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ben"

    public static class ber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ber"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:445:1: ber : 'BER' TOKEN ;
    public final ChemicalChunkerParser.ber_return ber() throws RecognitionException {
        ChemicalChunkerParser.ber_return retval = new ChemicalChunkerParser.ber_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal824=null;
        Token TOKEN825=null;

        Object string_literal824_tree=null;
        Object TOKEN825_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:445:4: ( 'BER' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:445:5: 'BER' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal824=(Token)match(input,124,FOLLOW_124_in_ber3744); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal824_tree = (Object)adaptor.create(string_literal824);
            adaptor.addChild(root_0, string_literal824_tree);
            }
            TOKEN825=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ber3746); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN825_tree = (Object)adaptor.create(TOKEN825);
            adaptor.addChild(root_0, TOKEN825_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ber"

    public static class bez_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bez"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:448:1: bez : 'BEZ' TOKEN ;
    public final ChemicalChunkerParser.bez_return bez() throws RecognitionException {
        ChemicalChunkerParser.bez_return retval = new ChemicalChunkerParser.bez_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal826=null;
        Token TOKEN827=null;

        Object string_literal826_tree=null;
        Object TOKEN827_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:448:4: ( 'BEZ' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:448:5: 'BEZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal826=(Token)match(input,125,FOLLOW_125_in_bez3753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal826_tree = (Object)adaptor.create(string_literal826);
            adaptor.addChild(root_0, string_literal826_tree);
            }
            TOKEN827=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_bez3755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN827_tree = (Object)adaptor.create(TOKEN827);
            adaptor.addChild(root_0, TOKEN827_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bez"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:451:1: cc : 'CC' TOKEN ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal828=null;
        Token TOKEN829=null;

        Object string_literal828_tree=null;
        Object TOKEN829_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:451:3: ( 'CC' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:451:4: 'CC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal828=(Token)match(input,126,FOLLOW_126_in_cc3762); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal828_tree = (Object)adaptor.create(string_literal828);
            adaptor.addChild(root_0, string_literal828_tree);
            }
            TOKEN829=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc3764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN829_tree = (Object)adaptor.create(TOKEN829);
            adaptor.addChild(root_0, TOKEN829_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:454:1: cd : 'CD' TOKEN ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal830=null;
        Token TOKEN831=null;

        Object string_literal830_tree=null;
        Object TOKEN831_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:454:3: ( 'CD' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:454:4: 'CD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal830=(Token)match(input,127,FOLLOW_127_in_cd3771); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal830_tree = (Object)adaptor.create(string_literal830);
            adaptor.addChild(root_0, string_literal830_tree);
            }
            TOKEN831=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd3773); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN831_tree = (Object)adaptor.create(TOKEN831);
            adaptor.addChild(root_0, TOKEN831_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class cs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cs"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:457:1: cs : 'CS' TOKEN ;
    public final ChemicalChunkerParser.cs_return cs() throws RecognitionException {
        ChemicalChunkerParser.cs_return retval = new ChemicalChunkerParser.cs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal832=null;
        Token TOKEN833=null;

        Object string_literal832_tree=null;
        Object TOKEN833_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:457:3: ( 'CS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:457:4: 'CS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal832=(Token)match(input,128,FOLLOW_128_in_cs3780); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal832_tree = (Object)adaptor.create(string_literal832);
            adaptor.addChild(root_0, string_literal832_tree);
            }
            TOKEN833=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cs3782); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN833_tree = (Object)adaptor.create(TOKEN833);
            adaptor.addChild(root_0, TOKEN833_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "cs"

    public static class dotok_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotok"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:460:1: dotok : 'DO' TOKEN ;
    public final ChemicalChunkerParser.dotok_return dotok() throws RecognitionException {
        ChemicalChunkerParser.dotok_return retval = new ChemicalChunkerParser.dotok_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal834=null;
        Token TOKEN835=null;

        Object string_literal834_tree=null;
        Object TOKEN835_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:460:7: ( 'DO' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:460:8: 'DO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal834=(Token)match(input,129,FOLLOW_129_in_dotok3790); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal834_tree = (Object)adaptor.create(string_literal834);
            adaptor.addChild(root_0, string_literal834_tree);
            }
            TOKEN835=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dotok3792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN835_tree = (Object)adaptor.create(TOKEN835);
            adaptor.addChild(root_0, TOKEN835_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dotok"

    public static class dod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dod"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:463:1: dod : 'DOD' TOKEN ;
    public final ChemicalChunkerParser.dod_return dod() throws RecognitionException {
        ChemicalChunkerParser.dod_return retval = new ChemicalChunkerParser.dod_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal836=null;
        Token TOKEN837=null;

        Object string_literal836_tree=null;
        Object TOKEN837_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:463:4: ( 'DOD' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:463:5: 'DOD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal836=(Token)match(input,130,FOLLOW_130_in_dod3799); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal836_tree = (Object)adaptor.create(string_literal836);
            adaptor.addChild(root_0, string_literal836_tree);
            }
            TOKEN837=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dod3801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN837_tree = (Object)adaptor.create(TOKEN837);
            adaptor.addChild(root_0, TOKEN837_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dod"

    public static class doz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "doz"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:466:1: doz : 'DOZ' TOKEN ;
    public final ChemicalChunkerParser.doz_return doz() throws RecognitionException {
        ChemicalChunkerParser.doz_return retval = new ChemicalChunkerParser.doz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal838=null;
        Token TOKEN839=null;

        Object string_literal838_tree=null;
        Object TOKEN839_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:466:4: ( 'DOZ' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:466:5: 'DOZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal838=(Token)match(input,131,FOLLOW_131_in_doz3808); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal838_tree = (Object)adaptor.create(string_literal838);
            adaptor.addChild(root_0, string_literal838_tree);
            }
            TOKEN839=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_doz3810); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN839_tree = (Object)adaptor.create(TOKEN839);
            adaptor.addChild(root_0, TOKEN839_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "doz"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:469:1: dt : 'DT' TOKEN ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal840=null;
        Token TOKEN841=null;

        Object string_literal840_tree=null;
        Object TOKEN841_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:469:3: ( 'DT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:469:4: 'DT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal840=(Token)match(input,132,FOLLOW_132_in_dt3817); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal840_tree = (Object)adaptor.create(string_literal840);
            adaptor.addChild(root_0, string_literal840_tree);
            }
            TOKEN841=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt3819); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN841_tree = (Object)adaptor.create(TOKEN841);
            adaptor.addChild(root_0, TOKEN841_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:473:1: dtTHE : 'DT-THE' TOKEN ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal842=null;
        Token TOKEN843=null;

        Object string_literal842_tree=null;
        Object TOKEN843_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:473:6: ( 'DT-THE' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:473:7: 'DT-THE' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal842=(Token)match(input,133,FOLLOW_133_in_dtTHE3827); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal842_tree = (Object)adaptor.create(string_literal842);
            adaptor.addChild(root_0, string_literal842_tree);
            }
            TOKEN843=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE3829); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN843_tree = (Object)adaptor.create(TOKEN843);
            adaptor.addChild(root_0, TOKEN843_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class dti_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dti"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:475:1: dti : 'DTI' TOKEN ;
    public final ChemicalChunkerParser.dti_return dti() throws RecognitionException {
        ChemicalChunkerParser.dti_return retval = new ChemicalChunkerParser.dti_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal844=null;
        Token TOKEN845=null;

        Object string_literal844_tree=null;
        Object TOKEN845_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:475:4: ( 'DTI' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:475:5: 'DTI' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal844=(Token)match(input,134,FOLLOW_134_in_dti3835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal844_tree = (Object)adaptor.create(string_literal844);
            adaptor.addChild(root_0, string_literal844_tree);
            }
            TOKEN845=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dti3837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN845_tree = (Object)adaptor.create(TOKEN845);
            adaptor.addChild(root_0, TOKEN845_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dti"

    public static class dts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dts"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:478:1: dts : 'DTS' TOKEN ;
    public final ChemicalChunkerParser.dts_return dts() throws RecognitionException {
        ChemicalChunkerParser.dts_return retval = new ChemicalChunkerParser.dts_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal846=null;
        Token TOKEN847=null;

        Object string_literal846_tree=null;
        Object TOKEN847_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:478:4: ( 'DTS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:478:5: 'DTS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal846=(Token)match(input,135,FOLLOW_135_in_dts3844); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal846_tree = (Object)adaptor.create(string_literal846);
            adaptor.addChild(root_0, string_literal846_tree);
            }
            TOKEN847=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dts3846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN847_tree = (Object)adaptor.create(TOKEN847);
            adaptor.addChild(root_0, TOKEN847_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dts"

    public static class dtx_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtx"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:481:1: dtx : 'DTX' TOKEN ;
    public final ChemicalChunkerParser.dtx_return dtx() throws RecognitionException {
        ChemicalChunkerParser.dtx_return retval = new ChemicalChunkerParser.dtx_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal848=null;
        Token TOKEN849=null;

        Object string_literal848_tree=null;
        Object TOKEN849_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:481:4: ( 'DTX' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:481:5: 'DTX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal848=(Token)match(input,136,FOLLOW_136_in_dtx3853); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal848_tree = (Object)adaptor.create(string_literal848);
            adaptor.addChild(root_0, string_literal848_tree);
            }
            TOKEN849=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtx3855); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN849_tree = (Object)adaptor.create(TOKEN849);
            adaptor.addChild(root_0, TOKEN849_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dtx"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:484:1: ex : 'EX' TOKEN ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal850=null;
        Token TOKEN851=null;

        Object string_literal850_tree=null;
        Object TOKEN851_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:484:3: ( 'EX' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:484:4: 'EX' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal850=(Token)match(input,137,FOLLOW_137_in_ex3862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal850_tree = (Object)adaptor.create(string_literal850);
            adaptor.addChild(root_0, string_literal850_tree);
            }
            TOKEN851=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex3864); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN851_tree = (Object)adaptor.create(TOKEN851);
            adaptor.addChild(root_0, TOKEN851_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:487:1: fw : 'FW' TOKEN ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal852=null;
        Token TOKEN853=null;

        Object string_literal852_tree=null;
        Object TOKEN853_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:487:3: ( 'FW' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:487:4: 'FW' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal852=(Token)match(input,138,FOLLOW_138_in_fw3871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal852_tree = (Object)adaptor.create(string_literal852);
            adaptor.addChild(root_0, string_literal852_tree);
            }
            TOKEN853=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw3873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN853_tree = (Object)adaptor.create(TOKEN853);
            adaptor.addChild(root_0, TOKEN853_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class fwin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fwin"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:490:1: fwin : 'FW-IN' TOKEN ;
    public final ChemicalChunkerParser.fwin_return fwin() throws RecognitionException {
        ChemicalChunkerParser.fwin_return retval = new ChemicalChunkerParser.fwin_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal854=null;
        Token TOKEN855=null;

        Object string_literal854_tree=null;
        Object TOKEN855_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:490:5: ( 'FW-IN' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:490:6: 'FW-IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal854=(Token)match(input,139,FOLLOW_139_in_fwin3880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal854_tree = (Object)adaptor.create(string_literal854);
            adaptor.addChild(root_0, string_literal854_tree);
            }
            TOKEN855=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fwin3882); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN855_tree = (Object)adaptor.create(TOKEN855);
            adaptor.addChild(root_0, TOKEN855_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fwin"

    public static class hv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hv"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:493:1: hv : 'HV' TOKEN ;
    public final ChemicalChunkerParser.hv_return hv() throws RecognitionException {
        ChemicalChunkerParser.hv_return retval = new ChemicalChunkerParser.hv_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal856=null;
        Token TOKEN857=null;

        Object string_literal856_tree=null;
        Object TOKEN857_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:493:3: ( 'HV' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:493:4: 'HV' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal856=(Token)match(input,140,FOLLOW_140_in_hv3889); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal856_tree = (Object)adaptor.create(string_literal856);
            adaptor.addChild(root_0, string_literal856_tree);
            }
            TOKEN857=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hv3891); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN857_tree = (Object)adaptor.create(TOKEN857);
            adaptor.addChild(root_0, TOKEN857_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hv"

    public static class hvd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:496:1: hvd : 'HVD' TOKEN ;
    public final ChemicalChunkerParser.hvd_return hvd() throws RecognitionException {
        ChemicalChunkerParser.hvd_return retval = new ChemicalChunkerParser.hvd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal858=null;
        Token TOKEN859=null;

        Object string_literal858_tree=null;
        Object TOKEN859_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:496:4: ( 'HVD' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:496:5: 'HVD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal858=(Token)match(input,141,FOLLOW_141_in_hvd3898); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal858_tree = (Object)adaptor.create(string_literal858);
            adaptor.addChild(root_0, string_literal858_tree);
            }
            TOKEN859=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvd3900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN859_tree = (Object)adaptor.create(TOKEN859);
            adaptor.addChild(root_0, TOKEN859_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvd"

    public static class hvg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvg"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:499:1: hvg : 'HVG' TOKEN ;
    public final ChemicalChunkerParser.hvg_return hvg() throws RecognitionException {
        ChemicalChunkerParser.hvg_return retval = new ChemicalChunkerParser.hvg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal860=null;
        Token TOKEN861=null;

        Object string_literal860_tree=null;
        Object TOKEN861_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:499:4: ( 'HVG' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:499:5: 'HVG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal860=(Token)match(input,142,FOLLOW_142_in_hvg3907); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal860_tree = (Object)adaptor.create(string_literal860);
            adaptor.addChild(root_0, string_literal860_tree);
            }
            TOKEN861=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvg3909); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN861_tree = (Object)adaptor.create(TOKEN861);
            adaptor.addChild(root_0, TOKEN861_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvg"

    public static class hvn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hvn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:502:1: hvn : 'HVN' TOKEN ;
    public final ChemicalChunkerParser.hvn_return hvn() throws RecognitionException {
        ChemicalChunkerParser.hvn_return retval = new ChemicalChunkerParser.hvn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal862=null;
        Token TOKEN863=null;

        Object string_literal862_tree=null;
        Object TOKEN863_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:502:4: ( 'HVN' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:502:5: 'HVN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal862=(Token)match(input,143,FOLLOW_143_in_hvn3916); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal862_tree = (Object)adaptor.create(string_literal862);
            adaptor.addChild(root_0, string_literal862_tree);
            }
            TOKEN863=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_hvn3918); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN863_tree = (Object)adaptor.create(TOKEN863);
            adaptor.addChild(root_0, TOKEN863_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hvn"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:505:1: in : 'IN' TOKEN ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal864=null;
        Token TOKEN865=null;

        Object string_literal864_tree=null;
        Object TOKEN865_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:505:3: ( 'IN' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:505:4: 'IN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal864=(Token)match(input,144,FOLLOW_144_in_in3925); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal864_tree = (Object)adaptor.create(string_literal864);
            adaptor.addChild(root_0, string_literal864_tree);
            }
            TOKEN865=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in3927); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN865_tree = (Object)adaptor.create(TOKEN865);
            adaptor.addChild(root_0, TOKEN865_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:508:1: jj : 'JJ' TOKEN ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal866=null;
        Token TOKEN867=null;

        Object string_literal866_tree=null;
        Object TOKEN867_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:508:3: ( 'JJ' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:508:4: 'JJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal866=(Token)match(input,145,FOLLOW_145_in_jj3934); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal866_tree = (Object)adaptor.create(string_literal866);
            adaptor.addChild(root_0, string_literal866_tree);
            }
            TOKEN867=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj3936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN867_tree = (Object)adaptor.create(TOKEN867);
            adaptor.addChild(root_0, TOKEN867_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:511:1: jjr : 'JJR' TOKEN ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal868=null;
        Token TOKEN869=null;

        Object string_literal868_tree=null;
        Object TOKEN869_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:511:4: ( 'JJR' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:511:5: 'JJR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal868=(Token)match(input,146,FOLLOW_146_in_jjr3943); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal868_tree = (Object)adaptor.create(string_literal868);
            adaptor.addChild(root_0, string_literal868_tree);
            }
            TOKEN869=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr3945); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN869_tree = (Object)adaptor.create(TOKEN869);
            adaptor.addChild(root_0, TOKEN869_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:514:1: jjs : 'JJS' TOKEN ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal870=null;
        Token TOKEN871=null;

        Object string_literal870_tree=null;
        Object TOKEN871_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:514:4: ( 'JJS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:514:5: 'JJS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal870=(Token)match(input,147,FOLLOW_147_in_jjs3952); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal870_tree = (Object)adaptor.create(string_literal870);
            adaptor.addChild(root_0, string_literal870_tree);
            }
            TOKEN871=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs3954); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN871_tree = (Object)adaptor.create(TOKEN871);
            adaptor.addChild(root_0, TOKEN871_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class jjt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjt"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:517:1: jjt : 'JJT' TOKEN ;
    public final ChemicalChunkerParser.jjt_return jjt() throws RecognitionException {
        ChemicalChunkerParser.jjt_return retval = new ChemicalChunkerParser.jjt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal872=null;
        Token TOKEN873=null;

        Object string_literal872_tree=null;
        Object TOKEN873_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:517:4: ( 'JJT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:517:5: 'JJT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal872=(Token)match(input,148,FOLLOW_148_in_jjt3961); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal872_tree = (Object)adaptor.create(string_literal872);
            adaptor.addChild(root_0, string_literal872_tree);
            }
            TOKEN873=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjt3963); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN873_tree = (Object)adaptor.create(TOKEN873);
            adaptor.addChild(root_0, TOKEN873_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "jjt"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:520:1: md : 'MD' TOKEN ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal874=null;
        Token TOKEN875=null;

        Object string_literal874_tree=null;
        Object TOKEN875_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:520:3: ( 'MD' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:520:4: 'MD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal874=(Token)match(input,149,FOLLOW_149_in_md3970); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal874_tree = (Object)adaptor.create(string_literal874);
            adaptor.addChild(root_0, string_literal874_tree);
            }
            TOKEN875=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md3972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN875_tree = (Object)adaptor.create(TOKEN875);
            adaptor.addChild(root_0, TOKEN875_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nc"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:523:1: nc : 'NC' TOKEN ;
    public final ChemicalChunkerParser.nc_return nc() throws RecognitionException {
        ChemicalChunkerParser.nc_return retval = new ChemicalChunkerParser.nc_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal876=null;
        Token TOKEN877=null;

        Object string_literal876_tree=null;
        Object TOKEN877_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:523:3: ( 'NC' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:523:4: 'NC' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal876=(Token)match(input,150,FOLLOW_150_in_nc3979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal876_tree = (Object)adaptor.create(string_literal876);
            adaptor.addChild(root_0, string_literal876_tree);
            }
            TOKEN877=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nc3981); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN877_tree = (Object)adaptor.create(TOKEN877);
            adaptor.addChild(root_0, TOKEN877_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nc"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:526:1: nn : 'NN' TOKEN ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal878=null;
        Token TOKEN879=null;

        Object string_literal878_tree=null;
        Object TOKEN879_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:526:3: ( 'NN' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:526:4: 'NN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal878=(Token)match(input,151,FOLLOW_151_in_nn3988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal878_tree = (Object)adaptor.create(string_literal878);
            adaptor.addChild(root_0, string_literal878_tree);
            }
            TOKEN879=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn3990); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN879_tree = (Object)adaptor.create(TOKEN879);
            adaptor.addChild(root_0, TOKEN879_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:529:1: nn_poss : 'NN$' TOKEN ;
    public final ChemicalChunkerParser.nn_poss_return nn_poss() throws RecognitionException {
        ChemicalChunkerParser.nn_poss_return retval = new ChemicalChunkerParser.nn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal880=null;
        Token TOKEN881=null;

        Object string_literal880_tree=null;
        Object TOKEN881_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:529:8: ( 'NN$' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:529:9: 'NN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal880=(Token)match(input,152,FOLLOW_152_in_nn_poss3997); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal880_tree = (Object)adaptor.create(string_literal880);
            adaptor.addChild(root_0, string_literal880_tree);
            }
            TOKEN881=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn_poss3999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN881_tree = (Object)adaptor.create(TOKEN881);
            adaptor.addChild(root_0, TOKEN881_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nn_poss"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:532:1: nns : 'NNS' TOKEN ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal882=null;
        Token TOKEN883=null;

        Object string_literal882_tree=null;
        Object TOKEN883_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:532:4: ( 'NNS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:532:5: 'NNS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal882=(Token)match(input,153,FOLLOW_153_in_nns4006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal882_tree = (Object)adaptor.create(string_literal882);
            adaptor.addChild(root_0, string_literal882_tree);
            }
            TOKEN883=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns4008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN883_tree = (Object)adaptor.create(TOKEN883);
            adaptor.addChild(root_0, TOKEN883_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nns_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:535:1: nns_poss : 'NNS$' TOKEN ;
    public final ChemicalChunkerParser.nns_poss_return nns_poss() throws RecognitionException {
        ChemicalChunkerParser.nns_poss_return retval = new ChemicalChunkerParser.nns_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal884=null;
        Token TOKEN885=null;

        Object string_literal884_tree=null;
        Object TOKEN885_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:535:9: ( 'NNS$' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:535:10: 'NNS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal884=(Token)match(input,154,FOLLOW_154_in_nns_poss4015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal884_tree = (Object)adaptor.create(string_literal884);
            adaptor.addChild(root_0, string_literal884_tree);
            }
            TOKEN885=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns_poss4017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN885_tree = (Object)adaptor.create(TOKEN885);
            adaptor.addChild(root_0, TOKEN885_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nns_poss"

    public static class np_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:538:1: np : 'NP' TOKEN ;
    public final ChemicalChunkerParser.np_return np() throws RecognitionException {
        ChemicalChunkerParser.np_return retval = new ChemicalChunkerParser.np_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal886=null;
        Token TOKEN887=null;

        Object string_literal886_tree=null;
        Object TOKEN887_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:538:3: ( 'NP' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:538:4: 'NP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal886=(Token)match(input,155,FOLLOW_155_in_np4024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal886_tree = (Object)adaptor.create(string_literal886);
            adaptor.addChild(root_0, string_literal886_tree);
            }
            TOKEN887=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np4026); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN887_tree = (Object)adaptor.create(TOKEN887);
            adaptor.addChild(root_0, TOKEN887_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:542:1: nnp : 'NNP' TOKEN ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal888=null;
        Token TOKEN889=null;

        Object string_literal888_tree=null;
        Object TOKEN889_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:542:4: ( 'NNP' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:542:5: 'NNP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal888=(Token)match(input,156,FOLLOW_156_in_nnp4034); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal888_tree = (Object)adaptor.create(string_literal888);
            adaptor.addChild(root_0, string_literal888_tree);
            }
            TOKEN889=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp4036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN889_tree = (Object)adaptor.create(TOKEN889);
            adaptor.addChild(root_0, TOKEN889_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class np_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "np_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:546:1: np_poss : 'NP$' TOKEN ;
    public final ChemicalChunkerParser.np_poss_return np_poss() throws RecognitionException {
        ChemicalChunkerParser.np_poss_return retval = new ChemicalChunkerParser.np_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal890=null;
        Token TOKEN891=null;

        Object string_literal890_tree=null;
        Object TOKEN891_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:546:8: ( 'NP$' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:546:9: 'NP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal890=(Token)match(input,157,FOLLOW_157_in_np_poss4044); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal890_tree = (Object)adaptor.create(string_literal890);
            adaptor.addChild(root_0, string_literal890_tree);
            }
            TOKEN891=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_np_poss4046); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN891_tree = (Object)adaptor.create(TOKEN891);
            adaptor.addChild(root_0, TOKEN891_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "np_poss"

    public static class nps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:549:1: nps : 'NPS' TOKEN ;
    public final ChemicalChunkerParser.nps_return nps() throws RecognitionException {
        ChemicalChunkerParser.nps_return retval = new ChemicalChunkerParser.nps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal892=null;
        Token TOKEN893=null;

        Object string_literal892_tree=null;
        Object TOKEN893_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:549:4: ( 'NPS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:549:5: 'NPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal892=(Token)match(input,158,FOLLOW_158_in_nps4053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal892_tree = (Object)adaptor.create(string_literal892);
            adaptor.addChild(root_0, string_literal892_tree);
            }
            TOKEN893=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps4055); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN893_tree = (Object)adaptor.create(TOKEN893);
            adaptor.addChild(root_0, TOKEN893_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps"

    public static class nps_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nps_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:552:1: nps_poss : 'NPS$' TOKEN ;
    public final ChemicalChunkerParser.nps_poss_return nps_poss() throws RecognitionException {
        ChemicalChunkerParser.nps_poss_return retval = new ChemicalChunkerParser.nps_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal894=null;
        Token TOKEN895=null;

        Object string_literal894_tree=null;
        Object TOKEN895_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:552:9: ( 'NPS$' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:552:10: 'NPS$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal894=(Token)match(input,159,FOLLOW_159_in_nps_poss4062); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal894_tree = (Object)adaptor.create(string_literal894);
            adaptor.addChild(root_0, string_literal894_tree);
            }
            TOKEN895=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nps_poss4064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN895_tree = (Object)adaptor.create(TOKEN895);
            adaptor.addChild(root_0, TOKEN895_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nps_poss"

    public static class nr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nr"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:555:1: nr : 'NR' TOKEN ;
    public final ChemicalChunkerParser.nr_return nr() throws RecognitionException {
        ChemicalChunkerParser.nr_return retval = new ChemicalChunkerParser.nr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal896=null;
        Token TOKEN897=null;

        Object string_literal896_tree=null;
        Object TOKEN897_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:555:3: ( 'NR' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:555:4: 'NR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal896=(Token)match(input,160,FOLLOW_160_in_nr4071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal896_tree = (Object)adaptor.create(string_literal896);
            adaptor.addChild(root_0, string_literal896_tree);
            }
            TOKEN897=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nr4073); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN897_tree = (Object)adaptor.create(TOKEN897);
            adaptor.addChild(root_0, TOKEN897_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nr"

    public static class od_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "od"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:558:1: od : 'OD' TOKEN ;
    public final ChemicalChunkerParser.od_return od() throws RecognitionException {
        ChemicalChunkerParser.od_return retval = new ChemicalChunkerParser.od_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal898=null;
        Token TOKEN899=null;

        Object string_literal898_tree=null;
        Object TOKEN899_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:558:3: ( 'OD' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:558:4: 'OD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal898=(Token)match(input,161,FOLLOW_161_in_od4080); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal898_tree = (Object)adaptor.create(string_literal898);
            adaptor.addChild(root_0, string_literal898_tree);
            }
            TOKEN899=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_od4082); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN899_tree = (Object)adaptor.create(TOKEN899);
            adaptor.addChild(root_0, TOKEN899_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "od"

    public static class pn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:561:1: pn : 'PN' TOKEN ;
    public final ChemicalChunkerParser.pn_return pn() throws RecognitionException {
        ChemicalChunkerParser.pn_return retval = new ChemicalChunkerParser.pn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal900=null;
        Token TOKEN901=null;

        Object string_literal900_tree=null;
        Object TOKEN901_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:561:3: ( 'PN' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:561:4: 'PN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal900=(Token)match(input,162,FOLLOW_162_in_pn4089); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal900_tree = (Object)adaptor.create(string_literal900);
            adaptor.addChild(root_0, string_literal900_tree);
            }
            TOKEN901=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn4091); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN901_tree = (Object)adaptor.create(TOKEN901);
            adaptor.addChild(root_0, TOKEN901_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn"

    public static class pn_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pn_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:564:1: pn_poss : 'PN$' TOKEN ;
    public final ChemicalChunkerParser.pn_poss_return pn_poss() throws RecognitionException {
        ChemicalChunkerParser.pn_poss_return retval = new ChemicalChunkerParser.pn_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal902=null;
        Token TOKEN903=null;

        Object string_literal902_tree=null;
        Object TOKEN903_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:564:8: ( 'PN$' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:564:9: 'PN$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal902=(Token)match(input,163,FOLLOW_163_in_pn_poss4098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal902_tree = (Object)adaptor.create(string_literal902);
            adaptor.addChild(root_0, string_literal902_tree);
            }
            TOKEN903=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pn_poss4100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN903_tree = (Object)adaptor.create(TOKEN903);
            adaptor.addChild(root_0, TOKEN903_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pn_poss"

    public static class pp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:567:1: pp_poss : 'PP$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_return pp_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_return retval = new ChemicalChunkerParser.pp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal904=null;
        Token TOKEN905=null;

        Object string_literal904_tree=null;
        Object TOKEN905_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:567:8: ( 'PP$' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:567:9: 'PP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal904=(Token)match(input,164,FOLLOW_164_in_pp_poss4107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal904_tree = (Object)adaptor.create(string_literal904);
            adaptor.addChild(root_0, string_literal904_tree);
            }
            TOKEN905=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss4109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN905_tree = (Object)adaptor.create(TOKEN905);
            adaptor.addChild(root_0, TOKEN905_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss"

    public static class pp_poss_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pp_poss_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:570:1: pp_poss_poss : 'PP$$' TOKEN ;
    public final ChemicalChunkerParser.pp_poss_poss_return pp_poss_poss() throws RecognitionException {
        ChemicalChunkerParser.pp_poss_poss_return retval = new ChemicalChunkerParser.pp_poss_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal906=null;
        Token TOKEN907=null;

        Object string_literal906_tree=null;
        Object TOKEN907_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:570:13: ( 'PP$$' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:570:14: 'PP$$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal906=(Token)match(input,165,FOLLOW_165_in_pp_poss_poss4116); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal906_tree = (Object)adaptor.create(string_literal906);
            adaptor.addChild(root_0, string_literal906_tree);
            }
            TOKEN907=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pp_poss_poss4118); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN907_tree = (Object)adaptor.create(TOKEN907);
            adaptor.addChild(root_0, TOKEN907_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pp_poss_poss"

    public static class ppl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppl"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:573:1: ppl : 'PPL' TOKEN ;
    public final ChemicalChunkerParser.ppl_return ppl() throws RecognitionException {
        ChemicalChunkerParser.ppl_return retval = new ChemicalChunkerParser.ppl_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal908=null;
        Token TOKEN909=null;

        Object string_literal908_tree=null;
        Object TOKEN909_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:573:4: ( 'PPL' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:573:5: 'PPL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal908=(Token)match(input,166,FOLLOW_166_in_ppl4125); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal908_tree = (Object)adaptor.create(string_literal908);
            adaptor.addChild(root_0, string_literal908_tree);
            }
            TOKEN909=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppl4127); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN909_tree = (Object)adaptor.create(TOKEN909);
            adaptor.addChild(root_0, TOKEN909_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppl"

    public static class ppls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppls"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:576:1: ppls : 'PPLS' TOKEN ;
    public final ChemicalChunkerParser.ppls_return ppls() throws RecognitionException {
        ChemicalChunkerParser.ppls_return retval = new ChemicalChunkerParser.ppls_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal910=null;
        Token TOKEN911=null;

        Object string_literal910_tree=null;
        Object TOKEN911_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:576:5: ( 'PPLS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:576:6: 'PPLS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal910=(Token)match(input,167,FOLLOW_167_in_ppls4134); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal910_tree = (Object)adaptor.create(string_literal910);
            adaptor.addChild(root_0, string_literal910_tree);
            }
            TOKEN911=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppls4136); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN911_tree = (Object)adaptor.create(TOKEN911);
            adaptor.addChild(root_0, TOKEN911_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppls"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:578:1: prp : 'PRP' TOKEN ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal912=null;
        Token TOKEN913=null;

        Object string_literal912_tree=null;
        Object TOKEN913_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:578:4: ( 'PRP' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:578:5: 'PRP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal912=(Token)match(input,168,FOLLOW_168_in_prp4142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal912_tree = (Object)adaptor.create(string_literal912);
            adaptor.addChild(root_0, string_literal912_tree);
            }
            TOKEN913=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp4145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN913_tree = (Object)adaptor.create(TOKEN913);
            adaptor.addChild(root_0, TOKEN913_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:581:1: prp_poss : 'PRP$' TOKEN ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal914=null;
        Token TOKEN915=null;

        Object string_literal914_tree=null;
        Object TOKEN915_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:581:9: ( 'PRP$' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:581:10: 'PRP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal914=(Token)match(input,169,FOLLOW_169_in_prp_poss4152); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal914_tree = (Object)adaptor.create(string_literal914);
            adaptor.addChild(root_0, string_literal914_tree);
            }
            TOKEN915=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss4155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN915_tree = (Object)adaptor.create(TOKEN915);
            adaptor.addChild(root_0, TOKEN915_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class ppo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppo"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:583:1: ppo : 'PPO' TOKEN ;
    public final ChemicalChunkerParser.ppo_return ppo() throws RecognitionException {
        ChemicalChunkerParser.ppo_return retval = new ChemicalChunkerParser.ppo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal916=null;
        Token TOKEN917=null;

        Object string_literal916_tree=null;
        Object TOKEN917_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:583:4: ( 'PPO' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:583:5: 'PPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal916=(Token)match(input,170,FOLLOW_170_in_ppo4161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal916_tree = (Object)adaptor.create(string_literal916);
            adaptor.addChild(root_0, string_literal916_tree);
            }
            TOKEN917=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppo4163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN917_tree = (Object)adaptor.create(TOKEN917);
            adaptor.addChild(root_0, TOKEN917_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppo"

    public static class pps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pps"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:586:1: pps : 'PPS' TOKEN ;
    public final ChemicalChunkerParser.pps_return pps() throws RecognitionException {
        ChemicalChunkerParser.pps_return retval = new ChemicalChunkerParser.pps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal918=null;
        Token TOKEN919=null;

        Object string_literal918_tree=null;
        Object TOKEN919_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:586:4: ( 'PPS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:586:5: 'PPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal918=(Token)match(input,171,FOLLOW_171_in_pps4170); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal918_tree = (Object)adaptor.create(string_literal918);
            adaptor.addChild(root_0, string_literal918_tree);
            }
            TOKEN919=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pps4172); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN919_tree = (Object)adaptor.create(TOKEN919);
            adaptor.addChild(root_0, TOKEN919_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pps"

    public static class ppss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ppss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:589:1: ppss : 'PPSS' TOKEN ;
    public final ChemicalChunkerParser.ppss_return ppss() throws RecognitionException {
        ChemicalChunkerParser.ppss_return retval = new ChemicalChunkerParser.ppss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal920=null;
        Token TOKEN921=null;

        Object string_literal920_tree=null;
        Object TOKEN921_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:589:5: ( 'PPSS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:589:6: 'PPSS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal920=(Token)match(input,172,FOLLOW_172_in_ppss4179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal920_tree = (Object)adaptor.create(string_literal920);
            adaptor.addChild(root_0, string_literal920_tree);
            }
            TOKEN921=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ppss4181); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN921_tree = (Object)adaptor.create(TOKEN921);
            adaptor.addChild(root_0, TOKEN921_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ppss"

    public static class ql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ql"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:592:1: ql : 'QL' TOKEN ;
    public final ChemicalChunkerParser.ql_return ql() throws RecognitionException {
        ChemicalChunkerParser.ql_return retval = new ChemicalChunkerParser.ql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal922=null;
        Token TOKEN923=null;

        Object string_literal922_tree=null;
        Object TOKEN923_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:592:3: ( 'QL' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:592:4: 'QL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal922=(Token)match(input,173,FOLLOW_173_in_ql4188); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal922_tree = (Object)adaptor.create(string_literal922);
            adaptor.addChild(root_0, string_literal922_tree);
            }
            TOKEN923=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ql4190); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN923_tree = (Object)adaptor.create(TOKEN923);
            adaptor.addChild(root_0, TOKEN923_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ql"

    public static class qlp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qlp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:595:1: qlp : 'QLP' TOKEN ;
    public final ChemicalChunkerParser.qlp_return qlp() throws RecognitionException {
        ChemicalChunkerParser.qlp_return retval = new ChemicalChunkerParser.qlp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal924=null;
        Token TOKEN925=null;

        Object string_literal924_tree=null;
        Object TOKEN925_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:595:4: ( 'QLP' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:595:5: 'QLP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal924=(Token)match(input,174,FOLLOW_174_in_qlp4197); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal924_tree = (Object)adaptor.create(string_literal924);
            adaptor.addChild(root_0, string_literal924_tree);
            }
            TOKEN925=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_qlp4199); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN925_tree = (Object)adaptor.create(TOKEN925);
            adaptor.addChild(root_0, TOKEN925_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qlp"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:598:1: rb : 'RB' TOKEN ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal926=null;
        Token TOKEN927=null;

        Object string_literal926_tree=null;
        Object TOKEN927_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:598:3: ( 'RB' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:598:4: 'RB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal926=(Token)match(input,175,FOLLOW_175_in_rb4206); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal926_tree = (Object)adaptor.create(string_literal926);
            adaptor.addChild(root_0, string_literal926_tree);
            }
            TOKEN927=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb4208); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN927_tree = (Object)adaptor.create(TOKEN927);
            adaptor.addChild(root_0, TOKEN927_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:601:1: rbr : 'RBR' TOKEN ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal928=null;
        Token TOKEN929=null;

        Object string_literal928_tree=null;
        Object TOKEN929_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:601:4: ( 'RBR' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:601:5: 'RBR' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal928=(Token)match(input,176,FOLLOW_176_in_rbr4215); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal928_tree = (Object)adaptor.create(string_literal928);
            adaptor.addChild(root_0, string_literal928_tree);
            }
            TOKEN929=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr4217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN929_tree = (Object)adaptor.create(TOKEN929);
            adaptor.addChild(root_0, TOKEN929_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:604:1: rbconj : 'RB-CONJ' TOKEN ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal930=null;
        Token TOKEN931=null;

        Object string_literal930_tree=null;
        Object TOKEN931_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:604:8: ( 'RB-CONJ' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:604:10: 'RB-CONJ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal930=(Token)match(input,177,FOLLOW_177_in_rbconj4226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal930_tree = (Object)adaptor.create(string_literal930);
            adaptor.addChild(root_0, string_literal930_tree);
            }
            TOKEN931=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN931_tree = (Object)adaptor.create(TOKEN931);
            adaptor.addChild(root_0, TOKEN931_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class rbt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbt"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:607:1: rbt : 'RBT' TOKEN ;
    public final ChemicalChunkerParser.rbt_return rbt() throws RecognitionException {
        ChemicalChunkerParser.rbt_return retval = new ChemicalChunkerParser.rbt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal932=null;
        Token TOKEN933=null;

        Object string_literal932_tree=null;
        Object TOKEN933_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:607:4: ( 'RBT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:607:5: 'RBT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal932=(Token)match(input,178,FOLLOW_178_in_rbt4237); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal932_tree = (Object)adaptor.create(string_literal932);
            adaptor.addChild(root_0, string_literal932_tree);
            }
            TOKEN933=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbt4239); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN933_tree = (Object)adaptor.create(TOKEN933);
            adaptor.addChild(root_0, TOKEN933_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbt"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:610:1: rbs : 'RBS' TOKEN ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal934=null;
        Token TOKEN935=null;

        Object string_literal934_tree=null;
        Object TOKEN935_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:610:4: ( 'RBS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:610:5: 'RBS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal934=(Token)match(input,179,FOLLOW_179_in_rbs4246); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal934_tree = (Object)adaptor.create(string_literal934);
            adaptor.addChild(root_0, string_literal934_tree);
            }
            TOKEN935=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs4248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN935_tree = (Object)adaptor.create(TOKEN935);
            adaptor.addChild(root_0, TOKEN935_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:614:1: rn : 'RN' TOKEN ;
    public final ChemicalChunkerParser.rn_return rn() throws RecognitionException {
        ChemicalChunkerParser.rn_return retval = new ChemicalChunkerParser.rn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal936=null;
        Token TOKEN937=null;

        Object string_literal936_tree=null;
        Object TOKEN937_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:614:3: ( 'RN' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:614:4: 'RN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal936=(Token)match(input,180,FOLLOW_180_in_rn4256); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal936_tree = (Object)adaptor.create(string_literal936);
            adaptor.addChild(root_0, string_literal936_tree);
            }
            TOKEN937=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rn4258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN937_tree = (Object)adaptor.create(TOKEN937);
            adaptor.addChild(root_0, TOKEN937_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rn"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:617:1: rp : 'RP' TOKEN ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal938=null;
        Token TOKEN939=null;

        Object string_literal938_tree=null;
        Object TOKEN939_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:617:3: ( 'RP' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:617:4: 'RP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal938=(Token)match(input,181,FOLLOW_181_in_rp4265); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal938_tree = (Object)adaptor.create(string_literal938);
            adaptor.addChild(root_0, string_literal938_tree);
            }
            TOKEN939=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp4267); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN939_tree = (Object)adaptor.create(TOKEN939);
            adaptor.addChild(root_0, TOKEN939_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:620:1: sym : 'SYM' TOKEN ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal940=null;
        Token TOKEN941=null;

        Object string_literal940_tree=null;
        Object TOKEN941_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:620:5: ( 'SYM' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:620:7: 'SYM' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal940=(Token)match(input,182,FOLLOW_182_in_sym4276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal940_tree = (Object)adaptor.create(string_literal940);
            adaptor.addChild(root_0, string_literal940_tree);
            }
            TOKEN941=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym4278); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN941_tree = (Object)adaptor.create(TOKEN941);
            adaptor.addChild(root_0, TOKEN941_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:623:1: to : 'TO' TOKEN ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal942=null;
        Token TOKEN943=null;

        Object string_literal942_tree=null;
        Object TOKEN943_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:623:3: ( 'TO' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:623:4: 'TO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal942=(Token)match(input,183,FOLLOW_183_in_to4285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal942_tree = (Object)adaptor.create(string_literal942);
            adaptor.addChild(root_0, string_literal942_tree);
            }
            TOKEN943=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to4287); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN943_tree = (Object)adaptor.create(TOKEN943);
            adaptor.addChild(root_0, TOKEN943_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:626:1: uh : 'UH' TOKEN ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal944=null;
        Token TOKEN945=null;

        Object string_literal944_tree=null;
        Object TOKEN945_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:626:3: ( 'UH' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:626:4: 'UH' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal944=(Token)match(input,184,FOLLOW_184_in_uh4294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal944_tree = (Object)adaptor.create(string_literal944);
            adaptor.addChild(root_0, string_literal944_tree);
            }
            TOKEN945=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh4296); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN945_tree = (Object)adaptor.create(TOKEN945);
            adaptor.addChild(root_0, TOKEN945_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:629:1: vb : 'VB' TOKEN ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal946=null;
        Token TOKEN947=null;

        Object string_literal946_tree=null;
        Object TOKEN947_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:629:3: ( 'VB' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:629:4: 'VB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal946=(Token)match(input,185,FOLLOW_185_in_vb4303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal946_tree = (Object)adaptor.create(string_literal946);
            adaptor.addChild(root_0, string_literal946_tree);
            }
            TOKEN947=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb4305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN947_tree = (Object)adaptor.create(TOKEN947);
            adaptor.addChild(root_0, TOKEN947_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:631:1: vbp : 'VBP' TOKEN ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal948=null;
        Token TOKEN949=null;

        Object string_literal948_tree=null;
        Object TOKEN949_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:631:5: ( 'VBP' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:631:7: 'VBP' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal948=(Token)match(input,186,FOLLOW_186_in_vbp4313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal948_tree = (Object)adaptor.create(string_literal948);
            adaptor.addChild(root_0, string_literal948_tree);
            }
            TOKEN949=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp4315); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN949_tree = (Object)adaptor.create(TOKEN949);
            adaptor.addChild(root_0, TOKEN949_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:634:1: vbd : 'VBD' TOKEN ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal950=null;
        Token TOKEN951=null;

        Object string_literal950_tree=null;
        Object TOKEN951_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:634:4: ( 'VBD' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:634:5: 'VBD' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal950=(Token)match(input,187,FOLLOW_187_in_vbd4322); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal950_tree = (Object)adaptor.create(string_literal950);
            adaptor.addChild(root_0, string_literal950_tree);
            }
            TOKEN951=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd4324); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN951_tree = (Object)adaptor.create(TOKEN951);
            adaptor.addChild(root_0, TOKEN951_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:637:1: vbg : 'VBG' TOKEN ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal952=null;
        Token TOKEN953=null;

        Object string_literal952_tree=null;
        Object TOKEN953_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:637:4: ( 'VBG' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:637:5: 'VBG' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal952=(Token)match(input,188,FOLLOW_188_in_vbg4331); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal952_tree = (Object)adaptor.create(string_literal952);
            adaptor.addChild(root_0, string_literal952_tree);
            }
            TOKEN953=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg4333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN953_tree = (Object)adaptor.create(TOKEN953);
            adaptor.addChild(root_0, TOKEN953_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:640:1: vbn : 'VBN' TOKEN ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal954=null;
        Token TOKEN955=null;

        Object string_literal954_tree=null;
        Object TOKEN955_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:640:4: ( 'VBN' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:640:5: 'VBN' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal954=(Token)match(input,189,FOLLOW_189_in_vbn4340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal954_tree = (Object)adaptor.create(string_literal954);
            adaptor.addChild(root_0, string_literal954_tree);
            }
            TOKEN955=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn4342); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN955_tree = (Object)adaptor.create(TOKEN955);
            adaptor.addChild(root_0, TOKEN955_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:643:1: vbz : 'VBZ' TOKEN ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal956=null;
        Token TOKEN957=null;

        Object string_literal956_tree=null;
        Object TOKEN957_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:643:4: ( 'VBZ' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:643:5: 'VBZ' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal956=(Token)match(input,190,FOLLOW_190_in_vbz4349); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal956_tree = (Object)adaptor.create(string_literal956);
            adaptor.addChild(root_0, string_literal956_tree);
            }
            TOKEN957=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz4351); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN957_tree = (Object)adaptor.create(TOKEN957);
            adaptor.addChild(root_0, TOKEN957_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:646:1: wdt : 'WDT' TOKEN ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal958=null;
        Token TOKEN959=null;

        Object string_literal958_tree=null;
        Object TOKEN959_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:646:4: ( 'WDT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:646:5: 'WDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal958=(Token)match(input,191,FOLLOW_191_in_wdt4358); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal958_tree = (Object)adaptor.create(string_literal958);
            adaptor.addChild(root_0, string_literal958_tree);
            }
            TOKEN959=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt4360); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN959_tree = (Object)adaptor.create(TOKEN959);
            adaptor.addChild(root_0, TOKEN959_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:649:1: wp_poss : 'WP$' TOKEN ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal960=null;
        Token TOKEN961=null;

        Object string_literal960_tree=null;
        Object TOKEN961_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:649:8: ( 'WP$' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:649:9: 'WP$' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal960=(Token)match(input,192,FOLLOW_192_in_wp_poss4367); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal960_tree = (Object)adaptor.create(string_literal960);
            adaptor.addChild(root_0, string_literal960_tree);
            }
            TOKEN961=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss4369); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN961_tree = (Object)adaptor.create(TOKEN961);
            adaptor.addChild(root_0, TOKEN961_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wpo_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wpo"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:653:1: wpo : 'WPO' TOKEN ;
    public final ChemicalChunkerParser.wpo_return wpo() throws RecognitionException {
        ChemicalChunkerParser.wpo_return retval = new ChemicalChunkerParser.wpo_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal962=null;
        Token TOKEN963=null;

        Object string_literal962_tree=null;
        Object TOKEN963_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:653:4: ( 'WPO' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:653:5: 'WPO' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal962=(Token)match(input,193,FOLLOW_193_in_wpo4377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal962_tree = (Object)adaptor.create(string_literal962);
            adaptor.addChild(root_0, string_literal962_tree);
            }
            TOKEN963=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wpo4379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN963_tree = (Object)adaptor.create(TOKEN963);
            adaptor.addChild(root_0, TOKEN963_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wpo"

    public static class wps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wps"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:656:1: wps : 'WPS' TOKEN ;
    public final ChemicalChunkerParser.wps_return wps() throws RecognitionException {
        ChemicalChunkerParser.wps_return retval = new ChemicalChunkerParser.wps_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal964=null;
        Token TOKEN965=null;

        Object string_literal964_tree=null;
        Object TOKEN965_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:656:4: ( 'WPS' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:656:5: 'WPS' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal964=(Token)match(input,194,FOLLOW_194_in_wps4386); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal964_tree = (Object)adaptor.create(string_literal964);
            adaptor.addChild(root_0, string_literal964_tree);
            }
            TOKEN965=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wps4388); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN965_tree = (Object)adaptor.create(TOKEN965);
            adaptor.addChild(root_0, TOKEN965_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wps"

    public static class wql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wql"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:659:1: wql : 'WQL' TOKEN ;
    public final ChemicalChunkerParser.wql_return wql() throws RecognitionException {
        ChemicalChunkerParser.wql_return retval = new ChemicalChunkerParser.wql_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal966=null;
        Token TOKEN967=null;

        Object string_literal966_tree=null;
        Object TOKEN967_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:659:4: ( 'WQL' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:659:5: 'WQL' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal966=(Token)match(input,195,FOLLOW_195_in_wql4395); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal966_tree = (Object)adaptor.create(string_literal966);
            adaptor.addChild(root_0, string_literal966_tree);
            }
            TOKEN967=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wql4397); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN967_tree = (Object)adaptor.create(TOKEN967);
            adaptor.addChild(root_0, TOKEN967_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wql"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:662:1: wrb : 'WRB' TOKEN ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal968=null;
        Token TOKEN969=null;

        Object string_literal968_tree=null;
        Object TOKEN969_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:662:4: ( 'WRB' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:662:5: 'WRB' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal968=(Token)match(input,196,FOLLOW_196_in_wrb4404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal968_tree = (Object)adaptor.create(string_literal968);
            adaptor.addChild(root_0, string_literal968_tree);
            }
            TOKEN969=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb4406); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN969_tree = (Object)adaptor.create(TOKEN969);
            adaptor.addChild(root_0, TOKEN969_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "wrb"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:664:1: pdt : 'PDT' TOKEN ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);

        Object root_0 = null;

        Token string_literal970=null;
        Token TOKEN971=null;

        Object string_literal970_tree=null;
        Object TOKEN971_tree=null;

        try {
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:664:4: ( 'PDT' TOKEN )
            // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:664:5: 'PDT' TOKEN
            {
            root_0 = (Object)adaptor.nil();

            string_literal970=(Token)match(input,197,FOLLOW_197_in_pdt4412); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal970_tree = (Object)adaptor.create(string_literal970);
            adaptor.addChild(root_0, string_literal970_tree);
            }
            TOKEN971=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt4414); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TOKEN971_tree = (Object)adaptor.create(TOKEN971);
            adaptor.addChild(root_0, TOKEN971_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pdt"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:14: ( sentence )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:14: sentence
        {
        pushFollow(FOLLOW_sentence_in_synpred2_ChemicalChunker231);
        sentence();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:23: ( unmatchedPhrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:23: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker233);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred4_ChemicalChunker
    public final void synpred4_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:45: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:35:45: comma
        {
        pushFollow(FOLLOW_comma_in_synpred4_ChemicalChunker241);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:13: ( nounphrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:13: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred6_ChemicalChunker254);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:24: ( verbphrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:24: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred7_ChemicalChunker256);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:35: ( prepphrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:35: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred8_ChemicalChunker258);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:49: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:49: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred9_ChemicalChunker263);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:56: ( colon )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:56: colon
        {
        pushFollow(FOLLOW_colon_in_synpred10_ChemicalChunker265);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:66: ( conjunction )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:66: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred11_ChemicalChunker271);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:78: ( rbconj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:37:78: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred12_ChemicalChunker273);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:5: ( fw )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:5: fw
        {
        pushFollow(FOLLOW_fw_in_synpred13_ChemicalChunker307);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred14_ChemicalChunker
    public final void synpred14_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:8: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:8: noun
        {
        pushFollow(FOLLOW_noun_in_synpred14_ChemicalChunker309);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_ChemicalChunker

    // $ANTLR start synpred15_ChemicalChunker
    public final void synpred15_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:13: ( tmunicode )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:13: tmunicode
        {
        pushFollow(FOLLOW_tmunicode_in_synpred15_ChemicalChunker311);
        tmunicode();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_ChemicalChunker

    // $ANTLR start synpred16_ChemicalChunker
    public final void synpred16_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:23: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred16_ChemicalChunker313);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_ChemicalChunker

    // $ANTLR start synpred18_ChemicalChunker
    public final void synpred18_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:34: ( dt )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:34: dt
        {
        pushFollow(FOLLOW_dt_in_synpred18_ChemicalChunker317);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_ChemicalChunker

    // $ANTLR start synpred20_ChemicalChunker
    public final void synpred20_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:43: ( oscarcd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:43: oscarcd
        {
        pushFollow(FOLLOW_oscarcd_in_synpred20_ChemicalChunker321);
        oscarcd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred20_ChemicalChunker

    // $ANTLR start synpred21_ChemicalChunker
    public final void synpred21_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:51: ( oscarcm )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:51: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred21_ChemicalChunker323);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred21_ChemicalChunker

    // $ANTLR start synpred22_ChemicalChunker
    public final void synpred22_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:59: ( oscarrn )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:59: oscarrn
        {
        pushFollow(FOLLOW_oscarrn_in_synpred22_ChemicalChunker325);
        oscarrn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred22_ChemicalChunker

    // $ANTLR start synpred23_ChemicalChunker
    public final void synpred23_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:67: ( oscaront )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:67: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred23_ChemicalChunker327);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_ChemicalChunker

    // $ANTLR start synpred24_ChemicalChunker
    public final void synpred24_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:76: ( brackets )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:76: brackets
        {
        pushFollow(FOLLOW_brackets_in_synpred24_ChemicalChunker329);
        brackets();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_ChemicalChunker

    // $ANTLR start synpred25_ChemicalChunker
    public final void synpred25_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:85: ( sym )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:85: sym
        {
        pushFollow(FOLLOW_sym_in_synpred25_ChemicalChunker331);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred25_ChemicalChunker

    // $ANTLR start synpred29_ChemicalChunker
    public final void synpred29_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:102: ( number )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:102: number
        {
        pushFollow(FOLLOW_number_in_synpred29_ChemicalChunker339);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_ChemicalChunker

    // $ANTLR start synpred30_ChemicalChunker
    public final void synpred30_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:109: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred30_ChemicalChunker341);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_ChemicalChunker

    // $ANTLR start synpred31_ChemicalChunker
    public final void synpred31_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:115: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:44:115: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred31_ChemicalChunker343);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred31_ChemicalChunker

    // $ANTLR start synpred33_ChemicalChunker
    public final void synpred33_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:51:4: ( nounphraseStructure1 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:51:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred33_ChemicalChunker382);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred33_ChemicalChunker

    // $ANTLR start synpred35_ChemicalChunker
    public final void synpred35_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:11: ( dt )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred35_ChemicalChunker417);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_ChemicalChunker

    // $ANTLR start synpred36_ChemicalChunker
    public final void synpred36_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:15: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:15: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred36_ChemicalChunker420);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_ChemicalChunker

    // $ANTLR start synpred37_ChemicalChunker
    public final void synpred37_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:25: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:25: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred37_ChemicalChunker425);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_ChemicalChunker

    // $ANTLR start synpred38_ChemicalChunker
    public final void synpred38_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:40: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:40: noun
        {
        pushFollow(FOLLOW_noun_in_synpred38_ChemicalChunker427);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_ChemicalChunker

    // $ANTLR start synpred39_ChemicalChunker
    public final void synpred39_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:45: ( number )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:45: number
        {
        pushFollow(FOLLOW_number_in_synpred39_ChemicalChunker429);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_ChemicalChunker

    // $ANTLR start synpred40_ChemicalChunker
    public final void synpred40_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:52: ( ratio )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:52: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred40_ChemicalChunker431);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_ChemicalChunker

    // $ANTLR start synpred41_ChemicalChunker
    public final void synpred41_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:64: ( conjunction )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:64: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred41_ChemicalChunker439);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_ChemicalChunker

    // $ANTLR start synpred42_ChemicalChunker
    public final void synpred42_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:77: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:77: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred42_ChemicalChunker442);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_ChemicalChunker

    // $ANTLR start synpred43_ChemicalChunker
    public final void synpred43_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:86: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:86: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred43_ChemicalChunker446);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred43_ChemicalChunker

    // $ANTLR start synpred44_ChemicalChunker
    public final void synpred44_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:101: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:101: noun
        {
        pushFollow(FOLLOW_noun_in_synpred44_ChemicalChunker448);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_ChemicalChunker

    // $ANTLR start synpred45_ChemicalChunker
    public final void synpred45_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:106: ( number )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:106: number
        {
        pushFollow(FOLLOW_number_in_synpred45_ChemicalChunker450);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_ChemicalChunker

    // $ANTLR start synpred46_ChemicalChunker
    public final void synpred46_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:64: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:64: ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio )
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:64: ( conjunction )*
        loop163:
        do {
            int alt163=2;
            alt163 = dfa163.predict(input);
            switch (alt163) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred46_ChemicalChunker439);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop163;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:77: ( advAdj )*
        loop164:
        do {
            int alt164=2;
            alt164 = dfa164.predict(input);
            switch (alt164) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: advAdj
        	    {
        	    pushFollow(FOLLOW_advAdj_in_synpred46_ChemicalChunker442);
        	    advAdj();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop164;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:85: ( dissolvePhrase | noun | number | ratio )
        int alt165=4;
        alt165 = dfa165.predict(input);
        switch (alt165) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:86: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred46_ChemicalChunker446);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:101: noun
                {
                pushFollow(FOLLOW_noun_in_synpred46_ChemicalChunker448);
                noun();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:106: number
                {
                pushFollow(FOLLOW_number_in_synpred46_ChemicalChunker450);
                number();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 4 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:113: ratio
                {
                pushFollow(FOLLOW_ratio_in_synpred46_ChemicalChunker452);
                ratio();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred46_ChemicalChunker

    // $ANTLR start synpred48_ChemicalChunker
    public final void synpred48_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:155: ( dissolvePhrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:155: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred48_ChemicalChunker468);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_ChemicalChunker

    // $ANTLR start synpred49_ChemicalChunker
    public final void synpred49_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:126: ( ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )? )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:126: ( prepphraseOf | prepphraseIN ) ( dissolvePhrase )?
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:126: ( prepphraseOf | prepphraseIN )
        int alt166=2;
        switch ( input.LA(1) ) {
        case 28:
            {
            alt166=1;
            }
            break;
        case 22:
            {
            alt166=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 166, 0, input);

            throw nvae;
        }

        switch (alt166) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:127: prepphraseOf
                {
                pushFollow(FOLLOW_prepphraseOf_in_synpred49_ChemicalChunker462);
                prepphraseOf();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:141: prepphraseIN
                {
                pushFollow(FOLLOW_prepphraseIN_in_synpred49_ChemicalChunker465);
                prepphraseIN();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:55:155: ( dissolvePhrase )?
        int alt167=2;
        switch ( input.LA(1) ) {
            case 11:
            case 12:
            case 13:
            case 14:
            case 18:
            case 39:
            case 55:
            case 103:
            case 111:
            case 127:
            case 145:
            case 146:
            case 147:
            case 148:
            case 156:
                {
                alt167=1;
                }
                break;
        }

        switch (alt167) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dissolvePhrase
                {
                pushFollow(FOLLOW_dissolvePhrase_in_synpred49_ChemicalChunker468);
                dissolvePhrase();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred49_ChemicalChunker

    // $ANTLR start synpred50_ChemicalChunker
    public final void synpred50_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:5: ( dissolveStructure1 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:5: dissolveStructure1
        {
        pushFollow(FOLLOW_dissolveStructure1_in_synpred50_ChemicalChunker483);
        dissolveStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred50_ChemicalChunker

    // $ANTLR start synpred51_ChemicalChunker
    public final void synpred51_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:24: ( dissolveStructure2 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:57:24: dissolveStructure2
        {
        pushFollow(FOLLOW_dissolveStructure2_in_synpred51_ChemicalChunker485);
        dissolveStructure2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_ChemicalChunker

    // $ANTLR start synpred52_ChemicalChunker
    public final void synpred52_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:8: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:8: adj
        {
        pushFollow(FOLLOW_adj_in_synpred52_ChemicalChunker516);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_ChemicalChunker

    // $ANTLR start synpred54_ChemicalChunker
    public final void synpred54_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:19: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:19: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred54_ChemicalChunker523);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_ChemicalChunker

    // $ANTLR start synpred56_ChemicalChunker
    public final void synpred56_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:58: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:58: adj
        {
        pushFollow(FOLLOW_adj_in_synpred56_ChemicalChunker534);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred56_ChemicalChunker

    // $ANTLR start synpred58_ChemicalChunker
    public final void synpred58_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:69: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:60:69: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred58_ChemicalChunker541);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred58_ChemicalChunker

    // $ANTLR start synpred61_ChemicalChunker
    public final void synpred61_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:4: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred61_ChemicalChunker564);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred61_ChemicalChunker

    // $ANTLR start synpred63_ChemicalChunker
    public final void synpred63_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:15: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:15: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred63_ChemicalChunker571);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred63_ChemicalChunker

    // $ANTLR start synpred65_ChemicalChunker
    public final void synpred65_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:54: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:54: adj
        {
        pushFollow(FOLLOW_adj_in_synpred65_ChemicalChunker582);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred65_ChemicalChunker

    // $ANTLR start synpred67_ChemicalChunker
    public final void synpred67_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:65: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:65: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred67_ChemicalChunker589);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred67_ChemicalChunker

    // $ANTLR start synpred68_ChemicalChunker
    public final void synpred68_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:92: ( conjunction molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:92: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred68_ChemicalChunker595);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred68_ChemicalChunker597);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred68_ChemicalChunker

    // $ANTLR start synpred69_ChemicalChunker
    public final void synpred69_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:42: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:42: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
        {
        pushFollow(FOLLOW_inin_in_synpred69_ChemicalChunker577);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:47: ( dtTHE )?
        int alt173=2;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt173=1;
                }
                break;
        }

        switch (alt173) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
                {
                pushFollow(FOLLOW_dtTHE_in_synpred69_ChemicalChunker579);
                dtTHE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:54: ( adj )?
        int alt174=2;
        alt174 = dfa174.predict(input);
        switch (alt174) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred69_ChemicalChunker582);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:59: ( nnp )?
        int alt175=2;
        switch ( input.LA(1) ) {
            case 156:
                {
                alt175=1;
                }
                break;
        }

        switch (alt175) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred69_ChemicalChunker585);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:64: ( molecule | unnamedmolecule )
        int alt176=2;
        alt176 = dfa176.predict(input);
        switch (alt176) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:65: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred69_ChemicalChunker589);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:74: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred69_ChemicalChunker591);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:91: ( conjunction molecule )*
        loop177:
        do {
            int alt177=2;
            switch ( input.LA(1) ) {
            case 103:
            case 126:
                {
                alt177=1;
                }
                break;

            }

            switch (alt177) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:62:92: conjunction molecule
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred69_ChemicalChunker595);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_molecule_in_synpred69_ChemicalChunker597);
        	    molecule();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop177;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred69_ChemicalChunker

    // $ANTLR start synpred71_ChemicalChunker
    public final void synpred71_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:14: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:14: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred71_ChemicalChunker617);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred71_ChemicalChunker

    // $ANTLR start synpred72_ChemicalChunker
    public final void synpred72_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:23: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:23: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred72_ChemicalChunker619);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred72_ChemicalChunker

    // $ANTLR start synpred74_ChemicalChunker
    public final void synpred74_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:66: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:66: adj
        {
        pushFollow(FOLLOW_adj_in_synpred74_ChemicalChunker630);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred74_ChemicalChunker

    // $ANTLR start synpred76_ChemicalChunker
    public final void synpred76_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:77: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:77: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred76_ChemicalChunker637);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred76_ChemicalChunker

    // $ANTLR start synpred77_ChemicalChunker
    public final void synpred77_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:104: ( conjunction molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:104: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred77_ChemicalChunker643);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred77_ChemicalChunker645);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred77_ChemicalChunker

    // $ANTLR start synpred78_ChemicalChunker
    public final void synpred78_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:54: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )* )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:54: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ( conjunction molecule )*
        {
        pushFollow(FOLLOW_inin_in_synpred78_ChemicalChunker625);
        inin();

        state._fsp--;
        if (state.failed) return ;
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:59: ( dtTHE )?
        int alt178=2;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt178=1;
                }
                break;
        }

        switch (alt178) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: dtTHE
                {
                pushFollow(FOLLOW_dtTHE_in_synpred78_ChemicalChunker627);
                dtTHE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:66: ( adj )?
        int alt179=2;
        alt179 = dfa179.predict(input);
        switch (alt179) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred78_ChemicalChunker630);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:71: ( nnp )?
        int alt180=2;
        switch ( input.LA(1) ) {
            case 156:
                {
                alt180=1;
                }
                break;
        }

        switch (alt180) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: nnp
                {
                pushFollow(FOLLOW_nnp_in_synpred78_ChemicalChunker633);
                nnp();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:76: ( molecule | unnamedmolecule )
        int alt181=2;
        alt181 = dfa181.predict(input);
        switch (alt181) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:77: molecule
                {
                pushFollow(FOLLOW_molecule_in_synpred78_ChemicalChunker637);
                molecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:86: unnamedmolecule
                {
                pushFollow(FOLLOW_unnamedmolecule_in_synpred78_ChemicalChunker639);
                unnamedmolecule();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:103: ( conjunction molecule )*
        loop182:
        do {
            int alt182=2;
            switch ( input.LA(1) ) {
            case 103:
            case 126:
                {
                alt182=1;
                }
                break;

            }

            switch (alt182) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:65:104: conjunction molecule
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred78_ChemicalChunker643);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    pushFollow(FOLLOW_molecule_in_synpred78_ChemicalChunker645);
        	    molecule();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop182;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred78_ChemicalChunker

    // $ANTLR start synpred81_ChemicalChunker
    public final void synpred81_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:28: ( to )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:28: to
        {
        pushFollow(FOLLOW_to_in_synpred81_ChemicalChunker698);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred81_ChemicalChunker

    // $ANTLR start synpred82_ChemicalChunker
    public final void synpred82_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:32: ( inAll )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred82_ChemicalChunker701);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred82_ChemicalChunker

    // $ANTLR start synpred88_ChemicalChunker
    public final void synpred88_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:71: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred88_ChemicalChunker720);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred88_ChemicalChunker

    // $ANTLR start synpred89_ChemicalChunker
    public final void synpred89_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:77: ( md )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:77: md
        {
        pushFollow(FOLLOW_md_in_synpred89_ChemicalChunker723);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_ChemicalChunker

    // $ANTLR start synpred90_ChemicalChunker
    public final void synpred90_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:81: ( adv )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred90_ChemicalChunker726);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_ChemicalChunker

    // $ANTLR start synpred91_ChemicalChunker
    public final void synpred91_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:86: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred91_ChemicalChunker729);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred91_ChemicalChunker

    // $ANTLR start synpred92_ChemicalChunker
    public final void synpred92_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:91: ( neg )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred92_ChemicalChunker732);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_ChemicalChunker

    // $ANTLR start synpred93_ChemicalChunker
    public final void synpred93_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:49: ( md )*
        loop183:
        do {
            int alt183=2;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt183=1;
                }
                break;

            }

            switch (alt183) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred93_ChemicalChunker708);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop183;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:53: ( rbconj )?
        int alt184=2;
        switch ( input.LA(1) ) {
            case 177:
                {
                alt184=1;
                }
                break;
        }

        switch (alt184) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred93_ChemicalChunker711);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:61: ( adv )*
        loop185:
        do {
            int alt185=2;
            switch ( input.LA(1) ) {
            case 175:
            case 176:
            case 178:
            case 179:
            case 181:
                {
                alt185=1;
                }
                break;

            }

            switch (alt185) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred93_ChemicalChunker714);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop185;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:66: ( adj )?
        int alt186=2;
        switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 18:
            case 145:
            case 146:
            case 147:
            case 148:
                {
                alt186=1;
                }
                break;
        }

        switch (alt186) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred93_ChemicalChunker717);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:71: ( verb )+
        int cnt187=0;
        loop187:
        do {
            int alt187=2;
            switch ( input.LA(1) ) {
            case 56:
            case 57:
            case 58:
            case 59:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 72:
            case 74:
            case 75:
            case 76:
            case 77:
            case 79:
            case 81:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 89:
            case 91:
            case 92:
            case 93:
            case 95:
            case 96:
            case 98:
            case 99:
            case 100:
            case 185:
            case 186:
            case 187:
            case 188:
            case 189:
            case 190:
                {
                alt187=1;
                }
                break;

            }

            switch (alt187) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred93_ChemicalChunker720);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt187 >= 1 ) break loop187;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(187, input);
                    throw eee;
            }
            cnt187++;
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:77: ( md )*
        loop188:
        do {
            int alt188=2;
            switch ( input.LA(1) ) {
            case 149:
                {
                alt188=1;
                }
                break;

            }

            switch (alt188) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred93_ChemicalChunker723);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop188;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:81: ( adv )*
        loop189:
        do {
            int alt189=2;
            switch ( input.LA(1) ) {
            case 175:
            case 176:
            case 178:
            case 179:
            case 181:
                {
                alt189=1;
                }
                break;

            }

            switch (alt189) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred93_ChemicalChunker726);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop189;
            }
        } while (true);

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:86: ( adj )?
        int alt190=2;
        switch ( input.LA(1) ) {
            case 12:
            case 13:
            case 18:
            case 145:
            case 146:
            case 147:
            case 148:
                {
                alt190=1;
                }
                break;
        }

        switch (alt190) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred93_ChemicalChunker729);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:91: ( neg )?
        int alt191=2;
        switch ( input.LA(1) ) {
            case 105:
                {
                alt191=1;
                }
                break;
        }

        switch (alt191) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred93_ChemicalChunker732);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred93_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:99: ( inoff )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred94_ChemicalChunker738);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred97_ChemicalChunker
    public final void synpred97_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:107: ( ( cc )? ( comma )? prepphrase )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:107: ( cc )? ( comma )? prepphrase
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:107: ( cc )?
        int alt192=2;
        switch ( input.LA(1) ) {
            case 126:
                {
                alt192=1;
                }
                break;
        }

        switch (alt192) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred97_ChemicalChunker742);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:76:111: ( comma )?
        int alt193=2;
        switch ( input.LA(1) ) {
            case 103:
                {
                alt193=1;
                }
                break;
        }

        switch (alt193) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred97_ChemicalChunker745);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred97_ChemicalChunker748);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_ChemicalChunker

    // $ANTLR start synpred107_ChemicalChunker
    public final void synpred107_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:58: ( degassMultiVerb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred107_ChemicalChunker778);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred107_ChemicalChunker

    // $ANTLR start synpred120_ChemicalChunker
    public final void synpred120_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:183: ( vbdegass )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:77:183: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred120_ChemicalChunker804);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred120_ChemicalChunker

    // $ANTLR start synpred142_ChemicalChunker
    public final void synpred142_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:22: ( wpo )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:22: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred142_ChemicalChunker877);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_ChemicalChunker

    // $ANTLR start synpred143_ChemicalChunker
    public final void synpred143_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:26: ( wpo )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:82:26: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred143_ChemicalChunker879);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred143_ChemicalChunker

    // $ANTLR start synpred148_ChemicalChunker
    public final void synpred148_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:83:24: ( dash nounStructure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:83:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred148_ChemicalChunker900);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred148_ChemicalChunker902);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred148_ChemicalChunker

    // $ANTLR start synpred151_ChemicalChunker
    public final void synpred151_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:31: ( citation )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred151_ChemicalChunker917);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_ChemicalChunker

    // $ANTLR start synpred152_ChemicalChunker
    public final void synpred152_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:40: ( cycles )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred152_ChemicalChunker919);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_ChemicalChunker

    // $ANTLR start synpred153_ChemicalChunker
    public final void synpred153_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:47: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred153_ChemicalChunker921);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred153_ChemicalChunker

    // $ANTLR start synpred154_ChemicalChunker
    public final void synpred154_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:56: ( apparatus )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred154_ChemicalChunker923);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred154_ChemicalChunker

    // $ANTLR start synpred155_ChemicalChunker
    public final void synpred155_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:66: ( mixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred155_ChemicalChunker925);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred155_ChemicalChunker

    // $ANTLR start synpred156_ChemicalChunker
    public final void synpred156_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:74: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:74: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred156_ChemicalChunker927);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred156_ChemicalChunker

    // $ANTLR start synpred158_ChemicalChunker
    public final void synpred158_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:98: ( nnstate )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:98: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred158_ChemicalChunker931);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_ChemicalChunker

    // $ANTLR start synpred159_ChemicalChunker
    public final void synpred159_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:106: ( nn )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:106: nn
        {
        pushFollow(FOLLOW_nn_in_synpred159_ChemicalChunker933);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred159_ChemicalChunker

    // $ANTLR start synpred162_ChemicalChunker
    public final void synpred162_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:117: ( nnadd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:117: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred162_ChemicalChunker939);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_ChemicalChunker

    // $ANTLR start synpred165_ChemicalChunker
    public final void synpred165_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:151: ( oscarcpr )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:151: oscarcpr
        {
        pushFollow(FOLLOW_oscarcpr_in_synpred165_ChemicalChunker945);
        oscarcpr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred165_ChemicalChunker

    // $ANTLR start synpred166_ChemicalChunker
    public final void synpred166_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:160: ( range )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:160: range
        {
        pushFollow(FOLLOW_range_in_synpred166_ChemicalChunker947);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred166_ChemicalChunker

    // $ANTLR start synpred167_ChemicalChunker
    public final void synpred167_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:166: ( amount )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:166: amount
        {
        pushFollow(FOLLOW_amount_in_synpred167_ChemicalChunker949);
        amount();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred167_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:208: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:208: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred172_ChemicalChunker959);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:217: ( nnchementity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:217: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred173_ChemicalChunker961);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred174_ChemicalChunker
    public final void synpred174_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:230: ( measurements )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:230: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred174_ChemicalChunker963);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:286: ( nnpressure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:286: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred180_ChemicalChunker975);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred189_ChemicalChunker
    public final void synpred189_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:377: ( wdt )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:377: wdt
        {
        pushFollow(FOLLOW_wdt_in_synpred189_ChemicalChunker993);
        wdt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_ChemicalChunker

    // $ANTLR start synpred190_ChemicalChunker
    public final void synpred190_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:381: ( wp_poss )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:381: wp_poss
        {
        pushFollow(FOLLOW_wp_poss_in_synpred190_ChemicalChunker995);
        wp_poss();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_ChemicalChunker

    // $ANTLR start synpred191_ChemicalChunker
    public final void synpred191_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:389: ( wpo )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:389: wpo
        {
        pushFollow(FOLLOW_wpo_in_synpred191_ChemicalChunker997);
        wpo();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_ChemicalChunker

    // $ANTLR start synpred192_ChemicalChunker
    public final void synpred192_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:393: ( wps )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:393: wps
        {
        pushFollow(FOLLOW_wps_in_synpred192_ChemicalChunker999);
        wps();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_ChemicalChunker

    // $ANTLR start synpred198_ChemicalChunker
    public final void synpred198_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:445: ( number )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:445: number
        {
        pushFollow(FOLLOW_number_in_synpred198_ChemicalChunker1011);
        number();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred198_ChemicalChunker

    // $ANTLR start synpred199_ChemicalChunker
    public final void synpred199_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:452: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:85:452: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred199_ChemicalChunker1013);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_ChemicalChunker

    // $ANTLR start synpred213_ChemicalChunker
    public final void synpred213_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:90:10: ( numberratio )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:90:10: numberratio
        {
        pushFollow(FOLLOW_numberratio_in_synpred213_ChemicalChunker1107);
        numberratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_ChemicalChunker

    // $ANTLR start synpred214_ChemicalChunker
    public final void synpred214_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:91:20: ( colon oscarcd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:91:20: colon oscarcd
        {
        pushFollow(FOLLOW_colon_in_synpred214_ChemicalChunker1136);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_oscarcd_in_synpred214_ChemicalChunker1138);
        oscarcd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_ChemicalChunker

    // $ANTLR start synpred215_ChemicalChunker
    public final void synpred215_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:91:34: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:91:34: cd
        {
        pushFollow(FOLLOW_cd_in_synpred215_ChemicalChunker1140);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred215_ChemicalChunker

    // $ANTLR start synpred216_ChemicalChunker
    public final void synpred216_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:93:12: ( colon noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:93:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred216_ChemicalChunker1157);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred216_ChemicalChunker1159);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred216_ChemicalChunker

    // $ANTLR start synpred229_ChemicalChunker
    public final void synpred229_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:20: ( fw )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred229_ChemicalChunker1358);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_ChemicalChunker

    // $ANTLR start synpred230_ChemicalChunker
    public final void synpred230_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:23: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred230_ChemicalChunker1360);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred230_ChemicalChunker

    // $ANTLR start synpred231_ChemicalChunker
    public final void synpred231_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:28: ( nn )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:28: nn
        {
        pushFollow(FOLLOW_nn_in_synpred231_ChemicalChunker1362);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_ChemicalChunker

    // $ANTLR start synpred232_ChemicalChunker
    public final void synpred232_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:31: ( measurements )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:31: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred232_ChemicalChunker1364);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_ChemicalChunker

    // $ANTLR start synpred235_ChemicalChunker
    public final void synpred235_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:57: ( stop )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:57: stop
        {
        pushFollow(FOLLOW_stop_in_synpred235_ChemicalChunker1370);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_ChemicalChunker

    // $ANTLR start synpred236_ChemicalChunker
    public final void synpred236_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:62: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:62: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred236_ChemicalChunker1372);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_ChemicalChunker

    // $ANTLR start synpred237_ChemicalChunker
    public final void synpred237_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:76: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:76: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred237_ChemicalChunker1374);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_ChemicalChunker

    // $ANTLR start synpred238_ChemicalChunker
    public final void synpred238_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:85: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:85: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred238_ChemicalChunker1376);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_ChemicalChunker

    // $ANTLR start synpred240_ChemicalChunker
    public final void synpred240_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:106: ( sym )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:106: sym
        {
        pushFollow(FOLLOW_sym_in_synpred240_ChemicalChunker1380);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred240_ChemicalChunker

    // $ANTLR start synpred241_ChemicalChunker
    public final void synpred241_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:110: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:110: cd
        {
        pushFollow(FOLLOW_cd_in_synpred241_ChemicalChunker1382);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_ChemicalChunker

    // $ANTLR start synpred242_ChemicalChunker
    public final void synpred242_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:113: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:113: noun
        {
        pushFollow(FOLLOW_noun_in_synpred242_ChemicalChunker1384);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred242_ChemicalChunker

    // $ANTLR start synpred243_ChemicalChunker
    public final void synpred243_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:118: ( inof )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:118: inof
        {
        pushFollow(FOLLOW_inof_in_synpred243_ChemicalChunker1386);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_ChemicalChunker

    // $ANTLR start synpred244_ChemicalChunker
    public final void synpred244_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:123: ( inAll )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:123: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred244_ChemicalChunker1388);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_ChemicalChunker

    // $ANTLR start synpred245_ChemicalChunker
    public final void synpred245_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:129: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:129: cd
        {
        pushFollow(FOLLOW_cd_in_synpred245_ChemicalChunker1390);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_ChemicalChunker

    // $ANTLR start synpred246_ChemicalChunker
    public final void synpred246_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:132: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:132: comma
        {
        pushFollow(FOLLOW_comma_in_synpred246_ChemicalChunker1392);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred246_ChemicalChunker

    // $ANTLR start synpred247_ChemicalChunker
    public final void synpred247_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:138: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:138: adj
        {
        pushFollow(FOLLOW_adj_in_synpred247_ChemicalChunker1394);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred247_ChemicalChunker

    // $ANTLR start synpred249_ChemicalChunker
    public final void synpred249_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:155: ( minimixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:155: minimixture
        {
        pushFollow(FOLLOW_minimixture_in_synpred249_ChemicalChunker1402);
        minimixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_ChemicalChunker

    // $ANTLR start synpred250_ChemicalChunker
    public final void synpred250_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:167: ( fw )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:167: fw
        {
        pushFollow(FOLLOW_fw_in_synpred250_ChemicalChunker1404);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_ChemicalChunker

    // $ANTLR start synpred251_ChemicalChunker
    public final void synpred251_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:170: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:170: verb
        {
        pushFollow(FOLLOW_verb_in_synpred251_ChemicalChunker1406);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_ChemicalChunker

    // $ANTLR start synpred252_ChemicalChunker
    public final void synpred252_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:175: ( measurements )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:175: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred252_ChemicalChunker1408);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_ChemicalChunker

    // $ANTLR start synpred253_ChemicalChunker
    public final void synpred253_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:188: ( nnyield )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:188: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred253_ChemicalChunker1410);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_ChemicalChunker

    // $ANTLR start synpred256_ChemicalChunker
    public final void synpred256_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:209: ( stop )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:209: stop
        {
        pushFollow(FOLLOW_stop_in_synpred256_ChemicalChunker1416);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:214: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:214: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred257_ChemicalChunker1418);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:228: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:228: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred258_ChemicalChunker1420);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:237: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:237: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred259_ChemicalChunker1422);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred261_ChemicalChunker
    public final void synpred261_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:258: ( sym )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:258: sym
        {
        pushFollow(FOLLOW_sym_in_synpred261_ChemicalChunker1426);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:262: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:262: cd
        {
        pushFollow(FOLLOW_cd_in_synpred262_ChemicalChunker1428);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:265: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:265: noun
        {
        pushFollow(FOLLOW_noun_in_synpred263_ChemicalChunker1430);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:270: ( inof )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:270: inof
        {
        pushFollow(FOLLOW_inof_in_synpred264_ChemicalChunker1432);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred265_ChemicalChunker
    public final void synpred265_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:275: ( inAll )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:275: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred265_ChemicalChunker1434);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_ChemicalChunker

    // $ANTLR start synpred266_ChemicalChunker
    public final void synpred266_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:281: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:281: cd
        {
        pushFollow(FOLLOW_cd_in_synpred266_ChemicalChunker1436);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_ChemicalChunker

    // $ANTLR start synpred267_ChemicalChunker
    public final void synpred267_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:284: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:284: comma
        {
        pushFollow(FOLLOW_comma_in_synpred267_ChemicalChunker1438);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:290: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:290: adj
        {
        pushFollow(FOLLOW_adj_in_synpred268_ChemicalChunker1440);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred270_ChemicalChunker
    public final void synpred270_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:300: ( stop )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:111:300: stop
        {
        pushFollow(FOLLOW_stop_in_synpred270_ChemicalChunker1444);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:24: ( fw )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:24: fw
        {
        pushFollow(FOLLOW_fw_in_synpred272_ChemicalChunker1506);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:27: ( nn )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:27: nn
        {
        pushFollow(FOLLOW_nn_in_synpred273_ChemicalChunker1508);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred274_ChemicalChunker
    public final void synpred274_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:30: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:30: verb
        {
        pushFollow(FOLLOW_verb_in_synpred274_ChemicalChunker1510);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred274_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:35: ( measurements )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:35: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred275_ChemicalChunker1512);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred278_ChemicalChunker
    public final void synpred278_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:61: ( stop )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:61: stop
        {
        pushFollow(FOLLOW_stop_in_synpred278_ChemicalChunker1518);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:66: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:66: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred279_ChemicalChunker1520);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:80: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:80: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred280_ChemicalChunker1522);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:89: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:89: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred281_ChemicalChunker1524);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:110: ( sym )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:110: sym
        {
        pushFollow(FOLLOW_sym_in_synpred283_ChemicalChunker1528);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred284_ChemicalChunker
    public final void synpred284_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:114: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:114: cd
        {
        pushFollow(FOLLOW_cd_in_synpred284_ChemicalChunker1530);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_ChemicalChunker

    // $ANTLR start synpred285_ChemicalChunker
    public final void synpred285_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:117: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:117: noun
        {
        pushFollow(FOLLOW_noun_in_synpred285_ChemicalChunker1532);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:122: ( inof )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:122: inof
        {
        pushFollow(FOLLOW_inof_in_synpred286_ChemicalChunker1534);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred287_ChemicalChunker
    public final void synpred287_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:127: ( inAll )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:127: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred287_ChemicalChunker1536);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred287_ChemicalChunker

    // $ANTLR start synpred288_ChemicalChunker
    public final void synpred288_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:133: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:133: cd
        {
        pushFollow(FOLLOW_cd_in_synpred288_ChemicalChunker1538);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred288_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:136: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:136: comma
        {
        pushFollow(FOLLOW_comma_in_synpred289_ChemicalChunker1540);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:142: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:142: adj
        {
        pushFollow(FOLLOW_adj_in_synpred290_ChemicalChunker1542);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred292_ChemicalChunker
    public final void synpred292_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:159: ( fw )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:159: fw
        {
        pushFollow(FOLLOW_fw_in_synpred292_ChemicalChunker1550);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_ChemicalChunker

    // $ANTLR start synpred293_ChemicalChunker
    public final void synpred293_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:162: ( verb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:162: verb
        {
        pushFollow(FOLLOW_verb_in_synpred293_ChemicalChunker1552);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_ChemicalChunker

    // $ANTLR start synpred294_ChemicalChunker
    public final void synpred294_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:167: ( measurements )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:167: measurements
        {
        pushFollow(FOLLOW_measurements_in_synpred294_ChemicalChunker1554);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_ChemicalChunker

    // $ANTLR start synpred295_ChemicalChunker
    public final void synpred295_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:180: ( nnyield )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:180: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred295_ChemicalChunker1556);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_ChemicalChunker

    // $ANTLR start synpred298_ChemicalChunker
    public final void synpred298_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:201: ( stop )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:201: stop
        {
        pushFollow(FOLLOW_stop_in_synpred298_ChemicalChunker1562);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred298_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:206: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:206: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred299_ChemicalChunker1564);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred300_ChemicalChunker
    public final void synpred300_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:220: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:220: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred300_ChemicalChunker1566);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred300_ChemicalChunker

    // $ANTLR start synpred301_ChemicalChunker
    public final void synpred301_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:229: ( unnamedmolecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:229: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred301_ChemicalChunker1568);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred301_ChemicalChunker

    // $ANTLR start synpred303_ChemicalChunker
    public final void synpred303_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:250: ( sym )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:250: sym
        {
        pushFollow(FOLLOW_sym_in_synpred303_ChemicalChunker1572);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred303_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:254: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:254: cd
        {
        pushFollow(FOLLOW_cd_in_synpred304_ChemicalChunker1574);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // $ANTLR start synpred305_ChemicalChunker
    public final void synpred305_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:257: ( noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:257: noun
        {
        pushFollow(FOLLOW_noun_in_synpred305_ChemicalChunker1576);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred305_ChemicalChunker

    // $ANTLR start synpred306_ChemicalChunker
    public final void synpred306_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:262: ( inof )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:262: inof
        {
        pushFollow(FOLLOW_inof_in_synpred306_ChemicalChunker1578);
        inof();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_ChemicalChunker

    // $ANTLR start synpred307_ChemicalChunker
    public final void synpred307_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:267: ( inAll )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:267: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred307_ChemicalChunker1580);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:273: ( cd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:273: cd
        {
        pushFollow(FOLLOW_cd_in_synpred308_ChemicalChunker1582);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred309_ChemicalChunker
    public final void synpred309_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:276: ( comma )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:276: comma
        {
        pushFollow(FOLLOW_comma_in_synpred309_ChemicalChunker1584);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred309_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:282: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:282: adj
        {
        pushFollow(FOLLOW_adj_in_synpred310_ChemicalChunker1586);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred312_ChemicalChunker
    public final void synpred312_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:292: ( stop )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:116:292: stop
        {
        pushFollow(FOLLOW_stop_in_synpred312_ChemicalChunker1590);
        stop();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_ChemicalChunker

    // $ANTLR start synpred324_ChemicalChunker
    public final void synpred324_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:11: ( prepphraseAtmosphere )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred324_ChemicalChunker1645);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred324_ChemicalChunker

    // $ANTLR start synpred325_ChemicalChunker
    public final void synpred325_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:32: ( prepphraseTime )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred325_ChemicalChunker1647);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred325_ChemicalChunker

    // $ANTLR start synpred326_ChemicalChunker
    public final void synpred326_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:47: ( prepphraseTemp )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred326_ChemicalChunker1649);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_ChemicalChunker

    // $ANTLR start synpred327_ChemicalChunker
    public final void synpred327_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:62: ( prepphraseIN )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred327_ChemicalChunker1651);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred327_ChemicalChunker

    // $ANTLR start synpred328_ChemicalChunker
    public final void synpred328_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:75: ( prepphraseRole )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:124:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred328_ChemicalChunker1653);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred328_ChemicalChunker

    // $ANTLR start synpred332_ChemicalChunker
    public final void synpred332_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:136:3: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:136:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred332_ChemicalChunker1757);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred332_ChemicalChunker

    // $ANTLR start synpred337_ChemicalChunker
    public final void synpred337_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:136:35: ( nntime )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:136:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred337_ChemicalChunker1773);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_ChemicalChunker

    // $ANTLR start synpred340_ChemicalChunker
    public final void synpred340_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:16: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred340_ChemicalChunker1864);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred340_ChemicalChunker

    // $ANTLR start synpred341_ChemicalChunker
    public final void synpred341_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:33: ( nnatmosphere )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:146:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred341_ChemicalChunker1869);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred341_ChemicalChunker

    // $ANTLR start synpred359_ChemicalChunker
    public final void synpred359_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:153:5: ( advAdj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:153:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred359_ChemicalChunker1944);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred359_ChemicalChunker

    // $ANTLR start synpred364_ChemicalChunker
    public final void synpred364_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:153:36: ( nntemp )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:153:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred364_ChemicalChunker1959);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred364_ChemicalChunker

    // $ANTLR start synpred371_ChemicalChunker
    public final void synpred371_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:166:15: ( conjunction )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:166:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred371_ChemicalChunker2131);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred371_ChemicalChunker

    // $ANTLR start synpred372_ChemicalChunker
    public final void synpred372_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:166:15: ( ( conjunction )* apparatus )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:166:15: ( conjunction )* apparatus
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:166:15: ( conjunction )*
        loop195:
        do {
            int alt195=2;
            alt195 = dfa195.predict(input);
            switch (alt195) {
        	case 1 :
        	    // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred372_ChemicalChunker2131);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop195;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred372_ChemicalChunker2134);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred372_ChemicalChunker

    // $ANTLR start synpred375_ChemicalChunker
    public final void synpred375_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:22: ( nnApp )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:168:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred375_ChemicalChunker2152);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred375_ChemicalChunker

    // $ANTLR start synpred376_ChemicalChunker
    public final void synpred376_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:4: ( nnapparatus )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred376_ChemicalChunker2181);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred376_ChemicalChunker

    // $ANTLR start synpred377_ChemicalChunker
    public final void synpred377_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:18: ( dash nnapparatus )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:171:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred377_ChemicalChunker2185);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred377_ChemicalChunker2187);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred377_ChemicalChunker

    // $ANTLR start synpred378_ChemicalChunker
    public final void synpred378_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:8: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred378_ChemicalChunker2201);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred378_ChemicalChunker

    // $ANTLR start synpred379_ChemicalChunker
    public final void synpred379_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:17: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred379_ChemicalChunker2203);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred379_ChemicalChunker

    // $ANTLR start synpred380_ChemicalChunker
    public final void synpred380_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:21: ( nnpressure )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred380_ChemicalChunker2205);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred380_ChemicalChunker

    // $ANTLR start synpred381_ChemicalChunker
    public final void synpred381_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:32: ( nnadd )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred381_ChemicalChunker2207);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred381_ChemicalChunker

    // $ANTLR start synpred382_ChemicalChunker
    public final void synpred382_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:38: ( molecule )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred382_ChemicalChunker2209);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred382_ChemicalChunker

    // $ANTLR start synpred383_ChemicalChunker
    public final void synpred383_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:47: ( nnchementity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred383_ChemicalChunker2211);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred383_ChemicalChunker

    // $ANTLR start synpred384_ChemicalChunker
    public final void synpred384_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:60: ( nnstate )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred384_ChemicalChunker2213);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred384_ChemicalChunker

    // $ANTLR start synpred385_ChemicalChunker
    public final void synpred385_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:68: ( nn )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:173:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred385_ChemicalChunker2215);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred385_ChemicalChunker

    // $ANTLR start synpred388_ChemicalChunker
    public final void synpred388_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:43: ( dt )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:175:43: dt
        {
        pushFollow(FOLLOW_dt_in_synpred388_ChemicalChunker2241);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred388_ChemicalChunker

    // $ANTLR start synpred389_ChemicalChunker
    public final void synpred389_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:176:25: ( measurementtypes )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:176:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred389_ChemicalChunker2253);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_ChemicalChunker

    // $ANTLR start synpred395_ChemicalChunker
    public final void synpred395_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:24: ( oscarCompound1 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:24: oscarCompound1
        {
        pushFollow(FOLLOW_oscarCompound1_in_synpred395_ChemicalChunker2305);
        oscarCompound1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred395_ChemicalChunker

    // $ANTLR start synpred397_ChemicalChunker
    public final void synpred397_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:54: ( oscarCompound3 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:54: oscarCompound3
        {
        pushFollow(FOLLOW_oscarCompound3_in_synpred397_ChemicalChunker2309);
        oscarCompound3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred397_ChemicalChunker

    // $ANTLR start synpred399_ChemicalChunker
    public final void synpred399_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:93: ( adj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:93: adj
        {
        pushFollow(FOLLOW_adj_in_synpred399_ChemicalChunker2316);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred399_ChemicalChunker

    // $ANTLR start synpred400_ChemicalChunker
    public final void synpred400_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:98: ( reference )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:181:98: reference
        {
        pushFollow(FOLLOW_reference_in_synpred400_ChemicalChunker2319);
        reference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred400_ChemicalChunker

    // $ANTLR start synpred401_ChemicalChunker
    public final void synpred401_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:186:26: ( oscarcm )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:186:26: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred401_ChemicalChunker2397);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred401_ChemicalChunker

    // $ANTLR start synpred402_ChemicalChunker
    public final void synpred402_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:190:14: ( dash )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:190:14: dash
        {
        pushFollow(FOLLOW_dash_in_synpred402_ChemicalChunker2426);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred402_ChemicalChunker

    // $ANTLR start synpred404_ChemicalChunker
    public final void synpred404_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:192:14: ( dash oscarcm )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:192:14: dash oscarcm
        {
        pushFollow(FOLLOW_dash_in_synpred404_ChemicalChunker2445);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_oscarcm_in_synpred404_ChemicalChunker2447);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred404_ChemicalChunker

    // $ANTLR start synpred405_ChemicalChunker
    public final void synpred405_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:192:30: ( dash )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:192:30: dash
        {
        pushFollow(FOLLOW_dash_in_synpred405_ChemicalChunker2452);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred405_ChemicalChunker

    // $ANTLR start synpred406_ChemicalChunker
    public final void synpred406_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:4: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred406_ChemicalChunker2466);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred406_ChemicalChunker

    // $ANTLR start synpred407_ChemicalChunker
    public final void synpred407_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:13: ( mixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:197:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred407_ChemicalChunker2468);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred407_ChemicalChunker

    // $ANTLR start synpred408_ChemicalChunker
    public final void synpred408_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:4: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred408_ChemicalChunker2484);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred408_ChemicalChunker

    // $ANTLR start synpred409_ChemicalChunker
    public final void synpred409_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:13: ( mixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred409_ChemicalChunker2486);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred409_ChemicalChunker

    // $ANTLR start synpred410_ChemicalChunker
    public final void synpred410_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:23: ( oscarCompound )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred410_ChemicalChunker2490);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred410_ChemicalChunker

    // $ANTLR start synpred411_ChemicalChunker
    public final void synpred411_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:40: ( citation )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:40: citation
        {
        pushFollow(FOLLOW_citation_in_synpred411_ChemicalChunker2495);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred411_ChemicalChunker

    // $ANTLR start synpred412_ChemicalChunker
    public final void synpred412_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:49: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:49: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred412_ChemicalChunker2497);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred412_ChemicalChunker

    // $ANTLR start synpred413_ChemicalChunker
    public final void synpred413_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:58: ( mixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:200:58: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred413_ChemicalChunker2499);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred413_ChemicalChunker

    // $ANTLR start synpred414_ChemicalChunker
    public final void synpred414_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:4: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:204:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred414_ChemicalChunker2513);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred414_ChemicalChunker

    // $ANTLR start synpred416_ChemicalChunker
    public final void synpred416_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:205:18: ( moleculeamount3 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:205:18: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred416_ChemicalChunker2535);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred416_ChemicalChunker

    // $ANTLR start synpred417_ChemicalChunker
    public final void synpred417_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:205:34: ( moleculeamount1 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:205:34: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred417_ChemicalChunker2537);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_ChemicalChunker

    // $ANTLR start synpred421_ChemicalChunker
    public final void synpred421_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:26: ( citation )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:26: citation
        {
        pushFollow(FOLLOW_citation_in_synpred421_ChemicalChunker2624);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred421_ChemicalChunker

    // $ANTLR start synpred422_ChemicalChunker
    public final void synpred422_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:35: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:35: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred422_ChemicalChunker2626);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred422_ChemicalChunker

    // $ANTLR start synpred423_ChemicalChunker
    public final void synpred423_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:44: ( mixture )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:216:44: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred423_ChemicalChunker2628);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred423_ChemicalChunker

    // $ANTLR start synpred424_ChemicalChunker
    public final void synpred424_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:18: ( jj )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:18: jj
        {
        pushFollow(FOLLOW_jj_in_synpred424_ChemicalChunker2649);
        jj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred424_ChemicalChunker

    // $ANTLR start synpred425_ChemicalChunker
    public final void synpred425_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:18: ( ( jj )? noun )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:18: ( jj )? noun
        {
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:222:18: ( jj )?
        int alt196=2;
        switch ( input.LA(1) ) {
            case 145:
                {
                switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        int LA196_3 = input.LA(3);

                        if ( (synpred424_ChemicalChunker()) ) {
                            alt196=1;
                        }
                        }
                        break;
                }

                }
                break;
        }

        switch (alt196) {
            case 1 :
                // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:0:0: jj
                {
                pushFollow(FOLLOW_jj_in_synpred425_ChemicalChunker2649);
                jj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_noun_in_synpred425_ChemicalChunker2652);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred425_ChemicalChunker

    // $ANTLR start synpred426_ChemicalChunker
    public final void synpred426_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:226:4: ( quantity )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:226:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred426_ChemicalChunker2665);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred426_ChemicalChunker

    // $ANTLR start synpred427_ChemicalChunker
    public final void synpred427_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:4: ( unnamedmoleculeamount1 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:4: unnamedmoleculeamount1
        {
        pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred427_ChemicalChunker2679);
        unnamedmoleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred427_ChemicalChunker

    // $ANTLR start synpred428_ChemicalChunker
    public final void synpred428_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:29: ( unnamedmoleculeamount2 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:29: unnamedmoleculeamount2
        {
        pushFollow(FOLLOW_unnamedmoleculeamount2_in_synpred428_ChemicalChunker2683);
        unnamedmoleculeamount2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred428_ChemicalChunker

    // $ANTLR start synpred429_ChemicalChunker
    public final void synpred429_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:54: ( unnamedmoleculeamount3 )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:228:54: unnamedmoleculeamount3
        {
        pushFollow(FOLLOW_unnamedmoleculeamount3_in_synpred429_ChemicalChunker2687);
        unnamedmoleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred429_ChemicalChunker

    // $ANTLR start synpred434_ChemicalChunker
    public final void synpred434_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:19: ( comma measurements )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:240:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred434_ChemicalChunker2796);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred434_ChemicalChunker2799);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred434_ChemicalChunker

    // $ANTLR start synpred439_ChemicalChunker
    public final void synpred439_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:9: ( lrb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:9: lrb
        {
        pushFollow(FOLLOW_lrb_in_synpred439_ChemicalChunker2847);
        lrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred439_ChemicalChunker

    // $ANTLR start synpred440_ChemicalChunker
    public final void synpred440_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:13: ( rrb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:13: rrb
        {
        pushFollow(FOLLOW_rrb_in_synpred440_ChemicalChunker2849);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred440_ChemicalChunker

    // $ANTLR start synpred441_ChemicalChunker
    public final void synpred441_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:17: ( lsqb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:17: lsqb
        {
        pushFollow(FOLLOW_lsqb_in_synpred441_ChemicalChunker2851);
        lsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred441_ChemicalChunker

    // $ANTLR start synpred442_ChemicalChunker
    public final void synpred442_ChemicalChunker_fragment() throws RecognitionException {   
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:22: ( rsqb )
        // uk/ac/cam/ch/wwmm/pregenerated/ChemicalChunker.g:244:22: rsqb
        {
        pushFollow(FOLLOW_rsqb_in_synpred442_ChemicalChunker2853);
        rsqb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred442_ChemicalChunker

    // Delegated rules

    public final boolean synpred30_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred408_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred408_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred377_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred377_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred429_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred429_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred380_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred380_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred407_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred407_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred378_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred378_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred409_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred409_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred442_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred442_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred416_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred404_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred411_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred411_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred410_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred410_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred439_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred439_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred372_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred372_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred412_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred412_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred426_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred426_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred406_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred406_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred405_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred414_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred414_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred395_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred395_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred382_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred382_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred440_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred440_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred424_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred424_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred427_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred427_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred388_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred388_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred423_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred423_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred421_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred421_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred413_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred413_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred397_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred397_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred428_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred428_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred425_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred425_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred376_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred376_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred422_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred422_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred379_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred379_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred400_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred400_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred434_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred434_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred385_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred385_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred401_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred401_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred381_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred359_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred359_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred371_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred371_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred441_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred441_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred402_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred399_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred399_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA18 dfa18 = new DFA18(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA174 dfa174 = new DFA174(this);
    protected DFA176 dfa176 = new DFA176(this);
    protected DFA179 dfa179 = new DFA179(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA195 dfa195 = new DFA195(this);
    static final String DFA2_eotS =
        "\u008a\uffff";
    static final String DFA2_eofS =
        "\1\2\u0089\uffff";
    static final String DFA2_minS =
        "\1\13\1\0\1\uffff\u0085\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00c5\1\0\1\uffff\u0085\0\2\uffff";
    static final String DFA2_acceptS =
        "\2\uffff\1\3\u0085\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\1\uffff\1\131\1\uffff\1\64\1\54\1\74\1\u0084\1\62\1\142\1\17\1"+
        "\33\1\11\1\1\1\152\1\122\1\26\1\34\1\70\1\5\1\43\1\46\1\75\1\136"+
        "\1\73\1\25\1\112\1\124\1\106\1\71\1\24\1\162\1\20\1\56\1\31\1\72"+
        "\1\126\1\130\1\135\1\123\1\113\1\164\1\3\1\67\1\44\1\15\1\114\1"+
        "\u0080\1\161\1\145\1\21\1\40\1\177\1\137\1\172\1\27\1\111\1\143"+
        "\1\u0085\1\171\1\134\1\174\1\10\1\156\1\117\1\173\1\7\1\35\1\107"+
        "\1\127\1\42\1\12\1\55\1\37\1\166\1\63\1\101\1\u0082\1\146\1\6\1"+
        "\157\1\4\1\45\1\53\1\65\1\105\1\121\1\57\1\125\1\14\1\140\1\150"+
        "\1\16\1\32\1\115\1\103\1\163\1\175\1\30\1\153\1\165\1\151\1\77\1"+
        "\47\1\133\1\76\1\61\1\52\1\23\1\36\1\0\1\170\1\176\1\147\1\132\1"+
        "\116\1\102\1\110\1\u0081\1\22\1\2\1\66\1\41\1\51\1\104\1\u0083\1"+
        "\154\1\144\1\13\1\60\1\50\1\100\1\160\1\167\1\141\1\120\1\155\2"+
        "\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\7\1\15\1\17\1\10\1\74\1\46\1\uffff\1\16\1\114\1\115\1\113"+
            "\1\121\1\122\1\131\1\132\1\116\1\130\1\123\1\125\1\117\1\120"+
            "\1\127\1\126\1\124\1\43\1\24\1\44\1\uffff\1\6\1\54\1\45\1\47"+
            "\1\63\1\23\1\50\1\51\1\52\1\53\1\20\1\55\1\56\1\57\1\60\1\61"+
            "\1\22\1\143\1\u0083\1\144\1\147\1\21\1\72\1\151\1\150\1\152"+
            "\1\153\1\154\1\155\1\156\1\157\1\160\1\26\1\161\1\62\1\162\1"+
            "\146\1\163\1\164\1\75\1\165\1\76\1\166\1\77\1\167\1\170\1\145"+
            "\1\171\1\172\1\100\1\173\1\64\1\174\1\175\1\176\1\101\1\177"+
            "\1\42\1\71\1\u0080\1\u0081\1\u0082\1\40\1\u0087\1\1\1\uffff"+
            "\1\u0084\1\uffff\1\2\1\uffff\1\73\1\u0086\1\4\1\u0085\16\uffff"+
            "\1\5\4\uffff\1\3\1\27\3\uffff\1\107\1\102\1\103\4\uffff\1\112"+
            "\1\11\1\12\1\13\1\14\1\133\1\uffff\1\25\1\uffff\1\41\2\uffff"+
            "\1\35\13\uffff\1\36\1\37\5\uffff\1\30\1\31\1\134\1\32\1\34\1"+
            "\uffff\1\33\1\104\1\111\1\uffff\1\135\1\136\1\140\1\137\1\142"+
            "\1\141\1\65\1\66\1\67\1\70\1\105\1\106\1\110",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 35:13: ( sentence | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_1 = input.LA(1);

                         
                        int index2_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_1);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 137;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA4_eotS =
        "\u0088\uffff";
    static final String DFA4_eofS =
        "\1\15\u0087\uffff";
    static final String DFA4_minS =
        "\1\13\14\0\1\uffff\167\0\3\uffff";
    static final String DFA4_maxS =
        "\1\u00c5\14\0\1\uffff\167\0\3\uffff";
    static final String DFA4_acceptS =
        "\15\uffff\1\4\167\uffff\1\1\1\2\1\3";
    static final String DFA4_specialS =
        "\1\uffff\1\105\1\3\1\132\1\37\1\44\1\23\1\153\1\116\1\177\1\126"+
        "\1\171\1\174\1\uffff\1\160\1\61\1\50\1\5\1\163\1\u0081\1\145\1\143"+
        "\1\100\1\27\1\147\1\35\1\141\1\22\1\64\1\106\1\144\1\15\1\71\1\34"+
        "\1\140\1\13\1\51\1\161\1\47\1\20\1\72\1\46\1\17\1\45\1\73\1\43\1"+
        "\142\1\112\1\76\1\55\1\24\1\16\1\122\1\12\1\11\1\53\1\134\1\u0082"+
        "\1\164\1\21\1\62\1\133\1\152\1\123\1\66\1\52\1\70\1\113\1\157\1"+
        "\101\1\117\1\63\1\14\1\75\1\57\1\165\1\151\1\41\1\120\1\77\1\56"+
        "\1\175\1\6\1\121\1\150\1\146\1\7\1\1\1\172\1\111\1\170\1\40\1\36"+
        "\1\162\1\155\1\4\1\30\1\104\1\10\1\156\1\107\1\110\1\32\1\74\1\2"+
        "\1\42\1\176\1\166\1\137\1\127\1\114\1\103\1\67\1\33\1\0\1\130\1"+
        "\136\1\173\1\25\1\65\1\102\1\125\1\154\1\167\1\31\1\60\1\54\1\115"+
        "\1\u0080\1\135\1\26\1\124\1\131\3\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\24\1\12\1\14\1\25\1\75\1\47\1\uffff\1\13\1\115\1\116\1\114"+
            "\1\122\1\123\1\132\1\133\1\117\1\131\1\124\1\126\1\120\1\121"+
            "\1\130\1\127\1\125\1\44\1\32\1\45\1\uffff\1\23\1\55\1\46\1\50"+
            "\1\64\1\31\1\51\1\52\1\53\1\54\1\26\1\56\1\57\1\60\1\61\1\62"+
            "\1\30\1\143\1\u0083\1\144\1\147\1\27\1\73\1\151\1\150\1\152"+
            "\1\153\1\154\1\155\1\156\1\157\1\160\1\34\1\161\1\63\1\162\1"+
            "\146\1\163\1\164\1\76\1\165\1\77\1\166\1\100\1\167\1\170\1\145"+
            "\1\171\1\172\1\101\1\173\1\65\1\174\1\175\1\176\1\102\1\177"+
            "\1\43\1\72\1\u0080\1\u0081\1\u0082\1\41\1\15\1\16\1\uffff\1"+
            "\u0084\1\uffff\1\15\1\uffff\1\74\1\15\1\21\1\15\15\uffff\1\15"+
            "\1\22\4\uffff\1\20\1\35\3\uffff\1\110\1\103\1\104\4\uffff\1"+
            "\113\1\6\1\7\1\10\1\11\1\134\1\uffff\1\33\1\uffff\1\42\2\uffff"+
            "\1\36\13\uffff\1\37\1\40\5\uffff\1\1\1\2\1\17\1\3\1\5\1\uffff"+
            "\1\4\1\105\1\112\1\uffff\1\135\1\136\1\140\1\137\1\142\1\141"+
            "\1\66\1\67\1\70\1\71\1\106\1\107\1\111",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 37:12: ( nounphrase | verbphrase | prepphrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA4_130 = input.LA(1);

                         
                        int index4_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_130);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA4_124 = input.LA(1);

                         
                        int index4_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_124);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA4_126 = input.LA(1);

                         
                        int index4_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_126);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA4_125 = input.LA(1);

                         
                        int index4_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_125);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA4_127 = input.LA(1);

                         
                        int index4_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_127);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA4_131 = input.LA(1);

                         
                        int index4_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_131);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA4_132 = input.LA(1);

                         
                        int index4_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_132);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA4_129 = input.LA(1);

                         
                        int index4_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_129);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA4_11 = input.LA(1);

                         
                        int index4_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_11);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA4_128 = input.LA(1);

                         
                        int index4_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_128);
                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA5_eotS =
        "\36\uffff";
    static final String DFA5_eofS =
        "\1\1\35\uffff";
    static final String DFA5_minS =
        "\1\13\1\uffff\15\12\15\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00c5\1\uffff\15\12\15\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\32\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\17\uffff\1\0\1\13\1\10\1\14\1\2\1\6\1\1\1\11\1\7\1\4\1\3\1\5\1"+
        "\12\2\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\6\1\10\3\1\1\uffff\1\7\23\1\1\uffff\77\1\1\16\1\1\1\uffff"+
            "\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff\2\1\3\uffff"+
            "\3\1\4\uffff\1\1\1\2\1\3\1\4\1\5\1\1\1\uffff\1\1\1\uffff\1\1"+
            "\2\uffff\1\1\13\uffff\2\1\5\uffff\1\11\1\12\1\1\1\13\1\15\1"+
            "\uffff\1\14\2\1\1\uffff\15\1",
            "",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 37:48: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA5_25 = input.LA(1);

                         
                        int index5_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_25);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA5_24 = input.LA(1);

                         
                        int index5_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_24);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA5_26 = input.LA(1);

                         
                        int index5_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_26);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA5_27 = input.LA(1);

                         
                        int index5_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 29;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_27);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\u0092\uffff";
    static final String DFA7_eofS =
        "\u0092\uffff";
    static final String DFA7_minS =
        "\1\13\1\0\2\uffff\3\0\1\uffff\13\0\11\uffff\1\0\3\uffff\1\0\24\uffff"+
        "\2\0\6\uffff\1\0\124\uffff";
    static final String DFA7_maxS =
        "\1\u00c5\1\0\2\uffff\3\0\1\uffff\13\0\11\uffff\1\0\3\uffff\1\0\24"+
        "\uffff\2\0\6\uffff\1\0\124\uffff";
    static final String DFA7_acceptS =
        "\2\uffff\1\2\77\uffff\1\4\46\uffff\1\5\21\uffff\1\7\1\14\1\uffff"+
        "\1\16\1\17\1\20\1\23\4\uffff\1\24\1\1\1\22\1\21\1\10\1\12\1\11\1"+
        "\6\1\3\1\25\1\13\1\15";
    static final String DFA7_specialS =
        "\1\uffff\1\0\2\uffff\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\11\uffff\1\17\3\uffff\1\20\24\uffff"+
        "\1\21\1\22\6\uffff\1\23\124\uffff}>";
    static final String[] DFA7_transitionS = {
            "\1\10\1\16\1\20\1\11\1\66\1\40\1\uffff\1\17\20\151\3\2\1\uffff"+
            "\20\2\1\21\4\102\2\2\11\102\1\2\1\102\1\2\4\102\1\2\1\102\1"+
            "\2\1\102\1\2\5\102\1\2\1\102\1\2\3\102\1\2\1\102\1\34\1\2\3"+
            "\102\1\2\1\176\1\5\1\uffff\1\u0080\3\uffff\1\65\1\174\1\4\1"+
            "\174\16\uffff\1\6\4\uffff\1\22\1\173\3\uffff\1\2\1\1\1\2\4\uffff"+
            "\1\151\1\12\1\13\1\14\1\15\1\177\1\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\1\2\13\uffff\2\2\5\uffff\2\u0081\1\u0086\2\u0081\1\uffff\1"+
            "\u0081\1\75\1\151\1\uffff\6\102\7\2",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "44:4: ( fw | noun | tmunicode | verb | inAll | dt | dtTHE | oscarcd | oscarcm | oscarrn | oscaront | brackets | sym | colon | md | neg | number | comma | advAdj | rbconj | reference )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_1 = input.LA(1);

                         
                        int index7_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                         
                        input.seek(index7_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_4 = input.LA(1);

                         
                        int index7_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred24_ChemicalChunker()) ) {s = 124;}

                         
                        input.seek(index7_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred30_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA7_6 = input.LA(1);

                         
                        int index7_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred29_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index7_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA7_8 = input.LA(1);

                         
                        int index7_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred20_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred29_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index7_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA7_9 = input.LA(1);

                         
                        int index7_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred29_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index7_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA7_10 = input.LA(1);

                         
                        int index7_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred31_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index7_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA7_11 = input.LA(1);

                         
                        int index7_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred31_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index7_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA7_12 = input.LA(1);

                         
                        int index7_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred31_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index7_12);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA7_13 = input.LA(1);

                         
                        int index7_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred31_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index7_13);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA7_14 = input.LA(1);

                         
                        int index7_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred31_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index7_14);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA7_15 = input.LA(1);

                         
                        int index7_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred31_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index7_15);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA7_16 = input.LA(1);

                         
                        int index7_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred22_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred31_ChemicalChunker()) ) {s = 129;}

                         
                        input.seek(index7_16);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA7_17 = input.LA(1);

                         
                        int index7_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred21_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index7_17);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA7_18 = input.LA(1);

                         
                        int index7_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred18_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index7_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA7_28 = input.LA(1);

                         
                        int index7_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred16_ChemicalChunker()) ) {s = 66;}

                         
                        input.seek(index7_28);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA7_32 = input.LA(1);

                         
                        int index7_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred15_ChemicalChunker()) ) {s = 142;}

                         
                        input.seek(index7_32);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA7_53 = input.LA(1);

                         
                        int index7_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred24_ChemicalChunker()) ) {s = 124;}

                        else if ( (true) ) {s = 143;}

                         
                        input.seek(index7_53);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA7_54 = input.LA(1);

                         
                        int index7_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred23_ChemicalChunker()) ) {s = 144;}

                         
                        input.seek(index7_54);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA7_61 = input.LA(1);

                         
                        int index7_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred14_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred25_ChemicalChunker()) ) {s = 145;}

                         
                        input.seek(index7_61);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA8_eotS =
        "\111\uffff";
    static final String DFA8_eofS =
        "\111\uffff";
    static final String DFA8_minS =
        "\1\13\25\0\63\uffff";
    static final String DFA8_maxS =
        "\1\u00c5\25\0\63\uffff";
    static final String DFA8_acceptS =
        "\26\uffff\1\2\61\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\63\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\5\1\13\1\15\1\6\2\26\1\uffff\1\14\20\uffff\1\26\1\23\1\26"+
            "\1\uffff\1\4\4\26\1\22\4\26\1\16\5\26\1\21\4\uffff\1\17\1\26"+
            "\11\uffff\1\25\1\uffff\1\26\4\uffff\1\26\1\uffff\1\26\1\uffff"+
            "\1\26\5\uffff\1\26\1\uffff\1\26\3\uffff\1\26\1\uffff\2\26\3"+
            "\uffff\1\26\1\uffff\1\20\5\uffff\1\26\1\uffff\1\2\17\uffff\1"+
            "\3\4\uffff\1\1\1\26\3\uffff\3\26\5\uffff\1\7\1\10\1\11\1\12"+
            "\2\uffff\1\24\1\uffff\1\26\2\uffff\1\26\13\uffff\2\26\5\uffff"+
            "\2\26\1\uffff\2\26\1\uffff\2\26\10\uffff\7\26",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "50:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA8_15 = input.LA(1);

                         
                        int index8_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA8_16 = input.LA(1);

                         
                        int index8_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA8_18 = input.LA(1);

                         
                        int index8_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA8_19 = input.LA(1);

                         
                        int index8_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA8_20 = input.LA(1);

                         
                        int index8_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA8_21 = input.LA(1);

                         
                        int index8_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index8_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA11_eotS =
        "\21\uffff";
    static final String DFA11_eofS =
        "\21\uffff";
    static final String DFA11_minS =
        "\1\13\1\uffff\7\12\1\uffff\7\0";
    static final String DFA11_maxS =
        "\1\u00c5\1\uffff\7\12\1\uffff\7\0";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\7\uffff";
    static final String DFA11_specialS =
        "\12\uffff\1\6\1\5\1\3\1\0\1\1\1\2\1\4}>";
    static final String[] DFA11_transitionS = {
            "\1\1\1\6\1\10\3\1\1\uffff\1\7\20\uffff\3\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\17\uffff\1\1\4\uffff"+
            "\1\1\4\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff\2\11\1\uffff\2\11\1\uffff"+
            "\1\11\1\1\10\uffff\7\1",
            "",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 55:15: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA11_13 = input.LA(1);

                         
                        int index11_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA11_14 = input.LA(1);

                         
                        int index11_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA11_15 = input.LA(1);

                         
                        int index11_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA11_12 = input.LA(1);

                         
                        int index11_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA11_16 = input.LA(1);

                         
                        int index11_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_16);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA11_11 = input.LA(1);

                         
                        int index11_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA11_10 = input.LA(1);

                         
                        int index11_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA12_eotS =
        "\107\uffff";
    static final String DFA12_eofS =
        "\1\1\106\uffff";
    static final String DFA12_minS =
        "\1\13\1\uffff\101\0\4\uffff";
    static final String DFA12_maxS =
        "\1\u00c5\1\uffff\101\0\4\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\5\101\uffff\1\1\1\2\1\4\1\3";
    static final String DFA12_specialS =
        "\2\uffff\1\56\1\65\1\37\1\50\1\73\1\100\1\53\1\64\1\20\1\54\1\34"+
        "\1\36\1\33\1\21\1\63\1\1\1\43\1\26\1\15\1\76\1\30\1\6\1\74\1\4\1"+
        "\57\1\62\1\3\1\70\1\11\1\5\1\31\1\77\1\0\1\66\1\14\1\55\1\41\1\52"+
        "\1\13\1\72\1\40\1\22\1\23\1\51\1\67\1\47\1\44\1\32\1\71\1\17\1\42"+
        "\1\25\1\7\1\2\1\46\1\61\1\12\1\27\1\45\1\75\1\60\1\10\1\16\1\24"+
        "\1\35\4\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\16\1\7\1\11\1\17\1\66\1\40\1\uffff\1\10\20\1\1\35\1\27\1"+
            "\36\1\uffff\1\15\1\46\1\37\1\41\1\55\1\26\1\42\1\43\1\44\1\45"+
            "\1\24\1\47\1\50\1\51\1\52\1\53\1\20\4\1\1\25\1\64\11\1\1\31"+
            "\1\1\1\54\4\1\1\67\1\1\1\70\1\1\1\71\5\1\1\72\1\1\1\56\3\1\1"+
            "\73\1\1\1\34\1\63\3\1\1\32\1\1\1\2\1\uffff\4\1\1\65\1\1\1\12"+
            "\1\1\15\uffff\1\1\1\14\4\uffff\1\23\1\1\3\uffff\1\101\1\74\1"+
            "\75\4\uffff\1\1\1\3\1\4\1\5\1\6\1\1\1\uffff\1\30\1\uffff\1\33"+
            "\2\uffff\1\13\13\uffff\1\21\1\22\5\uffff\5\1\1\uffff\1\1\1\76"+
            "\1\1\1\uffff\6\1\1\57\1\60\1\61\1\62\1\77\1\100\1\102",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()+ loopback of 55:24: ( dissolvePhrase | noun | number | ratio )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA12_34 = input.LA(1);

                         
                        int index12_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_34);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA12_17 = input.LA(1);

                         
                        int index12_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA12_55 = input.LA(1);

                         
                        int index12_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_55);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA12_28 = input.LA(1);

                         
                        int index12_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_28);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA12_25 = input.LA(1);

                         
                        int index12_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_25);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA12_31 = input.LA(1);

                         
                        int index12_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_31);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA12_23 = input.LA(1);

                         
                        int index12_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_23);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA12_54 = input.LA(1);

                         
                        int index12_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_54);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA12_63 = input.LA(1);

                         
                        int index12_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_63);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA12_30 = input.LA(1);

                         
                        int index12_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_30);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA12_58 = input.LA(1);

                         
                        int index12_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_58);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA12_40 = input.LA(1);

                         
                        int index12_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_40);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA12_36 = input.LA(1);

                         
                        int index12_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_36);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA12_20 = input.LA(1);

                         
                        int index12_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_20);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA12_64 = input.LA(1);

                         
                        int index12_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_64);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA12_51 = input.LA(1);

                         
                        int index12_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_51);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA12_15 = input.LA(1);

                         
                        int index12_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_15);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA12_43 = input.LA(1);

                         
                        int index12_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_43);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA12_44 = input.LA(1);

                         
                        int index12_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_44);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA12_65 = input.LA(1);

                         
                        int index12_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_65);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA12_53 = input.LA(1);

                         
                        int index12_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_53);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA12_19 = input.LA(1);

                         
                        int index12_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_19);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA12_59 = input.LA(1);

                         
                        int index12_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_59);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA12_22 = input.LA(1);

                         
                        int index12_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_22);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA12_32 = input.LA(1);

                         
                        int index12_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_32);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA12_49 = input.LA(1);

                         
                        int index12_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_49);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred39_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA12_66 = input.LA(1);

                         
                        int index12_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_66);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA12_42 = input.LA(1);

                         
                        int index12_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_42);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA12_38 = input.LA(1);

                         
                        int index12_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_38);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA12_52 = input.LA(1);

                         
                        int index12_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_52);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA12_18 = input.LA(1);

                         
                        int index12_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_18);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA12_48 = input.LA(1);

                         
                        int index12_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_48);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA12_60 = input.LA(1);

                         
                        int index12_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_60);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA12_56 = input.LA(1);

                         
                        int index12_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_56);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA12_47 = input.LA(1);

                         
                        int index12_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_47);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA12_45 = input.LA(1);

                         
                        int index12_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_45);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA12_39 = input.LA(1);

                         
                        int index12_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_39);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA12_37 = input.LA(1);

                         
                        int index12_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_37);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA12_2 = input.LA(1);

                         
                        int index12_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_2);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA12_26 = input.LA(1);

                         
                        int index12_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_26);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_62);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA12_57 = input.LA(1);

                         
                        int index12_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_57);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA12_27 = input.LA(1);

                         
                        int index12_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_27);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA12_16 = input.LA(1);

                         
                        int index12_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_16);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA12_35 = input.LA(1);

                         
                        int index12_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_35);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA12_46 = input.LA(1);

                         
                        int index12_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_46);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA12_29 = input.LA(1);

                         
                        int index12_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_29);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA12_50 = input.LA(1);

                         
                        int index12_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_50);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA12_41 = input.LA(1);

                         
                        int index12_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_41);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA12_24 = input.LA(1);

                         
                        int index12_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_24);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA12_61 = input.LA(1);

                         
                        int index12_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA12_21 = input.LA(1);

                         
                        int index12_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_21);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA12_33 = input.LA(1);

                         
                        int index12_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_33);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred37_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred38_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred40_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA16_eotS =
        "\112\uffff";
    static final String DFA16_eofS =
        "\1\1\111\uffff";
    static final String DFA16_minS =
        "\1\13\1\uffff\107\0\1\uffff";
    static final String DFA16_maxS =
        "\1\u00c5\1\uffff\107\0\1\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\2\107\uffff\1\1";
    static final String DFA16_specialS =
        "\2\uffff\1\20\1\65\1\75\1\40\1\21\1\50\1\14\1\106\1\53\1\51\1\42"+
        "\1\71\1\16\1\104\1\30\1\0\1\36\1\66\1\35\1\37\1\43\1\7\1\46\1\60"+
        "\1\1\1\70\1\52\1\26\1\56\1\24\1\10\1\47\1\100\1\22\1\62\1\74\1\73"+
        "\1\33\1\31\1\45\1\55\1\3\1\23\1\61\1\102\1\54\1\25\1\67\1\4\1\6"+
        "\1\13\1\105\1\41\1\15\1\64\1\72\1\103\1\77\1\76\1\63\1\44\1\57\1"+
        "\34\1\2\1\11\1\27\1\17\1\32\1\101\1\5\1\12\1\uffff}>";
    static final String[] DFA16_transitionS = {
            "\1\24\1\13\1\15\1\25\1\74\1\46\1\uffff\1\14\20\1\1\43\1\32\1"+
            "\44\1\uffff\1\23\1\54\1\45\1\47\1\63\1\31\1\50\1\51\1\52\1\53"+
            "\1\26\1\55\1\56\1\57\1\60\1\61\1\30\4\1\1\27\1\72\11\1\1\34"+
            "\1\1\1\62\4\1\1\75\1\1\1\76\1\1\1\77\5\1\1\100\1\1\1\64\3\1"+
            "\1\101\1\1\1\42\1\71\3\1\1\40\1\1\1\17\1\uffff\4\1\1\73\1\1"+
            "\1\21\1\1\15\uffff\1\16\1\22\4\uffff\1\20\1\1\3\uffff\1\107"+
            "\1\102\1\103\4\uffff\1\1\1\7\1\10\1\11\1\12\1\1\1\uffff\1\33"+
            "\1\uffff\1\41\2\uffff\1\35\13\uffff\1\36\1\37\5\uffff\1\2\1"+
            "\3\1\1\1\4\1\6\1\uffff\1\5\1\104\1\1\1\uffff\6\1\1\65\1\66\1"+
            "\67\1\70\1\105\1\106\1\110",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "()* loopback of 55:63: ( ( conjunction )* ( advAdj )* ( dissolvePhrase | noun | number | ratio ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA16_17 = input.LA(1);

                         
                        int index16_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA16_26 = input.LA(1);

                         
                        int index16_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_26);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA16_65 = input.LA(1);

                         
                        int index16_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_65);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA16_43 = input.LA(1);

                         
                        int index16_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_43);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA16_50 = input.LA(1);

                         
                        int index16_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_50);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA16_71 = input.LA(1);

                         
                        int index16_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_71);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA16_51 = input.LA(1);

                         
                        int index16_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_51);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA16_23 = input.LA(1);

                         
                        int index16_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA16_32 = input.LA(1);

                         
                        int index16_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_32);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA16_66 = input.LA(1);

                         
                        int index16_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_66);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA16_72 = input.LA(1);

                         
                        int index16_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_72);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA16_52 = input.LA(1);

                         
                        int index16_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_52);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA16_55 = input.LA(1);

                         
                        int index16_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_55);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA16_14 = input.LA(1);

                         
                        int index16_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA16_68 = input.LA(1);

                         
                        int index16_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_68);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA16_2 = input.LA(1);

                         
                        int index16_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_2);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA16_35 = input.LA(1);

                         
                        int index16_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_35);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA16_44 = input.LA(1);

                         
                        int index16_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_44);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA16_31 = input.LA(1);

                         
                        int index16_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_31);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA16_48 = input.LA(1);

                         
                        int index16_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_48);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA16_29 = input.LA(1);

                         
                        int index16_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_29);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA16_67 = input.LA(1);

                         
                        int index16_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_67);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA16_16 = input.LA(1);

                         
                        int index16_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_16);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA16_40 = input.LA(1);

                         
                        int index16_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_40);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA16_69 = input.LA(1);

                         
                        int index16_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_69);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA16_39 = input.LA(1);

                         
                        int index16_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_39);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA16_64 = input.LA(1);

                         
                        int index16_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_64);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA16_20 = input.LA(1);

                         
                        int index16_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_20);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA16_18 = input.LA(1);

                         
                        int index16_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_18);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA16_21 = input.LA(1);

                         
                        int index16_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_21);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA16_54 = input.LA(1);

                         
                        int index16_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_54);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA16_12 = input.LA(1);

                         
                        int index16_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_12);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA16_22 = input.LA(1);

                         
                        int index16_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_22);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA16_62 = input.LA(1);

                         
                        int index16_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_62);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA16_41 = input.LA(1);

                         
                        int index16_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_41);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA16_24 = input.LA(1);

                         
                        int index16_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_24);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA16_33 = input.LA(1);

                         
                        int index16_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_33);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA16_11 = input.LA(1);

                         
                        int index16_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_11);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA16_28 = input.LA(1);

                         
                        int index16_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_28);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_10);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA16_47 = input.LA(1);

                         
                        int index16_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA16_42 = input.LA(1);

                         
                        int index16_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_42);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA16_30 = input.LA(1);

                         
                        int index16_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_30);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA16_63 = input.LA(1);

                         
                        int index16_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_63);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA16_25 = input.LA(1);

                         
                        int index16_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_25);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA16_45 = input.LA(1);

                         
                        int index16_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_45);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA16_36 = input.LA(1);

                         
                        int index16_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_36);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA16_61 = input.LA(1);

                         
                        int index16_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_61);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA16_56 = input.LA(1);

                         
                        int index16_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_56);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA16_19 = input.LA(1);

                         
                        int index16_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_19);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA16_49 = input.LA(1);

                         
                        int index16_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_49);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA16_27 = input.LA(1);

                         
                        int index16_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_27);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA16_13 = input.LA(1);

                         
                        int index16_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_13);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA16_57 = input.LA(1);

                         
                        int index16_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_57);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA16_38 = input.LA(1);

                         
                        int index16_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_38);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA16_37 = input.LA(1);

                         
                        int index16_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_37);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA16_60 = input.LA(1);

                         
                        int index16_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_60);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA16_59 = input.LA(1);

                         
                        int index16_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_59);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA16_34 = input.LA(1);

                         
                        int index16_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_34);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA16_70 = input.LA(1);

                         
                        int index16_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_70);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA16_46 = input.LA(1);

                         
                        int index16_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_46);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA16_58 = input.LA(1);

                         
                        int index16_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_58);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA16_15 = input.LA(1);

                         
                        int index16_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_15);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA16_53 = input.LA(1);

                         
                        int index16_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_53);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred46_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index16_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA13_eotS =
        "\110\uffff";
    static final String DFA13_eofS =
        "\110\uffff";
    static final String DFA13_minS =
        "\1\13\22\uffff\1\0\64\uffff";
    static final String DFA13_maxS =
        "\1\u00c5\22\uffff\1\0\64\uffff";
    static final String DFA13_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA13_specialS =
        "\23\uffff\1\0\64\uffff}>";
    static final String[] DFA13_transitionS = {
            "\6\1\1\uffff\1\1\20\uffff\3\1\1\uffff\21\1\4\uffff\2\1\11\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff"+
            "\1\23\5\uffff\1\1\1\uffff\1\1\16\uffff\1\107\1\1\4\uffff\1\1"+
            "\4\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\13\uffff\2\1\5\uffff\2\1\1\uffff\2\1\1\uffff\2\1\10\uffff\7"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA13_eot = DFA.unpackEncodedString(DFA13_eotS);
    static final short[] DFA13_eof = DFA.unpackEncodedString(DFA13_eofS);
    static final char[] DFA13_min = DFA.unpackEncodedStringToUnsignedChars(DFA13_minS);
    static final char[] DFA13_max = DFA.unpackEncodedStringToUnsignedChars(DFA13_maxS);
    static final short[] DFA13_accept = DFA.unpackEncodedString(DFA13_acceptS);
    static final short[] DFA13_special = DFA.unpackEncodedString(DFA13_specialS);
    static final short[][] DFA13_transition;

    static {
        int numStates = DFA13_transitionS.length;
        DFA13_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA13_transition[i] = DFA.unpackEncodedString(DFA13_transitionS[i]);
        }
    }

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = DFA13_eot;
            this.eof = DFA13_eof;
            this.min = DFA13_min;
            this.max = DFA13_max;
            this.accept = DFA13_accept;
            this.special = DFA13_special;
            this.transition = DFA13_transition;
        }
        public String getDescription() {
            return "()* loopback of 55:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA13_19 = input.LA(1);

                         
                        int index13_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index13_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 13, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA14_eotS =
        "\21\uffff";
    static final String DFA14_eofS =
        "\21\uffff";
    static final String DFA14_minS =
        "\1\13\1\uffff\7\12\1\uffff\7\0";
    static final String DFA14_maxS =
        "\1\u00c5\1\uffff\7\12\1\uffff\7\0";
    static final String DFA14_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\7\uffff";
    static final String DFA14_specialS =
        "\12\uffff\1\2\1\3\1\5\1\6\1\4\1\1\1\0}>";
    static final String[] DFA14_transitionS = {
            "\1\1\1\6\1\10\3\1\1\uffff\1\7\20\uffff\3\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\17\uffff\1\1\4\uffff"+
            "\1\1\4\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff\2\11\1\uffff\2\11\1\uffff"+
            "\1\11\1\1\10\uffff\7\1",
            "",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 55:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA14_16 = input.LA(1);

                         
                        int index14_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA14_15 = input.LA(1);

                         
                        int index14_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA15_eotS =
        "\106\uffff";
    static final String DFA15_eofS =
        "\106\uffff";
    static final String DFA15_minS =
        "\1\13\101\0\4\uffff";
    static final String DFA15_maxS =
        "\1\u00c5\101\0\4\uffff";
    static final String DFA15_acceptS =
        "\102\uffff\1\1\1\2\1\4\1\3";
    static final String DFA15_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\4\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\14\1\6\1\10\1\15\1\65\1\37\1\uffff\1\7\20\uffff\1\34\1\26"+
            "\1\35\1\uffff\1\13\1\45\1\36\1\40\1\54\1\25\1\41\1\42\1\43\1"+
            "\44\1\23\1\46\1\47\1\50\1\51\1\52\1\17\4\uffff\1\24\1\63\11"+
            "\uffff\1\30\1\uffff\1\53\4\uffff\1\66\1\uffff\1\67\1\uffff\1"+
            "\70\5\uffff\1\71\1\uffff\1\55\3\uffff\1\72\1\uffff\1\33\1\62"+
            "\3\uffff\1\31\1\uffff\1\16\5\uffff\1\64\1\uffff\1\1\17\uffff"+
            "\1\12\4\uffff\1\22\4\uffff\1\100\1\73\1\74\5\uffff\1\2\1\3\1"+
            "\4\1\5\2\uffff\1\27\1\uffff\1\32\2\uffff\1\11\13\uffff\1\20"+
            "\1\21\14\uffff\1\75\10\uffff\1\56\1\57\1\60\1\61\1\76\1\77\1"+
            "\101",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "55:85: ( dissolvePhrase | noun | number | ratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA15_1 = input.LA(1);

                         
                        int index15_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA15_2 = input.LA(1);

                         
                        int index15_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA15_3 = input.LA(1);

                         
                        int index15_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA15_5 = input.LA(1);

                         
                        int index15_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA15_6 = input.LA(1);

                         
                        int index15_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA15_7 = input.LA(1);

                         
                        int index15_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA15_8 = input.LA(1);

                         
                        int index15_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA15_9 = input.LA(1);

                         
                        int index15_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA15_10 = input.LA(1);

                         
                        int index15_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA15_11 = input.LA(1);

                         
                        int index15_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA15_12 = input.LA(1);

                         
                        int index15_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA15_13 = input.LA(1);

                         
                        int index15_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA15_14 = input.LA(1);

                         
                        int index15_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA15_15 = input.LA(1);

                         
                        int index15_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA15_16 = input.LA(1);

                         
                        int index15_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA15_17 = input.LA(1);

                         
                        int index15_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA15_18 = input.LA(1);

                         
                        int index15_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA15_19 = input.LA(1);

                         
                        int index15_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA15_20 = input.LA(1);

                         
                        int index15_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA15_21 = input.LA(1);

                         
                        int index15_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA15_22 = input.LA(1);

                         
                        int index15_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA15_23 = input.LA(1);

                         
                        int index15_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA15_24 = input.LA(1);

                         
                        int index15_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA15_25 = input.LA(1);

                         
                        int index15_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA15_26 = input.LA(1);

                         
                        int index15_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA15_27 = input.LA(1);

                         
                        int index15_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA15_28 = input.LA(1);

                         
                        int index15_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA15_29 = input.LA(1);

                         
                        int index15_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA15_30 = input.LA(1);

                         
                        int index15_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA15_31 = input.LA(1);

                         
                        int index15_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA15_32 = input.LA(1);

                         
                        int index15_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA15_33 = input.LA(1);

                         
                        int index15_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA15_34 = input.LA(1);

                         
                        int index15_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA15_35 = input.LA(1);

                         
                        int index15_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA15_36 = input.LA(1);

                         
                        int index15_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA15_37 = input.LA(1);

                         
                        int index15_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA15_38 = input.LA(1);

                         
                        int index15_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA15_39 = input.LA(1);

                         
                        int index15_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA15_40 = input.LA(1);

                         
                        int index15_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA15_41 = input.LA(1);

                         
                        int index15_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA15_42 = input.LA(1);

                         
                        int index15_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA15_43 = input.LA(1);

                         
                        int index15_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA15_44 = input.LA(1);

                         
                        int index15_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA15_45 = input.LA(1);

                         
                        int index15_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA15_46 = input.LA(1);

                         
                        int index15_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA15_47 = input.LA(1);

                         
                        int index15_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA15_48 = input.LA(1);

                         
                        int index15_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA15_49 = input.LA(1);

                         
                        int index15_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA15_50 = input.LA(1);

                         
                        int index15_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA15_51 = input.LA(1);

                         
                        int index15_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA15_52 = input.LA(1);

                         
                        int index15_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA15_53 = input.LA(1);

                         
                        int index15_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA15_54 = input.LA(1);

                         
                        int index15_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA15_55 = input.LA(1);

                         
                        int index15_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA15_56 = input.LA(1);

                         
                        int index15_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA15_57 = input.LA(1);

                         
                        int index15_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA15_58 = input.LA(1);

                         
                        int index15_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA15_59 = input.LA(1);

                         
                        int index15_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA15_60 = input.LA(1);

                         
                        int index15_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA15_61 = input.LA(1);

                         
                        int index15_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA15_62 = input.LA(1);

                         
                        int index15_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA15_63 = input.LA(1);

                         
                        int index15_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA15_64 = input.LA(1);

                         
                        int index15_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA15_65 = input.LA(1);

                         
                        int index15_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index15_65);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA18_eotS =
        "\22\uffff";
    static final String DFA18_eofS =
        "\1\20\21\uffff";
    static final String DFA18_minS =
        "\1\13\17\0\2\uffff";
    static final String DFA18_maxS =
        "\1\u00c5\17\0\2\uffff";
    static final String DFA18_acceptS =
        "\20\uffff\1\2\1\1";
    static final String DFA18_specialS =
        "\1\uffff\1\14\1\13\1\0\1\15\1\12\1\6\1\3\1\4\1\1\1\11\1\5\1\7\1"+
        "\16\1\2\1\10\2\uffff}>";
    static final String[] DFA18_transitionS = {
            "\1\14\1\6\1\10\1\15\2\20\1\uffff\1\7\23\20\1\uffff\1\13\17\20"+
            "\1\17\57\20\1\16\1\uffff\6\20\1\1\1\20\15\uffff\1\20\1\12\4"+
            "\uffff\2\20\3\uffff\3\20\4\uffff\1\20\1\2\1\3\1\4\1\5\1\20\1"+
            "\uffff\1\20\1\uffff\1\20\2\uffff\1\11\13\uffff\2\20\5\uffff"+
            "\5\20\1\uffff\3\20\1\uffff\15\20",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "55:155: ( dissolvePhrase )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_3 = input.LA(1);

                         
                        int index18_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_9 = input.LA(1);

                         
                        int index18_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_14 = input.LA(1);

                         
                        int index18_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA18_7 = input.LA(1);

                         
                        int index18_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA18_8 = input.LA(1);

                         
                        int index18_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA18_11 = input.LA(1);

                         
                        int index18_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA18_6 = input.LA(1);

                         
                        int index18_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA18_12 = input.LA(1);

                         
                        int index18_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA18_15 = input.LA(1);

                         
                        int index18_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA18_10 = input.LA(1);

                         
                        int index18_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA18_5 = input.LA(1);

                         
                        int index18_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_5);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_2);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_1);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA18_4 = input.LA(1);

                         
                        int index18_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_4);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA18_13 = input.LA(1);

                         
                        int index18_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index18_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA20_eotS =
        "\22\uffff";
    static final String DFA20_eofS =
        "\22\uffff";
    static final String DFA20_minS =
        "\1\13\11\0\10\uffff";
    static final String DFA20_maxS =
        "\1\u009c\11\0\10\uffff";
    static final String DFA20_acceptS =
        "\12\uffff\1\2\5\uffff\1\1\1\3";
    static final String DFA20_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\10\uffff}>";
    static final String[] DFA20_transitionS = {
            "\1\12\1\6\1\10\1\12\3\uffff\1\7\24\uffff\1\12\17\uffff\1\12"+
            "\57\uffff\1\12\7\uffff\1\1\17\uffff\1\12\21\uffff\1\2\1\3\1"+
            "\4\1\5\7\uffff\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA20_eot = DFA.unpackEncodedString(DFA20_eotS);
    static final short[] DFA20_eof = DFA.unpackEncodedString(DFA20_eofS);
    static final char[] DFA20_min = DFA.unpackEncodedStringToUnsignedChars(DFA20_minS);
    static final char[] DFA20_max = DFA.unpackEncodedStringToUnsignedChars(DFA20_maxS);
    static final short[] DFA20_accept = DFA.unpackEncodedString(DFA20_acceptS);
    static final short[] DFA20_special = DFA.unpackEncodedString(DFA20_specialS);
    static final short[][] DFA20_transition;

    static {
        int numStates = DFA20_transitionS.length;
        DFA20_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA20_transition[i] = DFA.unpackEncodedString(DFA20_transitionS[i]);
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = DFA20_eot;
            this.eof = DFA20_eof;
            this.min = DFA20_min;
            this.max = DFA20_max;
            this.accept = DFA20_accept;
            this.special = DFA20_special;
            this.transition = DFA20_transition;
        }
        public String getDescription() {
            return "57:4: ( dissolveStructure1 | dissolveStructure2 | dissolveStructure3 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred51_ChemicalChunker()) ) {s = 10;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA20_2 = input.LA(1);

                         
                        int index20_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA20_3 = input.LA(1);

                         
                        int index20_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA20_4 = input.LA(1);

                         
                        int index20_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA20_5 = input.LA(1);

                         
                        int index20_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA20_6 = input.LA(1);

                         
                        int index20_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA20_7 = input.LA(1);

                         
                        int index20_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA20_8 = input.LA(1);

                         
                        int index20_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA20_9 = input.LA(1);

                         
                        int index20_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index20_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA21_eotS =
        "\21\uffff";
    static final String DFA21_eofS =
        "\21\uffff";
    static final String DFA21_minS =
        "\1\13\7\12\1\uffff\7\0\1\uffff";
    static final String DFA21_maxS =
        "\1\u009c\7\12\1\uffff\7\0\1\uffff";
    static final String DFA21_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA21_specialS =
        "\11\uffff\1\5\1\1\1\6\1\4\1\2\1\0\1\3\1\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\24\uffff\1\10\17\uffff\1\10\57"+
            "\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1\2\1\3"+
            "\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "60:8: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_14 = input.LA(1);

                         
                        int index21_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA21_10 = input.LA(1);

                         
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA21_13 = input.LA(1);

                         
                        int index21_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA21_15 = input.LA(1);

                         
                        int index21_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA21_12 = input.LA(1);

                         
                        int index21_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA21_9 = input.LA(1);

                         
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA21_11 = input.LA(1);

                         
                        int index21_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index21_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA23_eotS =
        "\20\uffff";
    static final String DFA23_eofS =
        "\20\uffff";
    static final String DFA23_minS =
        "\1\13\6\0\11\uffff";
    static final String DFA23_maxS =
        "\1\u0094\6\0\11\uffff";
    static final String DFA23_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA23_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "60:18: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA23_1 = input.LA(1);

                         
                        int index23_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index23_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA23_2 = input.LA(1);

                         
                        int index23_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index23_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA23_3 = input.LA(1);

                         
                        int index23_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index23_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA23_4 = input.LA(1);

                         
                        int index23_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index23_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA23_5 = input.LA(1);

                         
                        int index23_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index23_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA23_6 = input.LA(1);

                         
                        int index23_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index23_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA25_eotS =
        "\21\uffff";
    static final String DFA25_eofS =
        "\21\uffff";
    static final String DFA25_minS =
        "\1\13\7\12\1\uffff\7\0\1\uffff";
    static final String DFA25_maxS =
        "\1\u009c\7\12\1\uffff\7\0\1\uffff";
    static final String DFA25_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA25_specialS =
        "\11\uffff\1\6\1\3\1\0\1\5\1\4\1\2\1\1\1\uffff}>";
    static final String[] DFA25_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\24\uffff\1\10\17\uffff\1\10\57"+
            "\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1\2\1\3"+
            "\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "60:58: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA25_11 = input.LA(1);

                         
                        int index25_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA25_15 = input.LA(1);

                         
                        int index25_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA25_14 = input.LA(1);

                         
                        int index25_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA25_10 = input.LA(1);

                         
                        int index25_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA25_13 = input.LA(1);

                         
                        int index25_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA25_12 = input.LA(1);

                         
                        int index25_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_12);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA27_eotS =
        "\20\uffff";
    static final String DFA27_eofS =
        "\20\uffff";
    static final String DFA27_minS =
        "\1\13\6\0\11\uffff";
    static final String DFA27_maxS =
        "\1\u0094\6\0\11\uffff";
    static final String DFA27_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA27_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "60:68: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_1 = input.LA(1);

                         
                        int index27_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index27_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA27_2 = input.LA(1);

                         
                        int index27_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index27_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA27_3 = input.LA(1);

                         
                        int index27_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index27_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA27_4 = input.LA(1);

                         
                        int index27_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index27_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA27_5 = input.LA(1);

                         
                        int index27_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index27_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA27_6 = input.LA(1);

                         
                        int index27_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index27_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA30_eotS =
        "\21\uffff";
    static final String DFA30_eofS =
        "\21\uffff";
    static final String DFA30_minS =
        "\1\13\7\12\1\uffff\7\0\1\uffff";
    static final String DFA30_maxS =
        "\1\u009c\7\12\1\uffff\7\0\1\uffff";
    static final String DFA30_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA30_specialS =
        "\11\uffff\1\0\1\3\1\6\1\1\1\5\1\2\1\4\1\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\24\uffff\1\10\17\uffff\1\10\57"+
            "\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1\2\1\3"+
            "\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "62:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA30_9 = input.LA(1);

                         
                        int index30_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA30_12 = input.LA(1);

                         
                        int index30_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_12);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA30_14 = input.LA(1);

                         
                        int index30_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA30_10 = input.LA(1);

                         
                        int index30_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA30_15 = input.LA(1);

                         
                        int index30_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_15);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA30_13 = input.LA(1);

                         
                        int index30_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA30_11 = input.LA(1);

                         
                        int index30_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index30_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA32_eotS =
        "\20\uffff";
    static final String DFA32_eofS =
        "\20\uffff";
    static final String DFA32_minS =
        "\1\13\6\0\11\uffff";
    static final String DFA32_maxS =
        "\1\u0094\6\0\11\uffff";
    static final String DFA32_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA32_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "62:14: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_1 = input.LA(1);

                         
                        int index32_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index32_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA32_2 = input.LA(1);

                         
                        int index32_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index32_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA32_3 = input.LA(1);

                         
                        int index32_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index32_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA32_4 = input.LA(1);

                         
                        int index32_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index32_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA32_5 = input.LA(1);

                         
                        int index32_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index32_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA32_6 = input.LA(1);

                         
                        int index32_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred63_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index32_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA34_eotS =
        "\21\uffff";
    static final String DFA34_eofS =
        "\21\uffff";
    static final String DFA34_minS =
        "\1\13\7\12\1\uffff\7\0\1\uffff";
    static final String DFA34_maxS =
        "\1\u009c\7\12\1\uffff\7\0\1\uffff";
    static final String DFA34_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA34_specialS =
        "\11\uffff\1\1\1\4\1\6\1\0\1\5\1\3\1\2\1\uffff}>";
    static final String[] DFA34_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\24\uffff\1\10\17\uffff\1\10\57"+
            "\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1\2\1\3"+
            "\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "62:54: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA34_12 = input.LA(1);

                         
                        int index34_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA34_9 = input.LA(1);

                         
                        int index34_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA34_15 = input.LA(1);

                         
                        int index34_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA34_14 = input.LA(1);

                         
                        int index34_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA34_10 = input.LA(1);

                         
                        int index34_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA34_13 = input.LA(1);

                         
                        int index34_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA34_11 = input.LA(1);

                         
                        int index34_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index34_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA36_eotS =
        "\20\uffff";
    static final String DFA36_eofS =
        "\20\uffff";
    static final String DFA36_minS =
        "\1\13\6\0\11\uffff";
    static final String DFA36_maxS =
        "\1\u0094\6\0\11\uffff";
    static final String DFA36_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA36_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "62:64: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_1 = input.LA(1);

                         
                        int index36_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index36_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA36_2 = input.LA(1);

                         
                        int index36_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index36_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA36_3 = input.LA(1);

                         
                        int index36_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index36_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA36_4 = input.LA(1);

                         
                        int index36_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index36_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA36_5 = input.LA(1);

                         
                        int index36_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index36_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA36_6 = input.LA(1);

                         
                        int index36_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index36_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA40_eotS =
        "\21\uffff";
    static final String DFA40_eofS =
        "\21\uffff";
    static final String DFA40_minS =
        "\1\13\6\0\12\uffff";
    static final String DFA40_maxS =
        "\1\u0094\6\0\12\uffff";
    static final String DFA40_acceptS =
        "\7\uffff\1\1\7\uffff\1\3\1\2";
    static final String DFA40_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\12\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\24\uffff\1\3\4\uffff\1\17\12\uffff"+
            "\1\7\57\uffff\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "65:13: ( molecule | unnamedmolecule | nnchementity )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_1 = input.LA(1);

                         
                        int index40_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred72_ChemicalChunker()) ) {s = 16;}

                         
                        input.seek(index40_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred72_ChemicalChunker()) ) {s = 16;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred72_ChemicalChunker()) ) {s = 16;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred72_ChemicalChunker()) ) {s = 16;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred72_ChemicalChunker()) ) {s = 16;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred72_ChemicalChunker()) ) {s = 16;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA42_eotS =
        "\21\uffff";
    static final String DFA42_eofS =
        "\21\uffff";
    static final String DFA42_minS =
        "\1\13\7\12\1\uffff\7\0\1\uffff";
    static final String DFA42_maxS =
        "\1\u009c\7\12\1\uffff\7\0\1\uffff";
    static final String DFA42_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA42_specialS =
        "\11\uffff\1\1\1\6\1\2\1\0\1\4\1\5\1\3\1\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\24\uffff\1\10\17\uffff\1\10\57"+
            "\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1\2\1\3"+
            "\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "65:66: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_12 = input.LA(1);

                         
                        int index42_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA42_11 = input.LA(1);

                         
                        int index42_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA42_15 = input.LA(1);

                         
                        int index42_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_15);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA42_13 = input.LA(1);

                         
                        int index42_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA42_14 = input.LA(1);

                         
                        int index42_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA42_10 = input.LA(1);

                         
                        int index42_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index42_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA44_eotS =
        "\20\uffff";
    static final String DFA44_eofS =
        "\20\uffff";
    static final String DFA44_minS =
        "\1\13\6\0\11\uffff";
    static final String DFA44_maxS =
        "\1\u0094\6\0\11\uffff";
    static final String DFA44_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA44_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "65:76: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA44_1 = input.LA(1);

                         
                        int index44_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index44_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA44_2 = input.LA(1);

                         
                        int index44_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index44_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA44_3 = input.LA(1);

                         
                        int index44_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index44_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA44_4 = input.LA(1);

                         
                        int index44_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index44_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA44_5 = input.LA(1);

                         
                        int index44_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index44_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA44_6 = input.LA(1);

                         
                        int index44_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index44_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA61_eotS =
        "\71\uffff";
    static final String DFA61_eofS =
        "\1\1\70\uffff";
    static final String DFA61_minS =
        "\1\13\1\uffff\66\0\1\uffff";
    static final String DFA61_maxS =
        "\1\u00c5\1\uffff\66\0\1\uffff";
    static final String DFA61_acceptS =
        "\1\uffff\1\2\66\uffff\1\1";
    static final String DFA61_specialS =
        "\2\uffff\1\42\1\20\1\63\1\3\1\12\1\61\1\60\1\32\1\0\1\44\1\51\1"+
        "\43\1\10\1\2\1\31\1\24\1\34\1\5\1\52\1\41\1\21\1\57\1\4\1\47\1\40"+
        "\1\22\1\17\1\1\1\35\1\53\1\6\1\23\1\16\1\36\1\56\1\15\1\54\1\45"+
        "\1\30\1\62\1\33\1\55\1\64\1\25\1\11\1\46\1\7\1\50\1\65\1\26\1\13"+
        "\1\27\1\14\1\37\1\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\1\1\13\1\15\3\1\1\uffff\1\14\23\1\1\uffff\21\1\1\27\1\67"+
            "\1\30\1\33\2\1\1\35\1\34\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
            "\1\1\1\45\1\1\1\46\1\32\1\47\1\50\1\1\1\51\1\1\1\52\1\1\1\53"+
            "\1\54\1\31\1\55\1\56\1\1\1\57\1\1\1\60\1\61\1\62\1\1\1\63\1"+
            "\17\1\1\1\64\1\65\1\66\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4"+
            "\1\15\uffff\2\1\4\uffff\2\1\3\uffff\3\1\4\uffff\1\1\1\7\1\10"+
            "\1\11\1\12\1\20\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff"+
            "\2\1\5\uffff\1\2\1\3\1\16\1\4\1\6\1\uffff\1\5\2\1\1\uffff\1"+
            "\21\1\22\1\24\1\23\1\26\1\25\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "()+ loopback of 76:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA61_10 = input.LA(1);

                         
                        int index61_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA61_29 = input.LA(1);

                         
                        int index61_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_29);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA61_15 = input.LA(1);

                         
                        int index61_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA61_5 = input.LA(1);

                         
                        int index61_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA61_24 = input.LA(1);

                         
                        int index61_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_24);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA61_19 = input.LA(1);

                         
                        int index61_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_19);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA61_32 = input.LA(1);

                         
                        int index61_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_32);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA61_48 = input.LA(1);

                         
                        int index61_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_48);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA61_14 = input.LA(1);

                         
                        int index61_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_14);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA61_46 = input.LA(1);

                         
                        int index61_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_46);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA61_6 = input.LA(1);

                         
                        int index61_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_6);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA61_52 = input.LA(1);

                         
                        int index61_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_52);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA61_54 = input.LA(1);

                         
                        int index61_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_54);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA61_37 = input.LA(1);

                         
                        int index61_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_37);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA61_34 = input.LA(1);

                         
                        int index61_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_34);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA61_28 = input.LA(1);

                         
                        int index61_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_28);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA61_3 = input.LA(1);

                         
                        int index61_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_3);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA61_22 = input.LA(1);

                         
                        int index61_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_22);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA61_27 = input.LA(1);

                         
                        int index61_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_27);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA61_33 = input.LA(1);

                         
                        int index61_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_33);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA61_17 = input.LA(1);

                         
                        int index61_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_17);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA61_45 = input.LA(1);

                         
                        int index61_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_45);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA61_51 = input.LA(1);

                         
                        int index61_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_51);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA61_53 = input.LA(1);

                         
                        int index61_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_53);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA61_40 = input.LA(1);

                         
                        int index61_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_40);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA61_16 = input.LA(1);

                         
                        int index61_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_16);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA61_9 = input.LA(1);

                         
                        int index61_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_9);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA61_42 = input.LA(1);

                         
                        int index61_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_42);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA61_18 = input.LA(1);

                         
                        int index61_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_18);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA61_30 = input.LA(1);

                         
                        int index61_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA61_35 = input.LA(1);

                         
                        int index61_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_35);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA61_55 = input.LA(1);

                         
                        int index61_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_55);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA61_26 = input.LA(1);

                         
                        int index61_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_26);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA61_21 = input.LA(1);

                         
                        int index61_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_21);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA61_2 = input.LA(1);

                         
                        int index61_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_2);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA61_13 = input.LA(1);

                         
                        int index61_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_13);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA61_11 = input.LA(1);

                         
                        int index61_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_11);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA61_39 = input.LA(1);

                         
                        int index61_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA61_47 = input.LA(1);

                         
                        int index61_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_47);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA61_25 = input.LA(1);

                         
                        int index61_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_25);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA61_49 = input.LA(1);

                         
                        int index61_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_49);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA61_12 = input.LA(1);

                         
                        int index61_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_12);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA61_20 = input.LA(1);

                         
                        int index61_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_20);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA61_31 = input.LA(1);

                         
                        int index61_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_31);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA61_38 = input.LA(1);

                         
                        int index61_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_38);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA61_43 = input.LA(1);

                         
                        int index61_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_43);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA61_36 = input.LA(1);

                         
                        int index61_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_36);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA61_23 = input.LA(1);

                         
                        int index61_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_23);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA61_8 = input.LA(1);

                         
                        int index61_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_8);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA61_7 = input.LA(1);

                         
                        int index61_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_7);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA61_41 = input.LA(1);

                         
                        int index61_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_41);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA61_4 = input.LA(1);

                         
                        int index61_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_4);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA61_44 = input.LA(1);

                         
                        int index61_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_44);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA61_50 = input.LA(1);

                         
                        int index61_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 56;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index61_50);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 61, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA56_eotS =
        "\53\uffff";
    static final String DFA56_eofS =
        "\1\1\52\uffff";
    static final String DFA56_minS =
        "\1\13\1\uffff\50\0\1\uffff";
    static final String DFA56_maxS =
        "\1\u00c5\1\uffff\50\0\1\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA56_specialS =
        "\2\uffff\1\0\1\15\1\6\1\2\1\33\1\14\1\34\1\42\1\3\1\44\1\5\1\24"+
        "\1\7\1\41\1\26\1\1\1\31\1\11\1\36\1\30\1\10\1\12\1\16\1\25\1\13"+
        "\1\46\1\45\1\32\1\4\1\23\1\35\1\37\1\40\1\17\1\43\1\27\1\21\1\47"+
        "\1\22\1\20\1\uffff}>";
    static final String[] DFA56_transitionS = {
            "\6\1\1\uffff\24\1\1\uffff\21\1\1\11\1\51\1\12\1\15\2\1\1\17"+
            "\1\16\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\1\1\27\1\1\1\30\1"+
            "\14\1\31\1\32\1\1\1\33\1\1\1\34\1\1\1\35\1\36\1\13\1\37\1\40"+
            "\1\1\1\41\1\1\1\42\1\43\1\44\1\1\1\45\1\2\1\1\1\46\1\47\1\50"+
            "\3\1\1\uffff\1\1\1\uffff\1\1\1\uffff\4\1\15\uffff\2\1\4\uffff"+
            "\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\13\uffff\2\1\5\uffff\5\1\1\uffff\3\1\1\uffff\1\3\1\4\1"+
            "\6\1\5\1\10\1\7\7\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()+ loopback of 76:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_2 = input.LA(1);

                         
                        int index56_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA56_17 = input.LA(1);

                         
                        int index56_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA56_5 = input.LA(1);

                         
                        int index56_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA56_10 = input.LA(1);

                         
                        int index56_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_10);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA56_30 = input.LA(1);

                         
                        int index56_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_30);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA56_12 = input.LA(1);

                         
                        int index56_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_12);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA56_4 = input.LA(1);

                         
                        int index56_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA56_14 = input.LA(1);

                         
                        int index56_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_14);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA56_22 = input.LA(1);

                         
                        int index56_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_22);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA56_19 = input.LA(1);

                         
                        int index56_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA56_23 = input.LA(1);

                         
                        int index56_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_23);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA56_26 = input.LA(1);

                         
                        int index56_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_26);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA56_7 = input.LA(1);

                         
                        int index56_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_7);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA56_3 = input.LA(1);

                         
                        int index56_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_3);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA56_24 = input.LA(1);

                         
                        int index56_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_24);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA56_35 = input.LA(1);

                         
                        int index56_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_35);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA56_41 = input.LA(1);

                         
                        int index56_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_41);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA56_38 = input.LA(1);

                         
                        int index56_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_38);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA56_40 = input.LA(1);

                         
                        int index56_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_40);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA56_31 = input.LA(1);

                         
                        int index56_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_31);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA56_13 = input.LA(1);

                         
                        int index56_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_13);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA56_25 = input.LA(1);

                         
                        int index56_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_25);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA56_16 = input.LA(1);

                         
                        int index56_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_16);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA56_37 = input.LA(1);

                         
                        int index56_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_37);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA56_21 = input.LA(1);

                         
                        int index56_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_21);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA56_18 = input.LA(1);

                         
                        int index56_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_18);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA56_29 = input.LA(1);

                         
                        int index56_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA56_6 = input.LA(1);

                         
                        int index56_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_6);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA56_8 = input.LA(1);

                         
                        int index56_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_8);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA56_32 = input.LA(1);

                         
                        int index56_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA56_20 = input.LA(1);

                         
                        int index56_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_20);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA56_33 = input.LA(1);

                         
                        int index56_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA56_34 = input.LA(1);

                         
                        int index56_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA56_15 = input.LA(1);

                         
                        int index56_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_15);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA56_9 = input.LA(1);

                         
                        int index56_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_9);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA56_36 = input.LA(1);

                         
                        int index56_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA56_11 = input.LA(1);

                         
                        int index56_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_11);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA56_28 = input.LA(1);

                         
                        int index56_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_28);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA56_27 = input.LA(1);

                         
                        int index56_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_27);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA56_39 = input.LA(1);

                         
                        int index56_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index56_39);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA58_eotS =
        "\15\uffff";
    static final String DFA58_eofS =
        "\1\1\14\uffff";
    static final String DFA58_minS =
        "\1\13\1\uffff\5\12\5\0\1\uffff";
    static final String DFA58_maxS =
        "\1\u00c5\1\uffff\5\12\5\0\1\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\2\12\uffff\1\1";
    static final String DFA58_specialS =
        "\7\uffff\1\2\1\0\1\3\1\1\1\4\1\uffff}>";
    static final String[] DFA58_transitionS = {
            "\6\1\1\uffff\24\1\1\uffff\101\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\4\1\15\uffff\2\1\4\uffff\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff\1\2\1\3\1"+
            "\1\1\4\1\6\1\uffff\1\5\2\1\1\uffff\15\1",
            "",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "()* loopback of 76:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA58_8 = input.LA(1);

                         
                        int index58_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA58_10 = input.LA(1);

                         
                        int index58_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA58_7 = input.LA(1);

                         
                        int index58_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA58_9 = input.LA(1);

                         
                        int index58_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA58_11 = input.LA(1);

                         
                        int index58_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_ChemicalChunker()) ) {s = 12;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index58_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA59_eotS =
        "\21\uffff";
    static final String DFA59_eofS =
        "\1\10\20\uffff";
    static final String DFA59_minS =
        "\1\13\7\12\1\uffff\7\0\1\uffff";
    static final String DFA59_maxS =
        "\1\u00c5\7\12\1\uffff\7\0\1\uffff";
    static final String DFA59_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA59_specialS =
        "\11\uffff\1\4\1\5\1\1\1\3\1\6\1\0\1\2\1\uffff}>";
    static final String[] DFA59_transitionS = {
            "\1\10\1\5\1\7\3\10\1\uffff\1\6\23\10\1\uffff\101\10\1\uffff"+
            "\1\10\1\uffff\1\10\1\uffff\4\10\15\uffff\2\10\4\uffff\2\10\3"+
            "\uffff\3\10\4\uffff\1\10\1\1\1\2\1\3\1\4\1\10\1\uffff\1\10\1"+
            "\uffff\1\10\2\uffff\1\10\13\uffff\2\10\5\uffff\5\10\1\uffff"+
            "\3\10\1\uffff\15\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "76:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA59_14 = input.LA(1);

                         
                        int index59_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA59_11 = input.LA(1);

                         
                        int index59_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA59_15 = input.LA(1);

                         
                        int index59_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA59_12 = input.LA(1);

                         
                        int index59_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA59_9 = input.LA(1);

                         
                        int index59_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA59_10 = input.LA(1);

                         
                        int index59_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA59_13 = input.LA(1);

                         
                        int index59_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index59_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA65_eotS =
        "\u008b\uffff";
    static final String DFA65_eofS =
        "\1\15\u008a\uffff";
    static final String DFA65_minS =
        "\1\13\14\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\22\uffff\1\0\3\uffff"+
        "\1\0\40\uffff\22\0\50\uffff\1\0\3\uffff";
    static final String DFA65_maxS =
        "\1\u00c5\14\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\22\uffff\1\0\3"+
        "\uffff\1\0\40\uffff\22\0\50\uffff\1\0\3\uffff";
    static final String DFA65_acceptS =
        "\15\uffff\1\2\174\uffff\1\1";
    static final String DFA65_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff"+
        "\1\14\1\15\3\uffff\1\16\1\uffff\1\17\22\uffff\1\20\3\uffff\1\21"+
        "\40\uffff\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\50\uffff\1\44\3\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\15\1\12\1\14\3\15\1\uffff\1\13\1\120\1\121\1\117\1\125\1"+
            "\126\1\135\1\136\1\122\1\134\1\127\1\131\1\123\1\124\1\133\1"+
            "\132\1\130\2\15\1\50\1\uffff\6\15\1\54\71\15\1\17\1\uffff\1"+
            "\u0087\1\uffff\1\15\1\uffff\4\15\15\uffff\1\16\1\25\4\uffff"+
            "\1\23\1\15\3\uffff\3\15\4\uffff\1\116\1\6\1\7\1\10\1\11\1\15"+
            "\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\13\uffff\2\15\5\uffff"+
            "\1\1\1\2\1\15\1\3\1\5\1\uffff\1\4\1\15\1\115\1\uffff\15\15",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "()* loopback of 76:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA65_1 = input.LA(1);

                         
                        int index65_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA65_2 = input.LA(1);

                         
                        int index65_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA65_3 = input.LA(1);

                         
                        int index65_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA65_4 = input.LA(1);

                         
                        int index65_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA65_5 = input.LA(1);

                         
                        int index65_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA65_6 = input.LA(1);

                         
                        int index65_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA65_7 = input.LA(1);

                         
                        int index65_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA65_8 = input.LA(1);

                         
                        int index65_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA65_9 = input.LA(1);

                         
                        int index65_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA65_10 = input.LA(1);

                         
                        int index65_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA65_11 = input.LA(1);

                         
                        int index65_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA65_12 = input.LA(1);

                         
                        int index65_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA65_14 = input.LA(1);

                         
                        int index65_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA65_15 = input.LA(1);

                         
                        int index65_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA65_19 = input.LA(1);

                         
                        int index65_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_19);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA65_21 = input.LA(1);

                         
                        int index65_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_21);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA65_40 = input.LA(1);

                         
                        int index65_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_40);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA65_44 = input.LA(1);

                         
                        int index65_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_44);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA65_77 = input.LA(1);

                         
                        int index65_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_77);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA65_78 = input.LA(1);

                         
                        int index65_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_78);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA65_79 = input.LA(1);

                         
                        int index65_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_79);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA65_80 = input.LA(1);

                         
                        int index65_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_80);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA65_81 = input.LA(1);

                         
                        int index65_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_81);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA65_82 = input.LA(1);

                         
                        int index65_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_82);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA65_83 = input.LA(1);

                         
                        int index65_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_83);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA65_84 = input.LA(1);

                         
                        int index65_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_84);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA65_85 = input.LA(1);

                         
                        int index65_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_85);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA65_86 = input.LA(1);

                         
                        int index65_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_86);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA65_87 = input.LA(1);

                         
                        int index65_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_87);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA65_88 = input.LA(1);

                         
                        int index65_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_88);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA65_89 = input.LA(1);

                         
                        int index65_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_89);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA65_90 = input.LA(1);

                         
                        int index65_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_90);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA65_91 = input.LA(1);

                         
                        int index65_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_91);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA65_92 = input.LA(1);

                         
                        int index65_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_92);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA65_93 = input.LA(1);

                         
                        int index65_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_93);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA65_94 = input.LA(1);

                         
                        int index65_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_94);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA65_135 = input.LA(1);

                         
                        int index65_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 138;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index65_135);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 65, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA66_eotS =
        "\60\uffff";
    static final String DFA66_eofS =
        "\51\uffff\1\53\2\uffff\1\53\3\uffff";
    static final String DFA66_minS =
        "\1\70\11\uffff\1\12\36\uffff\1\13\1\12\1\uffff\1\13\1\12\1\0\1\uffff";
    static final String DFA66_maxS =
        "\1\u00be\11\uffff\1\12\36\uffff\1\u00c5\1\12\1\uffff\1\u00c5\1\12"+
        "\1\0\1\uffff";
    static final String DFA66_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\2\uffff\1\27\3\uffff\1\12";
    static final String DFA66_specialS =
        "\56\uffff\1\0\1\uffff}>";
    static final String[] DFA66_transitionS = {
            "\1\7\1\50\1\10\1\13\2\uffff\1\15\1\14\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\24\1\uffff\1\25\1\uffff\1\26\1\12\1\27\1\30\1\uffff"+
            "\1\31\1\uffff\1\32\1\uffff\1\33\1\34\1\11\1\35\1\36\1\uffff"+
            "\1\37\1\uffff\1\40\1\41\1\42\1\uffff\1\43\1\44\1\uffff\1\45"+
            "\1\46\1\47\124\uffff\1\1\1\2\1\4\1\3\1\6\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\6\53\1\uffff\24\53\1\uffff\101\53\1\uffff\10\53\15\uffff\1"+
            "\52\1\53\4\uffff\2\53\3\uffff\3\53\4\uffff\6\53\1\uffff\1\53"+
            "\1\uffff\1\53\2\uffff\1\53\13\uffff\2\53\5\uffff\5\53\1\uffff"+
            "\3\53\1\uffff\15\53",
            "\1\54",
            "",
            "\6\53\1\uffff\24\53\1\uffff\34\53\1\55\44\53\1\uffff\1\53\1"+
            "\uffff\1\53\1\uffff\4\53\15\uffff\2\53\4\uffff\2\53\3\uffff"+
            "\3\53\4\uffff\6\53\1\uffff\1\53\1\uffff\1\53\2\uffff\1\53\13"+
            "\uffff\2\53\5\uffff\5\53\1\uffff\3\53\1\uffff\15\53",
            "\1\56",
            "\1\uffff",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "77:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA66_46 = input.LA(1);

                         
                        int index66_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred120_ChemicalChunker()) ) {s = 43;}

                         
                        input.seek(index66_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 66, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA68_eotS =
        "\14\uffff";
    static final String DFA68_eofS =
        "\14\uffff";
    static final String DFA68_minS =
        "\1\u0089\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA68_maxS =
        "\1\u00c5\2\uffff\1\12\5\uffff\1\0\2\uffff";
    static final String DFA68_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\5\1\6\1\7\1\10\1\11\1\uffff\1\3\1\4";
    static final String DFA68_specialS =
        "\11\uffff\1\0\2\uffff}>";
    static final String[] DFA68_transitionS = {
            "\1\7\65\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\10",
            "",
            "",
            "\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "82:1: clause : ( wdt | wp_poss | wpo | wpo | wps | wql | wrb | ex | pdt );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA68_9 = input.LA(1);

                         
                        int index68_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred142_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred143_ChemicalChunker()) ) {s = 11;}

                         
                        input.seek(index68_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 68, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA70_eotS =
        "\127\uffff";
    static final String DFA70_eofS =
        "\127\uffff";
    static final String DFA70_minS =
        "\1\13\2\uffff\16\0\1\uffff\5\0\27\uffff\4\0\45\uffff";
    static final String DFA70_maxS =
        "\1\u00c5\2\uffff\16\0\1\uffff\5\0\27\uffff\4\0\45\uffff";
    static final String DFA70_acceptS =
        "\1\uffff\1\1\1\2\16\uffff\1\6\6\uffff\1\11\1\14\1\15\1\17\1\20\1"+
        "\24\1\25\1\26\1\27\1\33\1\34\1\35\1\36\1\37\1\41\1\42\1\43\1\44"+
        "\1\45\1\46\1\47\1\50\4\uffff\1\55\1\56\1\57\1\60\1\61\1\64\1\65"+
        "\1\66\1\67\1\70\1\71\1\72\1\73\3\uffff\1\3\1\5\1\7\1\10\1\30\1\63"+
        "\1\4\1\22\1\23\1\32\1\62\1\21\1\40\1\16\1\31\1\12\1\13\1\51\1\52"+
        "\1\53\1\54";
    static final String DFA70_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\27\uffff\1\23\1\24\1\25\1"+
        "\26\45\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\7\1\15\1\17\1\10\1\65\1\37\1\uffff\1\16\20\uffff\1\34\1\25"+
            "\1\35\1\uffff\1\6\1\45\1\36\1\40\1\54\1\24\1\41\1\42\1\43\1"+
            "\44\1\22\1\46\1\47\1\50\1\51\1\52\1\20\4\uffff\1\23\1\63\11"+
            "\uffff\1\21\1\uffff\1\53\4\uffff\1\66\1\uffff\1\67\1\uffff\1"+
            "\70\5\uffff\1\71\1\uffff\1\55\3\uffff\1\72\1\uffff\1\33\1\62"+
            "\3\uffff\1\30\1\uffff\1\4\5\uffff\1\64\1\uffff\1\3\17\uffff"+
            "\1\5\4\uffff\1\21\4\uffff\1\76\1\73\1\74\5\uffff\1\11\1\12\1"+
            "\13\1\14\2\uffff\1\26\1\uffff\1\31\2\uffff\1\32\13\uffff\1\1"+
            "\1\2\14\uffff\1\75\10\uffff\1\56\1\57\1\60\1\61\3\76",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "85:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnyield | nnstate | nn | nns | nnp | nnadd | preparationphrase | nnexample | oscarcpr | range | amount | nntime | nnatmosphere | tmunicode | nneq | quantity | nnchementity | measurements | nntemp | nnflash | nngeneral | nnmethod | nnamount | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | wdt | wp_poss | wpo | wps | nnsynthesize | nnmixture | reference | oscaront | nndry | number | oscarCompound | nnextract | nnfilter | nnprecipitate | nnremove | fw | fwin | sym | clause );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_3 = input.LA(1);

                         
                        int index70_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred156_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA70_4 = input.LA(1);

                         
                        int index70_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred151_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred156_ChemicalChunker()) ) {s = 69;}

                         
                        input.seek(index70_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA70_5 = input.LA(1);

                         
                        int index70_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred152_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred155_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred156_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred166_ChemicalChunker()) ) {s = 73;}

                        else if ( (synpred167_ChemicalChunker()) ) {s = 74;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred174_ChemicalChunker()) ) {s = 75;}

                        else if ( (synpred198_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index70_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA70_6 = input.LA(1);

                         
                        int index70_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred156_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred174_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index70_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA70_7 = input.LA(1);

                         
                        int index70_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred156_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred166_ChemicalChunker()) ) {s = 73;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred174_ChemicalChunker()) ) {s = 75;}

                        else if ( (synpred198_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index70_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA70_8 = input.LA(1);

                         
                        int index70_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred156_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred165_ChemicalChunker()) ) {s = 77;}

                        else if ( (synpred166_ChemicalChunker()) ) {s = 73;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred174_ChemicalChunker()) ) {s = 75;}

                        else if ( (synpred198_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index70_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA70_9 = input.LA(1);

                         
                        int index70_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA70_10 = input.LA(1);

                         
                        int index70_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA70_11 = input.LA(1);

                         
                        int index70_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_11);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA70_12 = input.LA(1);

                         
                        int index70_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_12);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA70_13 = input.LA(1);

                         
                        int index70_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_13);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA70_14 = input.LA(1);

                         
                        int index70_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_14);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA70_15 = input.LA(1);

                         
                        int index70_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA70_16 = input.LA(1);

                         
                        int index70_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred153_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred199_ChemicalChunker()) ) {s = 71;}

                         
                        input.seek(index70_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA70_18 = input.LA(1);

                         
                        int index70_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index70_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA70_19 = input.LA(1);

                         
                        int index70_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred162_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index70_19);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA70_20 = input.LA(1);

                         
                        int index70_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index70_20);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA70_21 = input.LA(1);

                         
                        int index70_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred158_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index70_21);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA70_22 = input.LA(1);

                         
                        int index70_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred154_ChemicalChunker()) ) {s = 17;}

                        else if ( (synpred159_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index70_22);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA70_46 = input.LA(1);

                         
                        int index70_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_ChemicalChunker()) ) {s = 83;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index70_46);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA70_47 = input.LA(1);

                         
                        int index70_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_ChemicalChunker()) ) {s = 84;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index70_47);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA70_48 = input.LA(1);

                         
                        int index70_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_ChemicalChunker()) ) {s = 85;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index70_48);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA70_49 = input.LA(1);

                         
                        int index70_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_ChemicalChunker()) ) {s = 86;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index70_49);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA75_eotS =
        "\13\uffff";
    static final String DFA75_eofS =
        "\13\uffff";
    static final String DFA75_minS =
        "\1\13\1\12\1\uffff\1\14\2\12\1\0\1\13\1\uffff\1\12\1\0";
    static final String DFA75_maxS =
        "\1\u00c5\1\12\1\uffff\1\u0097\2\12\1\0\1\u00c5\1\uffff\1\12\1\0";
    static final String DFA75_acceptS =
        "\2\uffff\1\2\5\uffff\1\1\2\uffff";
    static final String DFA75_specialS =
        "\6\uffff\1\0\3\uffff\1\1}>";
    static final String[] DFA75_transitionS = {
            "\6\2\1\uffff\1\2\20\uffff\3\2\1\uffff\21\2\4\uffff\2\2\11\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2\2\3\uffff\1\2\1\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\17\uffff\1\1\4\uffff\1\2\4\uffff"+
            "\3\2\5\uffff\4\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff"+
            "\2\2\14\uffff\1\2\10\uffff\7\2",
            "\1\3",
            "",
            "\2\2\3\uffff\2\2\23\uffff\3\2\2\uffff\1\2\11\uffff\1\2\60\uffff"+
            "\1\5\3\uffff\1\2\1\uffff\1\2\22\uffff\1\4\21\uffff\4\2\2\uffff"+
            "\1\2",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\11\5\2\1\uffff\1\2\20\uffff\3\2\1\uffff\21\2\4\uffff\2\2"+
            "\11\uffff\1\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\uffff\1"+
            "\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\1\uffff\2\2\3\uffff\1"+
            "\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\17\uffff\1\2\4\uffff"+
            "\1\2\4\uffff\3\2\5\uffff\4\2\2\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\1\2\13\uffff\2\2\14\uffff\1\2\10\uffff\7\2",
            "",
            "\1\12",
            "\1\uffff"
    };

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "90:9: ( numberratio | nounratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA75_6 = input.LA(1);

                         
                        int index75_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred213_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index75_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA75_10 = input.LA(1);

                         
                        int index75_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred213_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index75_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA76_eotS =
        "\12\uffff";
    static final String DFA76_eofS =
        "\1\1\4\uffff\1\1\4\uffff";
    static final String DFA76_minS =
        "\1\13\1\uffff\2\12\1\0\1\13\1\uffff\1\12\1\0\1\uffff";
    static final String DFA76_maxS =
        "\1\u00c5\1\uffff\2\12\1\0\1\u00c5\1\uffff\1\12\1\0\1\uffff";
    static final String DFA76_acceptS =
        "\1\uffff\1\3\4\uffff\1\2\2\uffff\1\1";
    static final String DFA76_specialS =
        "\4\uffff\1\1\3\uffff\1\0\1\uffff}>";
    static final String[] DFA76_transitionS = {
            "\6\1\1\uffff\24\1\1\uffff\77\1\1\3\1\1\1\uffff\10\1\15\uffff"+
            "\1\1\1\2\4\uffff\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff\5\1\1\uffff\3\1\1\uffff"+
            "\15\1",
            "",
            "\1\4",
            "\1\5",
            "\1\uffff",
            "\1\7\5\1\1\uffff\24\1\1\uffff\101\1\1\uffff\10\1\15\uffff\2"+
            "\1\4\uffff\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1"+
            "\1\2\uffff\1\1\13\uffff\2\1\5\uffff\5\1\1\uffff\3\1\1\uffff"+
            "\15\1",
            "",
            "\1\10",
            "\1\uffff",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "()+ loopback of 91:19: ( colon oscarcd | cd )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA76_8 = input.LA(1);

                         
                        int index76_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred214_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA76_4 = input.LA(1);

                         
                        int index76_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred215_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA84_eotS =
        "\u008e\uffff";
    static final String DFA84_eofS =
        "\u008e\uffff";
    static final String DFA84_minS =
        "\1\13\1\0\43\uffff\1\0\4\uffff\5\0\2\uffff\13\0\1\uffff\1\0\57\uffff"+
        "\1\0\40\uffff";
    static final String DFA84_maxS =
        "\1\u00c5\1\0\43\uffff\1\0\4\uffff\5\0\2\uffff\13\0\1\uffff\1\0\57"+
        "\uffff\1\0\40\uffff";
    static final String DFA84_acceptS =
        "\2\uffff\1\2\54\uffff\1\5\1\6\13\uffff\1\13\1\uffff\1\16\57\uffff"+
        "\1\20\20\uffff\1\24\1\1\1\3\1\4\1\11\1\12\1\15\1\21\1\7\1\25\1\10"+
        "\1\23\1\22\1\14\1\17";
    static final String DFA84_specialS =
        "\1\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\1\5\1\6\2\uffff\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\uffff\1\22"+
        "\57\uffff\1\23\40\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\55\1\66\1\70\1\56\2\76\1\uffff\1\67\11\156\1\155\6\156\3"+
            "\76\1\uffff\1\54\17\76\1\71\4\2\2\76\11\2\1\76\1\2\1\76\4\2"+
            "\1\76\1\2\1\76\1\2\1\76\5\2\1\76\1\2\1\76\3\2\1\76\1\2\1\45"+
            "\1\76\3\2\1\76\1\177\1\73\2\uffff\1\74\1\61\1\60\1\76\1\uffff"+
            "\1\72\17\uffff\1\53\4\uffff\1\76\4\uffff\1\76\1\1\1\76\4\uffff"+
            "\1\156\1\62\1\63\1\64\1\65\1\57\1\uffff\1\52\1\uffff\1\76\2"+
            "\uffff\1\76\13\uffff\2\76\14\uffff\1\75\1\156\1\uffff\6\2\7"+
            "\76",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "111:19: ( fw | verb | nn | measurements | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA84_1 = input.LA(1);

                         
                        int index84_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index84_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA84_37 = input.LA(1);

                         
                        int index84_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index84_37);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA84_42 = input.LA(1);

                         
                        int index84_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index84_42);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA84_43 = input.LA(1);

                         
                        int index84_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred241_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred245_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index84_43);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA84_44 = input.LA(1);

                         
                        int index84_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index84_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA84_45 = input.LA(1);

                         
                        int index84_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index84_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA84_46 = input.LA(1);

                         
                        int index84_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index84_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA84_49 = input.LA(1);

                         
                        int index84_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 136;}

                         
                        input.seek(index84_49);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA84_50 = input.LA(1);

                         
                        int index84_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred247_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index84_50);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA84_51 = input.LA(1);

                         
                        int index84_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred247_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index84_51);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA84_52 = input.LA(1);

                         
                        int index84_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred247_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index84_52);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA84_53 = input.LA(1);

                         
                        int index84_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred247_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index84_53);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA84_54 = input.LA(1);

                         
                        int index84_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred247_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index84_54);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA84_55 = input.LA(1);

                         
                        int index84_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred247_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index84_55);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA84_56 = input.LA(1);

                         
                        int index84_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred247_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index84_56);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA84_57 = input.LA(1);

                         
                        int index84_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index84_57);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA84_58 = input.LA(1);

                         
                        int index84_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index84_58);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA84_59 = input.LA(1);

                         
                        int index84_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred238_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred246_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index84_59);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA84_61 = input.LA(1);

                         
                        int index84_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred242_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index84_61);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA84_109 = input.LA(1);

                         
                        int index84_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred244_ChemicalChunker()) ) {s = 110;}

                         
                        input.seek(index84_109);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA85_eotS =
        "\u0090\uffff";
    static final String DFA85_eofS =
        "\u0090\uffff";
    static final String DFA85_minS =
        "\1\13\1\uffff\3\0\43\uffff\1\0\4\uffff\5\0\2\uffff\11\0\1\uffff"+
        "\1\0\57\uffff\1\0\41\uffff";
    static final String DFA85_maxS =
        "\1\u00c5\1\uffff\3\0\43\uffff\1\0\4\uffff\5\0\2\uffff\11\0\1\uffff"+
        "\1\0\57\uffff\1\0\41\uffff";
    static final String DFA85_acceptS =
        "\1\uffff\1\27\3\uffff\1\3\54\uffff\1\6\1\7\11\uffff\1\14\1\uffff"+
        "\1\17\57\uffff\1\21\20\uffff\1\25\1\1\1\12\1\13\1\23\1\11\1\2\1"+
        "\4\1\16\1\22\1\5\1\10\1\26\1\24\1\15\1\20";
    static final String DFA85_specialS =
        "\2\uffff\1\0\1\1\1\2\43\uffff\1\3\4\uffff\1\4\1\5\1\6\1\7\1\10\2"+
        "\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\uffff\1\22"+
        "\57\uffff\1\23\41\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\57\1\71\1\73\1\60\2\77\1\uffff\1\72\11\157\1\156\6\157\3"+
            "\77\1\uffff\1\56\17\77\1\74\4\5\2\77\11\5\1\77\1\5\1\77\4\5"+
            "\1\77\1\5\1\77\1\5\1\77\5\5\1\77\1\5\1\77\3\5\1\77\1\5\1\50"+
            "\1\77\3\5\1\61\1\u0080\1\2\2\uffff\1\75\1\64\1\63\1\77\1\uffff"+
            "\1\3\1\1\16\uffff\1\55\4\uffff\1\77\4\uffff\1\77\1\4\1\77\4"+
            "\uffff\1\157\1\65\1\66\1\67\1\70\1\62\1\uffff\1\77\1\uffff\1"+
            "\77\2\uffff\1\77\13\uffff\2\77\14\uffff\1\76\1\157\1\uffff\6"+
            "\5\7\77",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "()+ loopback of 111:154: ( minimixture | fw | verb | measurements | nnyield | md | nnpercent | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA85_2 = input.LA(1);

                         
                        int index85_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred267_ChemicalChunker()) ) {s = 132;}

                         
                        input.seek(index85_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA85_3 = input.LA(1);

                         
                        int index85_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index85_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA85_4 = input.LA(1);

                         
                        int index85_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred250_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index85_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA85_40 = input.LA(1);

                         
                        int index85_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index85_40);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA85_45 = input.LA(1);

                         
                        int index85_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred262_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred266_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index85_45);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA85_46 = input.LA(1);

                         
                        int index85_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index85_46);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA85_47 = input.LA(1);

                         
                        int index85_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index85_47);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA85_48 = input.LA(1);

                         
                        int index85_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred259_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index85_48);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA85_49 = input.LA(1);

                         
                        int index85_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index85_49);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA85_52 = input.LA(1);

                         
                        int index85_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 139;}

                        else if ( (synpred270_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index85_52);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA85_53 = input.LA(1);

                         
                        int index85_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index85_53);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA85_54 = input.LA(1);

                         
                        int index85_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index85_54);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA85_55 = input.LA(1);

                         
                        int index85_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index85_55);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA85_56 = input.LA(1);

                         
                        int index85_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index85_56);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA85_57 = input.LA(1);

                         
                        int index85_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index85_57);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA85_58 = input.LA(1);

                         
                        int index85_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index85_58);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA85_59 = input.LA(1);

                         
                        int index85_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred268_ChemicalChunker()) ) {s = 141;}

                         
                        input.seek(index85_59);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA85_60 = input.LA(1);

                         
                        int index85_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index85_60);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA85_62 = input.LA(1);

                         
                        int index85_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred263_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index85_62);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA85_110 = input.LA(1);

                         
                        int index85_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 143;}

                        else if ( (synpred265_ChemicalChunker()) ) {s = 111;}

                         
                        input.seek(index85_110);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA87_eotS =
        "\u008e\uffff";
    static final String DFA87_eofS =
        "\u008e\uffff";
    static final String DFA87_minS =
        "\1\13\2\0\43\uffff\1\0\4\uffff\4\0\2\uffff\13\0\1\uffff\1\0\57\uffff"+
        "\1\0\40\uffff";
    static final String DFA87_maxS =
        "\1\u00c5\2\0\43\uffff\1\0\4\uffff\4\0\2\uffff\13\0\1\uffff\1\0\57"+
        "\uffff\1\0\40\uffff";
    static final String DFA87_acceptS =
        "\3\uffff\1\3\53\uffff\1\5\1\6\13\uffff\1\13\1\uffff\1\16\57\uffff"+
        "\1\20\20\uffff\1\24\1\1\1\2\1\4\1\11\1\12\1\15\1\21\1\7\1\25\1\10"+
        "\1\23\1\22\1\14\1\17";
    static final String DFA87_specialS =
        "\1\uffff\1\0\1\1\43\uffff\1\2\4\uffff\1\3\1\4\1\5\1\6\2\uffff\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\uffff\1\22"+
        "\57\uffff\1\23\40\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\55\1\66\1\70\1\56\2\76\1\uffff\1\67\11\156\1\155\6\156\3"+
            "\76\1\uffff\1\54\17\76\1\71\4\3\2\76\11\3\1\76\1\3\1\76\4\3"+
            "\1\76\1\3\1\76\1\3\1\76\5\3\1\76\1\3\1\76\3\3\1\76\1\3\1\46"+
            "\1\76\3\3\1\76\1\177\1\73\2\uffff\1\74\1\61\1\57\1\76\1\uffff"+
            "\1\72\17\uffff\1\53\4\uffff\1\76\4\uffff\1\76\1\1\1\76\4\uffff"+
            "\1\156\1\62\1\63\1\64\1\65\1\60\1\uffff\1\2\1\uffff\1\76\2\uffff"+
            "\1\76\13\uffff\2\76\14\uffff\1\75\1\156\1\uffff\6\3\7\76",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "116:23: ( fw | nn | verb | measurements | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA87_1 = input.LA(1);

                         
                        int index87_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_ChemicalChunker()) ) {s = 128;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index87_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA87_2 = input.LA(1);

                         
                        int index87_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index87_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA87_38 = input.LA(1);

                         
                        int index87_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index87_38);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA87_43 = input.LA(1);

                         
                        int index87_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred284_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred288_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index87_43);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA87_44 = input.LA(1);

                         
                        int index87_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index87_44);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA87_45 = input.LA(1);

                         
                        int index87_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index87_45);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA87_46 = input.LA(1);

                         
                        int index87_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index87_46);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA87_49 = input.LA(1);

                         
                        int index87_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 136;}

                         
                        input.seek(index87_49);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA87_50 = input.LA(1);

                         
                        int index87_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index87_50);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA87_51 = input.LA(1);

                         
                        int index87_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index87_51);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA87_52 = input.LA(1);

                         
                        int index87_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index87_52);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA87_53 = input.LA(1);

                         
                        int index87_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index87_53);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA87_54 = input.LA(1);

                         
                        int index87_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index87_54);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA87_55 = input.LA(1);

                         
                        int index87_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index87_55);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA87_56 = input.LA(1);

                         
                        int index87_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred290_ChemicalChunker()) ) {s = 138;}

                         
                        input.seek(index87_56);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA87_57 = input.LA(1);

                         
                        int index87_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index87_57);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA87_58 = input.LA(1);

                         
                        int index87_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 137;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index87_58);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA87_59 = input.LA(1);

                         
                        int index87_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred280_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred281_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                        else if ( (synpred289_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index87_59);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA87_61 = input.LA(1);

                         
                        int index87_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred285_ChemicalChunker()) ) {s = 62;}

                         
                        input.seek(index87_61);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA87_109 = input.LA(1);

                         
                        int index87_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred287_ChemicalChunker()) ) {s = 110;}

                         
                        input.seek(index87_109);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA88_eotS =
        "\u008f\uffff";
    static final String DFA88_eofS =
        "\1\1\u008e\uffff";
    static final String DFA88_minS =
        "\1\13\1\uffff\1\0\43\uffff\1\0\4\uffff\5\0\2\uffff\13\0\1\uffff"+
        "\1\0\57\uffff\1\0\40\uffff";
    static final String DFA88_maxS =
        "\1\u00c5\1\uffff\1\0\43\uffff\1\0\4\uffff\5\0\2\uffff\13\0\1\uffff"+
        "\1\0\57\uffff\1\0\40\uffff";
    static final String DFA88_acceptS =
        "\1\uffff\1\26\1\uffff\1\2\54\uffff\1\5\1\6\13\uffff\1\13\1\uffff"+
        "\1\16\57\uffff\1\20\20\uffff\1\24\1\1\1\3\1\11\1\12\1\15\1\21\1"+
        "\4\1\7\1\25\1\10\1\23\1\22\1\14\1\17";
    static final String DFA88_specialS =
        "\2\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\1\5\1\6\2\uffff\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\uffff\1\22"+
        "\57\uffff\1\23\40\uffff}>";
    static final String[] DFA88_transitionS = {
            "\1\55\1\67\1\71\1\56\2\77\1\uffff\1\70\11\157\1\156\6\157\3"+
            "\77\1\uffff\1\54\17\77\1\72\4\3\2\77\11\3\1\77\1\3\1\77\4\3"+
            "\1\77\1\3\1\77\1\3\1\77\5\3\1\77\1\3\1\77\3\3\1\77\1\3\1\46"+
            "\1\77\3\3\1\57\1\u0080\1\74\2\uffff\1\75\1\62\1\60\1\77\1\uffff"+
            "\1\73\17\uffff\1\53\4\uffff\1\77\4\uffff\1\77\1\2\1\77\4\uffff"+
            "\1\157\1\63\1\64\1\65\1\66\1\61\1\uffff\1\77\1\uffff\1\77\2"+
            "\uffff\1\77\13\uffff\2\77\14\uffff\1\76\1\157\1\uffff\6\3\7"+
            "\77",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "()+ loopback of 116:158: ( fw | verb | measurements | nnyield | nnpercent | md | stop | oscarCompound | molecule | unnamedmolecule | dash | sym | cd | noun | inof | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA88_2 = input.LA(1);

                         
                        int index88_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index88_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA88_38 = input.LA(1);

                         
                        int index88_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred293_ChemicalChunker()) ) {s = 3;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index88_38);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA88_43 = input.LA(1);

                         
                        int index88_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred304_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred308_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index88_43);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA88_44 = input.LA(1);

                         
                        int index88_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index88_44);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA88_45 = input.LA(1);

                         
                        int index88_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index88_45);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA88_46 = input.LA(1);

                         
                        int index88_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index88_46);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA88_47 = input.LA(1);

                         
                        int index88_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index88_47);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA88_50 = input.LA(1);

                         
                        int index88_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred312_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index88_50);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA88_51 = input.LA(1);

                         
                        int index88_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index88_51);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA88_52 = input.LA(1);

                         
                        int index88_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index88_52);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA88_53 = input.LA(1);

                         
                        int index88_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index88_53);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA88_54 = input.LA(1);

                         
                        int index88_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index88_54);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA88_55 = input.LA(1);

                         
                        int index88_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index88_55);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA88_56 = input.LA(1);

                         
                        int index88_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index88_56);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA88_57 = input.LA(1);

                         
                        int index88_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index88_57);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA88_58 = input.LA(1);

                         
                        int index88_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index88_58);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA88_59 = input.LA(1);

                         
                        int index88_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index88_59);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA88_60 = input.LA(1);

                         
                        int index88_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred301_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                        else if ( (synpred309_ChemicalChunker()) ) {s = 140;}

                         
                        input.seek(index88_60);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA88_62 = input.LA(1);

                         
                        int index88_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred303_ChemicalChunker()) ) {s = 141;}

                        else if ( (synpred305_ChemicalChunker()) ) {s = 63;}

                         
                        input.seek(index88_62);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA88_110 = input.LA(1);

                         
                        int index88_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred306_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred307_ChemicalChunker()) ) {s = 111;}

                         
                        input.seek(index88_110);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA92_eotS =
        "\47\uffff";
    static final String DFA92_eofS =
        "\47\uffff";
    static final String DFA92_minS =
        "\1\14\40\0\6\uffff";
    static final String DFA92_maxS =
        "\1\u00b7\40\0\6\uffff";
    static final String DFA92_acceptS =
        "\41\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA92_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\6\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\13\1\15\4\uffff\1\14\1\20\1\21\1\17\1\25\1\26\1\34\1\35\1"+
            "\22\1\33\1\27\1\31\1\23\1\24\1\1\1\32\1\30\2\uffff\1\41\7\uffff"+
            "\1\42\121\uffff\1\40\4\uffff\1\37\13\uffff\1\16\1\7\1\10\1\11"+
            "\1\12\32\uffff\1\2\1\3\1\uffff\1\4\1\6\1\uffff\1\5\1\uffff\1"+
            "\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "124:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_1 = input.LA(1);

                         
                        int index92_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred324_ChemicalChunker()) ) {s = 35;}

                        else if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA92_2 = input.LA(1);

                         
                        int index92_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA92_3 = input.LA(1);

                         
                        int index92_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA92_4 = input.LA(1);

                         
                        int index92_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA92_5 = input.LA(1);

                         
                        int index92_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA92_6 = input.LA(1);

                         
                        int index92_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA92_7 = input.LA(1);

                         
                        int index92_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA92_8 = input.LA(1);

                         
                        int index92_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA92_9 = input.LA(1);

                         
                        int index92_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA92_10 = input.LA(1);

                         
                        int index92_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA92_11 = input.LA(1);

                         
                        int index92_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA92_12 = input.LA(1);

                         
                        int index92_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA92_13 = input.LA(1);

                         
                        int index92_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA92_14 = input.LA(1);

                         
                        int index92_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA92_15 = input.LA(1);

                         
                        int index92_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA92_16 = input.LA(1);

                         
                        int index92_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (synpred328_ChemicalChunker()) ) {s = 37;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA92_17 = input.LA(1);

                         
                        int index92_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA92_18 = input.LA(1);

                         
                        int index92_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA92_19 = input.LA(1);

                         
                        int index92_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA92_20 = input.LA(1);

                         
                        int index92_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA92_21 = input.LA(1);

                         
                        int index92_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 38;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA92_22 = input.LA(1);

                         
                        int index92_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA92_23 = input.LA(1);

                         
                        int index92_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA92_24 = input.LA(1);

                         
                        int index92_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA92_25 = input.LA(1);

                         
                        int index92_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA92_26 = input.LA(1);

                         
                        int index92_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA92_27 = input.LA(1);

                         
                        int index92_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA92_28 = input.LA(1);

                         
                        int index92_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA92_29 = input.LA(1);

                         
                        int index92_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA92_30 = input.LA(1);

                         
                        int index92_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index92_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA92_31 = input.LA(1);

                         
                        int index92_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index92_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA92_32 = input.LA(1);

                         
                        int index92_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred325_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred326_ChemicalChunker()) ) {s = 34;}

                         
                        input.seek(index92_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA96_eotS =
        "\33\uffff";
    static final String DFA96_eofS =
        "\33\uffff";
    static final String DFA96_minS =
        "\1\14\1\uffff\14\12\14\0\1\uffff";
    static final String DFA96_maxS =
        "\1\u00b7\1\uffff\14\12\14\0\1\uffff";
    static final String DFA96_acceptS =
        "\1\uffff\1\2\30\uffff\1\1";
    static final String DFA96_specialS =
        "\16\uffff\1\1\1\4\1\7\1\12\1\5\1\2\1\3\1\13\1\0\1\6\1\10\1\11\1"+
        "\uffff}>";
    static final String[] DFA96_transitionS = {
            "\1\13\1\15\4\uffff\1\14\20\1\2\uffff\1\1\131\uffff\1\1\4\uffff"+
            "\1\1\13\uffff\1\1\1\7\1\10\1\11\1\12\32\uffff\1\2\1\3\1\uffff"+
            "\1\4\1\6\1\uffff\1\5\1\uffff\1\1",
            "",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "()* loopback of 136:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA96_22 = input.LA(1);

                         
                        int index96_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_22);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA96_14 = input.LA(1);

                         
                        int index96_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA96_19 = input.LA(1);

                         
                        int index96_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA96_20 = input.LA(1);

                         
                        int index96_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_20);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA96_15 = input.LA(1);

                         
                        int index96_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_15);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA96_18 = input.LA(1);

                         
                        int index96_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_18);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA96_23 = input.LA(1);

                         
                        int index96_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_23);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA96_16 = input.LA(1);

                         
                        int index96_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA96_24 = input.LA(1);

                         
                        int index96_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA96_25 = input.LA(1);

                         
                        int index96_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA96_17 = input.LA(1);

                         
                        int index96_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_17);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA96_21 = input.LA(1);

                         
                        int index96_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred332_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index96_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 96, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA104_eotS =
        "\21\uffff";
    static final String DFA104_eofS =
        "\21\uffff";
    static final String DFA104_minS =
        "\1\13\1\uffff\7\12\1\uffff\7\0";
    static final String DFA104_maxS =
        "\1\u00b5\1\uffff\7\12\1\uffff\7\0";
    static final String DFA104_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\7\uffff";
    static final String DFA104_specialS =
        "\12\uffff\1\6\1\4\1\5\1\0\1\3\1\2\1\1}>";
    static final String[] DFA104_transitionS = {
            "\1\1\1\6\1\10\1\1\3\uffff\1\7\24\uffff\1\1\17\uffff\1\1\57\uffff"+
            "\1\1\7\uffff\1\1\17\uffff\1\1\21\uffff\1\2\1\3\1\4\1\5\32\uffff"+
            "\2\11\1\uffff\2\11\1\uffff\1\11",
            "",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "()* loopback of 146:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA104_13 = input.LA(1);

                         
                        int index104_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA104_16 = input.LA(1);

                         
                        int index104_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA104_15 = input.LA(1);

                         
                        int index104_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA104_14 = input.LA(1);

                         
                        int index104_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA104_11 = input.LA(1);

                         
                        int index104_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA104_12 = input.LA(1);

                         
                        int index104_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_12);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA104_10 = input.LA(1);

                         
                        int index104_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index104_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA107_eotS =
        "\33\uffff";
    static final String DFA107_eofS =
        "\33\uffff";
    static final String DFA107_minS =
        "\1\14\14\12\1\uffff\14\0\1\uffff";
    static final String DFA107_maxS =
        "\1\u00b7\14\12\1\uffff\14\0\1\uffff";
    static final String DFA107_acceptS =
        "\15\uffff\1\2\14\uffff\1\1";
    static final String DFA107_specialS =
        "\16\uffff\1\2\1\5\1\3\1\0\1\13\1\12\1\6\1\4\1\11\1\1\1\7\1\10\1"+
        "\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\12\1\14\4\uffff\1\13\20\15\12\uffff\1\15\121\uffff\1\15\4"+
            "\uffff\1\15\13\uffff\1\15\1\6\1\7\1\10\1\11\32\uffff\1\1\1\2"+
            "\1\uffff\1\3\1\5\1\uffff\1\4\1\uffff\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "153:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA107_17 = input.LA(1);

                         
                        int index107_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index107_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA107_23 = input.LA(1);

                         
                        int index107_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index107_23);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA107_14 = input.LA(1);

                         
                        int index107_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index107_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA107_16 = input.LA(1);

                         
                        int index107_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index107_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA107_21 = input.LA(1);

                         
                        int index107_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index107_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA107_15 = input.LA(1);

                         
                        int index107_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index107_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA107_20 = input.LA(1);

                         
                        int index107_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index107_20);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA107_24 = input.LA(1);

                         
                        int index107_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index107_24);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA107_25 = input.LA(1);

                         
                        int index107_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index107_25);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA107_22 = input.LA(1);

                         
                        int index107_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index107_22);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA107_19 = input.LA(1);

                         
                        int index107_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index107_19);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA107_18 = input.LA(1);

                         
                        int index107_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index107_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA120_eotS =
        "\u008d\uffff";
    static final String DFA120_eofS =
        "\1\1\u008c\uffff";
    static final String DFA120_minS =
        "\1\13\5\uffff\7\0\1\uffff\2\0\3\uffff\15\0\155\uffff";
    static final String DFA120_maxS =
        "\1\u00c5\5\uffff\7\0\1\uffff\2\0\3\uffff\15\0\155\uffff";
    static final String DFA120_acceptS =
        "\1\uffff\1\2\u008a\uffff\1\1";
    static final String DFA120_specialS =
        "\6\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\uffff\1\7\1\10\3\uffff\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
        "\155\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\27\1\12\1\14\1\30\2\1\1\uffff\1\13\21\1\1\35\1\1\1\uffff"+
            "\1\26\4\1\1\34\4\1\1\31\5\1\1\33\4\1\1\32\12\1\1\37\37\1\1\17"+
            "\1\uffff\6\1\1\24\1\1\15\uffff\1\16\1\25\4\uffff\1\23\1\1\3"+
            "\uffff\3\1\4\uffff\1\1\1\6\1\7\1\10\1\11\1\1\1\uffff\1\36\1"+
            "\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff\5\1\1\uffff\3\1"+
            "\1\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "()* loopback of 166:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA120_6 = input.LA(1);

                         
                        int index120_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA120_7 = input.LA(1);

                         
                        int index120_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA120_8 = input.LA(1);

                         
                        int index120_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA120_9 = input.LA(1);

                         
                        int index120_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA120_10 = input.LA(1);

                         
                        int index120_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA120_11 = input.LA(1);

                         
                        int index120_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA120_12 = input.LA(1);

                         
                        int index120_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_12);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA120_14 = input.LA(1);

                         
                        int index120_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_14);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA120_15 = input.LA(1);

                         
                        int index120_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_15);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA120_19 = input.LA(1);

                         
                        int index120_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_19);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA120_20 = input.LA(1);

                         
                        int index120_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_20);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA120_21 = input.LA(1);

                         
                        int index120_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_21);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA120_22 = input.LA(1);

                         
                        int index120_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_22);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA120_23 = input.LA(1);

                         
                        int index120_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_23);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA120_24 = input.LA(1);

                         
                        int index120_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_24);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA120_25 = input.LA(1);

                         
                        int index120_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_25);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA120_26 = input.LA(1);

                         
                        int index120_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_26);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA120_27 = input.LA(1);

                         
                        int index120_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_27);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA120_28 = input.LA(1);

                         
                        int index120_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_28);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA120_29 = input.LA(1);

                         
                        int index120_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_29);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA120_30 = input.LA(1);

                         
                        int index120_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_30);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA120_31 = input.LA(1);

                         
                        int index120_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred372_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA119_eotS =
        "\27\uffff";
    static final String DFA119_eofS =
        "\27\uffff";
    static final String DFA119_minS =
        "\1\13\17\uffff\1\0\6\uffff";
    static final String DFA119_maxS =
        "\1\u0097\17\uffff\1\0\6\uffff";
    static final String DFA119_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA119_specialS =
        "\20\uffff\1\0\6\uffff}>";
    static final String[] DFA119_transitionS = {
            "\4\1\3\uffff\1\1\21\uffff\1\1\2\uffff\1\1\4\uffff\1\1\4\uffff"+
            "\1\1\5\uffff\1\1\4\uffff\1\1\12\uffff\1\1\37\uffff\1\20\7\uffff"+
            "\1\1\16\uffff\1\26\1\1\4\uffff\1\1\14\uffff\4\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "()* loopback of 166:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA119_16 = input.LA(1);

                         
                        int index119_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index119_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 119, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA126_eotS =
        "\35\uffff";
    static final String DFA126_eofS =
        "\1\1\34\uffff";
    static final String DFA126_minS =
        "\1\13\1\uffff\23\0\10\uffff";
    static final String DFA126_maxS =
        "\1\u0097\1\uffff\23\0\10\uffff";
    static final String DFA126_acceptS =
        "\1\uffff\1\11\23\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA126_specialS =
        "\2\uffff\1\13\1\12\1\4\1\20\1\21\1\10\1\6\1\3\1\7\1\5\1\0\1\11\1"+
        "\16\1\2\1\22\1\1\1\17\1\14\1\15\10\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\5\1\13\1\15\1\6\3\uffff\1\14\21\uffff\1\23\2\uffff\1\4\4"+
            "\uffff\1\22\4\uffff\1\16\5\uffff\1\21\4\uffff\1\17\12\uffff"+
            "\1\1\37\uffff\1\20\7\uffff\1\2\17\uffff\1\3\21\uffff\1\7\1\10"+
            "\1\11\1\12\2\uffff\1\24",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "()+ loopback of 173:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA126_12 = input.LA(1);

                         
                        int index126_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_12);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA126_17 = input.LA(1);

                         
                        int index126_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA126_15 = input.LA(1);

                         
                        int index126_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred381_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA126_9 = input.LA(1);

                         
                        int index126_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA126_4 = input.LA(1);

                         
                        int index126_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred378_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA126_11 = input.LA(1);

                         
                        int index126_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA126_8 = input.LA(1);

                         
                        int index126_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA126_10 = input.LA(1);

                         
                        int index126_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA126_7 = input.LA(1);

                         
                        int index126_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_7);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA126_13 = input.LA(1);

                         
                        int index126_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_13);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA126_3 = input.LA(1);

                         
                        int index126_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred378_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_3);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA126_2 = input.LA(1);

                         
                        int index126_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred378_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_2);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA126_19 = input.LA(1);

                         
                        int index126_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred384_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_19);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA126_20 = input.LA(1);

                         
                        int index126_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred385_ChemicalChunker()) ) {s = 28;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_20);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA126_14 = input.LA(1);

                         
                        int index126_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred380_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA126_18 = input.LA(1);

                         
                        int index126_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred383_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA126_5 = input.LA(1);

                         
                        int index126_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred378_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_5);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA126_6 = input.LA(1);

                         
                        int index126_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred378_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_6);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA126_16 = input.LA(1);

                         
                        int index126_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred382_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index126_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA130_eotS =
        "\u008d\uffff";
    static final String DFA130_eofS =
        "\1\5\u008c\uffff";
    static final String DFA130_minS =
        "\1\13\4\0\u0088\uffff";
    static final String DFA130_maxS =
        "\1\u00c5\4\0\u0088\uffff";
    static final String DFA130_acceptS =
        "\5\uffff\1\2\u0086\uffff\1\1";
    static final String DFA130_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u0088\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\3\2\5\1\4\2\5\1\uffff\24\5\1\uffff\1\2\100\5\1\uffff\10\5"+
            "\15\uffff\1\5\1\1\4\uffff\2\5\3\uffff\3\5\4\uffff\6\5\1\uffff"+
            "\1\5\1\uffff\1\5\2\uffff\1\5\13\uffff\2\5\5\uffff\5\5\1\uffff"+
            "\3\5\1\uffff\15\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "176:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA130_1 = input.LA(1);

                         
                        int index130_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index130_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA130_2 = input.LA(1);

                         
                        int index130_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index130_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA130_3 = input.LA(1);

                         
                        int index130_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index130_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA130_4 = input.LA(1);

                         
                        int index130_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred389_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index130_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA131_eotS =
        "\12\uffff";
    static final String DFA131_eofS =
        "\12\uffff";
    static final String DFA131_minS =
        "\1\13\1\12\2\uffff\1\46\1\uffff\1\12\2\uffff\1\46";
    static final String DFA131_maxS =
        "\1\177\1\12\2\uffff\1\u0097\1\uffff\1\12\2\uffff\1\177";
    static final String DFA131_acceptS =
        "\2\uffff\1\1\1\4\1\uffff\1\2\1\uffff\1\3\1\5\1\uffff";
    static final String DFA131_specialS =
        "\12\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\3\2\uffff\1\3\30\uffff\1\2\127\uffff\1\1",
            "\1\4",
            "",
            "",
            "\1\7\1\2\1\5\2\uffff\1\10\100\uffff\1\3\22\uffff\1\6\27\uffff"+
            "\1\3",
            "",
            "\1\11",
            "",
            "",
            "\1\7\1\2\1\5\2\uffff\1\10\123\uffff\1\6"
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "177:1: measurementtypes : ( molar | amount | mass | percent | volume );";
        }
    }
    static final String DFA133_eotS =
        "\14\uffff";
    static final String DFA133_eofS =
        "\3\uffff\1\7\10\uffff";
    static final String DFA133_minS =
        "\1\67\1\12\1\uffff\1\13\2\12\2\uffff\1\0\1\67\2\uffff";
    static final String DFA133_maxS =
        "\1\157\1\12\1\uffff\1\u00c5\2\12\2\uffff\1\0\1\67\2\uffff";
    static final String DFA133_acceptS =
        "\2\uffff\1\4\3\uffff\1\3\1\5\2\uffff\1\1\1\2";
    static final String DFA133_specialS =
        "\10\uffff\1\0\1\1\2\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\1\67\uffff\1\2",
            "\1\3",
            "",
            "\6\7\1\uffff\24\7\1\uffff\20\7\1\4\60\7\1\6\1\7\1\5\6\7\15"+
            "\uffff\2\7\4\uffff\2\7\3\uffff\3\7\4\uffff\6\7\1\uffff\1\7\1"+
            "\uffff\1\7\2\uffff\1\7\13\uffff\2\7\5\uffff\5\7\1\uffff\3\7"+
            "\1\uffff\15\7",
            "\1\10",
            "\1\11",
            "",
            "",
            "\1\uffff",
            "\1\13",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "181:23: ( oscarCompound1 | oscarCompound2 | oscarCompound3 | oscarCompound4 | oscarcm )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_8 = input.LA(1);

                         
                        int index133_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred395_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index133_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA133_9 = input.LA(1);

                         
                        int index133_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA133_9==55) ) {s = 11;}

                        else if ( (synpred397_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index133_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA134_eotS =
        "\21\uffff";
    static final String DFA134_eofS =
        "\1\10\20\uffff";
    static final String DFA134_minS =
        "\1\13\7\12\1\uffff\7\0\1\uffff";
    static final String DFA134_maxS =
        "\1\u00c5\7\12\1\uffff\7\0\1\uffff";
    static final String DFA134_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA134_specialS =
        "\11\uffff\1\5\1\0\1\3\1\6\1\2\1\4\1\1\1\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\10\1\5\1\7\3\10\1\uffff\1\6\23\10\1\uffff\101\10\1\uffff"+
            "\10\10\15\uffff\2\10\4\uffff\2\10\3\uffff\3\10\4\uffff\1\10"+
            "\1\1\1\2\1\3\1\4\1\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10"+
            "\13\uffff\2\10\5\uffff\5\10\1\uffff\3\10\1\uffff\15\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "181:93: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_10 = input.LA(1);

                         
                        int index134_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA134_15 = input.LA(1);

                         
                        int index134_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA134_13 = input.LA(1);

                         
                        int index134_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_13);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA134_11 = input.LA(1);

                         
                        int index134_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA134_14 = input.LA(1);

                         
                        int index134_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA134_9 = input.LA(1);

                         
                        int index134_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA134_12 = input.LA(1);

                         
                        int index134_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index134_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA141_eotS =
        "\17\uffff";
    static final String DFA141_eofS =
        "\17\uffff";
    static final String DFA141_minS =
        "\1\13\10\uffff\2\0\4\uffff";
    static final String DFA141_maxS =
        "\1\u0094\10\uffff\2\0\4\uffff";
    static final String DFA141_acceptS =
        "\1\uffff\1\3\11\uffff\1\1\2\uffff\1\2";
    static final String DFA141_specialS =
        "\11\uffff\1\0\1\1\4\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\13\2\1\1\13\3\uffff\1\1\24\uffff\1\13\17\uffff\1\1\57\uffff"+
            "\1\16\7\uffff\1\11\17\uffff\1\12\21\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "()* loopback of 200:3: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_9 = input.LA(1);

                         
                        int index141_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred408_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index141_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA141_10 = input.LA(1);

                         
                        int index141_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred408_ChemicalChunker()) ) {s = 11;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 14;}

                         
                        input.seek(index141_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA142_eotS =
        "\14\uffff";
    static final String DFA142_eofS =
        "\1\2\13\uffff";
    static final String DFA142_minS =
        "\1\13\1\0\1\uffff\10\0\1\uffff";
    static final String DFA142_maxS =
        "\1\u00c5\1\0\1\uffff\10\0\1\uffff";
    static final String DFA142_acceptS =
        "\2\uffff\1\2\10\uffff\1\1";
    static final String DFA142_specialS =
        "\1\uffff\1\4\1\uffff\1\2\1\3\1\1\1\10\1\6\1\7\1\0\1\5\1\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\2\1\7\1\11\3\2\1\uffff\1\10\23\2\1\uffff\20\2\1\12\60\2\1"+
            "\uffff\6\2\1\1\1\2\15\uffff\2\2\4\uffff\2\2\3\uffff\3\2\4\uffff"+
            "\1\2\1\3\1\4\1\5\1\6\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2"+
            "\13\uffff\2\2\5\uffff\5\2\1\uffff\3\2\1\uffff\15\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "()+ loopback of 200:23: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA142_9 = input.LA(1);

                         
                        int index142_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA142_5 = input.LA(1);

                         
                        int index142_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA142_3 = input.LA(1);

                         
                        int index142_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA142_4 = input.LA(1);

                         
                        int index142_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA142_1 = input.LA(1);

                         
                        int index142_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_1);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA142_10 = input.LA(1);

                         
                        int index142_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA142_7 = input.LA(1);

                         
                        int index142_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA142_8 = input.LA(1);

                         
                        int index142_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA142_6 = input.LA(1);

                         
                        int index142_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred410_ChemicalChunker()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index142_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 142, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA143_eotS =
        "\u008f\uffff";
    static final String DFA143_eofS =
        "\1\1\u008e\uffff";
    static final String DFA143_minS =
        "\1\13\2\uffff\1\0\15\uffff\1\0\1\uffff\4\0\170\uffff";
    static final String DFA143_maxS =
        "\1\u00c5\2\uffff\1\0\15\uffff\1\0\1\uffff\4\0\170\uffff";
    static final String DFA143_acceptS =
        "\1\uffff\1\4\u008a\uffff\1\1\1\3\1\2";
    static final String DFA143_specialS =
        "\3\uffff\1\0\15\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\170\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\25\2\1\1\26\2\1\1\uffff\24\1\1\uffff\1\24\77\1\1\3\1\uffff"+
            "\6\1\1\21\1\1\15\uffff\1\1\1\23\4\uffff\2\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "()* loopback of 200:39: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_3 = input.LA(1);

                         
                        int index143_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred411_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA143_17 = input.LA(1);

                         
                        int index143_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred411_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred412_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA143_19 = input.LA(1);

                         
                        int index143_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred412_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA143_20 = input.LA(1);

                         
                        int index143_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred412_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_20);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA143_21 = input.LA(1);

                         
                        int index143_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred412_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA143_22 = input.LA(1);

                         
                        int index143_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred412_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA146_eotS =
        "\21\uffff";
    static final String DFA146_eofS =
        "\21\uffff";
    static final String DFA146_minS =
        "\1\13\6\0\12\uffff";
    static final String DFA146_maxS =
        "\1\u0094\6\0\12\uffff";
    static final String DFA146_acceptS =
        "\7\uffff\1\3\7\uffff\1\1\1\2";
    static final String DFA146_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\12\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "205:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_1 = input.LA(1);

                         
                        int index146_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred416_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index146_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_2 = input.LA(1);

                         
                        int index146_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred416_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index146_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA146_3 = input.LA(1);

                         
                        int index146_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred416_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index146_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA146_4 = input.LA(1);

                         
                        int index146_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred416_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index146_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA146_5 = input.LA(1);

                         
                        int index146_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred416_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index146_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA146_6 = input.LA(1);

                         
                        int index146_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred416_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred417_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index146_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA150_eotS =
        "\u008f\uffff";
    static final String DFA150_eofS =
        "\1\1\u008e\uffff";
    static final String DFA150_minS =
        "\1\13\2\uffff\1\0\15\uffff\1\0\1\uffff\4\0\170\uffff";
    static final String DFA150_maxS =
        "\1\u00c5\2\uffff\1\0\15\uffff\1\0\1\uffff\4\0\170\uffff";
    static final String DFA150_acceptS =
        "\1\uffff\1\4\u008a\uffff\1\1\1\3\1\2";
    static final String DFA150_specialS =
        "\3\uffff\1\0\15\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\170\uffff}>";
    static final String[] DFA150_transitionS = {
            "\1\25\2\1\1\26\2\1\1\uffff\24\1\1\uffff\1\24\77\1\1\3\1\uffff"+
            "\6\1\1\21\1\1\15\uffff\1\1\1\23\4\uffff\2\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "()* loopback of 216:25: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA150_3 = input.LA(1);

                         
                        int index150_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred421_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA150_17 = input.LA(1);

                         
                        int index150_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred421_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred422_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA150_19 = input.LA(1);

                         
                        int index150_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 142;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 141;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA150_20 = input.LA(1);

                         
                        int index150_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_20);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA150_21 = input.LA(1);

                         
                        int index150_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA150_22 = input.LA(1);

                         
                        int index150_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 142;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index150_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 150, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA152_eotS =
        "\104\uffff";
    static final String DFA152_eofS =
        "\1\1\103\uffff";
    static final String DFA152_minS =
        "\1\13\1\uffff\101\0\1\uffff";
    static final String DFA152_maxS =
        "\1\u00c5\1\uffff\101\0\1\uffff";
    static final String DFA152_acceptS =
        "\1\uffff\1\2\101\uffff\1\1";
    static final String DFA152_specialS =
        "\2\uffff\1\61\1\23\1\50\1\71\1\36\1\12\1\44\1\26\1\30\1\11\1\16"+
        "\1\56\1\21\1\60\1\51\1\37\1\76\1\0\1\74\1\43\1\20\1\45\1\5\1\73"+
        "\1\32\1\17\1\53\1\54\1\67\1\25\1\72\1\77\1\52\1\4\1\62\1\34\1\7"+
        "\1\33\1\40\1\6\1\35\1\64\1\14\1\31\1\2\1\66\1\47\1\41\1\24\1\57"+
        "\1\10\1\75\1\15\1\13\1\27\1\65\1\55\1\63\1\3\1\46\1\42\1\22\1\100"+
        "\1\1\1\70\1\uffff}>";
    static final String[] DFA152_transitionS = {
            "\1\16\1\7\1\11\1\17\1\66\1\40\1\uffff\1\10\20\1\1\35\1\27\1"+
            "\36\1\uffff\1\15\1\46\1\37\1\41\1\55\1\26\1\42\1\43\1\44\1\45"+
            "\1\24\1\47\1\50\1\51\1\52\1\53\1\20\4\1\1\25\1\64\11\1\1\31"+
            "\1\1\1\54\4\1\1\67\1\1\1\70\1\1\1\71\5\1\1\72\1\1\1\56\3\1\1"+
            "\73\1\1\1\34\1\63\3\1\1\32\1\1\1\2\1\uffff\4\1\1\65\1\1\1\12"+
            "\1\1\15\uffff\1\1\1\14\4\uffff\1\23\1\1\3\uffff\1\101\1\74\1"+
            "\75\4\uffff\1\1\1\3\1\4\1\5\1\6\1\1\1\uffff\1\30\1\uffff\1\33"+
            "\2\uffff\1\13\13\uffff\1\21\1\22\5\uffff\5\1\1\uffff\1\1\1\76"+
            "\1\1\1\uffff\6\1\1\57\1\60\1\61\1\62\1\77\1\100\1\102",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "()+ loopback of 222:17: ( ( jj )? noun )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA152_19 = input.LA(1);

                         
                        int index152_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_19);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA152_65 = input.LA(1);

                         
                        int index152_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_65);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA152_46 = input.LA(1);

                         
                        int index152_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_46);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA152_60 = input.LA(1);

                         
                        int index152_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_60);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA152_35 = input.LA(1);

                         
                        int index152_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_35);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA152_24 = input.LA(1);

                         
                        int index152_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_24);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA152_41 = input.LA(1);

                         
                        int index152_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_41);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA152_38 = input.LA(1);

                         
                        int index152_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_38);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA152_52 = input.LA(1);

                         
                        int index152_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_52);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA152_11 = input.LA(1);

                         
                        int index152_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA152_7 = input.LA(1);

                         
                        int index152_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_7);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA152_55 = input.LA(1);

                         
                        int index152_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_55);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA152_44 = input.LA(1);

                         
                        int index152_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_44);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA152_54 = input.LA(1);

                         
                        int index152_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_54);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA152_12 = input.LA(1);

                         
                        int index152_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_12);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA152_27 = input.LA(1);

                         
                        int index152_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_27);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA152_22 = input.LA(1);

                         
                        int index152_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_22);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA152_14 = input.LA(1);

                         
                        int index152_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_14);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA152_63 = input.LA(1);

                         
                        int index152_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_63);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA152_3 = input.LA(1);

                         
                        int index152_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_3);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA152_50 = input.LA(1);

                         
                        int index152_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_50);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA152_31 = input.LA(1);

                         
                        int index152_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_31);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA152_9 = input.LA(1);

                         
                        int index152_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_9);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA152_56 = input.LA(1);

                         
                        int index152_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_56);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA152_10 = input.LA(1);

                         
                        int index152_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_10);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA152_45 = input.LA(1);

                         
                        int index152_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_45);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA152_26 = input.LA(1);

                         
                        int index152_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA152_39 = input.LA(1);

                         
                        int index152_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_39);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA152_37 = input.LA(1);

                         
                        int index152_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_37);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA152_42 = input.LA(1);

                         
                        int index152_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_42);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA152_6 = input.LA(1);

                         
                        int index152_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_6);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA152_17 = input.LA(1);

                         
                        int index152_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_17);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA152_40 = input.LA(1);

                         
                        int index152_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_40);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA152_49 = input.LA(1);

                         
                        int index152_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_49);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA152_62 = input.LA(1);

                         
                        int index152_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_62);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA152_21 = input.LA(1);

                         
                        int index152_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_21);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA152_8 = input.LA(1);

                         
                        int index152_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_8);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA152_23 = input.LA(1);

                         
                        int index152_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_23);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA152_61 = input.LA(1);

                         
                        int index152_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_61);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA152_48 = input.LA(1);

                         
                        int index152_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_48);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA152_4 = input.LA(1);

                         
                        int index152_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_4);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA152_16 = input.LA(1);

                         
                        int index152_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_16);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA152_34 = input.LA(1);

                         
                        int index152_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_34);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA152_28 = input.LA(1);

                         
                        int index152_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_28);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA152_29 = input.LA(1);

                         
                        int index152_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_29);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA152_58 = input.LA(1);

                         
                        int index152_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_58);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA152_13 = input.LA(1);

                         
                        int index152_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_13);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA152_51 = input.LA(1);

                         
                        int index152_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_51);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA152_15 = input.LA(1);

                         
                        int index152_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_15);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA152_2 = input.LA(1);

                         
                        int index152_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_2);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA152_36 = input.LA(1);

                         
                        int index152_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_36);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA152_59 = input.LA(1);

                         
                        int index152_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_59);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA152_43 = input.LA(1);

                         
                        int index152_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_43);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA152_57 = input.LA(1);

                         
                        int index152_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_57);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA152_47 = input.LA(1);

                         
                        int index152_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_47);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA152_30 = input.LA(1);

                         
                        int index152_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_30);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA152_66 = input.LA(1);

                         
                        int index152_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_66);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA152_5 = input.LA(1);

                         
                        int index152_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_5);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA152_32 = input.LA(1);

                         
                        int index152_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_32);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA152_25 = input.LA(1);

                         
                        int index152_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_25);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA152_20 = input.LA(1);

                         
                        int index152_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_20);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA152_53 = input.LA(1);

                         
                        int index152_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_53);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA152_18 = input.LA(1);

                         
                        int index152_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_18);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA152_33 = input.LA(1);

                         
                        int index152_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_33);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA152_64 = input.LA(1);

                         
                        int index152_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred425_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index152_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 152, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA154_eotS =
        "\12\uffff";
    static final String DFA154_eofS =
        "\12\uffff";
    static final String DFA154_minS =
        "\1\13\5\0\4\uffff";
    static final String DFA154_maxS =
        "\1\177\5\0\4\uffff";
    static final String DFA154_acceptS =
        "\6\uffff\1\4\1\1\1\2\1\3";
    static final String DFA154_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\4\uffff}>";
    static final String[] DFA154_transitionS = {
            "\1\4\2\uffff\1\5\30\uffff\1\3\77\uffff\1\6\7\uffff\1\1\17\uffff"+
            "\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "228:3: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 | unnamedmoleculeamount3 | unnamedmoleculeamount4 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA154_1 = input.LA(1);

                         
                        int index154_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred427_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred428_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index154_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA154_2 = input.LA(1);

                         
                        int index154_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred427_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index154_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA154_3 = input.LA(1);

                         
                        int index154_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred427_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index154_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA154_4 = input.LA(1);

                         
                        int index154_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred427_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred428_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index154_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA154_5 = input.LA(1);

                         
                        int index154_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred427_ChemicalChunker()) ) {s = 7;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index154_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA159_eotS =
        "\u008d\uffff";
    static final String DFA159_eofS =
        "\1\1\u008c\uffff";
    static final String DFA159_minS =
        "\1\13\1\uffff\1\0\u008a\uffff";
    static final String DFA159_maxS =
        "\1\u00c5\1\uffff\1\0\u008a\uffff";
    static final String DFA159_acceptS =
        "\1\uffff\1\2\u008a\uffff\1\1";
    static final String DFA159_specialS =
        "\2\uffff\1\0\u008a\uffff}>";
    static final String[] DFA159_transitionS = {
            "\6\1\1\uffff\24\1\1\uffff\100\1\1\2\1\uffff\10\1\15\uffff\2"+
            "\1\4\uffff\2\1\3\uffff\3\1\4\uffff\6\1\1\uffff\1\1\1\uffff\1"+
            "\1\2\uffff\1\1\13\uffff\2\1\5\uffff\5\1\1\uffff\3\1\1\uffff"+
            "\15\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "()* loopback of 240:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_2 = input.LA(1);

                         
                        int index159_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred434_ChemicalChunker()) ) {s = 140;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index159_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA162_eotS =
        "\12\uffff";
    static final String DFA162_eofS =
        "\1\1\11\uffff";
    static final String DFA162_minS =
        "\1\13\1\uffff\4\0\4\uffff";
    static final String DFA162_maxS =
        "\1\u00c5\1\uffff\4\0\4\uffff";
    static final String DFA162_acceptS =
        "\1\uffff\1\5\4\uffff\1\1\1\3\1\2\1\4";
    static final String DFA162_specialS =
        "\2\uffff\1\2\1\3\1\1\1\0\4\uffff}>";
    static final String[] DFA162_transitionS = {
            "\6\1\1\uffff\24\1\1\uffff\101\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\3\1\5\1\2\1\4\16\uffff\1\1\4\uffff\2\1\3\uffff\3\1\4\uffff"+
            "\6\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff"+
            "\5\1\1\uffff\3\1\1\uffff\15\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA162_eot = DFA.unpackEncodedString(DFA162_eotS);
    static final short[] DFA162_eof = DFA.unpackEncodedString(DFA162_eofS);
    static final char[] DFA162_min = DFA.unpackEncodedStringToUnsignedChars(DFA162_minS);
    static final char[] DFA162_max = DFA.unpackEncodedStringToUnsignedChars(DFA162_maxS);
    static final short[] DFA162_accept = DFA.unpackEncodedString(DFA162_acceptS);
    static final short[] DFA162_special = DFA.unpackEncodedString(DFA162_specialS);
    static final short[][] DFA162_transition;

    static {
        int numStates = DFA162_transitionS.length;
        DFA162_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA162_transition[i] = DFA.unpackEncodedString(DFA162_transitionS[i]);
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;
        }
        public String getDescription() {
            return "()+ loopback of 244:8: ( lrb | rrb | lsqb | rsqb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA162_5 = input.LA(1);

                         
                        int index162_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred442_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index162_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA162_4 = input.LA(1);

                         
                        int index162_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred440_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index162_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA162_2 = input.LA(1);

                         
                        int index162_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred439_ChemicalChunker()) ) {s = 6;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index162_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA162_3 = input.LA(1);

                         
                        int index162_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index162_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 162, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA163_eotS =
        "\110\uffff";
    static final String DFA163_eofS =
        "\110\uffff";
    static final String DFA163_minS =
        "\1\13\22\uffff\1\0\64\uffff";
    static final String DFA163_maxS =
        "\1\u00c5\22\uffff\1\0\64\uffff";
    static final String DFA163_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA163_specialS =
        "\23\uffff\1\0\64\uffff}>";
    static final String[] DFA163_transitionS = {
            "\6\1\1\uffff\1\1\20\uffff\3\1\1\uffff\21\1\4\uffff\2\1\11\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\5\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\1\uffff"+
            "\1\23\5\uffff\1\1\1\uffff\1\1\16\uffff\1\107\1\1\4\uffff\1\1"+
            "\4\uffff\3\1\5\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1"+
            "\13\uffff\2\1\5\uffff\2\1\1\uffff\2\1\1\uffff\2\1\10\uffff\7"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }
        public String getDescription() {
            return "()* loopback of 55:64: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA163_19 = input.LA(1);

                         
                        int index163_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index163_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA164_eotS =
        "\21\uffff";
    static final String DFA164_eofS =
        "\21\uffff";
    static final String DFA164_minS =
        "\1\13\1\uffff\7\12\1\uffff\7\0";
    static final String DFA164_maxS =
        "\1\u00c5\1\uffff\7\12\1\uffff\7\0";
    static final String DFA164_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\7\uffff";
    static final String DFA164_specialS =
        "\12\uffff\1\4\1\3\1\6\1\0\1\5\1\2\1\1}>";
    static final String[] DFA164_transitionS = {
            "\1\1\1\6\1\10\3\1\1\uffff\1\7\20\uffff\3\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\17\uffff\1\1\4\uffff"+
            "\1\1\4\uffff\3\1\5\uffff\1\2\1\3\1\4\1\5\2\uffff\1\1\1\uffff"+
            "\1\1\2\uffff\1\1\13\uffff\2\1\5\uffff\2\11\1\uffff\2\11\1\uffff"+
            "\1\11\1\1\10\uffff\7\1",
            "",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "()* loopback of 55:77: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_13 = input.LA(1);

                         
                        int index164_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index164_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA164_16 = input.LA(1);

                         
                        int index164_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index164_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA164_15 = input.LA(1);

                         
                        int index164_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index164_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA164_11 = input.LA(1);

                         
                        int index164_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index164_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA164_10 = input.LA(1);

                         
                        int index164_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index164_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA164_14 = input.LA(1);

                         
                        int index164_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index164_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA164_12 = input.LA(1);

                         
                        int index164_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index164_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA165_eotS =
        "\106\uffff";
    static final String DFA165_eofS =
        "\106\uffff";
    static final String DFA165_minS =
        "\1\13\101\0\4\uffff";
    static final String DFA165_maxS =
        "\1\u00c5\101\0\4\uffff";
    static final String DFA165_acceptS =
        "\102\uffff\1\1\1\2\1\4\1\3";
    static final String DFA165_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\4\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\14\1\6\1\10\1\15\1\65\1\37\1\uffff\1\7\20\uffff\1\34\1\26"+
            "\1\35\1\uffff\1\13\1\45\1\36\1\40\1\54\1\25\1\41\1\42\1\43\1"+
            "\44\1\23\1\46\1\47\1\50\1\51\1\52\1\17\4\uffff\1\24\1\63\11"+
            "\uffff\1\30\1\uffff\1\53\4\uffff\1\66\1\uffff\1\67\1\uffff\1"+
            "\70\5\uffff\1\71\1\uffff\1\55\3\uffff\1\72\1\uffff\1\33\1\62"+
            "\3\uffff\1\31\1\uffff\1\16\5\uffff\1\64\1\uffff\1\1\17\uffff"+
            "\1\12\4\uffff\1\22\4\uffff\1\100\1\73\1\74\5\uffff\1\2\1\3\1"+
            "\4\1\5\2\uffff\1\27\1\uffff\1\32\2\uffff\1\11\13\uffff\1\20"+
            "\1\21\14\uffff\1\75\10\uffff\1\56\1\57\1\60\1\61\1\76\1\77\1"+
            "\101",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "55:85: ( dissolvePhrase | noun | number | ratio )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA165_1 = input.LA(1);

                         
                        int index165_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA165_2 = input.LA(1);

                         
                        int index165_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA165_3 = input.LA(1);

                         
                        int index165_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA165_4 = input.LA(1);

                         
                        int index165_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA165_5 = input.LA(1);

                         
                        int index165_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA165_6 = input.LA(1);

                         
                        int index165_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA165_7 = input.LA(1);

                         
                        int index165_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA165_8 = input.LA(1);

                         
                        int index165_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA165_9 = input.LA(1);

                         
                        int index165_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA165_10 = input.LA(1);

                         
                        int index165_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA165_11 = input.LA(1);

                         
                        int index165_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA165_12 = input.LA(1);

                         
                        int index165_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA165_13 = input.LA(1);

                         
                        int index165_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred45_ChemicalChunker()) ) {s = 69;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA165_14 = input.LA(1);

                         
                        int index165_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA165_15 = input.LA(1);

                         
                        int index165_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred43_ChemicalChunker()) ) {s = 66;}

                        else if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA165_16 = input.LA(1);

                         
                        int index165_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA165_17 = input.LA(1);

                         
                        int index165_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA165_18 = input.LA(1);

                         
                        int index165_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA165_19 = input.LA(1);

                         
                        int index165_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA165_20 = input.LA(1);

                         
                        int index165_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA165_21 = input.LA(1);

                         
                        int index165_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA165_22 = input.LA(1);

                         
                        int index165_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA165_23 = input.LA(1);

                         
                        int index165_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA165_24 = input.LA(1);

                         
                        int index165_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA165_25 = input.LA(1);

                         
                        int index165_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA165_26 = input.LA(1);

                         
                        int index165_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA165_27 = input.LA(1);

                         
                        int index165_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA165_28 = input.LA(1);

                         
                        int index165_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA165_29 = input.LA(1);

                         
                        int index165_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA165_30 = input.LA(1);

                         
                        int index165_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA165_31 = input.LA(1);

                         
                        int index165_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA165_32 = input.LA(1);

                         
                        int index165_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA165_33 = input.LA(1);

                         
                        int index165_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA165_34 = input.LA(1);

                         
                        int index165_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA165_35 = input.LA(1);

                         
                        int index165_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA165_36 = input.LA(1);

                         
                        int index165_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA165_37 = input.LA(1);

                         
                        int index165_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA165_38 = input.LA(1);

                         
                        int index165_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA165_39 = input.LA(1);

                         
                        int index165_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA165_40 = input.LA(1);

                         
                        int index165_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA165_41 = input.LA(1);

                         
                        int index165_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA165_42 = input.LA(1);

                         
                        int index165_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA165_43 = input.LA(1);

                         
                        int index165_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA165_44 = input.LA(1);

                         
                        int index165_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA165_45 = input.LA(1);

                         
                        int index165_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA165_46 = input.LA(1);

                         
                        int index165_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA165_47 = input.LA(1);

                         
                        int index165_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA165_48 = input.LA(1);

                         
                        int index165_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA165_49 = input.LA(1);

                         
                        int index165_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA165_50 = input.LA(1);

                         
                        int index165_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA165_51 = input.LA(1);

                         
                        int index165_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA165_52 = input.LA(1);

                         
                        int index165_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA165_53 = input.LA(1);

                         
                        int index165_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA165_54 = input.LA(1);

                         
                        int index165_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA165_55 = input.LA(1);

                         
                        int index165_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA165_56 = input.LA(1);

                         
                        int index165_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA165_57 = input.LA(1);

                         
                        int index165_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA165_58 = input.LA(1);

                         
                        int index165_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA165_59 = input.LA(1);

                         
                        int index165_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA165_60 = input.LA(1);

                         
                        int index165_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA165_61 = input.LA(1);

                         
                        int index165_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA165_62 = input.LA(1);

                         
                        int index165_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA165_63 = input.LA(1);

                         
                        int index165_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA165_64 = input.LA(1);

                         
                        int index165_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA165_65 = input.LA(1);

                         
                        int index165_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_ChemicalChunker()) ) {s = 67;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index165_65);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA174_eotS =
        "\21\uffff";
    static final String DFA174_eofS =
        "\21\uffff";
    static final String DFA174_minS =
        "\1\13\7\12\1\uffff\7\0\1\uffff";
    static final String DFA174_maxS =
        "\1\u009c\7\12\1\uffff\7\0\1\uffff";
    static final String DFA174_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA174_specialS =
        "\11\uffff\1\5\1\0\1\4\1\6\1\3\1\2\1\1\1\uffff}>";
    static final String[] DFA174_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\24\uffff\1\10\17\uffff\1\10\57"+
            "\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1\2\1\3"+
            "\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA174_eot = DFA.unpackEncodedString(DFA174_eotS);
    static final short[] DFA174_eof = DFA.unpackEncodedString(DFA174_eofS);
    static final char[] DFA174_min = DFA.unpackEncodedStringToUnsignedChars(DFA174_minS);
    static final char[] DFA174_max = DFA.unpackEncodedStringToUnsignedChars(DFA174_maxS);
    static final short[] DFA174_accept = DFA.unpackEncodedString(DFA174_acceptS);
    static final short[] DFA174_special = DFA.unpackEncodedString(DFA174_specialS);
    static final short[][] DFA174_transition;

    static {
        int numStates = DFA174_transitionS.length;
        DFA174_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA174_transition[i] = DFA.unpackEncodedString(DFA174_transitionS[i]);
        }
    }

    class DFA174 extends DFA {

        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = DFA174_eot;
            this.eof = DFA174_eof;
            this.min = DFA174_min;
            this.max = DFA174_max;
            this.accept = DFA174_accept;
            this.special = DFA174_special;
            this.transition = DFA174_transition;
        }
        public String getDescription() {
            return "62:54: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA174_10 = input.LA(1);

                         
                        int index174_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index174_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA174_15 = input.LA(1);

                         
                        int index174_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index174_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA174_14 = input.LA(1);

                         
                        int index174_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index174_14);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA174_13 = input.LA(1);

                         
                        int index174_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index174_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA174_11 = input.LA(1);

                         
                        int index174_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index174_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA174_9 = input.LA(1);

                         
                        int index174_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index174_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA174_12 = input.LA(1);

                         
                        int index174_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index174_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 174, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA176_eotS =
        "\20\uffff";
    static final String DFA176_eofS =
        "\20\uffff";
    static final String DFA176_minS =
        "\1\13\6\0\11\uffff";
    static final String DFA176_maxS =
        "\1\u0094\6\0\11\uffff";
    static final String DFA176_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA176_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA176_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
    static final short[][] DFA176_transition;

    static {
        int numStates = DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
        }
    }

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "62:64: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA176_1 = input.LA(1);

                         
                        int index176_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index176_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA176_2 = input.LA(1);

                         
                        int index176_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index176_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA176_3 = input.LA(1);

                         
                        int index176_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index176_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA176_4 = input.LA(1);

                         
                        int index176_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index176_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA176_5 = input.LA(1);

                         
                        int index176_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index176_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA176_6 = input.LA(1);

                         
                        int index176_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index176_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 176, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA179_eotS =
        "\21\uffff";
    static final String DFA179_eofS =
        "\21\uffff";
    static final String DFA179_minS =
        "\1\13\7\12\1\uffff\7\0\1\uffff";
    static final String DFA179_maxS =
        "\1\u009c\7\12\1\uffff\7\0\1\uffff";
    static final String DFA179_acceptS =
        "\10\uffff\1\2\7\uffff\1\1";
    static final String DFA179_specialS =
        "\11\uffff\1\4\1\0\1\1\1\6\1\5\1\3\1\2\1\uffff}>";
    static final String[] DFA179_transitionS = {
            "\1\10\1\5\1\7\1\10\3\uffff\1\6\24\uffff\1\10\17\uffff\1\10\57"+
            "\uffff\1\10\7\uffff\1\10\17\uffff\1\10\21\uffff\1\1\1\2\1\3"+
            "\1\4\7\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA179_eot = DFA.unpackEncodedString(DFA179_eotS);
    static final short[] DFA179_eof = DFA.unpackEncodedString(DFA179_eofS);
    static final char[] DFA179_min = DFA.unpackEncodedStringToUnsignedChars(DFA179_minS);
    static final char[] DFA179_max = DFA.unpackEncodedStringToUnsignedChars(DFA179_maxS);
    static final short[] DFA179_accept = DFA.unpackEncodedString(DFA179_acceptS);
    static final short[] DFA179_special = DFA.unpackEncodedString(DFA179_specialS);
    static final short[][] DFA179_transition;

    static {
        int numStates = DFA179_transitionS.length;
        DFA179_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA179_transition[i] = DFA.unpackEncodedString(DFA179_transitionS[i]);
        }
    }

    class DFA179 extends DFA {

        public DFA179(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 179;
            this.eot = DFA179_eot;
            this.eof = DFA179_eof;
            this.min = DFA179_min;
            this.max = DFA179_max;
            this.accept = DFA179_accept;
            this.special = DFA179_special;
            this.transition = DFA179_transition;
        }
        public String getDescription() {
            return "65:66: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA179_10 = input.LA(1);

                         
                        int index179_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA179_11 = input.LA(1);

                         
                        int index179_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA179_15 = input.LA(1);

                         
                        int index179_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA179_14 = input.LA(1);

                         
                        int index179_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_14);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA179_9 = input.LA(1);

                         
                        int index179_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA179_13 = input.LA(1);

                         
                        int index179_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_13);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA179_12 = input.LA(1);

                         
                        int index179_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred74_ChemicalChunker()) ) {s = 16;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index179_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 179, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA181_eotS =
        "\20\uffff";
    static final String DFA181_eofS =
        "\20\uffff";
    static final String DFA181_minS =
        "\1\13\6\0\11\uffff";
    static final String DFA181_maxS =
        "\1\u0094\6\0\11\uffff";
    static final String DFA181_acceptS =
        "\7\uffff\1\1\7\uffff\1\2";
    static final String DFA181_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\11\uffff}>";
    static final String[] DFA181_transitionS = {
            "\1\4\2\7\1\5\3\uffff\1\7\24\uffff\1\3\17\uffff\1\7\57\uffff"+
            "\1\6\7\uffff\1\1\17\uffff\1\2\21\uffff\4\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA181_eot = DFA.unpackEncodedString(DFA181_eotS);
    static final short[] DFA181_eof = DFA.unpackEncodedString(DFA181_eofS);
    static final char[] DFA181_min = DFA.unpackEncodedStringToUnsignedChars(DFA181_minS);
    static final char[] DFA181_max = DFA.unpackEncodedStringToUnsignedChars(DFA181_maxS);
    static final short[] DFA181_accept = DFA.unpackEncodedString(DFA181_acceptS);
    static final short[] DFA181_special = DFA.unpackEncodedString(DFA181_specialS);
    static final short[][] DFA181_transition;

    static {
        int numStates = DFA181_transitionS.length;
        DFA181_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA181_transition[i] = DFA.unpackEncodedString(DFA181_transitionS[i]);
        }
    }

    class DFA181 extends DFA {

        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = DFA181_eot;
            this.eof = DFA181_eof;
            this.min = DFA181_min;
            this.max = DFA181_max;
            this.accept = DFA181_accept;
            this.special = DFA181_special;
            this.transition = DFA181_transition;
        }
        public String getDescription() {
            return "65:76: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA181_1 = input.LA(1);

                         
                        int index181_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index181_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA181_2 = input.LA(1);

                         
                        int index181_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index181_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA181_3 = input.LA(1);

                         
                        int index181_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index181_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA181_4 = input.LA(1);

                         
                        int index181_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index181_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA181_5 = input.LA(1);

                         
                        int index181_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index181_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA181_6 = input.LA(1);

                         
                        int index181_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred76_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index181_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 181, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA195_eotS =
        "\27\uffff";
    static final String DFA195_eofS =
        "\27\uffff";
    static final String DFA195_minS =
        "\1\13\17\uffff\1\0\6\uffff";
    static final String DFA195_maxS =
        "\1\u0097\17\uffff\1\0\6\uffff";
    static final String DFA195_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA195_specialS =
        "\20\uffff\1\0\6\uffff}>";
    static final String[] DFA195_transitionS = {
            "\4\1\3\uffff\1\1\21\uffff\1\1\2\uffff\1\1\4\uffff\1\1\4\uffff"+
            "\1\1\5\uffff\1\1\4\uffff\1\1\12\uffff\1\1\37\uffff\1\20\7\uffff"+
            "\1\1\16\uffff\1\26\1\1\4\uffff\1\1\14\uffff\4\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA195_eot = DFA.unpackEncodedString(DFA195_eotS);
    static final short[] DFA195_eof = DFA.unpackEncodedString(DFA195_eofS);
    static final char[] DFA195_min = DFA.unpackEncodedStringToUnsignedChars(DFA195_minS);
    static final char[] DFA195_max = DFA.unpackEncodedStringToUnsignedChars(DFA195_maxS);
    static final short[] DFA195_accept = DFA.unpackEncodedString(DFA195_acceptS);
    static final short[] DFA195_special = DFA.unpackEncodedString(DFA195_specialS);
    static final short[][] DFA195_transition;

    static {
        int numStates = DFA195_transitionS.length;
        DFA195_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA195_transition[i] = DFA.unpackEncodedString(DFA195_transitionS[i]);
        }
    }

    class DFA195 extends DFA {

        public DFA195(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 195;
            this.eot = DFA195_eot;
            this.eof = DFA195_eof;
            this.min = DFA195_min;
            this.max = DFA195_max;
            this.accept = DFA195_accept;
            this.special = DFA195_special;
            this.transition = DFA195_transition;
        }
        public String getDescription() {
            return "()* loopback of 166:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA195_16 = input.LA(1);

                         
                        int index195_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred371_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index195_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 195, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_sentences_in_document209 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8001E2FFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_sentence_in_sentences231 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8001EAFFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences233 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8001EAFFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_comma_in_sentences241 = new BitSet(new long[]{0x0000000000000002L,0x0000088000000000L});
    public static final BitSet FOLLOW_stop_in_sentences243 = new BitSet(new long[]{0x0000000000000002L,0x0000088000000000L});
    public static final BitSet FOLLOW_nounphrase_in_sentence254 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0xC000A2FFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_verbphrase_in_sentence256 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0xC000A2FFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_prepphrase_in_sentence258 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0xC000A2FFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_advAdj_in_sentence263 = new BitSet(new long[]{0x0000000000043002L,0x400000C000000000L,0x002F8000001E0000L});
    public static final BitSet FOLLOW_colon_in_sentence265 = new BitSet(new long[]{0x0000000000043002L,0x400000C000000000L,0x002F8000001E0000L});
    public static final BitSet FOLLOW_conjunction_in_sentence271 = new BitSet(new long[]{0x0000000000000002L,0x4000008000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_rbconj_in_sentence273 = new BitSet(new long[]{0x0000000000000002L,0x4000008000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_unmatchedTokens_in_unmatchedPhrase286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_unmatchedTokens307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_unmatchedTokens309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tmunicode_in_unmatchedTokens311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_unmatchedTokens313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_unmatchedTokens315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_unmatchedTokens317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dtTHE_in_unmatchedTokens319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unmatchedTokens321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_unmatchedTokens323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_unmatchedTokens325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_unmatchedTokens327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_unmatchedTokens329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_unmatchedTokens331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_unmatchedTokens333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_unmatchedTokens335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_unmatchedTokens337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_unmatchedTokens339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_unmatchedTokens341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_unmatchedTokens343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbconj_in_unmatchedTokens345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_in_unmatchedTokens347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2414 = new BitSet(new long[]{0x30FFFFB80005F800L,0x8000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2417 = new BitSet(new long[]{0x30FFFFB80005F800L,0x8000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2420 = new BitSet(new long[]{0x30FFFFB80005F800L,0x8000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2425 = new BitSet(new long[]{0x30FFFFB81045F802L,0xC000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2427 = new BitSet(new long[]{0x30FFFFB81045F802L,0xC000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_number_in_nounphraseStructure2429 = new BitSet(new long[]{0x30FFFFB81045F802L,0xC000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2431 = new BitSet(new long[]{0x30FFFFB81045F802L,0xC000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2439 = new BitSet(new long[]{0x30FFFFB80005F800L,0xC000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_advAdj_in_nounphraseStructure2442 = new BitSet(new long[]{0x30FFFFB80005F800L,0x8000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2446 = new BitSet(new long[]{0x30FFFFB81045F802L,0xC000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_noun_in_nounphraseStructure2448 = new BitSet(new long[]{0x30FFFFB81045F802L,0xC000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_number_in_nounphraseStructure2450 = new BitSet(new long[]{0x30FFFFB81045F802L,0xC000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_ratio_in_nounphraseStructure2452 = new BitSet(new long[]{0x30FFFFB81045F802L,0xC000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2462 = new BitSet(new long[]{0x0080008010447802L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2465 = new BitSet(new long[]{0x0080008010447802L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseStructure2468 = new BitSet(new long[]{0x0000000010400002L});
    public static final BitSet FOLLOW_dissolveStructure1_in_dissolvePhrase483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure2_in_dissolvePhrase485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure3_in_dissolvePhrase487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_dissolveStructure1514 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure1516 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure1519 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1523 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure1525 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure1529 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0020L});
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure1531 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure1534 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure1537 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1541 = new BitSet(new long[]{0x0000000000400000L,0x4001008000000000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure1543 = new BitSet(new long[]{0x0000000000400000L,0x4001008000000000L});
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure1547 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure1549 = new BitSet(new long[]{0x0000000000400000L,0x4001008000000000L});
    public static final BitSet FOLLOW_rrb_in_dissolveStructure1555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure2564 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure2567 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2571 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure2573 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure2577 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0020L});
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure2579 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure2582 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure2585 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2589 = new BitSet(new long[]{0x0000000000400002L,0x4000008000000000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure2591 = new BitSet(new long[]{0x0000000000400002L,0x4000008000000000L});
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure2595 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure2597 = new BitSet(new long[]{0x0000000000400002L,0x4000008000000000L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure3611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure3614 = new BitSet(new long[]{0x0080108000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure3617 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure3619 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure3621 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_inin_in_dissolveStructure3625 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0020L});
    public static final BitSet FOLLOW_dtTHE_in_dissolveStructure3627 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_adj_in_dissolveStructure3630 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_nnp_in_dissolveStructure3633 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure3637 = new BitSet(new long[]{0x0000000000400002L,0x4000008000000000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure3639 = new BitSet(new long[]{0x0000000000400002L,0x4000008000000000L});
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure3643 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_molecule_in_dissolveStructure3645 = new BitSet(new long[]{0x0000000000400002L,0x4000008000000000L});
    public static final BitSet FOLLOW_cc_in_conjunction662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_conjunction664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_verbphraseStructure695 = new BitSet(new long[]{0xCF000007FFFC3000L,0x0000001DBAFABD7FL,0x7EAF8000003F0010L});
    public static final BitSet FOLLOW_to_in_verbphraseStructure698 = new BitSet(new long[]{0xCF000007FFFC3000L,0x0000001DBAFABD7FL,0x7EAF8000003F0010L});
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure701 = new BitSet(new long[]{0xCF000007FFFC3000L,0x0000001DBAFABD7FL,0x7EAF8000003F0010L});
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure704 = new BitSet(new long[]{0xCF000007FFFC3000L,0x0000001DBAFABD7FL,0x7EAF8000003F0010L});
    public static final BitSet FOLLOW_md_in_verbphraseStructure708 = new BitSet(new long[]{0xCF000007FFFC3000L,0x0000001DBAFABD7FL,0x7EAF8000003F0010L});
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure711 = new BitSet(new long[]{0xCF000007FFFC3000L,0x0000001DBAFABD7FL,0x7EAF8000003F0010L});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure714 = new BitSet(new long[]{0xCF000007FFFC3000L,0x0000001DBAFABD7FL,0x7EAF8000003F0010L});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure717 = new BitSet(new long[]{0xCF000007FFFC3000L,0x0000001DBAFABD7FL,0x7EAF8000003F0010L});
    public static final BitSet FOLLOW_verb_in_verbphraseStructure720 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0xC000A2BFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_md_in_verbphraseStructure723 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0xC000A2BFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_adv_in_verbphraseStructure726 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0xC000A2BFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_adj_in_verbphraseStructure729 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0xC000A2BFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_neg_in_verbphraseStructure732 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0xC000A2BFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure738 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0xC000A2BFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_cc_in_verbphraseStructure742 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000A2BFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_comma_in_verbphraseStructure745 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000A2BFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure748 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0xC000A2BFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_vb_in_verb760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbp_in_verb762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbg_in_verb764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbd_in_verb766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbz_in_verb768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbn_in_verb770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbuse_in_verb772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubmerge_in_verb774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbimmerse_in_verb776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_degassMultiVerb_in_verb778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsubject_in_verb780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbadd_in_verb782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdilute_in_verb784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcharge_in_verb786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcontain_in_verb788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdrop_in_verb790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfill_in_verb792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsuspend_in_verb794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbtreat_in_verb796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbapparatus_in_verb798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbconcentrate_in_verb800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbcool_in_verb802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_verb804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdissolve_in_verb806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdry_in_verb808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbextract_in_verb810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbfilter_in_verb812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbheat_in_verb815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbincrease_in_verb817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpartition_in_verb819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbprecipitate_in_verb821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbpurify_in_verb823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbquench_in_verb825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbrecover_in_verb827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbremove_in_verb829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbstir_in_verb831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_verb833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwait_in_verb835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbwash_in_verb837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbyield_in_verb839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbchange_in_verb841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb850 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_cc_in_degassMultiVerb852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_number861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_number863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_number865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_clause873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_clause875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_clause879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_clause881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wql_in_clause883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wrb_in_clause885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ex_in_clause887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pdt_in_clause889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounStructure_in_noun897 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_dash_in_noun900 = new BitSet(new long[]{0x30FFFFB80005F800L,0x8000A0A345054280L,0x80400300129E0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_nounStructure_in_noun902 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_prp_in_nounStructure913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prp_poss_in_nounStructure915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_nounStructure917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycles_in_nounStructure919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_nounStructure921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_nounStructure923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_nounStructure925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnyield_in_nounStructure929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_nounStructure931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_nounStructure933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nns_in_nounStructure935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_nounStructure937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_nounStructure939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnexample_in_nounStructure943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_nounStructure945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_nounStructure947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_nounStructure949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_nounStructure951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tmunicode_in_nounStructure955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nneq_in_nounStructure957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_nounStructure959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_nounStructure961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_nounStructure963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_nounStructure965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnflash_in_nounStructure967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nngeneral_in_nounStructure969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmethod_in_nounStructure971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnamount_in_nounStructure973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_nounStructure975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncolumn_in_nounStructure977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nncycle_in_nounStructure983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntimes_in_nounStructure985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnvol_in_nounStructure989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpurify_in_nounStructure991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_nounStructure993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_nounStructure995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_nounStructure997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_nounStructure999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure1001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnmixture_in_nounStructure1003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_in_nounStructure1005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_nounStructure1007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nndry_in_nounStructure1009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_nounStructure1011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_nounStructure1013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnextract_in_nounStructure1015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnfilter_in_nounStructure1017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure1019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnremove_in_nounStructure1021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_nounStructure1023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fwin_in_nounStructure1025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_nounStructure1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clause_in_nounStructure1029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_range1035 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_dash_in_range1037 = new BitSet(new long[]{0x0000000000004800L,0x8000000000000000L});
    public static final BitSet FOLLOW_number_in_range1039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycleStructure_in_cycles1046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_cycleStructure1064 = new BitSet(new long[]{0x10A2109000047800L,0x8000808000000000L,0x00000000009E0000L});
    public static final BitSet FOLLOW_dashNN_in_cycleStructure1066 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_nncycle_in_cycleStructure1069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_dashNN1079 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_nn_in_dashNN1081 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_cd_in_dashNN1083 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_dash_in_dashNN1087 = new BitSet(new long[]{0x1082109000047800L,0x8000808000000000L,0x00000000009E0000L});
    public static final BitSet FOLLOW_adj_in_dashNN1090 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_nn_in_dashNN1092 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_cd_in_dashNN1094 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_numberratio_in_ratio1107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounratio_in_ratio1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_numberratio1133 = new BitSet(new long[]{0x0000000000000000L,0x8000004000000000L});
    public static final BitSet FOLLOW_colon_in_numberratio1136 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_oscarcd_in_numberratio1138 = new BitSet(new long[]{0x0000000000000002L,0x8000004000000000L});
    public static final BitSet FOLLOW_cd_in_numberratio1140 = new BitSet(new long[]{0x0000000000000002L,0x8000004000000000L});
    public static final BitSet FOLLOW_noun_in_nounratio1153 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_colon_in_nounratio1157 = new BitSet(new long[]{0x30FFFFB80005F800L,0x8000A0A345054280L,0x80400300129E0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_noun_in_nounratio1159 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_lsqb_in_reference1173 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_cd_in_reference1175 = new BitSet(new long[]{0x0000000000000000L,0x0001E00000000000L});
    public static final BitSet FOLLOW_rsqb_in_reference1177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citationStructure1_in_citation1184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citationStructure2_in_citation1186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_citationStructure11209 = new BitSet(new long[]{0x0000000000000000L,0xC000008000000000L,0x0000000010000400L});
    public static final BitSet FOLLOW_citationContent_in_citationStructure11211 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_rrb_in_citationStructure11213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_citationStructure21219 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_lrb_in_citationStructure21221 = new BitSet(new long[]{0x0000000000000000L,0xC000008000000000L,0x0000000010000400L});
    public static final BitSet FOLLOW_citationContent_in_citationStructure21223 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_rrb_in_citationStructure21225 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_comma_in_citationStructure21227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnp_in_citationContent1236 = new BitSet(new long[]{0x0000000000000000L,0xC000008000000000L,0x0000000010000400L});
    public static final BitSet FOLLOW_fw_in_citationContent1238 = new BitSet(new long[]{0x0000000000000000L,0xC000008000000000L,0x0000000010000400L});
    public static final BitSet FOLLOW_cd_in_citationContent1240 = new BitSet(new long[]{0x0000000000000000L,0xC000008000000000L,0x0000000010000400L});
    public static final BitSet FOLLOW_conjunction_in_citationContent1242 = new BitSet(new long[]{0x0000000000000000L,0xC000008000000000L,0x0000000010000400L});
    public static final BitSet FOLLOW_nnp_in_citationContent1246 = new BitSet(new long[]{0x0000000000000002L,0xC000008000000000L,0x0000000010000400L});
    public static final BitSet FOLLOW_fw_in_citationContent1248 = new BitSet(new long[]{0x0000000000000002L,0xC000008000000000L,0x0000000010000400L});
    public static final BitSet FOLLOW_cd_in_citationContent1250 = new BitSet(new long[]{0x0000000000000002L,0xC000008000000000L,0x0000000010000400L});
    public static final BitSet FOLLOW_conjunction_in_citationContent1252 = new BitSet(new long[]{0x0000000000000002L,0xC000008000000000L,0x0000000010000400L});
    public static final BitSet FOLLOW_mixtureRatio_in_mixture1262 = new BitSet(new long[]{0x0000008000004800L,0x8000808000000000L});
    public static final BitSet FOLLOW_mixtureStructure3_in_mixture1267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture1269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture1271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure21299 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure21301 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure21303 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure21305 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_comma_in_mixtureStructure21307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure11313 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure11315 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure11317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_mixtureStructure31325 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_nnpercent_in_mixtureStructure31328 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_rrb_in_mixtureStructure31330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mixtureRatio1341 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_colon_in_mixtureRatio1343 = new BitSet(new long[]{0x0000000000000800L,0x8000000000000000L});
    public static final BitSet FOLLOW_cd_in_mixtureRatio1346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_mixtureRatio1348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_mixtureContent1358 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_verb_in_mixtureContent1360 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_nn_in_mixtureContent1362 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_measurements_in_mixtureContent1364 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_md_in_mixtureContent1366 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent1368 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_stop_in_mixtureContent1370 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1372 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_molecule_in_mixtureContent1374 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1376 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_dash_in_mixtureContent1378 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_sym_in_mixtureContent1380 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_cd_in_mixtureContent1382 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_noun_in_mixtureContent1384 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_inof_in_mixtureContent1386 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_inAll_in_mixtureContent1388 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_cd_in_mixtureContent1390 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_comma_in_mixtureContent1392 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_adj_in_mixtureContent1394 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_colon_in_mixtureContent1396 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_stop_in_mixtureContent1398 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_minimixture_in_mixtureContent1402 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_fw_in_mixtureContent1404 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_verb_in_mixtureContent1406 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_measurements_in_mixtureContent1408 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_nnyield_in_mixtureContent1410 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_md_in_mixtureContent1412 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent1414 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_stop_in_mixtureContent1416 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent1418 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_molecule_in_mixtureContent1420 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent1422 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_dash_in_mixtureContent1424 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_sym_in_mixtureContent1426 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_cd_in_mixtureContent1428 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_noun_in_mixtureContent1430 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_inof_in_mixtureContent1432 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_inAll_in_mixtureContent1434 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_cd_in_mixtureContent1436 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_comma_in_mixtureContent1438 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_adj_in_mixtureContent1440 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_colon_in_mixtureContent1442 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_stop_in_mixtureContent1444 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_mixtureStructure2_in_minimixture1455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixtureStructure1_in_minimixture1457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_minimixtureStructure21478 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure21480 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure21482 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure21484 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_comma_in_minimixtureStructure21486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_minimixtureStructure11493 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_mixtureContent_in_minimixtureStructure11495 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_rrb_in_minimixtureStructure11497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_minimixtureContent1506 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_nn_in_minimixtureContent1508 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_verb_in_minimixtureContent1510 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_measurements_in_minimixtureContent1512 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_nnpercent_in_minimixtureContent1514 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_md_in_minimixtureContent1516 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1518 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent1520 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_molecule_in_minimixtureContent1522 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent1524 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_dash_in_minimixtureContent1526 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_sym_in_minimixtureContent1528 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1530 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_noun_in_minimixtureContent1532 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_inof_in_minimixtureContent1534 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_inAll_in_minimixtureContent1536 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1538 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_comma_in_minimixtureContent1540 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_adj_in_minimixtureContent1542 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_colon_in_minimixtureContent1544 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1546 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_fw_in_minimixtureContent1550 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_verb_in_minimixtureContent1552 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_measurements_in_minimixtureContent1554 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_nnyield_in_minimixtureContent1556 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_nnpercent_in_minimixtureContent1558 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_md_in_minimixtureContent1560 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1562 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_oscarCompound_in_minimixtureContent1564 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_molecule_in_minimixtureContent1566 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_unnamedmolecule_in_minimixtureContent1568 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_dash_in_minimixtureContent1570 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_sym_in_minimixtureContent1572 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1574 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_noun_in_minimixtureContent1576 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_inof_in_minimixtureContent1578 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_inAll_in_minimixtureContent1580 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_cd_in_minimixtureContent1582 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_comma_in_minimixtureContent1584 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_adj_in_minimixtureContent1586 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_colon_in_minimixtureContent1588 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_stop_in_minimixtureContent1590 = new BitSet(new long[]{0xFFFFFFBFFFFDF802L,0x8000BCFFFFFFFFFFL,0xFEEF830012BF0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_jj_in_adj1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjr_in_adj1603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjs_in_adj1605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjt_in_adj1607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcj_in_adj1609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jjchem_in_adj1611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_adj1613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rb_in_adv1620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbr_in_adv1622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbt_in_adv1624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rp_in_adv1626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbs_in_adv1628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_prepphrase1641 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000A2BFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase1645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase1647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase1649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase1651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase1653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase1655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_advAdj1669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_advAdj1671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1680 = new BitSet(new long[]{0x00000007FFFC3000L,0x0000000000000000L,0x00AD8000001F0000L});
    public static final BitSet FOLLOW_inAll_in_prepphraseOther1683 = new BitSet(new long[]{0x30FFFFBFFFFDF800L,0x8000A0A345054280L,0x80ED8300129F0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_prepphraseOf1714 = new BitSet(new long[]{0x30FFFFB80005F800L,0x8000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1757 = new BitSet(new long[]{0x00000027FFFC3000L,0x8000000000000000L,0x00AD8000001F0010L});
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1760 = new BitSet(new long[]{0x0000002000043000L,0x8000000000000000L,0x002D8000001E0010L});
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1764 = new BitSet(new long[]{0x0000002000043000L,0x8000000000000000L,0x002D8000001E0000L});
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1767 = new BitSet(new long[]{0x0000002000043000L,0x8000000000000000L,0x002D8000001E0000L});
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1770 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1773 = new BitSet(new long[]{0x0000002000000002L});
    public static final BitSet FOLLOW_inin_in_prepphraseIN1785 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_prepphraseRole1809 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_dt_in_prepphraseRole1811 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere1838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1858 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x002D8000001E0010L});
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1861 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x002D8000001E0000L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1864 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x002D8000001E0000L});
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1867 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_in_inAll1881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inafter_in_inAll1883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inas_in_inAll1885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inbefore_in_inAll1887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inby_in_inAll1889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infor_in_inAll1891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_infrom_in_inAll1893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_inAll1895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ininto_in_inAll1897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_inAll1899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_inAll1901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inon_in_inAll1903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inover_in_inAll1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inunder_in_inAll1907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_invia_in_inAll1909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwith_in_inAll1911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inwithout_in_inAll1913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_in_inAll1915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1944 = new BitSet(new long[]{0x00002007FFFC3000L,0x8000000000000000L,0x00AD8000001F0010L});
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1947 = new BitSet(new long[]{0x0000200000043000L,0x8000000000000000L,0x002D8000001E0010L});
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1950 = new BitSet(new long[]{0x0000200000043000L,0x8000000000000000L,0x002D8000001E0000L});
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1953 = new BitSet(new long[]{0x0000200000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1956 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1959 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_cd_in_amount1974 = new BitSet(new long[]{0x0000010000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_nnamount_in_amount1977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_mass1999 = new BitSet(new long[]{0x0000004000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_nnmass_in_mass2002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_percent2024 = new BitSet(new long[]{0x1082109000047800L,0x8000908000000000L,0x00000000009E0000L});
    public static final BitSet FOLLOW_nn_in_percent2026 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_nnpercent_in_percent2029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_volume2053 = new BitSet(new long[]{0x0000080000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_nnvol_in_volume2056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_molar2078 = new BitSet(new long[]{0x0000008000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_nnmolar_in_molar2081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase2105 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_inas_in_preparationphrase2107 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000A2BFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_nnexample_in_preparationphrase2110 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_cd_in_preparationphrase2112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase2115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_multiApparatus2128 = new BitSet(new long[]{0x1082109000047802L,0xC000808000000080L,0x00000000009E0010L});
    public static final BitSet FOLLOW_conjunction_in_multiApparatus2131 = new BitSet(new long[]{0x1082109000047800L,0xC000808000000080L,0x00000000009E0010L});
    public static final BitSet FOLLOW_apparatus_in_multiApparatus2134 = new BitSet(new long[]{0x1082109000047802L,0xC000808000000080L,0x00000000009E0010L});
    public static final BitSet FOLLOW_dt_in_apparatus2146 = new BitSet(new long[]{0x1082109000047800L,0x8000808000000080L,0x00000000009E0010L});
    public static final BitSet FOLLOW_preapparatus_in_apparatus2149 = new BitSet(new long[]{0x1082109000047800L,0x8000808000000080L,0x00000000009E0010L});
    public static final BitSet FOLLOW_nnApp_in_apparatus2152 = new BitSet(new long[]{0x1082109000047802L,0x8000808000000080L,0x00000000009E0010L});
    public static final BitSet FOLLOW_nnapparatus_in_nnApp2181 = new BitSet(new long[]{0x1082109000047802L,0x8000848000000080L,0x00000000009E0010L});
    public static final BitSet FOLLOW_dash_in_nnApp2185 = new BitSet(new long[]{0x1082109000047800L,0x8000808000000080L,0x00000000009E0010L});
    public static final BitSet FOLLOW_nnapparatus_in_nnApp2187 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_quantity_in_preapparatus2201 = new BitSet(new long[]{0x1082109000047802L,0x8000808000000000L,0x00000000009E0000L});
    public static final BitSet FOLLOW_adj_in_preapparatus2203 = new BitSet(new long[]{0x1082109000047802L,0x8000808000000000L,0x00000000009E0000L});
    public static final BitSet FOLLOW_nnpressure_in_preapparatus2205 = new BitSet(new long[]{0x1082109000047802L,0x8000808000000000L,0x00000000009E0000L});
    public static final BitSet FOLLOW_nnadd_in_preapparatus2207 = new BitSet(new long[]{0x1082109000047802L,0x8000808000000000L,0x00000000009E0000L});
    public static final BitSet FOLLOW_molecule_in_preapparatus2209 = new BitSet(new long[]{0x1082109000047802L,0x8000808000000000L,0x00000000009E0000L});
    public static final BitSet FOLLOW_nnchementity_in_preapparatus2211 = new BitSet(new long[]{0x1082109000047802L,0x8000808000000000L,0x00000000009E0000L});
    public static final BitSet FOLLOW_nnstate_in_preapparatus2213 = new BitSet(new long[]{0x1082109000047802L,0x8000808000000000L,0x00000000009E0000L});
    public static final BitSet FOLLOW_nn_in_preapparatus2215 = new BitSet(new long[]{0x1082109000047802L,0x8000808000000000L,0x00000000009E0000L});
    public static final BitSet FOLLOW_cd_in_measurements2226 = new BitSet(new long[]{0x1082109000047800L,0x8000808000000000L,0x00000000009E0000L});
    public static final BitSet FOLLOW_nn_in_measurements2228 = new BitSet(new long[]{0x0000008000004800L,0x8000800000000000L});
    public static final BitSet FOLLOW_multiple_in_measurements2233 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_measurementtypes_in_measurements2235 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_dt_in_measurements2241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_multiple2249 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_cdunicode_in_multiple2251 = new BitSet(new long[]{0x0000008000004802L,0x8000800000000000L});
    public static final BitSet FOLLOW_measurementtypes_in_multiple2253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molar_in_measurementtypes2281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_measurementtypes2283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mass_in_measurementtypes2285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_percent_in_measurementtypes2287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_volume_in_measurementtypes2289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_oscarCompound2301 = new BitSet(new long[]{0x0080000000043000L,0x0000800000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_oscarCompound1_in_oscarCompound2305 = new BitSet(new long[]{0x0000000000043002L,0x0000200000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_oscarCompound2_in_oscarCompound2307 = new BitSet(new long[]{0x0000000000043002L,0x0000200000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_oscarCompound3_in_oscarCompound2309 = new BitSet(new long[]{0x0000000000043002L,0x0000200000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_oscarCompound4_in_oscarCompound2311 = new BitSet(new long[]{0x0000000000043002L,0x0000200000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2313 = new BitSet(new long[]{0x0000000000043002L,0x0000200000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_adj_in_oscarCompound2316 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_reference_in_oscarCompound2319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarCompound42328 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound42331 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarCompound42333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3Structure_in_oscarCompound32357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound2Structure_in_oscarCompound22376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound12395 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound12397 = new BitSet(new long[]{0x0080000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound3Structure2423 = new BitSet(new long[]{0x0000000000000000L,0x0000050000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound3Structure2426 = new BitSet(new long[]{0x0000000000000002L,0x0000050000000000L});
    public static final BitSet FOLLOW_apost_in_oscarCompound3Structure2428 = new BitSet(new long[]{0x0000000000000002L,0x0000050000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2Structure2442 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound2Structure2445 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_oscarCompound2Structure2447 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_dash_in_oscarCompound2Structure2452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount12466 = new BitSet(new long[]{0x0000008010004800L,0x8000808000000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount12468 = new BitSet(new long[]{0x0000008010004800L,0x8000808000000000L});
    public static final BitSet FOLLOW_inof_in_moleculeamount12472 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount12474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount22484 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount22486 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount22490 = new BitSet(new long[]{0x0080008000047802L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_citation_in_moleculeamount22495 = new BitSet(new long[]{0x0000008000004802L,0x8000808000000000L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount22497 = new BitSet(new long[]{0x0000008000004802L,0x8000808000000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount22499 = new BitSet(new long[]{0x0000008000004802L,0x8000808000000000L});
    public static final BitSet FOLLOW_quantity_in_moleculeamount32513 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount32515 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_inof_in_moleculeamount32518 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_mixtureRatio_in_moleculeamount32520 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_mixture_in_moleculeamount32522 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount32525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount2535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount2537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount2541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount_in_molecule2562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_oscarcdType2585 = new BitSet(new long[]{0x0000000000000800L,0x8000000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_oscarcdType2588 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_cd_in_oscarcdType2590 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_rrb_in_oscarcdType2593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount12602 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount12604 = new BitSet(new long[]{0x0000000000000800L,0x8000000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount12607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_unnamedmoleculeamount12609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_unnamedmoleculeamount22618 = new BitSet(new long[]{0x0000008000004802L,0x8000808000000000L});
    public static final BitSet FOLLOW_oscarcdType_in_unnamedmoleculeamount22620 = new BitSet(new long[]{0x0000008000004802L,0x8000808000000000L});
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount22624 = new BitSet(new long[]{0x0000008000004802L,0x8000808000000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount22626 = new BitSet(new long[]{0x0000008000004802L,0x8000808000000000L});
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount22628 = new BitSet(new long[]{0x0000008000004802L,0x8000808000000000L});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount32644 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeamount32646 = new BitSet(new long[]{0x30FFFFB80005F800L,0x8000A0A345054280L,0x80400300129E0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount32649 = new BitSet(new long[]{0x30FFFFB80005F800L,0x8000A0A345054280L,0x80400300129E0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_noun_in_unnamedmoleculeamount32652 = new BitSet(new long[]{0x30FFFFB80005F802L,0x8000A0A345054280L,0x80400300129E0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount42665 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount42667 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount42670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeamount2679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeamount2683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeamount2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeamount2689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount_in_unnamedmolecule2703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity1_in_quantity2726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity2_in_quantity2728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_quantity12754 = new BitSet(new long[]{0x0000008000004800L,0x8000800000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity12756 = new BitSet(new long[]{0x0000000000000000L,0x0001088000000000L});
    public static final BitSet FOLLOW_comma_in_quantity12759 = new BitSet(new long[]{0x0000008000004800L,0x8000800000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity12762 = new BitSet(new long[]{0x0000000000000000L,0x0001088000000000L});
    public static final BitSet FOLLOW_comma_in_quantity12767 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity12769 = new BitSet(new long[]{0x0000000000000000L,0x0001088000000000L});
    public static final BitSet FOLLOW_stop_in_quantity12774 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_preparationphrase_in_quantity12776 = new BitSet(new long[]{0x0000000000000000L,0x0001088000000000L});
    public static final BitSet FOLLOW_rrb_in_quantity12781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_quantity22793 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_comma_in_quantity22796 = new BitSet(new long[]{0x0000008000004800L,0x8000800000000000L});
    public static final BitSet FOLLOW_measurements_in_quantity22799 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_nngeneral_in_method2814 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_nn_in_method2816 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_nnmethod_in_method2820 = new BitSet(new long[]{0x0000000000000802L,0x8000000000000000L});
    public static final BitSet FOLLOW_oscarcd_in_method2823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_method2825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_brackets2847 = new BitSet(new long[]{0x0000000000000002L,0x0001E00000000000L});
    public static final BitSet FOLLOW_rrb_in_brackets2849 = new BitSet(new long[]{0x0000000000000002L,0x0001E00000000000L});
    public static final BitSet FOLLOW_lsqb_in_brackets2851 = new BitSet(new long[]{0x0000000000000002L,0x0001E00000000000L});
    public static final BitSet FOLLOW_rsqb_in_brackets2853 = new BitSet(new long[]{0x0000000000000002L,0x0001E00000000000L});
    public static final BitSet FOLLOW_11_in_oscarcd2866 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcd2868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_12_in_oscarcj2873 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcj2875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_13_in_oscarrn2880 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarrn2882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_14_in_oscarcpr2887 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcpr2889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_15_in_oscaront2895 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscaront2897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_tmunicode2902 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_tmunicode2904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_cdunicode2909 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cdunicode2911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_18_in_jjchem2917 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjchem2920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_inas2927 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inas2929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_20_in_inbefore2934 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inbefore2936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_inafter2941 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inafter2943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_inin2948 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inin2950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_ininto2955 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ininto2957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_inwith2962 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwith2964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_inwithout2969 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inwithout2971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_inby2976 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inby2978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_invia2983 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_invia2985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_inof2990 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inof2992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_inon2997 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inon2999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_infor3004 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infor3006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_infrom3011 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_infrom3013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_inunder3018 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inunder3020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_inover3025 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inover3027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_inoff3032 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_inoff3034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_nnexample3041 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnexample3043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_nnstate3048 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnstate3050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_nntime3055 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntime3057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_nnmass3062 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmass3064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_nnmolar3070 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_nnamount3078 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnamount3080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_nnatmosphere3085 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_nneq3092 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nneq3094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_nnvol3099 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvol3101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_nnchementity3106 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_nntemp3113 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntemp3115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_nnflash3120 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnflash3122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_nngeneral3127 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nngeneral3129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_nnmethod3134 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmethod3136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_nnpressure3141 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpressure3143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_nncolumn3148 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncolumn3150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_nnchromatography3155 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography3157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_nnvacuum3162 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum3164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_nncycle3169 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nncycle3171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_nntimes3176 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nntimes3178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_oscarcm3185 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_oscarcm3187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_vbuse3194 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbuse3196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_vbchange3201 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbchange3203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_vbsubmerge3208 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge3210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_vbsubject3215 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsubject3217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_nnadd3224 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnadd3226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_nnmixture3231 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnmixture3233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_vbdilute3238 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdilute3240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_vbadd3246 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbadd3248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_vbcharge3253 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcharge3255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_vbcontain3260 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcontain3262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_vbdrop3267 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdrop3269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_vbfill3274 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfill3276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_vbsuspend3281 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend3283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_vbtreat3288 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbtreat3290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_vbapparatus3297 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus3299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_nnapparatus3304 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus3306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_vbconcentrate3313 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate3315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_nnconcentrate3320 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate3322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_vbcool3329 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbcool3331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_vbdegass3338 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdegass3340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_vbdissolve3347 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve3349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_vbdry3356 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbdry3358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_nndry3363 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nndry3365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_vbextract3372 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbextract3374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_nnextract3379 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnextract3381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_vbfilter3388 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbfilter3390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_nnfilter3395 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnfilter3397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_vbheat3404 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbheat3406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_vbincrease3411 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbincrease3413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_vbimmerse3420 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse3422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_vbpartition3428 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpartition3430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_vbprecipitate3437 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate3439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_nnprecipitate3444 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate3446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_vbpurify3453 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbpurify3455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_nnpurify3460 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpurify3462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_vbquench3469 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbquench3471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_vbrecover3478 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbrecover3480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_vbremove3487 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbremove3489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_nnremove3494 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnremove3496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_vbstir3503 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbstir3505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_vbsynthesize3512 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize3514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_nnsynthesize3519 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize3521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_vbwait3528 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwait3530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_vbwash3537 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbwash3539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_vbyield3546 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbyield3548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_nnyield3555 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnyield3557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_colon3563 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_colon3565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_comma3570 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_comma3572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_apost3577 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_apost3579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_neg3584 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_neg3586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_dash3591 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dash3593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_stop3598 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_stop3600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_nnpercent3605 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnpercent3607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_lsqb3612 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lsqb3614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_rsqb3619 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rsqb3621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_lrb3627 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_lrb3629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_rrb3634 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rrb3636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_abl3645 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abl3647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_abn3654 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abn3656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_abx3663 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_abx3665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_ap3672 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ap3674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_at3681 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_at3683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_be3690 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_be3692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_bed3699 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bed3701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_bedz3708 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bedz3710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_beg3717 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_beg3719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_bem3726 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bem3728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_ben3735 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ben3737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_ber3744 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ber3746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_bez3753 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_bez3755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_cc3762 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cc3764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_cd3771 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cd3773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_cs3780 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_cs3782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_dotok3790 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dotok3792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_dod3799 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dod3801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_doz3808 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_doz3810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_dt3817 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dt3819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_dtTHE3827 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dtTHE3829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_dti3835 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dti3837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_dts3844 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dts3846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_dtx3853 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_dtx3855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_ex3862 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ex3864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_fw3871 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fw3873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_fwin3880 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_fwin3882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_hv3889 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hv3891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_hvd3898 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvd3900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_hvg3907 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvg3909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_hvn3916 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_hvn3918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_in3925 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_in3927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_jj3934 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jj3936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_jjr3943 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjr3945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_jjs3952 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjs3954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_jjt3961 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_jjt3963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_md3970 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_md3972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_nc3979 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nc3981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_nn3988 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn3990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_nn_poss3997 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nn_poss3999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_nns4006 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns4008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_nns_poss4015 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nns_poss4017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_np4024 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np4026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_nnp4034 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nnp4036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_np_poss4044 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_np_poss4046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_nps4053 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps4055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_nps_poss4062 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nps_poss4064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_nr4071 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_nr4073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_od4080 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_od4082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_pn4089 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn4091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_pn_poss4098 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pn_poss4100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_pp_poss4107 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss4109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_pp_poss_poss4116 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pp_poss_poss4118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_ppl4125 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppl4127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_ppls4134 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppls4136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_prp4142 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_prp4145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_prp_poss4152 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_prp_poss4155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_ppo4161 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppo4163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_pps4170 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pps4172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_ppss4179 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ppss4181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_ql4188 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_ql4190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_qlp4197 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_qlp4199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_rb4206 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rb4208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_rbr4215 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbr4217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_rbconj4226 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbconj4229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_rbt4237 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbt4239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_rbs4246 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rbs4248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_rn4256 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rn4258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_rp4265 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_rp4267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_sym4276 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_sym4278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_to4285 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_to4287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_uh4294 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_uh4296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_vb4303 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vb4305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_vbp4313 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbp4315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_vbd4322 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbd4324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_vbg4331 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbg4333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_vbn4340 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbn4342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_vbz4349 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_vbz4351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_wdt4358 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wdt4360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_wp_poss4367 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wp_poss4369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_wpo4377 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wpo4379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_wps4386 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wps4388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_wql4395 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wql4397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_wrb4404 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_wrb4406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_pdt4412 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_TOKEN_in_pdt4414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sentence_in_synpred2_ChemicalChunker231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred4_ChemicalChunker241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphrase_in_synpred6_ChemicalChunker254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verbphrase_in_synpred7_ChemicalChunker256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphrase_in_synpred8_ChemicalChunker258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred9_ChemicalChunker263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred10_ChemicalChunker265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred11_ChemicalChunker271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rbconj_in_synpred12_ChemicalChunker273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred13_ChemicalChunker307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred14_ChemicalChunker309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tmunicode_in_synpred15_ChemicalChunker311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred16_ChemicalChunker313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred18_ChemicalChunker317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcd_in_synpred20_ChemicalChunker321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred21_ChemicalChunker323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarrn_in_synpred22_ChemicalChunker325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscaront_in_synpred23_ChemicalChunker327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_brackets_in_synpred24_ChemicalChunker329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred25_ChemicalChunker331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred29_ChemicalChunker339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred30_ChemicalChunker341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred31_ChemicalChunker343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred33_ChemicalChunker382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred35_ChemicalChunker417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred36_ChemicalChunker420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred37_ChemicalChunker425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred38_ChemicalChunker427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred39_ChemicalChunker429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred40_ChemicalChunker431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred41_ChemicalChunker439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred42_ChemicalChunker442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred43_ChemicalChunker446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred44_ChemicalChunker448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred45_ChemicalChunker450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred46_ChemicalChunker439 = new BitSet(new long[]{0x30FFFFB80005F800L,0xC000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_advAdj_in_synpred46_ChemicalChunker442 = new BitSet(new long[]{0x30FFFFB80005F800L,0x8000A0A345054280L,0x806D8300129E0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred46_ChemicalChunker446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred46_ChemicalChunker448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred46_ChemicalChunker450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ratio_in_synpred46_ChemicalChunker452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred48_ChemicalChunker468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseOf_in_synpred49_ChemicalChunker462 = new BitSet(new long[]{0x0080008000047802L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred49_ChemicalChunker465 = new BitSet(new long[]{0x0080008000047802L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred49_ChemicalChunker468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure1_in_synpred50_ChemicalChunker483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dissolveStructure2_in_synpred51_ChemicalChunker485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred52_ChemicalChunker516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred54_ChemicalChunker523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred56_ChemicalChunker534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred58_ChemicalChunker541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred61_ChemicalChunker564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred63_ChemicalChunker571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred65_ChemicalChunker582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred67_ChemicalChunker589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred68_ChemicalChunker595 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_molecule_in_synpred68_ChemicalChunker597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_synpred69_ChemicalChunker577 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0020L});
    public static final BitSet FOLLOW_dtTHE_in_synpred69_ChemicalChunker579 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_adj_in_synpred69_ChemicalChunker582 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_nnp_in_synpred69_ChemicalChunker585 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_molecule_in_synpred69_ChemicalChunker589 = new BitSet(new long[]{0x0000000000000002L,0x4000008000000000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred69_ChemicalChunker591 = new BitSet(new long[]{0x0000000000000002L,0x4000008000000000L});
    public static final BitSet FOLLOW_conjunction_in_synpred69_ChemicalChunker595 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_molecule_in_synpred69_ChemicalChunker597 = new BitSet(new long[]{0x0000000000000002L,0x4000008000000000L});
    public static final BitSet FOLLOW_molecule_in_synpred71_ChemicalChunker617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred72_ChemicalChunker619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred74_ChemicalChunker630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred76_ChemicalChunker637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred77_ChemicalChunker643 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_molecule_in_synpred77_ChemicalChunker645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inin_in_synpred78_ChemicalChunker625 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0020L});
    public static final BitSet FOLLOW_dtTHE_in_synpred78_ChemicalChunker627 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_adj_in_synpred78_ChemicalChunker630 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_nnp_in_synpred78_ChemicalChunker633 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000101E0000L});
    public static final BitSet FOLLOW_molecule_in_synpred78_ChemicalChunker637 = new BitSet(new long[]{0x0000000000000002L,0x4000008000000000L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred78_ChemicalChunker639 = new BitSet(new long[]{0x0000000000000002L,0x4000008000000000L});
    public static final BitSet FOLLOW_conjunction_in_synpred78_ChemicalChunker643 = new BitSet(new long[]{0x0080008000047800L,0x8000808000000000L,0x00000000001E0000L});
    public static final BitSet FOLLOW_molecule_in_synpred78_ChemicalChunker645 = new BitSet(new long[]{0x0000000000000002L,0x4000008000000000L});
    public static final BitSet FOLLOW_to_in_synpred81_ChemicalChunker698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred82_ChemicalChunker701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred88_ChemicalChunker720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred89_ChemicalChunker723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adv_in_synpred90_ChemicalChunker726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred91_ChemicalChunker729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_neg_in_synpred92_ChemicalChunker732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_md_in_synpred93_ChemicalChunker708 = new BitSet(new long[]{0xCF000007FFFC3000L,0x0000001DBAFABD7FL,0x7EAF8000003F0010L});
    public static final BitSet FOLLOW_rbconj_in_synpred93_ChemicalChunker711 = new BitSet(new long[]{0xCF000007FFFC3000L,0x0000001DBAFABD7FL,0x7EAF8000003F0010L});
    public static final BitSet FOLLOW_adv_in_synpred93_ChemicalChunker714 = new BitSet(new long[]{0xCF000007FFFC3000L,0x0000001DBAFABD7FL,0x7EAF8000003F0010L});
    public static final BitSet FOLLOW_adj_in_synpred93_ChemicalChunker717 = new BitSet(new long[]{0xCF000007FFFC3000L,0x0000001DBAFABD7FL,0x7EAF8000003F0010L});
    public static final BitSet FOLLOW_verb_in_synpred93_ChemicalChunker720 = new BitSet(new long[]{0xCF000007FFFC3002L,0x0000021DBAFABD7FL,0x7EAF8000003F0010L});
    public static final BitSet FOLLOW_md_in_synpred93_ChemicalChunker723 = new BitSet(new long[]{0x0000000000043002L,0x0000020000000000L,0x002D8000003E0000L});
    public static final BitSet FOLLOW_adv_in_synpred93_ChemicalChunker726 = new BitSet(new long[]{0x0000000000043002L,0x0000020000000000L,0x002D8000001E0000L});
    public static final BitSet FOLLOW_adj_in_synpred93_ChemicalChunker729 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_neg_in_synpred93_ChemicalChunker732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inoff_in_synpred94_ChemicalChunker738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cc_in_synpred97_ChemicalChunker742 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000A2BFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_comma_in_synpred97_ChemicalChunker745 = new BitSet(new long[]{0xFFFFFFBFFFFDF800L,0x8000A2BFFFFFFFFFL,0xFEEF830012BF0E30L,0x000000000000003FL});
    public static final BitSet FOLLOW_prepphrase_in_synpred97_ChemicalChunker748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred107_ChemicalChunker778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_vbdegass_in_synpred120_ChemicalChunker804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred142_ChemicalChunker877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred143_ChemicalChunker879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred148_ChemicalChunker900 = new BitSet(new long[]{0x30FFFFB80005F800L,0x8000A0A345054280L,0x80400300129E0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_nounStructure_in_synpred148_ChemicalChunker902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred151_ChemicalChunker917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cycles_in_synpred152_ChemicalChunker919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred153_ChemicalChunker921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_apparatus_in_synpred154_ChemicalChunker923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred155_ChemicalChunker925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred156_ChemicalChunker927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_synpred158_ChemicalChunker931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred159_ChemicalChunker933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_synpred162_ChemicalChunker939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcpr_in_synpred165_ChemicalChunker945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_range_in_synpred166_ChemicalChunker947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_amount_in_synpred167_ChemicalChunker949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred172_ChemicalChunker959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_synpred173_ChemicalChunker961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred174_ChemicalChunker963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_synpred180_ChemicalChunker975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wdt_in_synpred189_ChemicalChunker993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wp_poss_in_synpred190_ChemicalChunker995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wpo_in_synpred191_ChemicalChunker997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_wps_in_synpred192_ChemicalChunker999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_synpred198_ChemicalChunker1011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred199_ChemicalChunker1013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberratio_in_synpred213_ChemicalChunker1107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred214_ChemicalChunker1136 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_oscarcd_in_synpred214_ChemicalChunker1138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred215_ChemicalChunker1140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colon_in_synpred216_ChemicalChunker1157 = new BitSet(new long[]{0x30FFFFB80005F800L,0x8000A0A345054280L,0x80400300129E0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_noun_in_synpred216_ChemicalChunker1159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred229_ChemicalChunker1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred230_ChemicalChunker1360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred231_ChemicalChunker1362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred232_ChemicalChunker1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred235_ChemicalChunker1370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred236_ChemicalChunker1372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred237_ChemicalChunker1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred238_ChemicalChunker1376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred240_ChemicalChunker1380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred241_ChemicalChunker1382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred242_ChemicalChunker1384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred243_ChemicalChunker1386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred244_ChemicalChunker1388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred245_ChemicalChunker1390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred246_ChemicalChunker1392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred247_ChemicalChunker1394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minimixture_in_synpred249_ChemicalChunker1402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred250_ChemicalChunker1404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred251_ChemicalChunker1406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred252_ChemicalChunker1408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnyield_in_synpred253_ChemicalChunker1410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred256_ChemicalChunker1416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred257_ChemicalChunker1418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred258_ChemicalChunker1420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred259_ChemicalChunker1422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred261_ChemicalChunker1426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred262_ChemicalChunker1428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred263_ChemicalChunker1430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred264_ChemicalChunker1432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred265_ChemicalChunker1434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred266_ChemicalChunker1436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred267_ChemicalChunker1438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred268_ChemicalChunker1440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred270_ChemicalChunker1444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred272_ChemicalChunker1506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred273_ChemicalChunker1508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred274_ChemicalChunker1510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred275_ChemicalChunker1512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred278_ChemicalChunker1518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred279_ChemicalChunker1520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred280_ChemicalChunker1522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred281_ChemicalChunker1524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred283_ChemicalChunker1528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred284_ChemicalChunker1530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred285_ChemicalChunker1532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred286_ChemicalChunker1534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred287_ChemicalChunker1536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred288_ChemicalChunker1538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred289_ChemicalChunker1540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred290_ChemicalChunker1542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fw_in_synpred292_ChemicalChunker1550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_verb_in_synpred293_ChemicalChunker1552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurements_in_synpred294_ChemicalChunker1554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnyield_in_synpred295_ChemicalChunker1556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred298_ChemicalChunker1562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred299_ChemicalChunker1564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred300_ChemicalChunker1566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred301_ChemicalChunker1568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sym_in_synpred303_ChemicalChunker1572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred304_ChemicalChunker1574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_noun_in_synpred305_ChemicalChunker1576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inof_in_synpred306_ChemicalChunker1578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inAll_in_synpred307_ChemicalChunker1580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cd_in_synpred308_ChemicalChunker1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred309_ChemicalChunker1584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred310_ChemicalChunker1586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stop_in_synpred312_ChemicalChunker1590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred324_ChemicalChunker1645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTime_in_synpred325_ChemicalChunker1647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred326_ChemicalChunker1649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseIN_in_synpred327_ChemicalChunker1651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prepphraseRole_in_synpred328_ChemicalChunker1653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred332_ChemicalChunker1757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntime_in_synpred337_ChemicalChunker1773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred340_ChemicalChunker1864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnatmosphere_in_synpred341_ChemicalChunker1869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_advAdj_in_synpred359_ChemicalChunker1944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nntemp_in_synpred364_ChemicalChunker1959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred371_ChemicalChunker2131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conjunction_in_synpred372_ChemicalChunker2131 = new BitSet(new long[]{0x1082109000047800L,0xC000808000000080L,0x00000000009E0010L});
    public static final BitSet FOLLOW_apparatus_in_synpred372_ChemicalChunker2134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnApp_in_synpred375_ChemicalChunker2152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred376_ChemicalChunker2181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred377_ChemicalChunker2185 = new BitSet(new long[]{0x1082109000047800L,0x8000808000000080L,0x00000000009E0010L});
    public static final BitSet FOLLOW_nnapparatus_in_synpred377_ChemicalChunker2187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred378_ChemicalChunker2201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred379_ChemicalChunker2203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnpressure_in_synpred380_ChemicalChunker2205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnadd_in_synpred381_ChemicalChunker2207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_molecule_in_synpred382_ChemicalChunker2209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnchementity_in_synpred383_ChemicalChunker2211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nnstate_in_synpred384_ChemicalChunker2213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nn_in_synpred385_ChemicalChunker2215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dt_in_synpred388_ChemicalChunker2241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measurementtypes_in_synpred389_ChemicalChunker2253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound1_in_synpred395_ChemicalChunker2305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound3_in_synpred397_ChemicalChunker2309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adj_in_synpred399_ChemicalChunker2316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_in_synpred400_ChemicalChunker2319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarcm_in_synpred401_ChemicalChunker2397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred402_ChemicalChunker2426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred404_ChemicalChunker2445 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_oscarcm_in_synpred404_ChemicalChunker2447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dash_in_synpred405_ChemicalChunker2452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred406_ChemicalChunker2466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred407_ChemicalChunker2468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred408_ChemicalChunker2484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred409_ChemicalChunker2486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_oscarCompound_in_synpred410_ChemicalChunker2490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred411_ChemicalChunker2495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred412_ChemicalChunker2497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred413_ChemicalChunker2499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred414_ChemicalChunker2513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount3_in_synpred416_ChemicalChunker2535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moleculeamount1_in_synpred417_ChemicalChunker2537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_citation_in_synpred421_ChemicalChunker2624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred422_ChemicalChunker2626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mixture_in_synpred423_ChemicalChunker2628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred424_ChemicalChunker2649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_jj_in_synpred425_ChemicalChunker2649 = new BitSet(new long[]{0x30FFFFB80005F800L,0x8000A0A345054280L,0x80400300129E0E10L,0x000000000000003FL});
    public static final BitSet FOLLOW_noun_in_synpred425_ChemicalChunker2652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quantity_in_synpred426_ChemicalChunker2665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred427_ChemicalChunker2679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_synpred428_ChemicalChunker2683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_synpred429_ChemicalChunker2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comma_in_synpred434_ChemicalChunker2796 = new BitSet(new long[]{0x0000008000004800L,0x8000800000000000L});
    public static final BitSet FOLLOW_measurements_in_synpred434_ChemicalChunker2799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lrb_in_synpred439_ChemicalChunker2847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rrb_in_synpred440_ChemicalChunker2849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lsqb_in_synpred441_ChemicalChunker2851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rsqb_in_synpred442_ChemicalChunker2853 = new BitSet(new long[]{0x0000000000000002L});

}