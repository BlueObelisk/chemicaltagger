// $ANTLR 3.2 Sep 23, 2009 14:05:07 uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g 2011-07-26 17:57:38

    package uk.ac.cam.ch.wwmm.pregenerated;
 

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class ChemicalChunkerParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Sentence", "Unmatched", "NounPhrase", "MultipleApparatus", "DissolvePhrase", "VerbPhrase", "CYCLES", "RATIO", "CITATION", "MIXTURE", "PrepPhrase", "TimePhrase", "RolePrepPhrase", "AtmospherePhrase", "TempPhrase", "AMOUNT", "MASS", "PERCENT", "VOLUME", "MOLAR", "PH", "EQUIVALENT", "YIELD", "APPARATUS", "MULTIPLE", "OSCARCM", "MOLECULE", "UNNAMEDMOLECULE", "QUANTITY", "OSCARONT", "PROCEDURE", "REFERENCETOCOMPOUND", "WS", "TOKEN", "'CD-ALPHANUM'", "'OSCAR-CJ'", "'OSCAR-RN'", "'OSCAR-ASE'", "'OSCAR-ONT'", "'TM-UNICODE'", "'CD-UNICODE'", "'JJ-CHEM'", "'JJ-COMPOUND'", "'IN-AS'", "'IN-BEFORE'", "'IN-AFTER'", "'IN-IN'", "'IN-INTO'", "'IN-WITH'", "'IN-WITHOUT'", "'IN-BY'", "'IN-VIA'", "'IN-OF'", "'IN-ON'", "'IN-FOR'", "'IN-FROM'", "'IN-UNDER'", "'IN-OVER'", "'IN-OFF'", "'NN-STATE'", "'NN-TIME'", "'NN-MASS'", "'NN-AMOUNT'", "'NN-MOLAR'", "'NN-ATMOSPHERE'", "'NN-EQ'", "'NN-VOL'", "'NN-CHEMENTITY'", "'NN-TEMP'", "'NN-PH'", "'NN-FLASH'", "'NN-GENERAL'", "'NN-METHOD'", "'NN-PRESSURE'", "'NN-COLUMN'", "'NN-CHROMATOGRAPHY'", "'NN-VACUUM'", "'NN-CYCLE'", "'NN-TIMES'", "'NN-EXAMPLE'", "'OSCAR-CM'", "'VB-USE'", "'VB-CHANGE'", "'VB-SUBMERGE'", "'VB-SUBJECT'", "'NN-ADD'", "'NN-MIXTURE'", "'VB-DILUTE'", "'VB-ADD'", "'VB-CHARGE'", "'VB-CONTAIN'", "'VB-DROP'", "'VB-FILL'", "'VB-SUSPEND'", "'VB-TREAT'", "'VB-APPARATUS'", "'NN-APPARATUS'", "'VB-CONCENTRATE'", "'NN-CONCENTRATE'", "'VB-COOL'", "'VB-DEGASS'", "'VB-DISSOLVE'", "'VB-DRY'", "'NN-DRY'", "'VB-EXTRACT'", "'NN-EXTRACT'", "'VB-FILTER'", "'NN-FILTER'", "'VB-HEAT'", "'VB-INCREASE'", "'VB-IMMERSE'", "'VB-PARTITION'", "'VB-PRECIPITATE'", "'NN-PRECIPITATE'", "'VB-PURIFY'", "'NN-PURIFY'", "'VB-QUENCH'", "'VB-RECOVER'", "'VB-REMOVE'", "'NN-REMOVE'", "'VB-STIR'", "'VB-SYNTHESIZE'", "'NN-SYNTHESIZE'", "'VB-WAIT'", "'VB-WASH'", "'VB-YIELD'", "'NN-YIELD'", "'RB-CONJ'", "'COLON'", "'COMMA'", "'APOST'", "'NEG'", "'DASH'", "'STOP'", "'NN-PERCENT'", "'LSQB'", "'RSQB'", "'NN-IDENTIFIER'", "'DT-THE'", "'-LRB-'", "'-RRB-'", "'CC'", "'CD'", "'DT'", "'EX'", "'FW'", "'IN'", "'JJ'", "'JJR'", "'JJS'", "'LS'", "'MD'", "'NN'", "'NNS'", "'NNP'", "'NNPS'", "'PDT'", "'POS'", "'PRP'", "'PRP$'", "'RB'", "'RBR'", "'RBS'", "'RP'", "'SYM'", "'TO'", "'UH'", "'VB'", "'VBD'", "'VBG'", "'VBN'", "'VBP'", "'VBZ'", "'WDT'", "'WP'", "'WP$'", "'WRB'"
    };
    public static final int DissolvePhrase=8;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int T__160=160;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int QUANTITY=32;
    public static final int T__161=161;
    public static final int TOKEN=37;
    public static final int T__162=162;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int CYCLES=10;
    public static final int T__92=92;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__90=90;
    public static final int T__149=149;
    public static final int AMOUNT=19;
    public static final int T__154=154;
    public static final int CITATION=12;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__99=99;
    public static final int T__150=150;
    public static final int T__98=98;
    public static final int T__151=151;
    public static final int T__97=97;
    public static final int OSCARONT=33;
    public static final int T__152=152;
    public static final int T__96=96;
    public static final int T__153=153;
    public static final int T__95=95;
    public static final int T__139=139;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int MultipleApparatus=7;
    public static final int APPARATUS=27;
    public static final int T__141=141;
    public static final int T__85=85;
    public static final int T__142=142;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__140=140;
    public static final int T__86=86;
    public static final int T__145=145;
    public static final int T__89=89;
    public static final int MOLAR=23;
    public static final int TimePhrase=15;
    public static final int T__146=146;
    public static final int T__88=88;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int PrepPhrase=14;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int WS=36;
    public static final int T__71=71;
    public static final int T__129=129;
    public static final int T__72=72;
    public static final int RATIO=11;
    public static final int T__70=70;
    public static final int PH=24;
    public static final int T__76=76;
    public static final int T__75=75;
    public static final int AtmospherePhrase=17;
    public static final int T__130=130;
    public static final int T__74=74;
    public static final int T__131=131;
    public static final int T__73=73;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__79=79;
    public static final int T__134=134;
    public static final int T__78=78;
    public static final int T__135=135;
    public static final int T__77=77;
    public static final int T__68=68;
    public static final int NounPhrase=6;
    public static final int T__69=69;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__64=64;
    public static final int TempPhrase=18;
    public static final int T__65=65;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int VerbPhrase=9;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int T__123=123;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int UNNAMEDMOLECULE=31;
    public static final int REFERENCETOCOMPOUND=35;
    public static final int T__61=61;
    public static final int T__60=60;
    public static final int MULTIPLE=28;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int MOLECULE=30;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__59=59;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int YIELD=26;
    public static final int T__106=106;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int T__112=112;
    public static final int T__50=50;
    public static final int T__42=42;
    public static final int Unmatched=5;
    public static final int T__43=43;
    public static final int RolePrepPhrase=16;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int PERCENT=21;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__180=180;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int EQUIVALENT=25;
    public static final int PROCEDURE=34;
    public static final int T__175=175;
    public static final int MIXTURE=13;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__179=179;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int T__176=176;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int VOLUME=22;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int Sentence=4;
    public static final int T__169=169;
    public static final int OSCARCM=29;
    public static final int MASS=20;

    // delegates
    // delegators


        public ChemicalChunkerParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public ChemicalChunkerParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[773+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return ChemicalChunkerParser.tokenNames; }
    public String getGrammarFileName() { return "uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g"; }


    public boolean numberLooksLikeAReferenceToACompound(TokenStream stream){
    	Token previousTokenType = stream.LT(-2);
    	if (previousTokenType !=null && previousTokenType.getText().equals("IN-OF")){
    		String nextTokenText= stream.LT(3).getText();
    		if ("-LRB-".equals(nextTokenText) || "STOP".equals(nextTokenText) || "COMMA".equals(nextTokenText)){
    			return true;
    		}
    	}
    	return false;
    }

    public boolean followedByNumberWhichIsNotAReference(TokenStream stream){
    	if ("CD".equals(input.LT(1).getText())){
    		String tokenTypeFollowingTheCD = stream.LT(3).getText();
    		if ("NN-TIMES".equals(tokenTypeFollowingTheCD) || "COLON".equals(tokenTypeFollowingTheCD)){
    			return true;
    		}
    	}
    	return false;
    }


    public static class document_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "document"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:1: document : ( sentences )+ -> ( ^( Sentence sentences ) )+ ;
    public final ChemicalChunkerParser.document_return document() throws RecognitionException {
        ChemicalChunkerParser.document_return retval = new ChemicalChunkerParser.document_return();
        retval.start = input.LT(1);
        int document_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentences_return sentences1 = null;


        RewriteRuleSubtreeStream stream_sentences=new RewriteRuleSubtreeStream(adaptor,"rule sentences");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:9: ( ( sentences )+ -> ( ^( Sentence sentences ) )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:11: ( sentences )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:11: ( sentences )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66:
                case 67:
                case 68:
                case 69:
                case 70:
                case 71:
                case 72:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 81:
                case 82:
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 115:
                case 116:
                case 117:
                case 118:
                case 119:
                case 120:
                case 121:
                case 122:
                case 123:
                case 124:
                case 125:
                case 126:
                case 127:
                case 128:
                case 129:
                case 130:
                case 131:
                case 132:
                case 133:
                case 134:
                case 135:
                case 136:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 146:
                case 147:
                case 148:
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                case 161:
                case 162:
                case 163:
                case 164:
                case 165:
                case 166:
                case 167:
                case 168:
                case 169:
                case 170:
                case 171:
                case 172:
                case 173:
                case 174:
                case 175:
                case 176:
                case 177:
                case 178:
                case 179:
                case 180:
                    {
                    alt1=1;
                    }
                    break;

                }

                switch (alt1) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sentences
            	    {
            	    pushFollow(FOLLOW_sentences_in_document202_static.FOLLOW_sentences_in_document202);
            	    sentences1=sentences();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_sentences.add(sentences1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);



            // AST REWRITE
            // elements: sentences
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 79:21: -> ( ^( Sentence sentences ) )+
            {
                if ( !(stream_sentences.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_sentences.hasNext() ) {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:79:24: ^( Sentence sentences )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Sentence, "Sentence"), root_1);

                    adaptor.addChild(root_1, stream_sentences.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_sentences.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, document_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "document"

    public static class sentences_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentences"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:1: sentences : ( sentenceStructure | unmatchedPhrase )+ ( stop )* ;
    public final ChemicalChunkerParser.sentences_return sentences() throws RecognitionException {
        ChemicalChunkerParser.sentences_return retval = new ChemicalChunkerParser.sentences_return();
        retval.start = input.LT(1);
        int sentences_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.sentenceStructure_return sentenceStructure2 = null;

        ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase3 = null;

        ChemicalChunkerParser.stop_return stop4 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:10: ( ( sentenceStructure | unmatchedPhrase )+ ( stop )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:13: ( sentenceStructure | unmatchedPhrase )+ ( stop )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:13: ( sentenceStructure | unmatchedPhrase )+
            int cnt2=0;
            loop2:
            do {
                int alt2=3;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:14: sentenceStructure
            	    {
            	    pushFollow(FOLLOW_sentenceStructure_in_sentences223_static.FOLLOW_sentenceStructure_in_sentences223);
            	    sentenceStructure2=sentenceStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sentenceStructure2.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:32: unmatchedPhrase
            	    {
            	    pushFollow(FOLLOW_unmatchedPhrase_in_sentences225_static.FOLLOW_unmatchedPhrase_in_sentences225);
            	    unmatchedPhrase3=unmatchedPhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unmatchedPhrase3.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:50: ( stop )*
            loop3:
            do {
                int alt3=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt3=1;
                    }
                    break;

                }

                switch (alt3) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_sentences229_static.FOLLOW_stop_in_sentences229);
            	    stop4=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop4.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, sentences_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentences"

    public static class sentenceStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sentenceStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:1: sentenceStructure : ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* ;
    public final ChemicalChunkerParser.sentenceStructure_return sentenceStructure() throws RecognitionException {
        ChemicalChunkerParser.sentenceStructure_return retval = new ChemicalChunkerParser.sentenceStructure_return();
        retval.start = input.LT(1);
        int sentenceStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase5 = null;

        ChemicalChunkerParser.verbphrase_return verbphrase6 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase7 = null;

        ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter8 = null;

        ChemicalChunkerParser.advAdj_return advAdj9 = null;

        ChemicalChunkerParser.colon_return colon10 = null;

        ChemicalChunkerParser.conjunction_return conjunction11 = null;

        ChemicalChunkerParser.rbconj_return rbconj12 = null;

        ChemicalChunkerParser.comma_return comma13 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:18: ( ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+ ( advAdj | colon )* ( conjunction | rbconj | comma )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+
            int cnt4=0;
            loop4:
            do {
                int alt4=5;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:22: nounphrase
            	    {
            	    pushFollow(FOLLOW_nounphrase_in_sentenceStructure239_static.FOLLOW_nounphrase_in_sentenceStructure239);
            	    nounphrase5=nounphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphrase5.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:33: verbphrase
            	    {
            	    pushFollow(FOLLOW_verbphrase_in_sentenceStructure241_static.FOLLOW_verbphrase_in_sentenceStructure241);
            	    verbphrase6=verbphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verbphrase6.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:44: prepphrase
            	    {
            	    pushFollow(FOLLOW_prepphrase_in_sentenceStructure243_static.FOLLOW_prepphrase_in_sentenceStructure243);
            	    prepphrase7=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase7.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:55: prepphraseAfter
            	    {
            	    pushFollow(FOLLOW_prepphraseAfter_in_sentenceStructure245_static.FOLLOW_prepphraseAfter_in_sentenceStructure245);
            	    prepphraseAfter8=prepphraseAfter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAfter8.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:73: ( advAdj | colon )*
            loop5:
            do {
                int alt5=3;
                alt5 = dfa5.predict(input);
                switch (alt5) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:74: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_sentenceStructure250_static.FOLLOW_advAdj_in_sentenceStructure250);
            	    advAdj9=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj9.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:81: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_sentenceStructure252_static.FOLLOW_colon_in_sentenceStructure252);
            	    colon10=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon10.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:89: ( conjunction | rbconj | comma )*
            loop6:
            do {
                int alt6=4;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:90: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_sentenceStructure257_static.FOLLOW_conjunction_in_sentenceStructure257);
            	    conjunction11=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:102: rbconj
            	    {
            	    pushFollow(FOLLOW_rbconj_in_sentenceStructure259_static.FOLLOW_rbconj_in_sentenceStructure259);
            	    rbconj12=rbconj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj12.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:109: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_sentenceStructure261_static.FOLLOW_comma_in_sentenceStructure261);
            	    comma13=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma13.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, sentenceStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sentenceStructure"

    public static class unmatchedPhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedPhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:85:1: unmatchedPhrase : unmatchedToken -> ^( Unmatched unmatchedToken ) ;
    public final ChemicalChunkerParser.unmatchedPhrase_return unmatchedPhrase() throws RecognitionException {
        ChemicalChunkerParser.unmatchedPhrase_return retval = new ChemicalChunkerParser.unmatchedPhrase_return();
        retval.start = input.LT(1);
        int unmatchedPhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unmatchedToken_return unmatchedToken14 = null;


        RewriteRuleSubtreeStream stream_unmatchedToken=new RewriteRuleSubtreeStream(adaptor,"rule unmatchedToken");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:86:2: ( unmatchedToken -> ^( Unmatched unmatchedToken ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:86:5: unmatchedToken
            {
            pushFollow(FOLLOW_unmatchedToken_in_unmatchedPhrase273_static.FOLLOW_unmatchedToken_in_unmatchedPhrase273);
            unmatchedToken14=unmatchedToken();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unmatchedToken.add(unmatchedToken14.getTree());


            // AST REWRITE
            // elements: unmatchedToken
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 86:20: -> ^( Unmatched unmatchedToken )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:86:23: ^( Unmatched unmatchedToken )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(Unmatched, "Unmatched"), root_1);

                adaptor.addChild(root_1, stream_unmatchedToken.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, unmatchedPhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedPhrase"

    public static class unmatchedToken_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unmatchedToken"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:88:1: unmatchedToken : ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) ;
    public final ChemicalChunkerParser.unmatchedToken_return unmatchedToken() throws RecognitionException {
        ChemicalChunkerParser.unmatchedToken_return retval = new ChemicalChunkerParser.unmatchedToken_return();
        retval.start = input.LT(1);
        int unmatchedToken_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric15 = null;

        ChemicalChunkerParser.advAdj_return advAdj16 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode17 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode18 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp19 = null;

        ChemicalChunkerParser.inAll_return inAll20 = null;

        ChemicalChunkerParser.nnexample_return nnexample21 = null;

        ChemicalChunkerParser.nnstate_return nnstate22 = null;

        ChemicalChunkerParser.nntime_return nntime23 = null;

        ChemicalChunkerParser.nnmass_return nnmass24 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar25 = null;

        ChemicalChunkerParser.nnamount_return nnamount26 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere27 = null;

        ChemicalChunkerParser.nneq_return nneq28 = null;

        ChemicalChunkerParser.nnvol_return nnvol29 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity30 = null;

        ChemicalChunkerParser.nntemp_return nntemp31 = null;

        ChemicalChunkerParser.nnph_return nnph32 = null;

        ChemicalChunkerParser.nnflash_return nnflash33 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral34 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod35 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure36 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn37 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography38 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum39 = null;

        ChemicalChunkerParser.nncycle_return nncycle40 = null;

        ChemicalChunkerParser.nntimes_return nntimes41 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm42 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts43 = null;

        ChemicalChunkerParser.oscarase_return oscarase44 = null;

        ChemicalChunkerParser.verb_return verb45 = null;

        ChemicalChunkerParser.nnadd_return nnadd46 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture47 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus48 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate49 = null;

        ChemicalChunkerParser.nndry_return nndry50 = null;

        ChemicalChunkerParser.nnextract_return nnextract51 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter52 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate53 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify54 = null;

        ChemicalChunkerParser.nnremove_return nnremove55 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize56 = null;

        ChemicalChunkerParser.nnyield_return nnyield57 = null;

        ChemicalChunkerParser.colon_return colon58 = null;

        ChemicalChunkerParser.apost_return apost59 = null;

        ChemicalChunkerParser.neg_return neg60 = null;

        ChemicalChunkerParser.dash_return dash61 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent62 = null;

        ChemicalChunkerParser.lsqb_return lsqb63 = null;

        ChemicalChunkerParser.rsqb_return rsqb64 = null;

        ChemicalChunkerParser.lrb_return lrb65 = null;

        ChemicalChunkerParser.rrb_return rrb66 = null;

        ChemicalChunkerParser.cc_return cc67 = null;

        ChemicalChunkerParser.dt_return dt68 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE69 = null;

        ChemicalChunkerParser.fw_return fw70 = null;

        ChemicalChunkerParser.md_return md71 = null;

        ChemicalChunkerParser.nn_return nn72 = null;

        ChemicalChunkerParser.nns_return nns73 = null;

        ChemicalChunkerParser.nnp_return nnp74 = null;

        ChemicalChunkerParser.prp_return prp75 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss76 = null;

        ChemicalChunkerParser.rbconj_return rbconj77 = null;

        ChemicalChunkerParser.sym_return sym78 = null;

        ChemicalChunkerParser.uh_return uh79 = null;

        ChemicalChunkerParser.clause_return clause80 = null;

        ChemicalChunkerParser.comma_return comma81 = null;

        ChemicalChunkerParser.ls_return ls82 = null;

        ChemicalChunkerParser.nnps_return nnps83 = null;

        ChemicalChunkerParser.pos_return pos84 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier85 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:2: ( ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:4: ( numeric | advAdj | tmunicode | cdunicode | jjcomp | inAll | nnexample | nnstate | nntime | nnmass | nnmolar | nnamount | nnatmosphere | nneq | nnvol | nnchementity | nntemp | nnph | nnflash | nngeneral | nnmethod | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | oscarcm | oscaronts | oscarase | verb | nnadd | nnmixture | nnapparatus | nnconcentrate | nndry | nnextract | nnfilter | nnprecipitate | nnpurify | nnremove | nnsynthesize | nnyield | colon | apost | neg | dash | nnpercent | lsqb | rsqb | lrb | rrb | cc | dt | dtTHE | fw | md | nn | nns | nnp | prp | prp_poss | rbconj | sym | uh | clause | comma | ls | nnps | pos | nnidentifier )
            int alt7=71;
            switch ( input.LA(1) ) {
            case 38:
            case 146:
                {
                alt7=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt7=2;
                }
                break;
            case 43:
                {
                alt7=3;
                }
                break;
            case 44:
                {
                alt7=4;
                }
                break;
            case 46:
                {
                alt7=5;
                }
                break;
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 150:
            case 169:
                {
                alt7=6;
                }
                break;
            case 83:
                {
                alt7=7;
                }
                break;
            case 63:
                {
                alt7=8;
                }
                break;
            case 64:
                {
                alt7=9;
                }
                break;
            case 65:
                {
                alt7=10;
                }
                break;
            case 67:
                {
                alt7=11;
                }
                break;
            case 66:
                {
                alt7=12;
                }
                break;
            case 68:
                {
                alt7=13;
                }
                break;
            case 69:
                {
                alt7=14;
                }
                break;
            case 70:
                {
                alt7=15;
                }
                break;
            case 71:
                {
                alt7=16;
                }
                break;
            case 72:
                {
                alt7=17;
                }
                break;
            case 73:
                {
                alt7=18;
                }
                break;
            case 74:
                {
                alt7=19;
                }
                break;
            case 75:
                {
                alt7=20;
                }
                break;
            case 76:
                {
                alt7=21;
                }
                break;
            case 77:
                {
                alt7=22;
                }
                break;
            case 78:
                {
                alt7=23;
                }
                break;
            case 79:
                {
                alt7=24;
                }
                break;
            case 80:
                {
                alt7=25;
                }
                break;
            case 81:
                {
                alt7=26;
                }
                break;
            case 82:
                {
                alt7=27;
                }
                break;
            case 84:
                {
                alt7=28;
                }
                break;
            case 42:
                {
                alt7=29;
                }
                break;
            case 41:
                {
                alt7=30;
                }
                break;
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt7=31;
                }
                break;
            case 89:
                {
                alt7=32;
                }
                break;
            case 90:
                {
                alt7=33;
                }
                break;
            case 100:
                {
                alt7=34;
                }
                break;
            case 102:
                {
                alt7=35;
                }
                break;
            case 107:
                {
                alt7=36;
                }
                break;
            case 109:
                {
                alt7=37;
                }
                break;
            case 111:
                {
                alt7=38;
                }
                break;
            case 117:
                {
                alt7=39;
                }
                break;
            case 119:
                {
                alt7=40;
                }
                break;
            case 123:
                {
                alt7=41;
                }
                break;
            case 126:
                {
                alt7=42;
                }
                break;
            case 130:
                {
                alt7=43;
                }
                break;
            case 132:
                {
                alt7=44;
                }
                break;
            case 134:
                {
                alt7=45;
                }
                break;
            case 135:
                {
                alt7=46;
                }
                break;
            case 136:
                {
                alt7=47;
                }
                break;
            case 138:
                {
                alt7=48;
                }
                break;
            case 139:
                {
                alt7=49;
                }
                break;
            case 140:
                {
                alt7=50;
                }
                break;
            case 143:
                {
                alt7=51;
                }
                break;
            case 144:
                {
                alt7=52;
                }
                break;
            case 145:
                {
                alt7=53;
                }
                break;
            case 147:
                {
                alt7=54;
                }
                break;
            case 142:
                {
                alt7=55;
                }
                break;
            case 149:
                {
                alt7=56;
                }
                break;
            case 155:
                {
                alt7=57;
                }
                break;
            case 156:
                {
                alt7=58;
                }
                break;
            case 157:
                {
                alt7=59;
                }
                break;
            case 158:
                {
                alt7=60;
                }
                break;
            case 162:
                {
                alt7=61;
                }
                break;
            case 163:
                {
                alt7=62;
                }
                break;
            case 131:
                {
                alt7=63;
                }
                break;
            case 168:
                {
                alt7=64;
                }
                break;
            case 170:
                {
                alt7=65;
                }
                break;
            case 148:
            case 160:
            case 177:
            case 178:
            case 179:
            case 180:
                {
                alt7=66;
                }
                break;
            case 133:
                {
                alt7=67;
                }
                break;
            case 154:
                {
                alt7=68;
                }
                break;
            case 159:
                {
                alt7=69;
                }
                break;
            case 161:
                {
                alt7=70;
                }
                break;
            case 141:
                {
                alt7=71;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:5: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_unmatchedToken292_static.FOLLOW_numeric_in_unmatchedToken292);
                    numeric15=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric15.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:13: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_unmatchedToken294_static.FOLLOW_advAdj_in_unmatchedToken294);
                    advAdj16=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj16.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:20: tmunicode
                    {
                    pushFollow(FOLLOW_tmunicode_in_unmatchedToken296_static.FOLLOW_tmunicode_in_unmatchedToken296);
                    tmunicode17=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode17.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:30: cdunicode
                    {
                    pushFollow(FOLLOW_cdunicode_in_unmatchedToken298_static.FOLLOW_cdunicode_in_unmatchedToken298);
                    cdunicode18=cdunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdunicode18.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:40: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unmatchedToken300_static.FOLLOW_jjcomp_in_unmatchedToken300);
                    jjcomp19=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp19.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:89:47: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_unmatchedToken302_static.FOLLOW_inAll_in_unmatchedToken302);
                    inAll20=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll20.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:2: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unmatchedToken306_static.FOLLOW_nnexample_in_unmatchedToken306);
                    nnexample21=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample21.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:12: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unmatchedToken308_static.FOLLOW_nnstate_in_unmatchedToken308);
                    nnstate22=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate22.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:20: nntime
                    {
                    pushFollow(FOLLOW_nntime_in_unmatchedToken310_static.FOLLOW_nntime_in_unmatchedToken310);
                    nntime23=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime23.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:27: nnmass
                    {
                    pushFollow(FOLLOW_nnmass_in_unmatchedToken312_static.FOLLOW_nnmass_in_unmatchedToken312);
                    nnmass24=nnmass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmass24.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:34: nnmolar
                    {
                    pushFollow(FOLLOW_nnmolar_in_unmatchedToken314_static.FOLLOW_nnmolar_in_unmatchedToken314);
                    nnmolar25=nnmolar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmolar25.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:42: nnamount
                    {
                    pushFollow(FOLLOW_nnamount_in_unmatchedToken316_static.FOLLOW_nnamount_in_unmatchedToken316);
                    nnamount26=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount26.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:51: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unmatchedToken318_static.FOLLOW_nnatmosphere_in_unmatchedToken318);
                    nnatmosphere27=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere27.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:64: nneq
                    {
                    pushFollow(FOLLOW_nneq_in_unmatchedToken320_static.FOLLOW_nneq_in_unmatchedToken320);
                    nneq28=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq28.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:69: nnvol
                    {
                    pushFollow(FOLLOW_nnvol_in_unmatchedToken322_static.FOLLOW_nnvol_in_unmatchedToken322);
                    nnvol29=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol29.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:75: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unmatchedToken324_static.FOLLOW_nnchementity_in_unmatchedToken324);
                    nnchementity30=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity30.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:88: nntemp
                    {
                    pushFollow(FOLLOW_nntemp_in_unmatchedToken326_static.FOLLOW_nntemp_in_unmatchedToken326);
                    nntemp31=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp31.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:95: nnph
                    {
                    pushFollow(FOLLOW_nnph_in_unmatchedToken328_static.FOLLOW_nnph_in_unmatchedToken328);
                    nnph32=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph32.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:100: nnflash
                    {
                    pushFollow(FOLLOW_nnflash_in_unmatchedToken330_static.FOLLOW_nnflash_in_unmatchedToken330);
                    nnflash33=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash33.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:108: nngeneral
                    {
                    pushFollow(FOLLOW_nngeneral_in_unmatchedToken332_static.FOLLOW_nngeneral_in_unmatchedToken332);
                    nngeneral34=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral34.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:118: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_unmatchedToken334_static.FOLLOW_nnmethod_in_unmatchedToken334);
                    nnmethod35=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod35.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:127: nnpressure
                    {
                    pushFollow(FOLLOW_nnpressure_in_unmatchedToken336_static.FOLLOW_nnpressure_in_unmatchedToken336);
                    nnpressure36=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure36.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:138: nncolumn
                    {
                    pushFollow(FOLLOW_nncolumn_in_unmatchedToken338_static.FOLLOW_nncolumn_in_unmatchedToken338);
                    nncolumn37=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn37.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:147: nnchromatography
                    {
                    pushFollow(FOLLOW_nnchromatography_in_unmatchedToken340_static.FOLLOW_nnchromatography_in_unmatchedToken340);
                    nnchromatography38=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography38.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:164: nnvacuum
                    {
                    pushFollow(FOLLOW_nnvacuum_in_unmatchedToken342_static.FOLLOW_nnvacuum_in_unmatchedToken342);
                    nnvacuum39=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum39.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:173: nncycle
                    {
                    pushFollow(FOLLOW_nncycle_in_unmatchedToken344_static.FOLLOW_nncycle_in_unmatchedToken344);
                    nncycle40=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle40.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:90:181: nntimes
                    {
                    pushFollow(FOLLOW_nntimes_in_unmatchedToken346_static.FOLLOW_nntimes_in_unmatchedToken346);
                    nntimes41=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes41.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:2: oscarcm
                    {
                    pushFollow(FOLLOW_oscarcm_in_unmatchedToken350_static.FOLLOW_oscarcm_in_unmatchedToken350);
                    oscarcm42=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm42.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:10: oscaronts
                    {
                    pushFollow(FOLLOW_oscaronts_in_unmatchedToken352_static.FOLLOW_oscaronts_in_unmatchedToken352);
                    oscaronts43=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts43.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:20: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unmatchedToken354_static.FOLLOW_oscarase_in_unmatchedToken354);
                    oscarase44=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase44.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:29: verb
                    {
                    pushFollow(FOLLOW_verb_in_unmatchedToken356_static.FOLLOW_verb_in_unmatchedToken356);
                    verb45=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb45.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:34: nnadd
                    {
                    pushFollow(FOLLOW_nnadd_in_unmatchedToken358_static.FOLLOW_nnadd_in_unmatchedToken358);
                    nnadd46=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd46.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:40: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unmatchedToken360_static.FOLLOW_nnmixture_in_unmatchedToken360);
                    nnmixture47=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture47.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:50: nnapparatus
                    {
                    pushFollow(FOLLOW_nnapparatus_in_unmatchedToken362_static.FOLLOW_nnapparatus_in_unmatchedToken362);
                    nnapparatus48=nnapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus48.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:62: nnconcentrate
                    {
                    pushFollow(FOLLOW_nnconcentrate_in_unmatchedToken364_static.FOLLOW_nnconcentrate_in_unmatchedToken364);
                    nnconcentrate49=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate49.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:76: nndry
                    {
                    pushFollow(FOLLOW_nndry_in_unmatchedToken366_static.FOLLOW_nndry_in_unmatchedToken366);
                    nndry50=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry50.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:82: nnextract
                    {
                    pushFollow(FOLLOW_nnextract_in_unmatchedToken368_static.FOLLOW_nnextract_in_unmatchedToken368);
                    nnextract51=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract51.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:92: nnfilter
                    {
                    pushFollow(FOLLOW_nnfilter_in_unmatchedToken370_static.FOLLOW_nnfilter_in_unmatchedToken370);
                    nnfilter52=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter52.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:101: nnprecipitate
                    {
                    pushFollow(FOLLOW_nnprecipitate_in_unmatchedToken372_static.FOLLOW_nnprecipitate_in_unmatchedToken372);
                    nnprecipitate53=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate53.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:115: nnpurify
                    {
                    pushFollow(FOLLOW_nnpurify_in_unmatchedToken374_static.FOLLOW_nnpurify_in_unmatchedToken374);
                    nnpurify54=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify54.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:124: nnremove
                    {
                    pushFollow(FOLLOW_nnremove_in_unmatchedToken376_static.FOLLOW_nnremove_in_unmatchedToken376);
                    nnremove55=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove55.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:133: nnsynthesize
                    {
                    pushFollow(FOLLOW_nnsynthesize_in_unmatchedToken378_static.FOLLOW_nnsynthesize_in_unmatchedToken378);
                    nnsynthesize56=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize56.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:146: nnyield
                    {
                    pushFollow(FOLLOW_nnyield_in_unmatchedToken380_static.FOLLOW_nnyield_in_unmatchedToken380);
                    nnyield57=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield57.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:154: colon
                    {
                    pushFollow(FOLLOW_colon_in_unmatchedToken382_static.FOLLOW_colon_in_unmatchedToken382);
                    colon58=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon58.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:160: apost
                    {
                    pushFollow(FOLLOW_apost_in_unmatchedToken384_static.FOLLOW_apost_in_unmatchedToken384);
                    apost59=apost();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost59.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:166: neg
                    {
                    pushFollow(FOLLOW_neg_in_unmatchedToken386_static.FOLLOW_neg_in_unmatchedToken386);
                    neg60=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg60.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:170: dash
                    {
                    pushFollow(FOLLOW_dash_in_unmatchedToken388_static.FOLLOW_dash_in_unmatchedToken388);
                    dash61=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash61.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:175: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_unmatchedToken390_static.FOLLOW_nnpercent_in_unmatchedToken390);
                    nnpercent62=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent62.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:185: lsqb
                    {
                    pushFollow(FOLLOW_lsqb_in_unmatchedToken392_static.FOLLOW_lsqb_in_unmatchedToken392);
                    lsqb63=lsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb63.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:190: rsqb
                    {
                    pushFollow(FOLLOW_rsqb_in_unmatchedToken394_static.FOLLOW_rsqb_in_unmatchedToken394);
                    rsqb64=rsqb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb64.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:195: lrb
                    {
                    pushFollow(FOLLOW_lrb_in_unmatchedToken396_static.FOLLOW_lrb_in_unmatchedToken396);
                    lrb65=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb65.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:91:199: rrb
                    {
                    pushFollow(FOLLOW_rrb_in_unmatchedToken398_static.FOLLOW_rrb_in_unmatchedToken398);
                    rrb66=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb66.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:2: cc
                    {
                    pushFollow(FOLLOW_cc_in_unmatchedToken402_static.FOLLOW_cc_in_unmatchedToken402);
                    cc67=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc67.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:5: dt
                    {
                    pushFollow(FOLLOW_dt_in_unmatchedToken404_static.FOLLOW_dt_in_unmatchedToken404);
                    dt68=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt68.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:8: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unmatchedToken406_static.FOLLOW_dtTHE_in_unmatchedToken406);
                    dtTHE69=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE69.getTree());

                    }
                    break;
                case 56 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:14: fw
                    {
                    pushFollow(FOLLOW_fw_in_unmatchedToken408_static.FOLLOW_fw_in_unmatchedToken408);
                    fw70=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw70.getTree());

                    }
                    break;
                case 57 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:17: md
                    {
                    pushFollow(FOLLOW_md_in_unmatchedToken410_static.FOLLOW_md_in_unmatchedToken410);
                    md71=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md71.getTree());

                    }
                    break;
                case 58 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:20: nn
                    {
                    pushFollow(FOLLOW_nn_in_unmatchedToken412_static.FOLLOW_nn_in_unmatchedToken412);
                    nn72=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn72.getTree());

                    }
                    break;
                case 59 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:23: nns
                    {
                    pushFollow(FOLLOW_nns_in_unmatchedToken414_static.FOLLOW_nns_in_unmatchedToken414);
                    nns73=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns73.getTree());

                    }
                    break;
                case 60 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:27: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unmatchedToken416_static.FOLLOW_nnp_in_unmatchedToken416);
                    nnp74=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp74.getTree());

                    }
                    break;
                case 61 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:31: prp
                    {
                    pushFollow(FOLLOW_prp_in_unmatchedToken418_static.FOLLOW_prp_in_unmatchedToken418);
                    prp75=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp75.getTree());

                    }
                    break;
                case 62 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:35: prp_poss
                    {
                    pushFollow(FOLLOW_prp_poss_in_unmatchedToken420_static.FOLLOW_prp_poss_in_unmatchedToken420);
                    prp_poss76=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss76.getTree());

                    }
                    break;
                case 63 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:44: rbconj
                    {
                    pushFollow(FOLLOW_rbconj_in_unmatchedToken422_static.FOLLOW_rbconj_in_unmatchedToken422);
                    rbconj77=rbconj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj77.getTree());

                    }
                    break;
                case 64 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:51: sym
                    {
                    pushFollow(FOLLOW_sym_in_unmatchedToken424_static.FOLLOW_sym_in_unmatchedToken424);
                    sym78=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym78.getTree());

                    }
                    break;
                case 65 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:55: uh
                    {
                    pushFollow(FOLLOW_uh_in_unmatchedToken426_static.FOLLOW_uh_in_unmatchedToken426);
                    uh79=uh();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, uh79.getTree());

                    }
                    break;
                case 66 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:58: clause
                    {
                    pushFollow(FOLLOW_clause_in_unmatchedToken428_static.FOLLOW_clause_in_unmatchedToken428);
                    clause80=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause80.getTree());

                    }
                    break;
                case 67 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:65: comma
                    {
                    pushFollow(FOLLOW_comma_in_unmatchedToken430_static.FOLLOW_comma_in_unmatchedToken430);
                    comma81=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma81.getTree());

                    }
                    break;
                case 68 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:71: ls
                    {
                    pushFollow(FOLLOW_ls_in_unmatchedToken432_static.FOLLOW_ls_in_unmatchedToken432);
                    ls82=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls82.getTree());

                    }
                    break;
                case 69 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:74: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unmatchedToken434_static.FOLLOW_nnps_in_unmatchedToken434);
                    nnps83=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps83.getTree());

                    }
                    break;
                case 70 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:79: pos
                    {
                    pushFollow(FOLLOW_pos_in_unmatchedToken436_static.FOLLOW_pos_in_unmatchedToken436);
                    pos84=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos84.getTree());

                    }
                    break;
                case 71 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:92:83: nnidentifier
                    {
                    pushFollow(FOLLOW_nnidentifier_in_unmatchedToken438_static.FOLLOW_nnidentifier_in_unmatchedToken438);
                    nnidentifier85=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier85.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, unmatchedToken_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unmatchedToken"

    public static class nounphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:94:1: nounphrase : nounphraseStructure -> ^( NounPhrase nounphraseStructure ) ;
    public final ChemicalChunkerParser.nounphrase_return nounphrase() throws RecognitionException {
        ChemicalChunkerParser.nounphrase_return retval = new ChemicalChunkerParser.nounphrase_return();
        retval.start = input.LT(1);
        int nounphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure86 = null;


        RewriteRuleSubtreeStream stream_nounphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule nounphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:2: ( nounphraseStructure -> ^( NounPhrase nounphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:4: nounphraseStructure
            {
            pushFollow(FOLLOW_nounphraseStructure_in_nounphrase448_static.FOLLOW_nounphraseStructure_in_nounphrase448);
            nounphraseStructure86=nounphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphraseStructure.add(nounphraseStructure86.getTree());


            // AST REWRITE
            // elements: nounphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 95:24: -> ^( NounPhrase nounphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:95:28: ^( NounPhrase nounphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NounPhrase, "NounPhrase"), root_1);

                adaptor.addChild(root_1, stream_nounphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, nounphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphrase"

    public static class nounphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:97:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );
    public final ChemicalChunkerParser.nounphraseStructure_return nounphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure_return retval = new ChemicalChunkerParser.nounphraseStructure_return();
        retval.start = input.LT(1);
        int nounphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure187 = null;

        ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure288 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:2: ( nounphraseStructure1 | nounphraseStructure2 )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:4: nounphraseStructure1
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure1_in_nounphraseStructure467_static.FOLLOW_nounphraseStructure1_in_nounphraseStructure467);
                    nounphraseStructure187=nounphraseStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure187.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:25: nounphraseStructure2
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nounphraseStructure2_in_nounphraseStructure469_static.FOLLOW_nounphraseStructure2_in_nounphraseStructure469);
                    nounphraseStructure288=nounphraseStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseStructure288.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, nounphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure"

    public static class nounphraseStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:99:1: nounphraseStructure1 : multiApparatus -> ^( MultipleApparatus multiApparatus ) ;
    public final ChemicalChunkerParser.nounphraseStructure1_return nounphraseStructure1() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure1_return retval = new ChemicalChunkerParser.nounphraseStructure1_return();
        retval.start = input.LT(1);
        int nounphraseStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.multiApparatus_return multiApparatus89 = null;


        RewriteRuleSubtreeStream stream_multiApparatus=new RewriteRuleSubtreeStream(adaptor,"rule multiApparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:2: ( multiApparatus -> ^( MultipleApparatus multiApparatus ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:5: multiApparatus
            {
            pushFollow(FOLLOW_multiApparatus_in_nounphraseStructure1478_static.FOLLOW_multiApparatus_in_nounphraseStructure1478);
            multiApparatus89=multiApparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiApparatus.add(multiApparatus89.getTree());


            // AST REWRITE
            // elements: multiApparatus
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 100:20: -> ^( MultipleApparatus multiApparatus )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:100:24: ^( MultipleApparatus multiApparatus )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MultipleApparatus, "MultipleApparatus"), root_1);

                adaptor.addChild(root_1, stream_multiApparatus.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, nounphraseStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure1"

    public static class nounphraseStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:101:1: nounphraseStructure2 : ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent )* ( prepphraseOf | prepphraseIN )? ;
    public final ChemicalChunkerParser.nounphraseStructure2_return nounphraseStructure2() throws RecognitionException {
        ChemicalChunkerParser.nounphraseStructure2_return retval = new ChemicalChunkerParser.nounphraseStructure2_return();
        retval.start = input.LT(1);
        int nounphraseStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE90 = null;

        ChemicalChunkerParser.dt_return dt91 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent92 = null;

        ChemicalChunkerParser.conjunction_return conjunction93 = null;

        ChemicalChunkerParser.nounphraseContent_return nounphraseContent94 = null;

        ChemicalChunkerParser.prepphraseOf_return prepphraseOf95 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN96 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:2: ( ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent )* ( prepphraseOf | prepphraseIN )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:4: ( dtTHE )? ( dt )? nounphraseContent ( ( conjunction )* nounphraseContent )* ( prepphraseOf | prepphraseIN )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:4: ( dtTHE )?
            int alt9=2;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt9=1;
                    }
                    break;
            }

            switch (alt9) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_nounphraseStructure2495_static.FOLLOW_dtTHE_in_nounphraseStructure2495);
                    dtTHE90=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE90.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:11: ( dt )?
            int alt10=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA10_3 = input.LA(3);

                            if ( (synpred86_ChemicalChunker()) ) {
                                alt10=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt10) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_nounphraseStructure2498_static.FOLLOW_dt_in_nounphraseStructure2498);
                    dt91=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt91.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2501_static.FOLLOW_nounphraseContent_in_nounphraseStructure2501);
            nounphraseContent92=nounphraseContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent92.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:34: ( ( conjunction )* nounphraseContent )*
            loop12:
            do {
                int alt12=2;
                alt12 = dfa12.predict(input);
                switch (alt12) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: ( conjunction )* nounphraseContent
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: ( conjunction )*
            	    loop11:
            	    do {
            	        int alt11=2;
            	        alt11 = dfa11.predict(input);
            	        switch (alt11) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_nounphraseStructure2505_static.FOLLOW_conjunction_in_nounphraseStructure2505);
            	    	    conjunction93=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction93.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop11;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_nounphraseContent_in_nounphraseStructure2508_static.FOLLOW_nounphraseContent_in_nounphraseStructure2508);
            	    nounphraseContent94=nounphraseContent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounphraseContent94.getTree());

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:68: ( prepphraseOf | prepphraseIN )?
            int alt13=3;
            switch ( input.LA(1) ) {
                case 56:
                    {
                    int LA13_1 = input.LA(2);

                    if ( (synpred89_ChemicalChunker()) ) {
                        alt13=1;
                    }
                    }
                    break;
                case 50:
                    {
                    int LA13_2 = input.LA(2);

                    if ( (synpred90_ChemicalChunker()) ) {
                        alt13=2;
                    }
                    }
                    break;
            }

            switch (alt13) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:69: prepphraseOf
                    {
                    pushFollow(FOLLOW_prepphraseOf_in_nounphraseStructure2513_static.FOLLOW_prepphraseOf_in_nounphraseStructure2513);
                    prepphraseOf95=prepphraseOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOf95.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:83: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_nounphraseStructure2516_static.FOLLOW_prepphraseIN_in_nounphraseStructure2516);
                    prepphraseIN96=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN96.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, nounphraseStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseStructure2"

    public static class nounphraseContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounphraseContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:104:1: nounphraseContent : ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )+ ;
    public final ChemicalChunkerParser.nounphraseContent_return nounphraseContent() throws RecognitionException {
        ChemicalChunkerParser.nounphraseContent_return retval = new ChemicalChunkerParser.nounphraseContent_return();
        retval.start = input.LT(1);
        int nounphraseContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj97 = null;

        ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase98 = null;

        ChemicalChunkerParser.ratio_return ratio99 = null;

        ChemicalChunkerParser.noun_return noun100 = null;

        ChemicalChunkerParser.numeric_return numeric101 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:2: ( ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:4: ( advAdj )* ( dissolvePhrase | ratio | noun | numeric )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:4: ( advAdj )*
            loop14:
            do {
                int alt14=2;
                alt14 = dfa14.predict(input);
                switch (alt14) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_nounphraseContent528_static.FOLLOW_advAdj_in_nounphraseContent528);
            	    advAdj97=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj97.getTree());

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:13: ( dissolvePhrase | ratio | noun | numeric )+
            int cnt15=0;
            loop15:
            do {
                int alt15=5;
                alt15 = dfa15.predict(input);
                switch (alt15) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:14: dissolvePhrase
            	    {
            	    pushFollow(FOLLOW_dissolvePhrase_in_nounphraseContent533_static.FOLLOW_dissolvePhrase_in_nounphraseContent533);
            	    dissolvePhrase98=dissolvePhrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dissolvePhrase98.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:29: ratio
            	    {
            	    pushFollow(FOLLOW_ratio_in_nounphraseContent535_static.FOLLOW_ratio_in_nounphraseContent535);
            	    ratio99=ratio();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ratio99.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:35: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_nounphraseContent537_static.FOLLOW_noun_in_nounphraseContent537);
            	    noun100=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun100.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:40: numeric
            	    {
            	    pushFollow(FOLLOW_numeric_in_nounphraseContent539_static.FOLLOW_numeric_in_nounphraseContent539);
            	    numeric101=numeric();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric101.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt15 >= 1 ) break loop15;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(15, input);
                        throw eee;
                }
                cnt15++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, nounphraseContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounphraseContent"

    public static class dissolvePhrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolvePhrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:107:1: dissolvePhrase : ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) ;
    public final ChemicalChunkerParser.dissolvePhrase_return dissolvePhrase() throws RecognitionException {
        ChemicalChunkerParser.dissolvePhrase_return retval = new ChemicalChunkerParser.dissolvePhrase_return();
        retval.start = input.LT(1);
        int dissolvePhrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure102 = null;

        ChemicalChunkerParser.lrb_return lrb103 = null;

        ChemicalChunkerParser.dissolveStructure_return dissolveStructure104 = null;

        ChemicalChunkerParser.rrb_return rrb105 = null;


        RewriteRuleSubtreeStream stream_dissolveStructure=new RewriteRuleSubtreeStream(adaptor,"rule dissolveStructure");
        RewriteRuleSubtreeStream stream_lrb=new RewriteRuleSubtreeStream(adaptor,"rule lrb");
        RewriteRuleSubtreeStream stream_rrb=new RewriteRuleSubtreeStream(adaptor,"rule rrb");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:2: ( ( dissolveStructure | lrb dissolveStructure rrb ) -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:4: ( dissolveStructure | lrb dissolveStructure rrb )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:4: ( dissolveStructure | lrb dissolveStructure rrb )
            int alt16=2;
            alt16 = dfa16.predict(input);
            switch (alt16) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:5: dissolveStructure
                    {
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase551_static.FOLLOW_dissolveStructure_in_dissolvePhrase551);
                    dissolveStructure102=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure102.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:23: lrb dissolveStructure rrb
                    {
                    pushFollow(FOLLOW_lrb_in_dissolvePhrase553_static.FOLLOW_lrb_in_dissolvePhrase553);
                    lrb103=lrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_lrb.add(lrb103.getTree());
                    pushFollow(FOLLOW_dissolveStructure_in_dissolvePhrase555_static.FOLLOW_dissolveStructure_in_dissolvePhrase555);
                    dissolveStructure104=dissolveStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dissolveStructure.add(dissolveStructure104.getTree());
                    pushFollow(FOLLOW_rrb_in_dissolvePhrase557_static.FOLLOW_rrb_in_dissolvePhrase557);
                    rrb105=rrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rrb.add(rrb105.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: rrb, dissolveStructure, lrb
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 108:50: -> ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:54: ^( DissolvePhrase ( lrb )? dissolveStructure ( rrb )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DissolvePhrase, "DissolvePhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:71: ( lrb )?
                if ( stream_lrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_lrb.nextTree());

                }
                stream_lrb.reset();
                adaptor.addChild(root_1, stream_dissolveStructure.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:94: ( rrb )?
                if ( stream_rrb.hasNext() ) {
                    adaptor.addChild(root_1, stream_rrb.nextTree());

                }
                stream_rrb.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, dissolvePhrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolvePhrase"

    public static class dissolveStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dissolveStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:110:1: dissolveStructure : ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* ;
    public final ChemicalChunkerParser.dissolveStructure_return dissolveStructure() throws RecognitionException {
        ChemicalChunkerParser.dissolveStructure_return retval = new ChemicalChunkerParser.dissolveStructure_return();
        retval.start = input.LT(1);
        int dissolveStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj106 = null;

        ChemicalChunkerParser.nnp_return nnp107 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity108 = null;

        ChemicalChunkerParser.nnp_return nnp109 = null;

        ChemicalChunkerParser.molecule_return molecule110 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule111 = null;

        ChemicalChunkerParser.inMolecule_return inMolecule112 = null;

        ChemicalChunkerParser.conjunction_return conjunction113 = null;

        ChemicalChunkerParser.molecule_return molecule114 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:2: ( ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:4: ( adj )? ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) ) inMolecule ( conjunction molecule )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:4: ( adj )?
            int alt17=2;
            alt17 = dfa17.predict(input);
            switch (alt17) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_dissolveStructure582_static.FOLLOW_adj_in_dissolveStructure582);
                    adj106=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj106.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:9: ( nnp nnchementity | ( nnp )? ( molecule | unnamedmolecule ) )
            int alt20=2;
            switch ( input.LA(1) ) {
            case 158:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 38:
                    case 39:
                    case 40:
                    case 45:
                    case 46:
                    case 63:
                    case 73:
                    case 84:
                    case 130:
                    case 133:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                    case 151:
                    case 152:
                    case 153:
                        {
                        alt20=2;
                        }
                        break;
                    case 71:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 38:
                            case 47:
                            case 73:
                            case 130:
                            case 133:
                            case 139:
                            case 141:
                            case 143:
                            case 146:
                                {
                                alt20=2;
                                }
                                break;
                            case 50:
                                {
                                alt20=1;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 20, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 20, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 20, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 20, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
            case 39:
            case 40:
            case 45:
            case 46:
            case 63:
            case 71:
            case 73:
            case 84:
            case 130:
            case 133:
            case 139:
            case 141:
            case 143:
            case 146:
            case 151:
            case 152:
            case 153:
                {
                alt20=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }

            switch (alt20) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:10: nnp nnchementity
                    {
                    pushFollow(FOLLOW_nnp_in_dissolveStructure586_static.FOLLOW_nnp_in_dissolveStructure586);
                    nnp107=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp107.getTree());
                    pushFollow(FOLLOW_nnchementity_in_dissolveStructure588_static.FOLLOW_nnchementity_in_dissolveStructure588);
                    nnchementity108=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity108.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:28: ( nnp )? ( molecule | unnamedmolecule )
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:28: ( nnp )?
                    int alt18=2;
                    switch ( input.LA(1) ) {
                        case 158:
                            {
                            alt18=1;
                            }
                            break;
                    }

                    switch (alt18) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                            {
                            pushFollow(FOLLOW_nnp_in_dissolveStructure591_static.FOLLOW_nnp_in_dissolveStructure591);
                            nnp109=nnp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp109.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:32: ( molecule | unnamedmolecule )
                    int alt19=2;
                    alt19 = dfa19.predict(input);
                    switch (alt19) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:33: molecule
                            {
                            pushFollow(FOLLOW_molecule_in_dissolveStructure594_static.FOLLOW_molecule_in_dissolveStructure594);
                            molecule110=molecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule110.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:42: unnamedmolecule
                            {
                            pushFollow(FOLLOW_unnamedmolecule_in_dissolveStructure596_static.FOLLOW_unnamedmolecule_in_dissolveStructure596);
                            unnamedmolecule111=unnamedmolecule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule111.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_inMolecule_in_dissolveStructure600_static.FOLLOW_inMolecule_in_dissolveStructure600);
            inMolecule112=inMolecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inMolecule112.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:71: ( conjunction molecule )*
            loop21:
            do {
                int alt21=2;
                alt21 = dfa21.predict(input);
                switch (alt21) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:72: conjunction molecule
            	    {
            	    pushFollow(FOLLOW_conjunction_in_dissolveStructure603_static.FOLLOW_conjunction_in_dissolveStructure603);
            	    conjunction113=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction113.getTree());
            	    pushFollow(FOLLOW_molecule_in_dissolveStructure605_static.FOLLOW_molecule_in_dissolveStructure605);
            	    molecule114=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule114.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, dissolveStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dissolveStructure"

    public static class inMolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:113:1: inMolecule : inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) ;
    public final ChemicalChunkerParser.inMolecule_return inMolecule() throws RecognitionException {
        ChemicalChunkerParser.inMolecule_return retval = new ChemicalChunkerParser.inMolecule_return();
        retval.start = input.LT(1);
        int inMolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin115 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE116 = null;

        ChemicalChunkerParser.adj_return adj117 = null;

        ChemicalChunkerParser.nnp_return nnp118 = null;

        ChemicalChunkerParser.molecule_return molecule119 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule120 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:2: ( inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:4: inin ( dtTHE )? ( adj )? ( nnp )? ( molecule | unnamedmolecule )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inin_in_inMolecule617_static.FOLLOW_inin_in_inMolecule617);
            inin115=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inin115.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:9: ( dtTHE )?
            int alt22=2;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt22=1;
                    }
                    break;
            }

            switch (alt22) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_inMolecule619_static.FOLLOW_dtTHE_in_inMolecule619);
                    dtTHE116=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE116.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:16: ( adj )?
            int alt23=2;
            alt23 = dfa23.predict(input);
            switch (alt23) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_inMolecule622_static.FOLLOW_adj_in_inMolecule622);
                    adj117=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj117.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:21: ( nnp )?
            int alt24=2;
            switch ( input.LA(1) ) {
                case 158:
                    {
                    alt24=1;
                    }
                    break;
            }

            switch (alt24) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_inMolecule625_static.FOLLOW_nnp_in_inMolecule625);
                    nnp118=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp118.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:26: ( molecule | unnamedmolecule )
            int alt25=2;
            alt25 = dfa25.predict(input);
            switch (alt25) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:27: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_inMolecule629_static.FOLLOW_molecule_in_inMolecule629);
                    molecule119=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule119.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:36: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_inMolecule631_static.FOLLOW_unnamedmolecule_in_inMolecule631);
                    unnamedmolecule120=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule120.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, inMolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMolecule"

    public static class verbphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:116:1: verbphrase : verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) ;
    public final ChemicalChunkerParser.verbphrase_return verbphrase() throws RecognitionException {
        ChemicalChunkerParser.verbphrase_return retval = new ChemicalChunkerParser.verbphrase_return();
        retval.start = input.LT(1);
        int verbphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure121 = null;


        RewriteRuleSubtreeStream stream_verbphraseStructure=new RewriteRuleSubtreeStream(adaptor,"rule verbphraseStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:2: ( verbphraseStructure -> ^( VerbPhrase verbphraseStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:4: verbphraseStructure
            {
            pushFollow(FOLLOW_verbphraseStructure_in_verbphrase641_static.FOLLOW_verbphraseStructure_in_verbphrase641);
            verbphraseStructure121=verbphraseStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_verbphraseStructure.add(verbphraseStructure121.getTree());


            // AST REWRITE
            // elements: verbphraseStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 117:24: -> ^( VerbPhrase verbphraseStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:117:28: ^( VerbPhrase verbphraseStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VerbPhrase, "VerbPhrase"), root_1);

                adaptor.addChild(root_1, stream_verbphraseStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, verbphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphrase"

    public static class verbphraseStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verbphraseStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:1: verbphraseStructure : ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* ;
    public final ChemicalChunkerParser.verbphraseStructure_return verbphraseStructure() throws RecognitionException {
        ChemicalChunkerParser.verbphraseStructure_return retval = new ChemicalChunkerParser.verbphraseStructure_return();
        retval.start = input.LT(1);
        int verbphraseStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt122 = null;

        ChemicalChunkerParser.to_return to123 = null;

        ChemicalChunkerParser.inAll_return inAll124 = null;

        ChemicalChunkerParser.inafter_return inafter125 = null;

        ChemicalChunkerParser.md_return md126 = null;

        ChemicalChunkerParser.rbconj_return rbconj127 = null;

        ChemicalChunkerParser.adv_return adv128 = null;

        ChemicalChunkerParser.adj_return adj129 = null;

        ChemicalChunkerParser.verb_return verb130 = null;

        ChemicalChunkerParser.md_return md131 = null;

        ChemicalChunkerParser.adv_return adv132 = null;

        ChemicalChunkerParser.adj_return adj133 = null;

        ChemicalChunkerParser.neg_return neg134 = null;

        ChemicalChunkerParser.inoff_return inoff135 = null;

        ChemicalChunkerParser.cc_return cc136 = null;

        ChemicalChunkerParser.comma_return comma137 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase138 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:21: ( ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:24: ( dt )? ( to )? ( inAll )? ( inafter )? ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+ ( inoff )? ( ( cc )? ( comma )? prepphrase )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:24: ( dt )?
            int alt26=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt26=1;
                    }
                    break;
            }

            switch (alt26) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_verbphraseStructure659_static.FOLLOW_dt_in_verbphraseStructure659);
                    dt122=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt122.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:28: ( to )?
            int alt27=2;
            switch ( input.LA(1) ) {
                case 169:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA27_3 = input.LA(3);

                            if ( (synpred107_ChemicalChunker()) ) {
                                alt27=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt27) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: to
                    {
                    pushFollow(FOLLOW_to_in_verbphraseStructure662_static.FOLLOW_to_in_verbphraseStructure662);
                    to123=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to123.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:32: ( inAll )?
            int alt28=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt28=1;
                    }
                    break;
                case 49:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA28_4 = input.LA(3);

                            if ( (synpred108_ChemicalChunker()) ) {
                                alt28=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt28) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_verbphraseStructure665_static.FOLLOW_inAll_in_verbphraseStructure665);
                    inAll124=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll124.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:39: ( inafter )?
            int alt29=2;
            switch ( input.LA(1) ) {
                case 49:
                    {
                    alt29=1;
                    }
                    break;
            }

            switch (alt29) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inafter
                    {
                    pushFollow(FOLLOW_inafter_in_verbphraseStructure668_static.FOLLOW_inafter_in_verbphraseStructure668);
                    inafter125=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter125.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+
            int cnt39=0;
            loop39:
            do {
                int alt39=2;
                alt39 = dfa39.predict(input);
                switch (alt39) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:49: ( md )*
            	    loop30:
            	    do {
            	        int alt30=2;
            	        switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            alt30=1;
            	            }
            	            break;

            	        }

            	        switch (alt30) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure672_static.FOLLOW_md_in_verbphraseStructure672);
            	    	    md126=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md126.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop30;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:53: ( rbconj )?
            	    int alt31=2;
            	    switch ( input.LA(1) ) {
            	        case 131:
            	            {
            	            alt31=1;
            	            }
            	            break;
            	    }

            	    switch (alt31) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
            	            {
            	            pushFollow(FOLLOW_rbconj_in_verbphraseStructure675_static.FOLLOW_rbconj_in_verbphraseStructure675);
            	            rbconj127=rbconj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, rbconj127.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:61: ( adv )*
            	    loop32:
            	    do {
            	        int alt32=2;
            	        switch ( input.LA(1) ) {
            	        case 164:
            	        case 165:
            	        case 166:
            	        case 167:
            	            {
            	            alt32=1;
            	            }
            	            break;

            	        }

            	        switch (alt32) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure678_static.FOLLOW_adv_in_verbphraseStructure678);
            	    	    adv128=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv128.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop32;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:66: ( adj )?
            	    int alt33=2;
            	    switch ( input.LA(1) ) {
            	        case 39:
            	        case 40:
            	        case 45:
            	        case 151:
            	        case 152:
            	        case 153:
            	            {
            	            alt33=1;
            	            }
            	            break;
            	    }

            	    switch (alt33) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure681_static.FOLLOW_adj_in_verbphraseStructure681);
            	            adj129=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj129.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:71: ( verb )+
            	    int cnt34=0;
            	    loop34:
            	    do {
            	        int alt34=2;
            	        alt34 = dfa34.predict(input);
            	        switch (alt34) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
            	    	    {
            	    	    pushFollow(FOLLOW_verb_in_verbphraseStructure684_static.FOLLOW_verb_in_verbphraseStructure684);
            	    	    verb130=verb();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb130.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt34 >= 1 ) break loop34;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(34, input);
            	                throw eee;
            	        }
            	        cnt34++;
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:77: ( md )*
            	    loop35:
            	    do {
            	        int alt35=2;
            	        switch ( input.LA(1) ) {
            	        case 155:
            	            {
            	            switch ( input.LA(2) ) {
            	            case TOKEN:
            	                {
            	                int LA35_3 = input.LA(3);

            	                if ( (synpred115_ChemicalChunker()) ) {
            	                    alt35=1;
            	                }


            	                }
            	                break;

            	            }

            	            }
            	            break;

            	        }

            	        switch (alt35) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
            	    	    {
            	    	    pushFollow(FOLLOW_md_in_verbphraseStructure687_static.FOLLOW_md_in_verbphraseStructure687);
            	    	    md131=md();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md131.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop35;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:81: ( adv )*
            	    loop36:
            	    do {
            	        int alt36=2;
            	        alt36 = dfa36.predict(input);
            	        switch (alt36) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
            	    	    {
            	    	    pushFollow(FOLLOW_adv_in_verbphraseStructure690_static.FOLLOW_adv_in_verbphraseStructure690);
            	    	    adv132=adv();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv132.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop36;
            	        }
            	    } while (true);

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:86: ( adj )?
            	    int alt37=2;
            	    alt37 = dfa37.predict(input);
            	    switch (alt37) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_verbphraseStructure693_static.FOLLOW_adj_in_verbphraseStructure693);
            	            adj133=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj133.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:91: ( neg )?
            	    int alt38=2;
            	    switch ( input.LA(1) ) {
            	        case 135:
            	            {
            	            switch ( input.LA(2) ) {
            	                case TOKEN:
            	                    {
            	                    int LA38_3 = input.LA(3);

            	                    if ( (synpred118_ChemicalChunker()) ) {
            	                        alt38=1;
            	                    }
            	                    }
            	                    break;
            	            }

            	            }
            	            break;
            	    }

            	    switch (alt38) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
            	            {
            	            pushFollow(FOLLOW_neg_in_verbphraseStructure696_static.FOLLOW_neg_in_verbphraseStructure696);
            	            neg134=neg();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, neg134.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt39 >= 1 ) break loop39;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(39, input);
                        throw eee;
                }
                cnt39++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:99: ( inoff )?
            int alt40=2;
            switch ( input.LA(1) ) {
                case 62:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA40_3 = input.LA(3);

                            if ( (synpred120_ChemicalChunker()) ) {
                                alt40=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt40) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inoff
                    {
                    pushFollow(FOLLOW_inoff_in_verbphraseStructure702_static.FOLLOW_inoff_in_verbphraseStructure702);
                    inoff135=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff135.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:106: ( ( cc )? ( comma )? prepphrase )*
            loop43:
            do {
                int alt43=2;
                alt43 = dfa43.predict(input);
                switch (alt43) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:107: ( cc )? ( comma )? prepphrase
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:107: ( cc )?
            	    int alt41=2;
            	    switch ( input.LA(1) ) {
            	        case 145:
            	            {
            	            alt41=1;
            	            }
            	            break;
            	    }

            	    switch (alt41) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
            	            {
            	            pushFollow(FOLLOW_cc_in_verbphraseStructure706_static.FOLLOW_cc_in_verbphraseStructure706);
            	            cc136=cc();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc136.getTree());

            	            }
            	            break;

            	    }

            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:111: ( comma )?
            	    int alt42=2;
            	    switch ( input.LA(1) ) {
            	        case 133:
            	            {
            	            alt42=1;
            	            }
            	            break;
            	    }

            	    switch (alt42) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
            	            {
            	            pushFollow(FOLLOW_comma_in_verbphraseStructure709_static.FOLLOW_comma_in_verbphraseStructure709);
            	            comma137=comma();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma137.getTree());

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_prepphrase_in_verbphraseStructure712_static.FOLLOW_prepphrase_in_verbphraseStructure712);
            	    prepphrase138=prepphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase138.getTree());

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, verbphraseStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verbphraseStructure"

    public static class verb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "verb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );
    public final ChemicalChunkerParser.verb_return verb() throws RecognitionException {
        ChemicalChunkerParser.verb_return retval = new ChemicalChunkerParser.verb_return();
        retval.start = input.LT(1);
        int verb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vb_return vb139 = null;

        ChemicalChunkerParser.vbp_return vbp140 = null;

        ChemicalChunkerParser.vbg_return vbg141 = null;

        ChemicalChunkerParser.vbd_return vbd142 = null;

        ChemicalChunkerParser.vbz_return vbz143 = null;

        ChemicalChunkerParser.vbn_return vbn144 = null;

        ChemicalChunkerParser.vbuse_return vbuse145 = null;

        ChemicalChunkerParser.vbsubmerge_return vbsubmerge146 = null;

        ChemicalChunkerParser.vbimmerse_return vbimmerse147 = null;

        ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb148 = null;

        ChemicalChunkerParser.vbsubject_return vbsubject149 = null;

        ChemicalChunkerParser.vbadd_return vbadd150 = null;

        ChemicalChunkerParser.vbdilute_return vbdilute151 = null;

        ChemicalChunkerParser.vbcharge_return vbcharge152 = null;

        ChemicalChunkerParser.vbcontain_return vbcontain153 = null;

        ChemicalChunkerParser.vbdrop_return vbdrop154 = null;

        ChemicalChunkerParser.vbfill_return vbfill155 = null;

        ChemicalChunkerParser.vbsuspend_return vbsuspend156 = null;

        ChemicalChunkerParser.vbtreat_return vbtreat157 = null;

        ChemicalChunkerParser.vbapparatus_return vbapparatus158 = null;

        ChemicalChunkerParser.vbconcentrate_return vbconcentrate159 = null;

        ChemicalChunkerParser.vbcool_return vbcool160 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass161 = null;

        ChemicalChunkerParser.vbdissolve_return vbdissolve162 = null;

        ChemicalChunkerParser.vbdry_return vbdry163 = null;

        ChemicalChunkerParser.vbextract_return vbextract164 = null;

        ChemicalChunkerParser.vbfilter_return vbfilter165 = null;

        ChemicalChunkerParser.vbheat_return vbheat166 = null;

        ChemicalChunkerParser.vbincrease_return vbincrease167 = null;

        ChemicalChunkerParser.vbpartition_return vbpartition168 = null;

        ChemicalChunkerParser.vbprecipitate_return vbprecipitate169 = null;

        ChemicalChunkerParser.vbpurify_return vbpurify170 = null;

        ChemicalChunkerParser.vbquench_return vbquench171 = null;

        ChemicalChunkerParser.vbrecover_return vbrecover172 = null;

        ChemicalChunkerParser.vbremove_return vbremove173 = null;

        ChemicalChunkerParser.vbstir_return vbstir174 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize175 = null;

        ChemicalChunkerParser.vbwait_return vbwait176 = null;

        ChemicalChunkerParser.vbwash_return vbwash177 = null;

        ChemicalChunkerParser.vbyield_return vbyield178 = null;

        ChemicalChunkerParser.vbchange_return vbchange179 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:6: ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange )
            int alt44=41;
            alt44 = dfa44.predict(input);
            switch (alt44) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:8: vb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vb_in_verb724_static.FOLLOW_vb_in_verb724);
                    vb139=vb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vb139.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:11: vbp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbp_in_verb726_static.FOLLOW_vbp_in_verb726);
                    vbp140=vbp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbp140.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:15: vbg
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbg_in_verb728_static.FOLLOW_vbg_in_verb728);
                    vbg141=vbg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbg141.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:19: vbd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbd_in_verb730_static.FOLLOW_vbd_in_verb730);
                    vbd142=vbd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbd142.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:23: vbz
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbz_in_verb732_static.FOLLOW_vbz_in_verb732);
                    vbz143=vbz();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbz143.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:27: vbn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbn_in_verb734_static.FOLLOW_vbn_in_verb734);
                    vbn144=vbn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbn144.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:31: vbuse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbuse_in_verb736_static.FOLLOW_vbuse_in_verb736);
                    vbuse145=vbuse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbuse145.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:37: vbsubmerge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubmerge_in_verb738_static.FOLLOW_vbsubmerge_in_verb738);
                    vbsubmerge146=vbsubmerge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubmerge146.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:48: vbimmerse
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbimmerse_in_verb740_static.FOLLOW_vbimmerse_in_verb740);
                    vbimmerse147=vbimmerse();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbimmerse147.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:58: degassMultiVerb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_degassMultiVerb_in_verb742_static.FOLLOW_degassMultiVerb_in_verb742);
                    degassMultiVerb148=degassMultiVerb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, degassMultiVerb148.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:74: vbsubject
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsubject_in_verb744_static.FOLLOW_vbsubject_in_verb744);
                    vbsubject149=vbsubject();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsubject149.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:84: vbadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbadd_in_verb746_static.FOLLOW_vbadd_in_verb746);
                    vbadd150=vbadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbadd150.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:90: vbdilute
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdilute_in_verb748_static.FOLLOW_vbdilute_in_verb748);
                    vbdilute151=vbdilute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdilute151.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:99: vbcharge
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcharge_in_verb750_static.FOLLOW_vbcharge_in_verb750);
                    vbcharge152=vbcharge();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcharge152.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:108: vbcontain
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcontain_in_verb752_static.FOLLOW_vbcontain_in_verb752);
                    vbcontain153=vbcontain();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcontain153.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:118: vbdrop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdrop_in_verb754_static.FOLLOW_vbdrop_in_verb754);
                    vbdrop154=vbdrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdrop154.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:125: vbfill
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfill_in_verb756_static.FOLLOW_vbfill_in_verb756);
                    vbfill155=vbfill();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill155.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:132: vbsuspend
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsuspend_in_verb758_static.FOLLOW_vbsuspend_in_verb758);
                    vbsuspend156=vbsuspend();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsuspend156.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:142: vbtreat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbtreat_in_verb760_static.FOLLOW_vbtreat_in_verb760);
                    vbtreat157=vbtreat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbtreat157.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:150: vbapparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbapparatus_in_verb762_static.FOLLOW_vbapparatus_in_verb762);
                    vbapparatus158=vbapparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbapparatus158.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:162: vbconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbconcentrate_in_verb764_static.FOLLOW_vbconcentrate_in_verb764);
                    vbconcentrate159=vbconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbconcentrate159.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:176: vbcool
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbcool_in_verb766_static.FOLLOW_vbcool_in_verb766);
                    vbcool160=vbcool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbcool160.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:183: vbdegass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdegass_in_verb768_static.FOLLOW_vbdegass_in_verb768);
                    vbdegass161=vbdegass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass161.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:192: vbdissolve
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdissolve_in_verb770_static.FOLLOW_vbdissolve_in_verb770);
                    vbdissolve162=vbdissolve();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdissolve162.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:203: vbdry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbdry_in_verb772_static.FOLLOW_vbdry_in_verb772);
                    vbdry163=vbdry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdry163.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:209: vbextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbextract_in_verb774_static.FOLLOW_vbextract_in_verb774);
                    vbextract164=vbextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbextract164.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:219: vbfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbfilter_in_verb776_static.FOLLOW_vbfilter_in_verb776);
                    vbfilter165=vbfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfilter165.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:229: vbheat
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbheat_in_verb779_static.FOLLOW_vbheat_in_verb779);
                    vbheat166=vbheat();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbheat166.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:236: vbincrease
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbincrease_in_verb781_static.FOLLOW_vbincrease_in_verb781);
                    vbincrease167=vbincrease();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbincrease167.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:247: vbpartition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpartition_in_verb783_static.FOLLOW_vbpartition_in_verb783);
                    vbpartition168=vbpartition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpartition168.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:259: vbprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbprecipitate_in_verb785_static.FOLLOW_vbprecipitate_in_verb785);
                    vbprecipitate169=vbprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbprecipitate169.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:273: vbpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbpurify_in_verb787_static.FOLLOW_vbpurify_in_verb787);
                    vbpurify170=vbpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbpurify170.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:282: vbquench
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbquench_in_verb789_static.FOLLOW_vbquench_in_verb789);
                    vbquench171=vbquench();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbquench171.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:291: vbrecover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbrecover_in_verb791_static.FOLLOW_vbrecover_in_verb791);
                    vbrecover172=vbrecover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbrecover172.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:301: vbremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbremove_in_verb793_static.FOLLOW_vbremove_in_verb793);
                    vbremove173=vbremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbremove173.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:310: vbstir
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbstir_in_verb795_static.FOLLOW_vbstir_in_verb795);
                    vbstir174=vbstir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbstir174.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:317: vbsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbsynthesize_in_verb797_static.FOLLOW_vbsynthesize_in_verb797);
                    vbsynthesize175=vbsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize175.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:330: vbwait
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwait_in_verb799_static.FOLLOW_vbwait_in_verb799);
                    vbwait176=vbwait();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwait176.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:337: vbwash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbwash_in_verb801_static.FOLLOW_vbwash_in_verb801);
                    vbwash177=vbwash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbwash177.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:344: vbyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbyield_in_verb803_static.FOLLOW_vbyield_in_verb803);
                    vbyield178=vbyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbyield178.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:352: vbchange
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_vbchange_in_verb805_static.FOLLOW_vbchange_in_verb805);
                    vbchange179=vbchange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vbchange179.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, verb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "verb"

    public static class degassMultiVerb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "degassMultiVerb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:121:1: degassMultiVerb : vbdegass cc vbfill ;
    public final ChemicalChunkerParser.degassMultiVerb_return degassMultiVerb() throws RecognitionException {
        ChemicalChunkerParser.degassMultiVerb_return retval = new ChemicalChunkerParser.degassMultiVerb_return();
        retval.start = input.LT(1);
        int degassMultiVerb_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbdegass_return vbdegass180 = null;

        ChemicalChunkerParser.cc_return cc181 = null;

        ChemicalChunkerParser.vbfill_return vbfill182 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:2: ( vbdegass cc vbfill )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:122:4: vbdegass cc vbfill
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbdegass_in_degassMultiVerb814_static.FOLLOW_vbdegass_in_degassMultiVerb814);
            vbdegass180=vbdegass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbdegass180.getTree());
            pushFollow(FOLLOW_cc_in_degassMultiVerb816_static.FOLLOW_cc_in_degassMultiVerb816);
            cc181=cc();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cc181.getTree());
            pushFollow(FOLLOW_vbfill_in_degassMultiVerb818_static.FOLLOW_vbfill_in_degassMultiVerb818);
            vbfill182=vbfill();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbfill182.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, degassMultiVerb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "degassMultiVerb"

    public static class noun_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "noun"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:1: noun : nounStructure ( dash nounStructure )* ;
    public final ChemicalChunkerParser.noun_return noun() throws RecognitionException {
        ChemicalChunkerParser.noun_return retval = new ChemicalChunkerParser.noun_return();
        retval.start = input.LT(1);
        int noun_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure183 = null;

        ChemicalChunkerParser.dash_return dash184 = null;

        ChemicalChunkerParser.nounStructure_return nounStructure185 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:7: ( nounStructure ( dash nounStructure )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:9: nounStructure ( dash nounStructure )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nounStructure_in_noun827_static.FOLLOW_nounStructure_in_noun827);
            nounStructure183=nounStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure183.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:23: ( dash nounStructure )*
            loop45:
            do {
                int alt45=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    int LA45_2 = input.LA(2);

                    if ( (synpred164_ChemicalChunker()) ) {
                        alt45=1;
                    }


                    }
                    break;

                }

                switch (alt45) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:24: dash nounStructure
            	    {
            	    pushFollow(FOLLOW_dash_in_noun830_static.FOLLOW_dash_in_noun830);
            	    dash184=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash184.getTree());
            	    pushFollow(FOLLOW_nounStructure_in_noun832_static.FOLLOW_nounStructure_in_noun832);
            	    nounStructure185=nounStructure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nounStructure185.getTree());

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, noun_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "noun"

    public static class nounStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );
    public final ChemicalChunkerParser.nounStructure_return nounStructure() throws RecognitionException {
        ChemicalChunkerParser.nounStructure_return retval = new ChemicalChunkerParser.nounStructure_return();
        retval.start = input.LT(1);
        int nounStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prp_return prp186 = null;

        ChemicalChunkerParser.prp_poss_return prp_poss187 = null;

        ChemicalChunkerParser.citation_return citation188 = null;

        ChemicalChunkerParser.cycles_return cycles189 = null;

        ChemicalChunkerParser.molecule_return molecule190 = null;

        ChemicalChunkerParser.apparatus_return apparatus191 = null;

        ChemicalChunkerParser.mixture_return mixture192 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule193 = null;

        ChemicalChunkerParser.nnstate_return nnstate194 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode195 = null;

        ChemicalChunkerParser.nn_return nn196 = null;

        ChemicalChunkerParser.nns_return nns197 = null;

        ChemicalChunkerParser.nnp_return nnp198 = null;

        ChemicalChunkerParser.nnadd_return nnadd199 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase200 = null;

        ChemicalChunkerParser.nnexample_return nnexample201 = null;

        ChemicalChunkerParser.range_return range202 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts203 = null;

        ChemicalChunkerParser.nntime_return nntime204 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere205 = null;

        ChemicalChunkerParser.tmunicode_return tmunicode206 = null;

        ChemicalChunkerParser.quantity_return quantity207 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity208 = null;

        ChemicalChunkerParser.nntemp_return nntemp209 = null;

        ChemicalChunkerParser.nnph_return nnph210 = null;

        ChemicalChunkerParser.nnflash_return nnflash211 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral212 = null;

        ChemicalChunkerParser.nnamount_return nnamount213 = null;

        ChemicalChunkerParser.nneq_return nneq214 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure215 = null;

        ChemicalChunkerParser.nncolumn_return nncolumn216 = null;

        ChemicalChunkerParser.nnchromatography_return nnchromatography217 = null;

        ChemicalChunkerParser.nnvacuum_return nnvacuum218 = null;

        ChemicalChunkerParser.nncycle_return nncycle219 = null;

        ChemicalChunkerParser.nntimes_return nntimes220 = null;

        ChemicalChunkerParser.nnconcentrate_return nnconcentrate221 = null;

        ChemicalChunkerParser.nnvol_return nnvol222 = null;

        ChemicalChunkerParser.nnpurify_return nnpurify223 = null;

        ChemicalChunkerParser.nnsynthesize_return nnsynthesize224 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture225 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference226 = null;

        ChemicalChunkerParser.nndry_return nndry227 = null;

        ChemicalChunkerParser.numeric_return numeric228 = null;

        ChemicalChunkerParser.nnextract_return nnextract229 = null;

        ChemicalChunkerParser.nnfilter_return nnfilter230 = null;

        ChemicalChunkerParser.nnprecipitate_return nnprecipitate231 = null;

        ChemicalChunkerParser.nnremove_return nnremove232 = null;

        ChemicalChunkerParser.nnyield_return nnyield233 = null;

        ChemicalChunkerParser.fw_return fw234 = null;

        ChemicalChunkerParser.sym_return sym235 = null;

        ChemicalChunkerParser.clause_return clause236 = null;

        ChemicalChunkerParser.ls_return ls237 = null;

        ChemicalChunkerParser.nnps_return nnps238 = null;

        ChemicalChunkerParser.pos_return pos239 = null;

        ChemicalChunkerParser.oscarase_return oscarase240 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:15: ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase )
            int alt46=55;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:18: prp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_in_nounStructure843_static.FOLLOW_prp_in_nounStructure843);
                    prp186=prp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp186.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:22: prp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_prp_poss_in_nounStructure845_static.FOLLOW_prp_poss_in_nounStructure845);
                    prp_poss187=prp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prp_poss187.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:31: citation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citation_in_nounStructure847_static.FOLLOW_citation_in_nounStructure847);
                    citation188=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation188.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:40: cycles
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cycles_in_nounStructure849_static.FOLLOW_cycles_in_nounStructure849);
                    cycles189=cycles();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cycles189.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:47: molecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molecule_in_nounStructure851_static.FOLLOW_molecule_in_nounStructure851);
                    molecule190=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule190.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:56: apparatus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_apparatus_in_nounStructure853_static.FOLLOW_apparatus_in_nounStructure853);
                    apparatus191=apparatus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus191.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:66: mixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mixture_in_nounStructure855_static.FOLLOW_mixture_in_nounStructure855);
                    mixture192=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture192.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:74: unnamedmolecule
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unnamedmolecule_in_nounStructure857_static.FOLLOW_unnamedmolecule_in_nounStructure857);
                    unnamedmolecule193=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule193.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:90: nnstate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnstate_in_nounStructure859_static.FOLLOW_nnstate_in_nounStructure859);
                    nnstate194=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate194.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:98: procedureNode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedureNode_in_nounStructure861_static.FOLLOW_procedureNode_in_nounStructure861);
                    procedureNode195=procedureNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode195.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:112: nn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nn_in_nounStructure863_static.FOLLOW_nn_in_nounStructure863);
                    nn196=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn196.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:115: nns
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nns_in_nounStructure865_static.FOLLOW_nns_in_nounStructure865);
                    nns197=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns197.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:119: nnp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnp_in_nounStructure867_static.FOLLOW_nnp_in_nounStructure867);
                    nnp198=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp198.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:123: nnadd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnadd_in_nounStructure869_static.FOLLOW_nnadd_in_nounStructure869);
                    nnadd199=nnadd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd199.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:129: preparationphrase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_preparationphrase_in_nounStructure871_static.FOLLOW_preparationphrase_in_nounStructure871);
                    preparationphrase200=preparationphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase200.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:147: nnexample
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnexample_in_nounStructure873_static.FOLLOW_nnexample_in_nounStructure873);
                    nnexample201=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample201.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:157: range
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_range_in_nounStructure875_static.FOLLOW_range_in_nounStructure875);
                    range202=range();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, range202.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:163: oscaronts
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscaronts_in_nounStructure877_static.FOLLOW_oscaronts_in_nounStructure877);
                    oscaronts203=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts203.getTree());

                    }
                    break;
                case 19 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:173: nntime
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntime_in_nounStructure879_static.FOLLOW_nntime_in_nounStructure879);
                    nntime204=nntime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime204.getTree());

                    }
                    break;
                case 20 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:180: nnatmosphere
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnatmosphere_in_nounStructure881_static.FOLLOW_nnatmosphere_in_nounStructure881);
                    nnatmosphere205=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere205.getTree());

                    }
                    break;
                case 21 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:193: tmunicode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_tmunicode_in_nounStructure883_static.FOLLOW_tmunicode_in_nounStructure883);
                    tmunicode206=tmunicode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tmunicode206.getTree());

                    }
                    break;
                case 22 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:203: quantity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quantity_in_nounStructure885_static.FOLLOW_quantity_in_nounStructure885);
                    quantity207=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity207.getTree());

                    }
                    break;
                case 23 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:212: nnchementity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchementity_in_nounStructure887_static.FOLLOW_nnchementity_in_nounStructure887);
                    nnchementity208=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity208.getTree());

                    }
                    break;
                case 24 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:225: nntemp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntemp_in_nounStructure889_static.FOLLOW_nntemp_in_nounStructure889);
                    nntemp209=nntemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp209.getTree());

                    }
                    break;
                case 25 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:232: nnph
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnph_in_nounStructure891_static.FOLLOW_nnph_in_nounStructure891);
                    nnph210=nnph();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnph210.getTree());

                    }
                    break;
                case 26 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:237: nnflash
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnflash_in_nounStructure893_static.FOLLOW_nnflash_in_nounStructure893);
                    nnflash211=nnflash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnflash211.getTree());

                    }
                    break;
                case 27 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:245: nngeneral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nngeneral_in_nounStructure895_static.FOLLOW_nngeneral_in_nounStructure895);
                    nngeneral212=nngeneral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral212.getTree());

                    }
                    break;
                case 28 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:255: nnamount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnamount_in_nounStructure897_static.FOLLOW_nnamount_in_nounStructure897);
                    nnamount213=nnamount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnamount213.getTree());

                    }
                    break;
                case 29 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:264: nneq
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nneq_in_nounStructure899_static.FOLLOW_nneq_in_nounStructure899);
                    nneq214=nneq();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nneq214.getTree());

                    }
                    break;
                case 30 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:269: nnpressure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpressure_in_nounStructure901_static.FOLLOW_nnpressure_in_nounStructure901);
                    nnpressure215=nnpressure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure215.getTree());

                    }
                    break;
                case 31 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:280: nncolumn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncolumn_in_nounStructure903_static.FOLLOW_nncolumn_in_nounStructure903);
                    nncolumn216=nncolumn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncolumn216.getTree());

                    }
                    break;
                case 32 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:289: nnchromatography
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnchromatography_in_nounStructure905_static.FOLLOW_nnchromatography_in_nounStructure905);
                    nnchromatography217=nnchromatography();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchromatography217.getTree());

                    }
                    break;
                case 33 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:306: nnvacuum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvacuum_in_nounStructure907_static.FOLLOW_nnvacuum_in_nounStructure907);
                    nnvacuum218=nnvacuum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvacuum218.getTree());

                    }
                    break;
                case 34 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:315: nncycle
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nncycle_in_nounStructure909_static.FOLLOW_nncycle_in_nounStructure909);
                    nncycle219=nncycle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle219.getTree());

                    }
                    break;
                case 35 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:323: nntimes
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nntimes_in_nounStructure911_static.FOLLOW_nntimes_in_nounStructure911);
                    nntimes220=nntimes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntimes220.getTree());

                    }
                    break;
                case 36 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:331: nnconcentrate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnconcentrate_in_nounStructure913_static.FOLLOW_nnconcentrate_in_nounStructure913);
                    nnconcentrate221=nnconcentrate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnconcentrate221.getTree());

                    }
                    break;
                case 37 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:345: nnvol
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnvol_in_nounStructure915_static.FOLLOW_nnvol_in_nounStructure915);
                    nnvol222=nnvol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnvol222.getTree());

                    }
                    break;
                case 38 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:351: nnpurify
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnpurify_in_nounStructure917_static.FOLLOW_nnpurify_in_nounStructure917);
                    nnpurify223=nnpurify();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpurify223.getTree());

                    }
                    break;
                case 39 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:360: nnsynthesize
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnsynthesize_in_nounStructure919_static.FOLLOW_nnsynthesize_in_nounStructure919);
                    nnsynthesize224=nnsynthesize();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnsynthesize224.getTree());

                    }
                    break;
                case 40 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:373: nnmixture
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnmixture_in_nounStructure921_static.FOLLOW_nnmixture_in_nounStructure921);
                    nnmixture225=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture225.getTree());

                    }
                    break;
                case 41 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:383: squareBracketedReference
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_squareBracketedReference_in_nounStructure923_static.FOLLOW_squareBracketedReference_in_nounStructure923);
                    squareBracketedReference226=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, squareBracketedReference226.getTree());

                    }
                    break;
                case 42 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:408: nndry
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nndry_in_nounStructure925_static.FOLLOW_nndry_in_nounStructure925);
                    nndry227=nndry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nndry227.getTree());

                    }
                    break;
                case 43 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:414: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_nounStructure927_static.FOLLOW_numeric_in_nounStructure927);
                    numeric228=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric228.getTree());

                    }
                    break;
                case 44 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:422: nnextract
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnextract_in_nounStructure929_static.FOLLOW_nnextract_in_nounStructure929);
                    nnextract229=nnextract();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnextract229.getTree());

                    }
                    break;
                case 45 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:432: nnfilter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnfilter_in_nounStructure931_static.FOLLOW_nnfilter_in_nounStructure931);
                    nnfilter230=nnfilter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnfilter230.getTree());

                    }
                    break;
                case 46 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:441: nnprecipitate
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnprecipitate_in_nounStructure933_static.FOLLOW_nnprecipitate_in_nounStructure933);
                    nnprecipitate231=nnprecipitate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnprecipitate231.getTree());

                    }
                    break;
                case 47 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:455: nnremove
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnremove_in_nounStructure935_static.FOLLOW_nnremove_in_nounStructure935);
                    nnremove232=nnremove();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnremove232.getTree());

                    }
                    break;
                case 48 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:464: nnyield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnyield_in_nounStructure937_static.FOLLOW_nnyield_in_nounStructure937);
                    nnyield233=nnyield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield233.getTree());

                    }
                    break;
                case 49 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:472: fw
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fw_in_nounStructure939_static.FOLLOW_fw_in_nounStructure939);
                    fw234=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw234.getTree());

                    }
                    break;
                case 50 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:475: sym
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sym_in_nounStructure941_static.FOLLOW_sym_in_nounStructure941);
                    sym235=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym235.getTree());

                    }
                    break;
                case 51 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:479: clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_clause_in_nounStructure943_static.FOLLOW_clause_in_nounStructure943);
                    clause236=clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, clause236.getTree());

                    }
                    break;
                case 52 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:486: ls
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ls_in_nounStructure945_static.FOLLOW_ls_in_nounStructure945);
                    ls237=ls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ls237.getTree());

                    }
                    break;
                case 53 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:489: nnps
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nnps_in_nounStructure947_static.FOLLOW_nnps_in_nounStructure947);
                    nnps238=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps238.getTree());

                    }
                    break;
                case 54 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:494: pos
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pos_in_nounStructure949_static.FOLLOW_pos_in_nounStructure949);
                    pos239=pos();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pos239.getTree());

                    }
                    break;
                case 55 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:498: oscarase
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarase_in_nounStructure951_static.FOLLOW_oscarase_in_nounStructure951);
                    oscarase240=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase240.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, nounStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounStructure"

    public static class prepphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:130:1: prepphrase : ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) ;
    public final ChemicalChunkerParser.prepphrase_return prepphrase() throws RecognitionException {
        ChemicalChunkerParser.prepphrase_return retval = new ChemicalChunkerParser.prepphrase_return();
        retval.start = input.LT(1);
        int prepphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.neg_return neg241 = null;

        ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere242 = null;

        ChemicalChunkerParser.prepphraseTime_return prepphraseTime243 = null;

        ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp244 = null;

        ChemicalChunkerParser.prepphraseIN_return prepphraseIN245 = null;

        ChemicalChunkerParser.prepphraseRole_return prepphraseRole246 = null;

        ChemicalChunkerParser.prepphraseOther_return prepphraseOther247 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:2: ( ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:5: ( neg )? ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:5: ( neg )?
            int alt47=2;
            switch ( input.LA(1) ) {
                case 135:
                    {
                    alt47=1;
                    }
                    break;
            }

            switch (alt47) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                    {
                    pushFollow(FOLLOW_neg_in_prepphrase963_static.FOLLOW_neg_in_prepphrase963);
                    neg241=neg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, neg241.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )
            int alt48=6;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:11: prepphraseAtmosphere
                    {
                    pushFollow(FOLLOW_prepphraseAtmosphere_in_prepphrase967_static.FOLLOW_prepphraseAtmosphere_in_prepphrase967);
                    prepphraseAtmosphere242=prepphraseAtmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseAtmosphere242.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:32: prepphraseTime
                    {
                    pushFollow(FOLLOW_prepphraseTime_in_prepphrase969_static.FOLLOW_prepphraseTime_in_prepphrase969);
                    prepphraseTime243=prepphraseTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTime243.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:47: prepphraseTemp
                    {
                    pushFollow(FOLLOW_prepphraseTemp_in_prepphrase971_static.FOLLOW_prepphraseTemp_in_prepphrase971);
                    prepphraseTemp244=prepphraseTemp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseTemp244.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:62: prepphraseIN
                    {
                    pushFollow(FOLLOW_prepphraseIN_in_prepphrase973_static.FOLLOW_prepphraseIN_in_prepphrase973);
                    prepphraseIN245=prepphraseIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseIN245.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:75: prepphraseRole
                    {
                    pushFollow(FOLLOW_prepphraseRole_in_prepphrase975_static.FOLLOW_prepphraseRole_in_prepphrase975);
                    prepphraseRole246=prepphraseRole();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseRole246.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:90: prepphraseOther
                    {
                    pushFollow(FOLLOW_prepphraseOther_in_prepphrase977_static.FOLLOW_prepphraseOther_in_prepphrase977);
                    prepphraseOther247=prepphraseOther();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphraseOther247.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, prepphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphrase"

    public static class prepphraseAtmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:133:1: prepphraseAtmosphere : prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) ;
    public final ChemicalChunkerParser.prepphraseAtmosphere_return prepphraseAtmosphere() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphere_return retval = new ChemicalChunkerParser.prepphraseAtmosphere_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphere_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent248 = null;


        RewriteRuleSubtreeStream stream_prepphraseAtmosphereContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseAtmosphereContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:2: ( prepphraseAtmosphereContent -> ^( AtmospherePhrase prepphraseAtmosphereContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:4: prepphraseAtmosphereContent
            {
            pushFollow(FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere989_static.FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere989);
            prepphraseAtmosphereContent248=prepphraseAtmosphereContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseAtmosphereContent.add(prepphraseAtmosphereContent248.getTree());


            // AST REWRITE
            // elements: prepphraseAtmosphereContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 134:32: -> ^( AtmospherePhrase prepphraseAtmosphereContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:134:36: ^( AtmospherePhrase prepphraseAtmosphereContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AtmospherePhrase, "AtmospherePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseAtmosphereContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, prepphraseAtmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphere"

    public static class prepphraseAtmosphereContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAtmosphereContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:136:1: prepphraseAtmosphereContent : inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? ;
    public final ChemicalChunkerParser.prepphraseAtmosphereContent_return prepphraseAtmosphereContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAtmosphereContent_return retval = new ChemicalChunkerParser.prepphraseAtmosphereContent_return();
        retval.start = input.LT(1);
        int prepphraseAtmosphereContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inunder_return inunder249 = null;

        ChemicalChunkerParser.dt_return dt250 = null;

        ChemicalChunkerParser.advAdj_return advAdj251 = null;

        ChemicalChunkerParser.molecule_return molecule252 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere253 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:2: ( inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:3: inunder ( dt )? ( advAdj )* molecule ( nnatmosphere )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inunder_in_prepphraseAtmosphereContent1009_static.FOLLOW_inunder_in_prepphraseAtmosphereContent1009);
            inunder249=inunder();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder249.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:12: ( dt )?
            int alt49=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt49=1;
                    }
                    break;
            }

            switch (alt49) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseAtmosphereContent1012_static.FOLLOW_dt_in_prepphraseAtmosphereContent1012);
                    dt250=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt250.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:16: ( advAdj )*
            loop50:
            do {
                int alt50=2;
                alt50 = dfa50.predict(input);
                switch (alt50) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseAtmosphereContent1015_static.FOLLOW_advAdj_in_prepphraseAtmosphereContent1015);
            	    advAdj251=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj251.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);

            pushFollow(FOLLOW_molecule_in_prepphraseAtmosphereContent1018_static.FOLLOW_molecule_in_prepphraseAtmosphereContent1018);
            molecule252=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule252.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:33: ( nnatmosphere )?
            int alt51=2;
            switch ( input.LA(1) ) {
                case 68:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA51_3 = input.LA(3);

                            if ( (synpred227_ChemicalChunker()) ) {
                                alt51=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt51) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1020_static.FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1020);
                    nnatmosphere253=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere253.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, prepphraseAtmosphereContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAtmosphereContent"

    public static class prepphraseTime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:139:1: prepphraseTime : prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) ;
    public final ChemicalChunkerParser.prepphraseTime_return prepphraseTime() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTime_return retval = new ChemicalChunkerParser.prepphraseTime_return();
        retval.start = input.LT(1);
        int prepphraseTime_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure254 = null;


        RewriteRuleSubtreeStream stream_prepPhraseTimeStructure=new RewriteRuleSubtreeStream(adaptor,"rule prepPhraseTimeStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:2: ( prepPhraseTimeStructure -> ^( TimePhrase prepPhraseTimeStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:3: prepPhraseTimeStructure
            {
            pushFollow(FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1030_static.FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1030);
            prepPhraseTimeStructure254=prepPhraseTimeStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepPhraseTimeStructure.add(prepPhraseTimeStructure254.getTree());


            // AST REWRITE
            // elements: prepPhraseTimeStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 140:27: -> ^( TimePhrase prepPhraseTimeStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:140:31: ^( TimePhrase prepPhraseTimeStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TimePhrase, "TimePhrase"), root_1);

                adaptor.addChild(root_1, stream_prepPhraseTimeStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, prepphraseTime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTime"

    public static class prepPhraseTimeStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepPhraseTimeStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:142:1: prepPhraseTimeStructure : ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ ;
    public final ChemicalChunkerParser.prepPhraseTimeStructure_return prepPhraseTimeStructure() throws RecognitionException {
        ChemicalChunkerParser.prepPhraseTimeStructure_return retval = new ChemicalChunkerParser.prepPhraseTimeStructure_return();
        retval.start = input.LT(1);
        int prepPhraseTimeStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj255 = null;

        ChemicalChunkerParser.inAll_return inAll256 = null;

        ChemicalChunkerParser.dt_return dt257 = null;

        ChemicalChunkerParser.advAdj_return advAdj258 = null;

        ChemicalChunkerParser.cd_return cd259 = null;

        ChemicalChunkerParser.nntime_return nntime260 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:2: ( ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:3: ( advAdj )* ( inAll )? ( dt )? ( advAdj )* ( cd )? ( nntime )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:3: ( advAdj )*
            loop52:
            do {
                int alt52=2;
                alt52 = dfa52.predict(input);
                switch (alt52) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1048_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1048);
            	    advAdj255=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj255.getTree());

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:11: ( inAll )?
            int alt53=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt53=1;
                    }
                    break;
            }

            switch (alt53) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepPhraseTimeStructure1051_static.FOLLOW_inAll_in_prepPhraseTimeStructure1051);
                    inAll256=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll256.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:19: ( dt )?
            int alt54=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt54=1;
                    }
                    break;
            }

            switch (alt54) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepPhraseTimeStructure1055_static.FOLLOW_dt_in_prepPhraseTimeStructure1055);
                    dt257=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt257.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:23: ( advAdj )*
            loop55:
            do {
                int alt55=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt55=1;
                    }
                    break;

                }

                switch (alt55) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepPhraseTimeStructure1058_static.FOLLOW_advAdj_in_prepPhraseTimeStructure1058);
            	    advAdj258=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj258.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:31: ( cd )?
            int alt56=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt56=1;
                    }
                    break;
            }

            switch (alt56) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepPhraseTimeStructure1061_static.FOLLOW_cd_in_prepPhraseTimeStructure1061);
                    cd259=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd259.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:35: ( nntime )+
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                switch ( input.LA(1) ) {
                case 64:
                    {
                    int LA57_2 = input.LA(2);

                    if ( (synpred233_ChemicalChunker()) ) {
                        alt57=1;
                    }


                    }
                    break;

                }

                switch (alt57) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntime
            	    {
            	    pushFollow(FOLLOW_nntime_in_prepPhraseTimeStructure1064_static.FOLLOW_nntime_in_prepPhraseTimeStructure1064);
            	    nntime260=nntime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntime260.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt57 >= 1 ) break loop57;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, prepPhraseTimeStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepPhraseTimeStructure"

    public static class prepphraseTemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:1: prepphraseTemp : prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) ;
    public final ChemicalChunkerParser.prepphraseTemp_return prepphraseTemp() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTemp_return retval = new ChemicalChunkerParser.prepphraseTemp_return();
        retval.start = input.LT(1);
        int prepphraseTemp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent261 = null;


        RewriteRuleSubtreeStream stream_prepphraseTempContent=new RewriteRuleSubtreeStream(adaptor,"rule prepphraseTempContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:15: ( prepphraseTempContent -> ^( TempPhrase prepphraseTempContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:18: prepphraseTempContent
            {
            pushFollow(FOLLOW_prepphraseTempContent_in_prepphraseTemp1074_static.FOLLOW_prepphraseTempContent_in_prepphraseTemp1074);
            prepphraseTempContent261=prepphraseTempContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_prepphraseTempContent.add(prepphraseTempContent261.getTree());


            // AST REWRITE
            // elements: prepphraseTempContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 145:40: -> ^( TempPhrase prepphraseTempContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:145:44: ^( TempPhrase prepphraseTempContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TempPhrase, "TempPhrase"), root_1);

                adaptor.addChild(root_1, stream_prepphraseTempContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, prepphraseTemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTemp"

    public static class prepphraseTempContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseTempContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:147:1: prepphraseTempContent : ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ ;
    public final ChemicalChunkerParser.prepphraseTempContent_return prepphraseTempContent() throws RecognitionException {
        ChemicalChunkerParser.prepphraseTempContent_return retval = new ChemicalChunkerParser.prepphraseTempContent_return();
        retval.start = input.LT(1);
        int prepphraseTempContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj262 = null;

        ChemicalChunkerParser.inAll_return inAll263 = null;

        ChemicalChunkerParser.dt_return dt264 = null;

        ChemicalChunkerParser.advAdj_return advAdj265 = null;

        ChemicalChunkerParser.cd_return cd266 = null;

        ChemicalChunkerParser.nntemp_return nntemp267 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:2: ( ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:5: ( advAdj )? ( inAll )? ( dt )? ( advAdj )? ( cd )? ( nntemp )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:5: ( advAdj )?
            int alt58=2;
            alt58 = dfa58.predict(input);
            switch (alt58) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1095_static.FOLLOW_advAdj_in_prepphraseTempContent1095);
                    advAdj262=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj262.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:13: ( inAll )?
            int alt59=2;
            switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt59=1;
                    }
                    break;
            }

            switch (alt59) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_prepphraseTempContent1098_static.FOLLOW_inAll_in_prepphraseTempContent1098);
                    inAll263=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll263.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:20: ( dt )?
            int alt60=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt60=1;
                    }
                    break;
            }

            switch (alt60) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseTempContent1101_static.FOLLOW_dt_in_prepphraseTempContent1101);
                    dt264=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt264.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:24: ( advAdj )?
            int alt61=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt61=1;
                    }
                    break;
            }

            switch (alt61) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseTempContent1104_static.FOLLOW_advAdj_in_prepphraseTempContent1104);
                    advAdj265=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, advAdj265.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:32: ( cd )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt62=1;
                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_prepphraseTempContent1107_static.FOLLOW_cd_in_prepphraseTempContent1107);
                    cd266=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd266.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:36: ( nntemp )+
            int cnt63=0;
            loop63:
            do {
                int alt63=2;
                switch ( input.LA(1) ) {
                case 72:
                    {
                    int LA63_2 = input.LA(2);

                    if ( (synpred239_ChemicalChunker()) ) {
                        alt63=1;
                    }


                    }
                    break;

                }

                switch (alt63) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nntemp
            	    {
            	    pushFollow(FOLLOW_nntemp_in_prepphraseTempContent1110_static.FOLLOW_nntemp_in_prepphraseTempContent1110);
            	    nntemp267=nntemp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nntemp267.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt63 >= 1 ) break loop63;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(63, input);
                        throw eee;
                }
                cnt63++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, prepphraseTempContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseTempContent"

    public static class prepphraseIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseIN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:150:1: prepphraseIN : inin molecule -> ^( PrepPhrase inin molecule ) ;
    public final ChemicalChunkerParser.prepphraseIN_return prepphraseIN() throws RecognitionException {
        ChemicalChunkerParser.prepphraseIN_return retval = new ChemicalChunkerParser.prepphraseIN_return();
        retval.start = input.LT(1);
        int prepphraseIN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inin_return inin268 = null;

        ChemicalChunkerParser.molecule_return molecule269 = null;


        RewriteRuleSubtreeStream stream_inin=new RewriteRuleSubtreeStream(adaptor,"rule inin");
        RewriteRuleSubtreeStream stream_molecule=new RewriteRuleSubtreeStream(adaptor,"rule molecule");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:2: ( inin molecule -> ^( PrepPhrase inin molecule ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:3: inin molecule
            {
            pushFollow(FOLLOW_inin_in_prepphraseIN1119_static.FOLLOW_inin_in_prepphraseIN1119);
            inin268=inin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inin.add(inin268.getTree());
            pushFollow(FOLLOW_molecule_in_prepphraseIN1121_static.FOLLOW_molecule_in_prepphraseIN1121);
            molecule269=molecule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_molecule.add(molecule269.getTree());


            // AST REWRITE
            // elements: inin, molecule
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 151:17: -> ^( PrepPhrase inin molecule )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:151:21: ^( PrepPhrase inin molecule )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inin.nextTree());
                adaptor.addChild(root_1, stream_molecule.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, prepphraseIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseIN"

    public static class prepphraseRole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseRole"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:153:1: prepphraseRole : inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) ;
    public final ChemicalChunkerParser.prepphraseRole_return prepphraseRole() throws RecognitionException {
        ChemicalChunkerParser.prepphraseRole_return retval = new ChemicalChunkerParser.prepphraseRole_return();
        retval.start = input.LT(1);
        int prepphraseRole_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas270 = null;

        ChemicalChunkerParser.dt_return dt271 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity272 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_inas=new RewriteRuleSubtreeStream(adaptor,"rule inas");
        RewriteRuleSubtreeStream stream_nnchementity=new RewriteRuleSubtreeStream(adaptor,"rule nnchementity");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:2: ( inas ( dt )? nnchementity -> ^( RolePrepPhrase inas ( dt )? nnchementity ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:3: inas ( dt )? nnchementity
            {
            pushFollow(FOLLOW_inas_in_prepphraseRole1142_static.FOLLOW_inas_in_prepphraseRole1142);
            inas270=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inas.add(inas270.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:8: ( dt )?
            int alt64=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt64=1;
                    }
                    break;
            }

            switch (alt64) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_prepphraseRole1144_static.FOLLOW_dt_in_prepphraseRole1144);
                    dt271=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt271.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_prepphraseRole1147_static.FOLLOW_nnchementity_in_prepphraseRole1147);
            nnchementity272=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnchementity.add(nnchementity272.getTree());


            // AST REWRITE
            // elements: nnchementity, dt, inas
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 154:25: -> ^( RolePrepPhrase inas ( dt )? nnchementity )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:28: ^( RolePrepPhrase inas ( dt )? nnchementity )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RolePrepPhrase, "RolePrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inas.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:154:51: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                adaptor.addChild(root_1, stream_nnchementity.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, prepphraseRole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseRole"

    public static class prepphraseOther_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOther"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:156:1: prepphraseOther : ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOther_return prepphraseOther() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOther_return retval = new ChemicalChunkerParser.prepphraseOther_return();
        retval.start = input.LT(1);
        int prepphraseOther_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj273 = null;

        ChemicalChunkerParser.inMost_return inMost274 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase275 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inMost=new RewriteRuleSubtreeStream(adaptor,"rule inMost");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:2: ( ( advAdj )* ( inMost )+ nounphrase -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:4: ( advAdj )* ( inMost )+ nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:4: ( advAdj )*
            loop65:
            do {
                int alt65=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt65=1;
                    }
                    break;

                }

                switch (alt65) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
            	    {
            	    pushFollow(FOLLOW_advAdj_in_prepphraseOther1170_static.FOLLOW_advAdj_in_prepphraseOther1170);
            	    advAdj273=advAdj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_advAdj.add(advAdj273.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:12: ( inMost )+
            int cnt66=0;
            loop66:
            do {
                int alt66=2;
                switch ( input.LA(1) ) {
                case 47:
                case 48:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 60:
                case 61:
                case 62:
                case 150:
                case 169:
                    {
                    alt66=1;
                    }
                    break;

                }

                switch (alt66) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inMost
            	    {
            	    pushFollow(FOLLOW_inMost_in_prepphraseOther1173_static.FOLLOW_inMost_in_prepphraseOther1173);
            	    inMost274=inMost();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_inMost.add(inMost274.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt66 >= 1 ) break loop66;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(66, input);
                        throw eee;
                }
                cnt66++;
            } while (true);

            pushFollow(FOLLOW_nounphrase_in_prepphraseOther1177_static.FOLLOW_nounphrase_in_prepphraseOther1177);
            nounphrase275=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase275.getTree());


            // AST REWRITE
            // elements: nounphrase, advAdj, inMost
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 157:32: -> ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:36: ^( PrepPhrase ( advAdj )* ( inMost )+ nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:157:50: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                if ( !(stream_inMost.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_inMost.hasNext() ) {
                    adaptor.addChild(root_1, stream_inMost.nextTree());

                }
                stream_inMost.reset();
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, prepphraseOther_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOther"

    public static class prepphraseOf_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseOf"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:159:1: prepphraseOf : inof nounphrase -> ^( PrepPhrase inof nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseOf_return prepphraseOf() throws RecognitionException {
        ChemicalChunkerParser.prepphraseOf_return retval = new ChemicalChunkerParser.prepphraseOf_return();
        retval.start = input.LT(1);
        int prepphraseOf_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inof_return inof276 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase277 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inof=new RewriteRuleSubtreeStream(adaptor,"rule inof");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:2: ( inof nounphrase -> ^( PrepPhrase inof nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:4: inof nounphrase
            {
            pushFollow(FOLLOW_inof_in_prepphraseOf1203_static.FOLLOW_inof_in_prepphraseOf1203);
            inof276=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inof.add(inof276.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseOf1206_static.FOLLOW_nounphrase_in_prepphraseOf1206);
            nounphrase277=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase277.getTree());


            // AST REWRITE
            // elements: inof, nounphrase
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 160:20: -> ^( PrepPhrase inof nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:160:24: ^( PrepPhrase inof nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                adaptor.addChild(root_1, stream_inof.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, prepphraseOf_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseOf"

    public static class prepphraseAfter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prepphraseAfter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:162:1: prepphraseAfter : ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) ;
    public final ChemicalChunkerParser.prepphraseAfter_return prepphraseAfter() throws RecognitionException {
        ChemicalChunkerParser.prepphraseAfter_return retval = new ChemicalChunkerParser.prepphraseAfter_return();
        retval.start = input.LT(1);
        int prepphraseAfter_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.advAdj_return advAdj278 = null;

        ChemicalChunkerParser.inafter_return inafter279 = null;

        ChemicalChunkerParser.nounphrase_return nounphrase280 = null;


        RewriteRuleSubtreeStream stream_nounphrase=new RewriteRuleSubtreeStream(adaptor,"rule nounphrase");
        RewriteRuleSubtreeStream stream_inafter=new RewriteRuleSubtreeStream(adaptor,"rule inafter");
        RewriteRuleSubtreeStream stream_advAdj=new RewriteRuleSubtreeStream(adaptor,"rule advAdj");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:2: ( ( advAdj )? inafter nounphrase -> ^( PrepPhrase ( advAdj )* inafter nounphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:5: ( advAdj )? inafter nounphrase
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:5: ( advAdj )?
            int alt67=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                case 164:
                case 165:
                case 166:
                case 167:
                    {
                    alt67=1;
                    }
                    break;
            }

            switch (alt67) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: advAdj
                    {
                    pushFollow(FOLLOW_advAdj_in_prepphraseAfter1228_static.FOLLOW_advAdj_in_prepphraseAfter1228);
                    advAdj278=advAdj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_advAdj.add(advAdj278.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_inafter_in_prepphraseAfter1231_static.FOLLOW_inafter_in_prepphraseAfter1231);
            inafter279=inafter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inafter.add(inafter279.getTree());
            pushFollow(FOLLOW_nounphrase_in_prepphraseAfter1234_static.FOLLOW_nounphrase_in_prepphraseAfter1234);
            nounphrase280=nounphrase();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nounphrase.add(nounphrase280.getTree());


            // AST REWRITE
            // elements: inafter, nounphrase, advAdj
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 163:33: -> ^( PrepPhrase ( advAdj )* inafter nounphrase )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:37: ^( PrepPhrase ( advAdj )* inafter nounphrase )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PrepPhrase, "PrepPhrase"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:163:51: ( advAdj )*
                while ( stream_advAdj.hasNext() ) {
                    adaptor.addChild(root_1, stream_advAdj.nextTree());

                }
                stream_advAdj.reset();
                adaptor.addChild(root_1, stream_inafter.nextTree());
                adaptor.addChild(root_1, stream_nounphrase.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, prepphraseAfter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prepphraseAfter"

    public static class preparationphrase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preparationphrase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:165:1: preparationphrase : vbsynthesize inas ( nnexample cd | prepphrase ) ;
    public final ChemicalChunkerParser.preparationphrase_return preparationphrase() throws RecognitionException {
        ChemicalChunkerParser.preparationphrase_return retval = new ChemicalChunkerParser.preparationphrase_return();
        retval.start = input.LT(1);
        int preparationphrase_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.vbsynthesize_return vbsynthesize281 = null;

        ChemicalChunkerParser.inas_return inas282 = null;

        ChemicalChunkerParser.nnexample_return nnexample283 = null;

        ChemicalChunkerParser.cd_return cd284 = null;

        ChemicalChunkerParser.prepphrase_return prepphrase285 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:2: ( vbsynthesize inas ( nnexample cd | prepphrase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:4: vbsynthesize inas ( nnexample cd | prepphrase )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_vbsynthesize_in_preparationphrase1259_static.FOLLOW_vbsynthesize_in_preparationphrase1259);
            vbsynthesize281=vbsynthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vbsynthesize281.getTree());
            pushFollow(FOLLOW_inas_in_preparationphrase1261_static.FOLLOW_inas_in_preparationphrase1261);
            inas282=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas282.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:22: ( nnexample cd | prepphrase )
            int alt68=2;
            switch ( input.LA(1) ) {
            case 83:
                {
                alt68=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 72:
            case 135:
            case 146:
            case 147:
            case 150:
            case 151:
            case 152:
            case 153:
            case 164:
            case 165:
            case 166:
            case 167:
            case 169:
                {
                alt68=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }

            switch (alt68) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:23: nnexample cd
                    {
                    pushFollow(FOLLOW_nnexample_in_preparationphrase1264_static.FOLLOW_nnexample_in_preparationphrase1264);
                    nnexample283=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample283.getTree());
                    pushFollow(FOLLOW_cd_in_preparationphrase1266_static.FOLLOW_cd_in_preparationphrase1266);
                    cd284=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd284.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:166:37: prepphrase
                    {
                    pushFollow(FOLLOW_prepphrase_in_preparationphrase1269_static.FOLLOW_prepphrase_in_preparationphrase1269);
                    prepphrase285=prepphrase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prepphrase285.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, preparationphrase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preparationphrase"

    public static class multiApparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiApparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:168:1: multiApparatus : apparatus ( ( conjunction )* apparatus )* ;
    public final ChemicalChunkerParser.multiApparatus_return multiApparatus() throws RecognitionException {
        ChemicalChunkerParser.multiApparatus_return retval = new ChemicalChunkerParser.multiApparatus_return();
        retval.start = input.LT(1);
        int multiApparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.apparatus_return apparatus286 = null;

        ChemicalChunkerParser.conjunction_return conjunction287 = null;

        ChemicalChunkerParser.apparatus_return apparatus288 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:2: ( apparatus ( ( conjunction )* apparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:4: apparatus ( ( conjunction )* apparatus )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_apparatus_in_multiApparatus1280_static.FOLLOW_apparatus_in_multiApparatus1280);
            apparatus286=apparatus();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus286.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:14: ( ( conjunction )* apparatus )*
            loop70:
            do {
                int alt70=2;
                alt70 = dfa70.predict(input);
                switch (alt70) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:15: ( conjunction )* apparatus
            	    {
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:15: ( conjunction )*
            	    loop69:
            	    do {
            	        int alt69=2;
            	        alt69 = dfa69.predict(input);
            	        switch (alt69) {
            	    	case 1 :
            	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
            	    	    {
            	    	    pushFollow(FOLLOW_conjunction_in_multiApparatus1283_static.FOLLOW_conjunction_in_multiApparatus1283);
            	    	    conjunction287=conjunction();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction287.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop69;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_apparatus_in_multiApparatus1286_static.FOLLOW_apparatus_in_multiApparatus1286);
            	    apparatus288=apparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apparatus288.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, multiApparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiApparatus"

    public static class apparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:170:1: apparatus : ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) ;
    public final ChemicalChunkerParser.apparatus_return apparatus() throws RecognitionException {
        ChemicalChunkerParser.apparatus_return retval = new ChemicalChunkerParser.apparatus_return();
        retval.start = input.LT(1);
        int apparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dt_return dt289 = null;

        ChemicalChunkerParser.preapparatus_return preapparatus290 = null;

        ChemicalChunkerParser.nnApp_return nnApp291 = null;


        RewriteRuleSubtreeStream stream_dt=new RewriteRuleSubtreeStream(adaptor,"rule dt");
        RewriteRuleSubtreeStream stream_nnApp=new RewriteRuleSubtreeStream(adaptor,"rule nnApp");
        RewriteRuleSubtreeStream stream_preapparatus=new RewriteRuleSubtreeStream(adaptor,"rule preapparatus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:2: ( ( dt )? ( preapparatus )* ( nnApp )+ -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:4: ( dt )? ( preapparatus )* ( nnApp )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:4: ( dt )?
            int alt71=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt71=1;
                    }
                    break;
            }

            switch (alt71) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_apparatus1297_static.FOLLOW_dt_in_apparatus1297);
                    dt289=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dt.add(dt289.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:8: ( preapparatus )*
            loop72:
            do {
                int alt72=2;
                switch ( input.LA(1) ) {
                case 38:
                case 39:
                case 40:
                case 45:
                case 63:
                case 71:
                case 73:
                case 77:
                case 84:
                case 89:
                case 130:
                case 133:
                case 143:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt72=1;
                    }
                    break;

                }

                switch (alt72) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: preapparatus
            	    {
            	    pushFollow(FOLLOW_preapparatus_in_apparatus1300_static.FOLLOW_preapparatus_in_apparatus1300);
            	    preapparatus290=preapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_preapparatus.add(preapparatus290.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:22: ( nnApp )+
            int cnt73=0;
            loop73:
            do {
                int alt73=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA73_2 = input.LA(2);

                    if ( (synpred249_ChemicalChunker()) ) {
                        alt73=1;
                    }


                    }
                    break;

                }

                switch (alt73) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnApp
            	    {
            	    pushFollow(FOLLOW_nnApp_in_apparatus1303_static.FOLLOW_nnApp_in_apparatus1303);
            	    nnApp291=nnApp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_nnApp.add(nnApp291.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt73 >= 1 ) break loop73;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(73, input);
                        throw eee;
                }
                cnt73++;
            } while (true);



            // AST REWRITE
            // elements: preapparatus, dt, nnApp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 171:28: -> ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:31: ^( APPARATUS ( dt )? ( preapparatus )* ( nnApp )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(APPARATUS, "APPARATUS"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:45: ( dt )?
                if ( stream_dt.hasNext() ) {
                    adaptor.addChild(root_1, stream_dt.nextTree());

                }
                stream_dt.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:49: ( preapparatus )*
                while ( stream_preapparatus.hasNext() ) {
                    adaptor.addChild(root_1, stream_preapparatus.nextTree());

                }
                stream_preapparatus.reset();
                if ( !(stream_nnApp.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_nnApp.hasNext() ) {
                    adaptor.addChild(root_1, stream_nnApp.nextTree());

                }
                stream_nnApp.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, apparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apparatus"

    public static class nnApp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnApp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:173:1: nnApp : ( nnapparatus )+ ( dash nnapparatus )* ;
    public final ChemicalChunkerParser.nnApp_return nnApp() throws RecognitionException {
        ChemicalChunkerParser.nnApp_return retval = new ChemicalChunkerParser.nnApp_return();
        retval.start = input.LT(1);
        int nnApp_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus292 = null;

        ChemicalChunkerParser.dash_return dash293 = null;

        ChemicalChunkerParser.nnapparatus_return nnapparatus294 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:2: ( ( nnapparatus )+ ( dash nnapparatus )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:4: ( nnapparatus )+ ( dash nnapparatus )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:4: ( nnapparatus )+
            int cnt74=0;
            loop74:
            do {
                int alt74=2;
                switch ( input.LA(1) ) {
                case 100:
                    {
                    int LA74_2 = input.LA(2);

                    if ( (synpred250_ChemicalChunker()) ) {
                        alt74=1;
                    }


                    }
                    break;

                }

                switch (alt74) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nnapparatus
            	    {
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1330_static.FOLLOW_nnapparatus_in_nnApp1330);
            	    nnapparatus292=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus292.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt74 >= 1 ) break loop74;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(74, input);
                        throw eee;
                }
                cnt74++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:17: ( dash nnapparatus )*
            loop75:
            do {
                int alt75=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 100:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA75_5 = input.LA(5);

                                if ( (synpred251_ChemicalChunker()) ) {
                                    alt75=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt75) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:18: dash nnapparatus
            	    {
            	    pushFollow(FOLLOW_dash_in_nnApp1334_static.FOLLOW_dash_in_nnApp1334);
            	    dash293=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash293.getTree());
            	    pushFollow(FOLLOW_nnapparatus_in_nnApp1336_static.FOLLOW_nnapparatus_in_nnApp1336);
            	    nnapparatus294=nnapparatus();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnapparatus294.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, nnApp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnApp"

    public static class preapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "preapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:175:1: preapparatus : ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ ;
    public final ChemicalChunkerParser.preapparatus_return preapparatus() throws RecognitionException {
        ChemicalChunkerParser.preapparatus_return retval = new ChemicalChunkerParser.preapparatus_return();
        retval.start = input.LT(1);
        int preapparatus_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity295 = null;

        ChemicalChunkerParser.adj_return adj296 = null;

        ChemicalChunkerParser.nnpressure_return nnpressure297 = null;

        ChemicalChunkerParser.nnadd_return nnadd298 = null;

        ChemicalChunkerParser.molecule_return molecule299 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity300 = null;

        ChemicalChunkerParser.nnstate_return nnstate301 = null;

        ChemicalChunkerParser.nn_return nn302 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:2: ( ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+
            int cnt76=0;
            loop76:
            do {
                int alt76=9;
                alt76 = dfa76.predict(input);
                switch (alt76) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:8: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_preapparatus1350_static.FOLLOW_quantity_in_preapparatus1350);
            	    quantity295=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity295.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:17: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_preapparatus1352_static.FOLLOW_adj_in_preapparatus1352);
            	    adj296=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj296.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:21: nnpressure
            	    {
            	    pushFollow(FOLLOW_nnpressure_in_preapparatus1354_static.FOLLOW_nnpressure_in_preapparatus1354);
            	    nnpressure297=nnpressure();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpressure297.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:32: nnadd
            	    {
            	    pushFollow(FOLLOW_nnadd_in_preapparatus1356_static.FOLLOW_nnadd_in_preapparatus1356);
            	    nnadd298=nnadd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnadd298.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:38: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_preapparatus1358_static.FOLLOW_molecule_in_preapparatus1358);
            	    molecule299=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule299.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:47: nnchementity
            	    {
            	    pushFollow(FOLLOW_nnchementity_in_preapparatus1360_static.FOLLOW_nnchementity_in_preapparatus1360);
            	    nnchementity300=nnchementity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity300.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:60: nnstate
            	    {
            	    pushFollow(FOLLOW_nnstate_in_preapparatus1362_static.FOLLOW_nnstate_in_preapparatus1362);
            	    nnstate301=nnstate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate301.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:68: nn
            	    {
            	    pushFollow(FOLLOW_nn_in_preapparatus1364_static.FOLLOW_nn_in_preapparatus1364);
            	    nn302=nn();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn302.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt76 >= 1 ) break loop76;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(76, input);
                        throw eee;
                }
                cnt76++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, preapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "preapparatus"

    public static class oscaronts_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaronts"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:178:1: oscaronts : ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) ;
    public final ChemicalChunkerParser.oscaronts_return oscaronts() throws RecognitionException {
        ChemicalChunkerParser.oscaronts_return retval = new ChemicalChunkerParser.oscaronts_return();
        retval.start = input.LT(1);
        int oscaronts_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscaront_return oscaront303 = null;


        RewriteRuleSubtreeStream stream_oscaront=new RewriteRuleSubtreeStream(adaptor,"rule oscaront");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:2: ( ( oscaront )+ -> ^( OSCARONT ( oscaront )+ ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:4: ( oscaront )+
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:4: ( oscaront )+
            int cnt77=0;
            loop77:
            do {
                int alt77=2;
                switch ( input.LA(1) ) {
                case 42:
                    {
                    int LA77_2 = input.LA(2);

                    if ( (synpred260_ChemicalChunker()) ) {
                        alt77=1;
                    }


                    }
                    break;

                }

                switch (alt77) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscaront
            	    {
            	    pushFollow(FOLLOW_oscaront_in_oscaronts1376_static.FOLLOW_oscaront_in_oscaronts1376);
            	    oscaront303=oscaront();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_oscaront.add(oscaront303.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt77 >= 1 ) break loop77;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(77, input);
                        throw eee;
                }
                cnt77++;
            } while (true);



            // AST REWRITE
            // elements: oscaront
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 179:14: -> ^( OSCARONT ( oscaront )+ )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:17: ^( OSCARONT ( oscaront )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARONT, "OSCARONT"), root_1);

                if ( !(stream_oscaront.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_oscaront.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscaront.nextTree());

                }
                stream_oscaront.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, oscaronts_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaronts"

    public static class oscarCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:1: oscarCompound : ( adj )* oscarCompoundStructure ( adj )? ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )? ( quantity )* ( fromProcedure )? ;
    public final ChemicalChunkerParser.oscarCompound_return oscarCompound() throws RecognitionException {
        ChemicalChunkerParser.oscarCompound_return retval = new ChemicalChunkerParser.oscarCompound_return();
        retval.start = input.LT(1);
        int oscarCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj304 = null;

        ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure305 = null;

        ChemicalChunkerParser.adj_return adj306 = null;

        ChemicalChunkerParser.quantity_return quantity307 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity308 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference309 = null;

        ChemicalChunkerParser.quantity_return quantity310 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure311 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:15: ( ( adj )* oscarCompoundStructure ( adj )? ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )? ( quantity )* ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:18: ( adj )* oscarCompoundStructure ( adj )? ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )? ( quantity )* ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:18: ( adj )*
            loop78:
            do {
                int alt78=2;
                switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 151:
                case 152:
                case 153:
                    {
                    alt78=1;
                    }
                    break;

                }

                switch (alt78) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_oscarCompound1396_static.FOLLOW_adj_in_oscarCompound1396);
            	    adj304=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj304.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            pushFollow(FOLLOW_oscarCompoundStructure_in_oscarCompound1399_static.FOLLOW_oscarCompoundStructure_in_oscarCompound1399);
            oscarCompoundStructure305=oscarCompoundStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompoundStructure305.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:46: ( adj )?
            int alt79=2;
            alt79 = dfa79.predict(input);
            switch (alt79) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                    {
                    pushFollow(FOLLOW_adj_in_oscarCompound1401_static.FOLLOW_adj_in_oscarCompound1401);
                    adj306=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj306.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:51: ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )?
            int alt80=4;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:52: quantity
                    {
                    pushFollow(FOLLOW_quantity_in_oscarCompound1405_static.FOLLOW_quantity_in_oscarCompound1405);
                    quantity307=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity307.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:63: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_oscarCompound1409_static.FOLLOW_nnchementity_in_oscarCompound1409);
                    nnchementity308=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity308.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:78: {...}? numericOrIdentifierCompoundReference
                    {
                    if ( !((!followedByNumberWhichIsNotAReference(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "oscarCompound", "!followedByNumberWhichIsNotAReference(input)");
                    }
                    pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_oscarCompound1415_static.FOLLOW_numericOrIdentifierCompoundReference_in_oscarCompound1415);
                    numericOrIdentifierCompoundReference309=numericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference309.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:165: ( quantity )*
            loop81:
            do {
                int alt81=2;
                alt81 = dfa81.predict(input);
                switch (alt81) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_oscarCompound1419_static.FOLLOW_quantity_in_oscarCompound1419);
            	    quantity310=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity310.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:175: ( fromProcedure )?
            int alt82=2;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_oscarCompound1422_static.FOLLOW_fromProcedure_in_oscarCompound1422);
                    fromProcedure311=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure311.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, oscarCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompound"

    public static class oscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:1: oscarCompoundStructure : ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) ;
    public final ChemicalChunkerParser.oscarCompoundStructure_return oscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.oscarCompoundStructure_return retval = new ChemicalChunkerParser.oscarCompoundStructure_return();
        retval.start = input.LT(1);
        int oscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm312 = null;

        ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure313 = null;

        ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure314 = null;


        RewriteRuleSubtreeStream stream_bracketedOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule bracketedOscarCompoundStructure");
        RewriteRuleSubtreeStream stream_oscarcm=new RewriteRuleSubtreeStream(adaptor,"rule oscarcm");
        RewriteRuleSubtreeStream stream_afterOscarCompoundStructure=new RewriteRuleSubtreeStream(adaptor,"rule afterOscarCompoundStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:23: ( ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure ) -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:25: ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:25: ( oscarcm ( afterOscarCompoundStructure )? | bracketedOscarCompoundStructure )
            int alt84=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt84=1;
                }
                break;
            case 143:
                {
                alt84=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;
            }

            switch (alt84) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:26: oscarcm ( afterOscarCompoundStructure )?
                    {
                    pushFollow(FOLLOW_oscarcm_in_oscarCompoundStructure1431_static.FOLLOW_oscarcm_in_oscarCompoundStructure1431);
                    oscarcm312=oscarcm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_oscarcm.add(oscarcm312.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:34: ( afterOscarCompoundStructure )?
                    int alt83=2;
                    switch ( input.LA(1) ) {
                        case 84:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA83_5 = input.LA(3);

                                    if ( (synpred268_ChemicalChunker()) ) {
                                        alt83=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA83_6 = input.LA(3);

                                    if ( (synpred268_ChemicalChunker()) ) {
                                        alt83=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA83_7 = input.LA(3);

                                    if ( (synpred268_ChemicalChunker()) ) {
                                        alt83=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt83) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: afterOscarCompoundStructure
                            {
                            pushFollow(FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1433_static.FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1433);
                            afterOscarCompoundStructure313=afterOscarCompoundStructure();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_afterOscarCompoundStructure.add(afterOscarCompoundStructure313.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:65: bracketedOscarCompoundStructure
                    {
                    pushFollow(FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1438_static.FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1438);
                    bracketedOscarCompoundStructure314=bracketedOscarCompoundStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedOscarCompoundStructure.add(bracketedOscarCompoundStructure314.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedOscarCompoundStructure, oscarcm, afterOscarCompoundStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 182:98: -> ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:101: ^( OSCARCM ( oscarcm )? ( afterOscarCompoundStructure )? ( bracketedOscarCompoundStructure )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OSCARCM, "OSCARCM"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:111: ( oscarcm )?
                if ( stream_oscarcm.hasNext() ) {
                    adaptor.addChild(root_1, stream_oscarcm.nextTree());

                }
                stream_oscarcm.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:120: ( afterOscarCompoundStructure )?
                if ( stream_afterOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_afterOscarCompoundStructure.nextTree());

                }
                stream_afterOscarCompoundStructure.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:149: ( bracketedOscarCompoundStructure )?
                if ( stream_bracketedOscarCompoundStructure.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedOscarCompoundStructure.nextTree());

                }
                stream_bracketedOscarCompoundStructure.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, oscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarCompoundStructure"

    public static class afterOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:1: afterOscarCompoundStructure : ( ( oscarcm )+ | ( dash ( oscarcm )+ )+ ( dash )? | ( dash | apost )+ );
    public final ChemicalChunkerParser.afterOscarCompoundStructure_return afterOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.afterOscarCompoundStructure_return retval = new ChemicalChunkerParser.afterOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int afterOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm315 = null;

        ChemicalChunkerParser.dash_return dash316 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm317 = null;

        ChemicalChunkerParser.dash_return dash318 = null;

        ChemicalChunkerParser.dash_return dash319 = null;

        ChemicalChunkerParser.apost_return apost320 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:28: ( ( oscarcm )+ | ( dash ( oscarcm )+ )+ ( dash )? | ( dash | apost )+ )
            int alt90=3;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt90=1;
                }
                break;
            case 136:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA90_6 = input.LA(5);

                            if ( (synpred275_ChemicalChunker()) ) {
                                alt90=2;
                            }
                            else if ( (true) ) {
                                alt90=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 90, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 90, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt90=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 90, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 2, input);

                    throw nvae;
                }

                }
                break;
            case 134:
                {
                alt90=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:30: ( oscarcm )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:30: ( oscarcm )+
                    int cnt85=0;
                    loop85:
                    do {
                        int alt85=2;
                        switch ( input.LA(1) ) {
                        case 84:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA85_3 = input.LA(3);

                                if ( (synpred270_ChemicalChunker()) ) {
                                    alt85=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt85) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    {
                    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1460_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1460);
                    	    oscarcm315=oscarcm();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm315.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt85 >= 1 ) break loop85;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(85, input);
                                throw eee;
                        }
                        cnt85++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:39: ( dash ( oscarcm )+ )+ ( dash )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:39: ( dash ( oscarcm )+ )+
                    int cnt87=0;
                    loop87:
                    do {
                        int alt87=2;
                        switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                switch ( input.LA(3) ) {
                                case 84:
                                    {
                                    switch ( input.LA(4) ) {
                                    case TOKEN:
                                        {
                                        int LA87_5 = input.LA(5);

                                        if ( (synpred273_ChemicalChunker()) ) {
                                            alt87=1;
                                        }


                                        }
                                        break;

                                    }

                                    }
                                    break;

                                }

                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt87) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:40: dash ( oscarcm )+
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1464_static.FOLLOW_dash_in_afterOscarCompoundStructure1464);
                    	    dash316=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash316.getTree());
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:45: ( oscarcm )+
                    	    int cnt86=0;
                    	    loop86:
                    	    do {
                    	        int alt86=2;
                    	        switch ( input.LA(1) ) {
                    	        case 84:
                    	            {
                    	            switch ( input.LA(2) ) {
                    	            case TOKEN:
                    	                {
                    	                int LA86_3 = input.LA(3);

                    	                if ( (synpred272_ChemicalChunker()) ) {
                    	                    alt86=1;
                    	                }


                    	                }
                    	                break;

                    	            }

                    	            }
                    	            break;

                    	        }

                    	        switch (alt86) {
                    	    	case 1 :
                    	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
                    	    	    {
                    	    	    pushFollow(FOLLOW_oscarcm_in_afterOscarCompoundStructure1466_static.FOLLOW_oscarcm_in_afterOscarCompoundStructure1466);
                    	    	    oscarcm317=oscarcm();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm317.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt86 >= 1 ) break loop86;
                    	    	    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(86, input);
                    	                throw eee;
                    	        }
                    	        cnt86++;
                    	    } while (true);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt87 >= 1 ) break loop87;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(87, input);
                                throw eee;
                        }
                        cnt87++;
                    } while (true);

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:56: ( dash )?
                    int alt88=2;
                    switch ( input.LA(1) ) {
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                                case TOKEN:
                                    {
                                    int LA88_3 = input.LA(3);

                                    if ( (synpred274_ChemicalChunker()) ) {
                                        alt88=1;
                                    }
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    switch (alt88) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                            {
                            pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1471_static.FOLLOW_dash_in_afterOscarCompoundStructure1471);
                            dash318=dash();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash318.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:62: ( dash | apost )+
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:62: ( dash | apost )+
                    int cnt89=0;
                    loop89:
                    do {
                        int alt89=3;
                        switch ( input.LA(1) ) {
                        case 134:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA89_4 = input.LA(3);

                                if ( (synpred277_ChemicalChunker()) ) {
                                    alt89=2;
                                }


                                }
                                break;

                            }

                            }
                            break;
                        case 136:
                            {
                            switch ( input.LA(2) ) {
                            case TOKEN:
                                {
                                int LA89_5 = input.LA(3);

                                if ( (synpred276_ChemicalChunker()) ) {
                                    alt89=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        switch (alt89) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:63: dash
                    	    {
                    	    pushFollow(FOLLOW_dash_in_afterOscarCompoundStructure1475_static.FOLLOW_dash_in_afterOscarCompoundStructure1475);
                    	    dash319=dash();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash319.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:68: apost
                    	    {
                    	    pushFollow(FOLLOW_apost_in_afterOscarCompoundStructure1477_static.FOLLOW_apost_in_afterOscarCompoundStructure1477);
                    	    apost320=apost();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, apost320.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt89 >= 1 ) break loop89;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(89, input);
                                throw eee;
                        }
                        cnt89++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, afterOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterOscarCompoundStructure"

    public static class bracketedOscarCompoundStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedOscarCompoundStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:1: bracketedOscarCompoundStructure : lrb ( oscarcm )+ rrb ;
    public final ChemicalChunkerParser.bracketedOscarCompoundStructure_return bracketedOscarCompoundStructure() throws RecognitionException {
        ChemicalChunkerParser.bracketedOscarCompoundStructure_return retval = new ChemicalChunkerParser.bracketedOscarCompoundStructure_return();
        retval.start = input.LT(1);
        int bracketedOscarCompoundStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb321 = null;

        ChemicalChunkerParser.oscarcm_return oscarcm322 = null;

        ChemicalChunkerParser.rrb_return rrb323 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:33: ( lrb ( oscarcm )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:35: lrb ( oscarcm )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedOscarCompoundStructure1486_static.FOLLOW_lrb_in_bracketedOscarCompoundStructure1486);
            lrb321=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb321.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:184:40: ( oscarcm )+
            int cnt91=0;
            loop91:
            do {
                int alt91=2;
                switch ( input.LA(1) ) {
                case 84:
                    {
                    alt91=1;
                    }
                    break;

                }

                switch (alt91) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
            	    {
            	    pushFollow(FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1489_static.FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1489);
            	    oscarcm322=oscarcm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcm322.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt91 >= 1 ) break loop91;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(91, input);
                        throw eee;
                }
                cnt91++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_bracketedOscarCompoundStructure1492_static.FOLLOW_rrb_in_bracketedOscarCompoundStructure1492);
            rrb323=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb323.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, bracketedOscarCompoundStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedOscarCompoundStructure"

    public static class molecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:186:1: molecule : moleculeamount -> ^( MOLECULE moleculeamount ) ;
    public final ChemicalChunkerParser.molecule_return molecule() throws RecognitionException {
        ChemicalChunkerParser.molecule_return retval = new ChemicalChunkerParser.molecule_return();
        retval.start = input.LT(1);
        int molecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount_return moleculeamount324 = null;


        RewriteRuleSubtreeStream stream_moleculeamount=new RewriteRuleSubtreeStream(adaptor,"rule moleculeamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:2: ( moleculeamount -> ^( MOLECULE moleculeamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:5: moleculeamount
            {
            pushFollow(FOLLOW_moleculeamount_in_molecule1502_static.FOLLOW_moleculeamount_in_molecule1502);
            moleculeamount324=moleculeamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_moleculeamount.add(moleculeamount324.getTree());


            // AST REWRITE
            // elements: moleculeamount
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 187:19: -> ^( MOLECULE moleculeamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:187:22: ^( MOLECULE moleculeamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLECULE, "MOLECULE"), root_1);

                adaptor.addChild(root_1, stream_moleculeamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, molecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molecule"

    public static class moleculeamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:1: moleculeamount : ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? ;
    public final ChemicalChunkerParser.moleculeamount_return moleculeamount() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount_return retval = new ChemicalChunkerParser.moleculeamount_return();
        retval.start = input.LT(1);
        int moleculeamount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.moleculeamount3_return moleculeamount3325 = null;

        ChemicalChunkerParser.moleculeamount1_return moleculeamount1326 = null;

        ChemicalChunkerParser.moleculeamount2_return moleculeamount2327 = null;

        ChemicalChunkerParser.asAstate_return asAstate328 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:16: ( ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 ) ( asAstate )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )
            int alt92=3;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:19: moleculeamount3
                    {
                    pushFollow(FOLLOW_moleculeamount3_in_moleculeamount1520_static.FOLLOW_moleculeamount3_in_moleculeamount1520);
                    moleculeamount3325=moleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount3325.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:36: moleculeamount1
                    {
                    pushFollow(FOLLOW_moleculeamount1_in_moleculeamount1523_static.FOLLOW_moleculeamount1_in_moleculeamount1523);
                    moleculeamount1326=moleculeamount1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount1326.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:54: moleculeamount2
                    {
                    pushFollow(FOLLOW_moleculeamount2_in_moleculeamount1527_static.FOLLOW_moleculeamount2_in_moleculeamount1527);
                    moleculeamount2327=moleculeamount2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, moleculeamount2327.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:71: ( asAstate )?
            int alt93=2;
            alt93 = dfa93.predict(input);
            switch (alt93) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_moleculeamount1530_static.FOLLOW_asAstate_in_moleculeamount1530);
                    asAstate328=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asAstate328.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, moleculeamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount"

    public static class moleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:191:1: moleculeamount3 : ( quantity | mixture )+ inof ( dtTHE | dt )? cdRatioNode ( mixture )? oscarCompound ;
    public final ChemicalChunkerParser.moleculeamount3_return moleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount3_return retval = new ChemicalChunkerParser.moleculeamount3_return();
        retval.start = input.LT(1);
        int moleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity329 = null;

        ChemicalChunkerParser.mixture_return mixture330 = null;

        ChemicalChunkerParser.inof_return inof331 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE332 = null;

        ChemicalChunkerParser.dt_return dt333 = null;

        ChemicalChunkerParser.cdRatioNode_return cdRatioNode334 = null;

        ChemicalChunkerParser.mixture_return mixture335 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound336 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:2: ( ( quantity | mixture )+ inof ( dtTHE | dt )? cdRatioNode ( mixture )? oscarCompound )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:3: ( quantity | mixture )+ inof ( dtTHE | dt )? cdRatioNode ( mixture )? oscarCompound
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:3: ( quantity | mixture )+
            int cnt94=0;
            loop94:
            do {
                int alt94=3;
                switch ( input.LA(1) ) {
                case 143:
                    {
                    int LA94_2 = input.LA(2);

                    if ( (synpred282_ChemicalChunker()) ) {
                        alt94=1;
                    }
                    else if ( (synpred283_ChemicalChunker()) ) {
                        alt94=2;
                    }


                    }
                    break;
                case 146:
                    {
                    int LA94_3 = input.LA(2);

                    if ( (synpred282_ChemicalChunker()) ) {
                        alt94=1;
                    }
                    else if ( (synpred283_ChemicalChunker()) ) {
                        alt94=2;
                    }


                    }
                    break;
                case 38:
                case 73:
                case 130:
                    {
                    alt94=1;
                    }
                    break;
                case 133:
                    {
                    alt94=2;
                    }
                    break;

                }

                switch (alt94) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount31541_static.FOLLOW_quantity_in_moleculeamount31541);
            	    quantity329=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity329.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount31543_static.FOLLOW_mixture_in_moleculeamount31543);
            	    mixture330=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture330.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt94 >= 1 ) break loop94;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(94, input);
                        throw eee;
                }
                cnt94++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount31547_static.FOLLOW_inof_in_moleculeamount31547);
            inof331=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof331.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:28: ( dtTHE | dt )?
            int alt95=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt95=1;
                    }
                    break;
                case 147:
                    {
                    alt95=2;
                    }
                    break;
            }

            switch (alt95) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:29: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount31550_static.FOLLOW_dtTHE_in_moleculeamount31550);
                    dtTHE332=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE332.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:37: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount31554_static.FOLLOW_dt_in_moleculeamount31554);
                    dt333=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt333.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_cdRatioNode_in_moleculeamount31558_static.FOLLOW_cdRatioNode_in_moleculeamount31558);
            cdRatioNode334=cdRatioNode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cdRatioNode334.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:54: ( mixture )?
            int alt96=2;
            alt96 = dfa96.predict(input);
            switch (alt96) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: mixture
                    {
                    pushFollow(FOLLOW_mixture_in_moleculeamount31560_static.FOLLOW_mixture_in_moleculeamount31560);
                    mixture335=mixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture335.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_oscarCompound_in_moleculeamount31563_static.FOLLOW_oscarCompound_in_moleculeamount31563);
            oscarCompound336=oscarCompound();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound336.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, moleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount3"

    public static class moleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:194:1: moleculeamount1 : ( nnchementity | nnstate )? ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount1_return moleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount1_return retval = new ChemicalChunkerParser.moleculeamount1_return();
        retval.start = input.LT(1);
        int moleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity337 = null;

        ChemicalChunkerParser.nnstate_return nnstate338 = null;

        ChemicalChunkerParser.quantity_return quantity339 = null;

        ChemicalChunkerParser.mixture_return mixture340 = null;

        ChemicalChunkerParser.inof_return inof341 = null;

        ChemicalChunkerParser.quantity_return quantity342 = null;

        ChemicalChunkerParser.inof_return inof343 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE344 = null;

        ChemicalChunkerParser.dt_return dt345 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound346 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity347 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:2: ( ( nnchementity | nnstate )? ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:3: ( nnchementity | nnstate )? ( quantity | mixture )+ inof ( quantity ( inof )? )? ( dtTHE | dt )? ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:3: ( nnchementity | nnstate )?
            int alt97=3;
            switch ( input.LA(1) ) {
                case 71:
                    {
                    alt97=1;
                    }
                    break;
                case 63:
                    {
                    alt97=2;
                    }
                    break;
            }

            switch (alt97) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:4: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_moleculeamount11573_static.FOLLOW_nnchementity_in_moleculeamount11573);
                    nnchementity337=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity337.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:19: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_moleculeamount11577_static.FOLLOW_nnstate_in_moleculeamount11577);
                    nnstate338=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate338.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:29: ( quantity | mixture )+
            int cnt98=0;
            loop98:
            do {
                int alt98=3;
                switch ( input.LA(1) ) {
                case 143:
                    {
                    int LA98_2 = input.LA(2);

                    if ( (synpred289_ChemicalChunker()) ) {
                        alt98=1;
                    }
                    else if ( (synpred290_ChemicalChunker()) ) {
                        alt98=2;
                    }


                    }
                    break;
                case 146:
                    {
                    int LA98_3 = input.LA(2);

                    if ( (synpred289_ChemicalChunker()) ) {
                        alt98=1;
                    }
                    else if ( (synpred290_ChemicalChunker()) ) {
                        alt98=2;
                    }


                    }
                    break;
                case 38:
                case 73:
                case 130:
                    {
                    alt98=1;
                    }
                    break;
                case 133:
                    {
                    alt98=2;
                    }
                    break;

                }

                switch (alt98) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:30: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount11582_static.FOLLOW_quantity_in_moleculeamount11582);
            	    quantity339=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity339.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:39: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount11584_static.FOLLOW_mixture_in_moleculeamount11584);
            	    mixture340=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture340.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt98 >= 1 ) break loop98;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(98, input);
                        throw eee;
                }
                cnt98++;
            } while (true);

            pushFollow(FOLLOW_inof_in_moleculeamount11588_static.FOLLOW_inof_in_moleculeamount11588);
            inof341=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof341.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:54: ( quantity ( inof )? )?
            int alt100=2;
            switch ( input.LA(1) ) {
                case 143:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 38:
                                case 73:
                                case 130:
                                case 146:
                                    {
                                    alt100=1;
                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
                case 38:
                case 73:
                case 130:
                case 146:
                    {
                    alt100=1;
                    }
                    break;
            }

            switch (alt100) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:55: quantity ( inof )?
                    {
                    pushFollow(FOLLOW_quantity_in_moleculeamount11591_static.FOLLOW_quantity_in_moleculeamount11591);
                    quantity342=quantity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity342.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:64: ( inof )?
                    int alt99=2;
                    switch ( input.LA(1) ) {
                        case 56:
                            {
                            alt99=1;
                            }
                            break;
                    }

                    switch (alt99) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: inof
                            {
                            pushFollow(FOLLOW_inof_in_moleculeamount11593_static.FOLLOW_inof_in_moleculeamount11593);
                            inof343=inof();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof343.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:72: ( dtTHE | dt )?
            int alt101=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt101=1;
                    }
                    break;
                case 147:
                    {
                    alt101=2;
                    }
                    break;
            }

            switch (alt101) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:73: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_moleculeamount11599_static.FOLLOW_dtTHE_in_moleculeamount11599);
                    dtTHE344=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE344.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:81: dt
                    {
                    pushFollow(FOLLOW_dt_in_moleculeamount11603_static.FOLLOW_dt_in_moleculeamount11603);
                    dt345=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt345.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:86: ( oscarCompound )+
            int cnt102=0;
            loop102:
            do {
                int alt102=2;
                alt102 = dfa102.predict(input);
                switch (alt102) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount11607_static.FOLLOW_oscarCompound_in_moleculeamount11607);
            	    oscarCompound346=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound346.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt102 >= 1 ) break loop102;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(102, input);
                        throw eee;
                }
                cnt102++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11610_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11610);
            afterCompoundCitationOrQuantity347=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity347.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, moleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount1"

    public static class moleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:197:1: moleculeamount2 : ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity ;
    public final ChemicalChunkerParser.moleculeamount2_return moleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.moleculeamount2_return retval = new ChemicalChunkerParser.moleculeamount2_return();
        retval.start = input.LT(1);
        int moleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity348 = null;

        ChemicalChunkerParser.mixture_return mixture349 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound350 = null;

        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity351 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:2: ( ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:3: ( quantity | mixture )* ( oscarCompound )+ afterCompoundCitationOrQuantity
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:3: ( quantity | mixture )*
            loop103:
            do {
                int alt103=3;
                alt103 = dfa103.predict(input);
                switch (alt103) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_moleculeamount21619_static.FOLLOW_quantity_in_moleculeamount21619);
            	    quantity348=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity348.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_moleculeamount21621_static.FOLLOW_mixture_in_moleculeamount21621);
            	    mixture349=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture349.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:23: ( oscarCompound )+
            int cnt104=0;
            loop104:
            do {
                int alt104=2;
                alt104 = dfa104.predict(input);
                switch (alt104) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_moleculeamount21625_static.FOLLOW_oscarCompound_in_moleculeamount21625);
            	    oscarCompound350=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound350.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt104 >= 1 ) break loop104;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(104, input);
                        throw eee;
                }
                cnt104++;
            } while (true);

            pushFollow(FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21628_static.FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21628);
            afterCompoundCitationOrQuantity351=afterCompoundCitationOrQuantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, afterCompoundCitationOrQuantity351.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, moleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moleculeamount2"

    public static class afterCompoundCitationOrQuantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "afterCompoundCitationOrQuantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:1: afterCompoundCitationOrQuantity : ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* ;
    public final ChemicalChunkerParser.afterCompoundCitationOrQuantity_return afterCompoundCitationOrQuantity() throws RecognitionException {
        ChemicalChunkerParser.afterCompoundCitationOrQuantity_return retval = new ChemicalChunkerParser.afterCompoundCitationOrQuantity_return();
        retval.start = input.LT(1);
        int afterCompoundCitationOrQuantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citation_return citation352 = null;

        ChemicalChunkerParser.quantity_return quantity353 = null;

        ChemicalChunkerParser.comma_return comma354 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node355 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure356 = null;

        ChemicalChunkerParser.mixture_return mixture357 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:32: ( ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*
            loop106:
            do {
                int alt106=5;
                alt106 = dfa106.predict(input);
                switch (alt106) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:35: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_afterCompoundCitationOrQuantity1636_static.FOLLOW_citation_in_afterCompoundCitationOrQuantity1636);
            	    citation352=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation352.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:44: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_afterCompoundCitationOrQuantity1638_static.FOLLOW_quantity_in_afterCompoundCitationOrQuantity1638);
            	    quantity353=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity353.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:53: comma ( quantity1Node | citationStructure )
            	    {
            	    pushFollow(FOLLOW_comma_in_afterCompoundCitationOrQuantity1640_static.FOLLOW_comma_in_afterCompoundCitationOrQuantity1640);
            	    comma354=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma354.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:59: ( quantity1Node | citationStructure )
            	    int alt105=2;
            	    alt105 = dfa105.predict(input);
            	    switch (alt105) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:60: quantity1Node
            	            {
            	            pushFollow(FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1643_static.FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1643);
            	            quantity1Node355=quantity1Node();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node355.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:74: citationStructure
            	            {
            	            pushFollow(FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1645_static.FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1645);
            	            citationStructure356=citationStructure();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure356.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:93: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_afterCompoundCitationOrQuantity1648_static.FOLLOW_mixture_in_afterCompoundCitationOrQuantity1648);
            	    mixture357=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture357.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, afterCompoundCitationOrQuantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "afterCompoundCitationOrQuantity"

    public static class unnamedmolecule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmolecule"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:202:1: unnamedmolecule : unnamedmoleculeDescription ( asAstate )? -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ( asAstate )? ) ;
    public final ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule() throws RecognitionException {
        ChemicalChunkerParser.unnamedmolecule_return retval = new ChemicalChunkerParser.unnamedmolecule_return();
        retval.start = input.LT(1);
        int unnamedmolecule_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription358 = null;

        ChemicalChunkerParser.asAstate_return asAstate359 = null;


        RewriteRuleSubtreeStream stream_unnamedmoleculeDescription=new RewriteRuleSubtreeStream(adaptor,"rule unnamedmoleculeDescription");
        RewriteRuleSubtreeStream stream_asAstate=new RewriteRuleSubtreeStream(adaptor,"rule asAstate");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:2: ( unnamedmoleculeDescription ( asAstate )? -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ( asAstate )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:4: unnamedmoleculeDescription ( asAstate )?
            {
            pushFollow(FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1659_static.FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1659);
            unnamedmoleculeDescription358=unnamedmoleculeDescription();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unnamedmoleculeDescription.add(unnamedmoleculeDescription358.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:31: ( asAstate )?
            int alt107=2;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: asAstate
                    {
                    pushFollow(FOLLOW_asAstate_in_unnamedmolecule1661_static.FOLLOW_asAstate_in_unnamedmolecule1661);
                    asAstate359=asAstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_asAstate.add(asAstate359.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: asAstate, unnamedmoleculeDescription
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 203:41: -> ^( UNNAMEDMOLECULE unnamedmoleculeDescription ( asAstate )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:44: ^( UNNAMEDMOLECULE unnamedmoleculeDescription ( asAstate )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNNAMEDMOLECULE, "UNNAMEDMOLECULE"), root_1);

                adaptor.addChild(root_1, stream_unnamedmoleculeDescription.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:89: ( asAstate )?
                if ( stream_asAstate.hasNext() ) {
                    adaptor.addChild(root_1, stream_asAstate.nextTree());

                }
                stream_asAstate.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, unnamedmolecule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmolecule"

    public static class unnamedmoleculeDescription_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeDescription"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:205:1: unnamedmoleculeDescription : ( ( quantity )+ inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | unnamedmoleculeamount7 | unnamedmoleculeamount8 ) ( fromProcedure )? ;
    public final ChemicalChunkerParser.unnamedmoleculeDescription_return unnamedmoleculeDescription() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeDescription_return retval = new ChemicalChunkerParser.unnamedmoleculeDescription_return();
        retval.start = input.LT(1);
        int unnamedmoleculeDescription_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity360 = null;

        ChemicalChunkerParser.inof_return inof361 = null;

        ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1362 = null;

        ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2363 = null;

        ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return optionalUnnamedMoleculeEnding364 = null;

        ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3365 = null;

        ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4366 = null;

        ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5367 = null;

        ChemicalChunkerParser.unnamedmoleculeamount6_return unnamedmoleculeamount6368 = null;

        ChemicalChunkerParser.unnamedmoleculeamount7_return unnamedmoleculeamount7369 = null;

        ChemicalChunkerParser.unnamedmoleculeamount8_return unnamedmoleculeamount8370 = null;

        ChemicalChunkerParser.fromProcedure_return fromProcedure371 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:2: ( ( ( quantity )+ inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | unnamedmoleculeamount7 | unnamedmoleculeamount8 ) ( fromProcedure )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:3: ( ( quantity )+ inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | unnamedmoleculeamount7 | unnamedmoleculeamount8 ) ( fromProcedure )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:3: ( ( quantity )+ inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | unnamedmoleculeamount7 | unnamedmoleculeamount8 )
            int alt111=7;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:4: ( quantity )+ inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? )
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:4: ( quantity )+
                    int cnt108=0;
                    loop108:
                    do {
                        int alt108=2;
                        switch ( input.LA(1) ) {
                        case 38:
                        case 73:
                        case 130:
                        case 143:
                        case 146:
                            {
                            alt108=1;
                            }
                            break;

                        }

                        switch (alt108) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
                    	    {
                    	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeDescription1682_static.FOLLOW_quantity_in_unnamedmoleculeDescription1682);
                    	    quantity360=quantity();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity360.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt108 >= 1 ) break loop108;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(108, input);
                                throw eee;
                        }
                        cnt108++;
                    } while (true);

                    pushFollow(FOLLOW_inof_in_unnamedmoleculeDescription1685_static.FOLLOW_inof_in_unnamedmoleculeDescription1685);
                    inof361=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof361.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:19: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? )
                    int alt110=2;
                    switch ( input.LA(1) ) {
                    case 38:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                        {
                        alt110=1;
                        }
                        break;
                    case 41:
                    case 42:
                    case 45:
                    case 46:
                    case 63:
                    case 68:
                    case 71:
                    case 83:
                    case 90:
                    case 142:
                    case 147:
                    case 149:
                    case 151:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                        {
                        alt110=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 110, 0, input);

                        throw nvae;
                    }

                    switch (alt110) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:20: unnamedmoleculeamount1
                            {
                            pushFollow(FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeDescription1688_static.FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeDescription1688);
                            unnamedmoleculeamount1362=unnamedmoleculeamount1();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount1362.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:43: unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )?
                            {
                            pushFollow(FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeDescription1690_static.FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeDescription1690);
                            unnamedmoleculeamount2363=unnamedmoleculeamount2();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount2363.getTree());
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:66: ( optionalUnnamedMoleculeEnding )?
                            int alt109=2;
                            alt109 = dfa109.predict(input);
                            switch (alt109) {
                                case 1 :
                                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: optionalUnnamedMoleculeEnding
                                    {
                                    pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeDescription1692_static.FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeDescription1692);
                                    optionalUnnamedMoleculeEnding364=optionalUnnamedMoleculeEnding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, optionalUnnamedMoleculeEnding364.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:99: unnamedmoleculeamount3
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeDescription1697_static.FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeDescription1697);
                    unnamedmoleculeamount3365=unnamedmoleculeamount3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount3365.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:122: unnamedmoleculeamount4
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeDescription1699_static.FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeDescription1699);
                    unnamedmoleculeamount4366=unnamedmoleculeamount4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount4366.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:145: unnamedmoleculeamount5
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeDescription1701_static.FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeDescription1701);
                    unnamedmoleculeamount5367=unnamedmoleculeamount5();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount5367.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:168: unnamedmoleculeamount6
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeDescription1703_static.FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeDescription1703);
                    unnamedmoleculeamount6368=unnamedmoleculeamount6();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount6368.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:191: unnamedmoleculeamount7
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount7_in_unnamedmoleculeDescription1705_static.FOLLOW_unnamedmoleculeamount7_in_unnamedmoleculeDescription1705);
                    unnamedmoleculeamount7369=unnamedmoleculeamount7();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount7369.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:214: unnamedmoleculeamount8
                    {
                    pushFollow(FOLLOW_unnamedmoleculeamount8_in_unnamedmoleculeDescription1707_static.FOLLOW_unnamedmoleculeamount8_in_unnamedmoleculeDescription1707);
                    unnamedmoleculeamount8370=unnamedmoleculeamount8();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmoleculeamount8370.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:238: ( fromProcedure )?
            int alt112=2;
            alt112 = dfa112.predict(input);
            switch (alt112) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: fromProcedure
                    {
                    pushFollow(FOLLOW_fromProcedure_in_unnamedmoleculeDescription1710_static.FOLLOW_fromProcedure_in_unnamedmoleculeDescription1710);
                    fromProcedure371=fromProcedure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fromProcedure371.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, unnamedmoleculeDescription_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeDescription"

    public static class unnamedmoleculeamount1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:208:1: unnamedmoleculeamount1 : {...}? numericOrIdentifierCompoundReference ( quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount1_return unnamedmoleculeamount1() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount1_return retval = new ChemicalChunkerParser.unnamedmoleculeamount1_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference372 = null;

        ChemicalChunkerParser.quantity_return quantity373 = null;

        ChemicalChunkerParser.mixture_return mixture374 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:2: ({...}? numericOrIdentifierCompoundReference ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:5: {...}? numericOrIdentifierCompoundReference ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            if ( !((!followedByNumberWhichIsNotAReference(input))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "unnamedmoleculeamount1", "!followedByNumberWhichIsNotAReference(input)");
            }
            pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount11723_static.FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount11723);
            numericOrIdentifierCompoundReference372=numericOrIdentifierCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference372.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:90: ( quantity | mixture )*
            loop113:
            do {
                int alt113=3;
                alt113 = dfa113.predict(input);
                switch (alt113) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:91: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount11726_static.FOLLOW_quantity_in_unnamedmoleculeamount11726);
            	    quantity373=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity373.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:100: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount11728_static.FOLLOW_mixture_in_unnamedmoleculeamount11728);
            	    mixture374=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture374.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, unnamedmoleculeamount1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount1"

    public static class unnamedmoleculeamount2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:211:1: unnamedmoleculeamount2 : ( dtTHE | dt )? ( jj | jjchem | jjcomp )* ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase ) ;
    public final ChemicalChunkerParser.unnamedmoleculeamount2_return unnamedmoleculeamount2() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount2_return retval = new ChemicalChunkerParser.unnamedmoleculeamount2_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.dtTHE_return dtTHE375 = null;

        ChemicalChunkerParser.dt_return dt376 = null;

        ChemicalChunkerParser.jj_return jj377 = null;

        ChemicalChunkerParser.jjchem_return jjchem378 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp379 = null;

        ChemicalChunkerParser.nnstate_return nnstate380 = null;

        ChemicalChunkerParser.nn_return nn381 = null;

        ChemicalChunkerParser.nns_return nns382 = null;

        ChemicalChunkerParser.nnp_return nnp383 = null;

        ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound384 = null;

        ChemicalChunkerParser.nnexample_return nnexample385 = null;

        ChemicalChunkerParser.oscaronts_return oscaronts386 = null;

        ChemicalChunkerParser.nnatmosphere_return nnatmosphere387 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity388 = null;

        ChemicalChunkerParser.nnmixture_return nnmixture389 = null;

        ChemicalChunkerParser.fw_return fw390 = null;

        ChemicalChunkerParser.nnps_return nnps391 = null;

        ChemicalChunkerParser.oscarase_return oscarase392 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:2: ( ( dtTHE | dt )? ( jj | jjchem | jjcomp )* ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:4: ( dtTHE | dt )? ( jj | jjchem | jjcomp )* ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:4: ( dtTHE | dt )?
            int alt114=3;
            switch ( input.LA(1) ) {
                case 142:
                    {
                    alt114=1;
                    }
                    break;
                case 147:
                    {
                    alt114=2;
                    }
                    break;
            }

            switch (alt114) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:5: dtTHE
                    {
                    pushFollow(FOLLOW_dtTHE_in_unnamedmoleculeamount21740_static.FOLLOW_dtTHE_in_unnamedmoleculeamount21740);
                    dtTHE375=dtTHE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dtTHE375.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:13: dt
                    {
                    pushFollow(FOLLOW_dt_in_unnamedmoleculeamount21744_static.FOLLOW_dt_in_unnamedmoleculeamount21744);
                    dt376=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt376.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:18: ( jj | jjchem | jjcomp )*
            loop115:
            do {
                int alt115=4;
                switch ( input.LA(1) ) {
                case 151:
                    {
                    alt115=1;
                    }
                    break;
                case 45:
                    {
                    alt115=2;
                    }
                    break;
                case 46:
                    {
                    alt115=3;
                    }
                    break;

                }

                switch (alt115) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:19: jj
            	    {
            	    pushFollow(FOLLOW_jj_in_unnamedmoleculeamount21749_static.FOLLOW_jj_in_unnamedmoleculeamount21749);
            	    jj377=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj377.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:22: jjchem
            	    {
            	    pushFollow(FOLLOW_jjchem_in_unnamedmoleculeamount21751_static.FOLLOW_jjchem_in_unnamedmoleculeamount21751);
            	    jjchem378=jjchem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem378.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:29: jjcomp
            	    {
            	    pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount21753_static.FOLLOW_jjcomp_in_unnamedmoleculeamount21753);
            	    jjcomp379=jjcomp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp379.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:38: ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase )
            int alt116=13;
            alt116 = dfa116.predict(input);
            switch (alt116) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:39: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unnamedmoleculeamount21758_static.FOLLOW_nnstate_in_unnamedmoleculeamount21758);
                    nnstate380=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate380.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:47: nn
                    {
                    pushFollow(FOLLOW_nn_in_unnamedmoleculeamount21760_static.FOLLOW_nn_in_unnamedmoleculeamount21760);
                    nn381=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn381.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:50: nns
                    {
                    pushFollow(FOLLOW_nns_in_unnamedmoleculeamount21762_static.FOLLOW_nns_in_unnamedmoleculeamount21762);
                    nns382=nns();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nns382.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:54: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_unnamedmoleculeamount21764_static.FOLLOW_nnp_in_unnamedmoleculeamount21764);
                    nnp383=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp383.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:58: referenceToExampleCompound
                    {
                    pushFollow(FOLLOW_referenceToExampleCompound_in_unnamedmoleculeamount21766_static.FOLLOW_referenceToExampleCompound_in_unnamedmoleculeamount21766);
                    referenceToExampleCompound384=referenceToExampleCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, referenceToExampleCompound384.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:85: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_unnamedmoleculeamount21768_static.FOLLOW_nnexample_in_unnamedmoleculeamount21768);
                    nnexample385=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample385.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:95: oscaronts
                    {
                    pushFollow(FOLLOW_oscaronts_in_unnamedmoleculeamount21770_static.FOLLOW_oscaronts_in_unnamedmoleculeamount21770);
                    oscaronts386=oscaronts();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscaronts386.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:105: nnatmosphere
                    {
                    pushFollow(FOLLOW_nnatmosphere_in_unnamedmoleculeamount21772_static.FOLLOW_nnatmosphere_in_unnamedmoleculeamount21772);
                    nnatmosphere387=nnatmosphere();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnatmosphere387.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:118: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount21774_static.FOLLOW_nnchementity_in_unnamedmoleculeamount21774);
                    nnchementity388=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity388.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:131: nnmixture
                    {
                    pushFollow(FOLLOW_nnmixture_in_unnamedmoleculeamount21776_static.FOLLOW_nnmixture_in_unnamedmoleculeamount21776);
                    nnmixture389=nnmixture();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmixture389.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:141: fw
                    {
                    pushFollow(FOLLOW_fw_in_unnamedmoleculeamount21778_static.FOLLOW_fw_in_unnamedmoleculeamount21778);
                    fw390=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw390.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:144: nnps
                    {
                    pushFollow(FOLLOW_nnps_in_unnamedmoleculeamount21780_static.FOLLOW_nnps_in_unnamedmoleculeamount21780);
                    nnps391=nnps();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnps391.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:149: oscarase
                    {
                    pushFollow(FOLLOW_oscarase_in_unnamedmoleculeamount21782_static.FOLLOW_oscarase_in_unnamedmoleculeamount21782);
                    oscarase392=oscarase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarase392.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, unnamedmoleculeamount2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount2"

    public static class unnamedmoleculeamount3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:214:1: unnamedmoleculeamount3 : jjcomp nnchementity ( optionalUnnamedMoleculeEnding )? ;
    public final ChemicalChunkerParser.unnamedmoleculeamount3_return unnamedmoleculeamount3() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount3_return retval = new ChemicalChunkerParser.unnamedmoleculeamount3_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp393 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity394 = null;

        ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return optionalUnnamedMoleculeEnding395 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:2: ( jjcomp nnchementity ( optionalUnnamedMoleculeEnding )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:4: jjcomp nnchementity ( optionalUnnamedMoleculeEnding )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount31792_static.FOLLOW_jjcomp_in_unnamedmoleculeamount31792);
            jjcomp393=jjcomp();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp393.getTree());
            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount31794_static.FOLLOW_nnchementity_in_unnamedmoleculeamount31794);
            nnchementity394=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity394.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:24: ( optionalUnnamedMoleculeEnding )?
            int alt117=2;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: optionalUnnamedMoleculeEnding
                    {
                    pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeamount31796_static.FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeamount31796);
                    optionalUnnamedMoleculeEnding395=optionalUnnamedMoleculeEnding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, optionalUnnamedMoleculeEnding395.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, unnamedmoleculeamount3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount3"

    public static class optionalUnnamedMoleculeEnding_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "optionalUnnamedMoleculeEnding"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:217:1: optionalUnnamedMoleculeEnding : ( quantity )* ({...}? ( numericOrIdentifierCompoundReference )? ) ( quantity | mixture )* ;
    public final ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return optionalUnnamedMoleculeEnding() throws RecognitionException {
        ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return retval = new ChemicalChunkerParser.optionalUnnamedMoleculeEnding_return();
        retval.start = input.LT(1);
        int optionalUnnamedMoleculeEnding_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity396 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference397 = null;

        ChemicalChunkerParser.quantity_return quantity398 = null;

        ChemicalChunkerParser.mixture_return mixture399 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:2: ( ( quantity )* ({...}? ( numericOrIdentifierCompoundReference )? ) ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:4: ( quantity )* ({...}? ( numericOrIdentifierCompoundReference )? ) ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:4: ( quantity )*
            loop118:
            do {
                int alt118=2;
                alt118 = dfa118.predict(input);
                switch (alt118) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1807_static.FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1807);
            	    quantity396=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity396.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:14: ({...}? ( numericOrIdentifierCompoundReference )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:15: {...}? ( numericOrIdentifierCompoundReference )?
            {
            if ( !((!followedByNumberWhichIsNotAReference(input))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "optionalUnnamedMoleculeEnding", "!followedByNumberWhichIsNotAReference(input)");
            }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:63: ( numericOrIdentifierCompoundReference )?
            int alt119=2;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: numericOrIdentifierCompoundReference
                    {
                    pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_optionalUnnamedMoleculeEnding1813_static.FOLLOW_numericOrIdentifierCompoundReference_in_optionalUnnamedMoleculeEnding1813);
                    numericOrIdentifierCompoundReference397=numericOrIdentifierCompoundReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference397.getTree());

                    }
                    break;

            }


            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:102: ( quantity | mixture )*
            loop120:
            do {
                int alt120=3;
                alt120 = dfa120.predict(input);
                switch (alt120) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:103: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1818_static.FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1818);
            	    quantity398=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity398.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:112: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_optionalUnnamedMoleculeEnding1820_static.FOLLOW_mixture_in_optionalUnnamedMoleculeEnding1820);
            	    mixture399=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture399.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, optionalUnnamedMoleculeEnding_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "optionalUnnamedMoleculeEnding"

    public static class unnamedmoleculeamount4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount4"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:220:1: unnamedmoleculeamount4 : alphanumericOrIdentifierCompoundReference ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount4_return unnamedmoleculeamount4() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount4_return retval = new ChemicalChunkerParser.unnamedmoleculeamount4_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount4_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference400 = null;

        ChemicalChunkerParser.citation_return citation401 = null;

        ChemicalChunkerParser.quantity_return quantity402 = null;

        ChemicalChunkerParser.mixture_return mixture403 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:2: ( alphanumericOrIdentifierCompoundReference ( citation | quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:4: alphanumericOrIdentifierCompoundReference ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_alphanumericOrIdentifierCompoundReference_in_unnamedmoleculeamount41831_static.FOLLOW_alphanumericOrIdentifierCompoundReference_in_unnamedmoleculeamount41831);
            alphanumericOrIdentifierCompoundReference400=alphanumericOrIdentifierCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, alphanumericOrIdentifierCompoundReference400.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:46: ( citation | quantity | mixture )*
            loop121:
            do {
                int alt121=4;
                alt121 = dfa121.predict(input);
                switch (alt121) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:47: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount41834_static.FOLLOW_citation_in_unnamedmoleculeamount41834);
            	    citation401=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation401.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:56: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount41836_static.FOLLOW_quantity_in_unnamedmoleculeamount41836);
            	    quantity402=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity402.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:65: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount41838_static.FOLLOW_mixture_in_unnamedmoleculeamount41838);
            	    mixture403=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture403.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, unnamedmoleculeamount4_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount4"

    public static class alphanumericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alphanumericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:223:1: alphanumericOrIdentifierCompoundReference : ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? ) ;
    public final ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return alphanumericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.alphanumericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int alphanumericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference404 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier405 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum406 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric407 = null;


        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_cdAlphanum=new RewriteRuleSubtreeStream(adaptor,"rule cdAlphanum");
        RewriteRuleSubtreeStream stream_bracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule bracketedNumeric");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:3: ( ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:5: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:5: ( squareBracketedReference | identifierOrBracketedIdentifier | cdAlphanum | bracketedNumeric )
            int alt122=4;
            switch ( input.LA(1) ) {
            case 139:
                {
                alt122=1;
                }
                break;
            case 141:
            case 146:
                {
                alt122=2;
                }
                break;
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 146:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 141:
                                {
                                alt122=2;
                                }
                                break;
                            case 144:
                                {
                                alt122=4;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 122, 8, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 122, 6, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 141:
                        {
                        alt122=2;
                        }
                        break;
                    case 38:
                        {
                        alt122=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 122, 5, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 122, 3, input);

                    throw nvae;
                }

                }
                break;
            case 38:
                {
                alt122=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }

            switch (alt122) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:6: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference1851_static.FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference1851);
                    squareBracketedReference404=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference404.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:31: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference1853_static.FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference1853);
                    identifierOrBracketedIdentifier405=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier405.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:63: cdAlphanum
                    {
                    pushFollow(FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference1855_static.FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference1855);
                    cdAlphanum406=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cdAlphanum.add(cdAlphanum406.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:74: bracketedNumeric
                    {
                    pushFollow(FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference1857_static.FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference1857);
                    bracketedNumeric407=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bracketedNumeric.add(bracketedNumeric407.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: bracketedNumeric, squareBracketedReference, cdAlphanum, identifierOrBracketedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 224:92: -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:95: ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( cdAlphanum )? ( bracketedNumeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:117: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:143: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:176: ( cdAlphanum )?
                if ( stream_cdAlphanum.hasNext() ) {
                    adaptor.addChild(root_1, stream_cdAlphanum.nextTree());

                }
                stream_cdAlphanum.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:224:188: ( bracketedNumeric )?
                if ( stream_bracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_bracketedNumeric.nextTree());

                }
                stream_bracketedNumeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, alphanumericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alphanumericOrIdentifierCompoundReference"

    public static class unnamedmoleculeamount5_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount5"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:226:1: unnamedmoleculeamount5 : numberCompoundReference ( citation )? quantity ( citation | quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount5_return unnamedmoleculeamount5() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount5_return retval = new ChemicalChunkerParser.unnamedmoleculeamount5_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount5_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference408 = null;

        ChemicalChunkerParser.citation_return citation409 = null;

        ChemicalChunkerParser.quantity_return quantity410 = null;

        ChemicalChunkerParser.citation_return citation411 = null;

        ChemicalChunkerParser.quantity_return quantity412 = null;

        ChemicalChunkerParser.mixture_return mixture413 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:2: ( numberCompoundReference ( citation )? quantity ( citation | quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:4: numberCompoundReference ( citation )? quantity ( citation | quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numberCompoundReference_in_unnamedmoleculeamount51885_static.FOLLOW_numberCompoundReference_in_unnamedmoleculeamount51885);
            numberCompoundReference408=numberCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numberCompoundReference408.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:28: ( citation )?
            int alt123=2;
            alt123 = dfa123.predict(input);
            switch (alt123) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: citation
                    {
                    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount51887_static.FOLLOW_citation_in_unnamedmoleculeamount51887);
                    citation409=citation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation409.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount51890_static.FOLLOW_quantity_in_unnamedmoleculeamount51890);
            quantity410=quantity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity410.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:47: ( citation | quantity | mixture )*
            loop124:
            do {
                int alt124=4;
                alt124 = dfa124.predict(input);
                switch (alt124) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:48: citation
            	    {
            	    pushFollow(FOLLOW_citation_in_unnamedmoleculeamount51893_static.FOLLOW_citation_in_unnamedmoleculeamount51893);
            	    citation411=citation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, citation411.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:57: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount51895_static.FOLLOW_quantity_in_unnamedmoleculeamount51895);
            	    quantity412=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity412.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:66: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount51897_static.FOLLOW_mixture_in_unnamedmoleculeamount51897);
            	    mixture413=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture413.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, unnamedmoleculeamount5_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount5"

    public static class numberCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:229:1: numberCompoundReference : cd -> ^( REFERENCETOCOMPOUND cd ) ;
    public final ChemicalChunkerParser.numberCompoundReference_return numberCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numberCompoundReference_return retval = new ChemicalChunkerParser.numberCompoundReference_return();
        retval.start = input.LT(1);
        int numberCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd414 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:3: ( cd -> ^( REFERENCETOCOMPOUND cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:5: cd
            {
            pushFollow(FOLLOW_cd_in_numberCompoundReference1909_static.FOLLOW_cd_in_numberCompoundReference1909);
            cd414=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd414.getTree());


            // AST REWRITE
            // elements: cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 230:8: -> ^( REFERENCETOCOMPOUND cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:230:11: ^( REFERENCETOCOMPOUND cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, numberCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numberCompoundReference"

    public static class unnamedmoleculeamount6_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount6"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:232:1: unnamedmoleculeamount6 : ( quantity | mixture )+ ( jjcomp )? nnchementity ( quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount6_return unnamedmoleculeamount6() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount6_return retval = new ChemicalChunkerParser.unnamedmoleculeamount6_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount6_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity_return quantity415 = null;

        ChemicalChunkerParser.mixture_return mixture416 = null;

        ChemicalChunkerParser.jjcomp_return jjcomp417 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity418 = null;

        ChemicalChunkerParser.quantity_return quantity419 = null;

        ChemicalChunkerParser.mixture_return mixture420 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:2: ( ( quantity | mixture )+ ( jjcomp )? nnchementity ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:3: ( quantity | mixture )+ ( jjcomp )? nnchementity ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:3: ( quantity | mixture )+
            int cnt125=0;
            loop125:
            do {
                int alt125=3;
                switch ( input.LA(1) ) {
                case 143:
                    {
                    int LA125_3 = input.LA(2);

                    if ( (synpred349_ChemicalChunker()) ) {
                        alt125=1;
                    }
                    else if ( (synpred350_ChemicalChunker()) ) {
                        alt125=2;
                    }


                    }
                    break;
                case 146:
                    {
                    int LA125_4 = input.LA(2);

                    if ( (synpred349_ChemicalChunker()) ) {
                        alt125=1;
                    }
                    else if ( (synpred350_ChemicalChunker()) ) {
                        alt125=2;
                    }


                    }
                    break;
                case 38:
                case 73:
                case 130:
                    {
                    alt125=1;
                    }
                    break;
                case 133:
                    {
                    alt125=2;
                    }
                    break;

                }

                switch (alt125) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:4: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount61926_static.FOLLOW_quantity_in_unnamedmoleculeamount61926);
            	    quantity415=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity415.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:13: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount61928_static.FOLLOW_mixture_in_unnamedmoleculeamount61928);
            	    mixture416=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture416.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:23: ( jjcomp )?
            int alt126=2;
            switch ( input.LA(1) ) {
                case 46:
                    {
                    alt126=1;
                    }
                    break;
            }

            switch (alt126) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: jjcomp
                    {
                    pushFollow(FOLLOW_jjcomp_in_unnamedmoleculeamount61932_static.FOLLOW_jjcomp_in_unnamedmoleculeamount61932);
                    jjcomp417=jjcomp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjcomp417.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount61935_static.FOLLOW_nnchementity_in_unnamedmoleculeamount61935);
            nnchementity418=nnchementity();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity418.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:44: ( quantity | mixture )*
            loop127:
            do {
                int alt127=3;
                alt127 = dfa127.predict(input);
                switch (alt127) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:45: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount61938_static.FOLLOW_quantity_in_unnamedmoleculeamount61938);
            	    quantity419=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity419.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:54: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount61940_static.FOLLOW_mixture_in_unnamedmoleculeamount61940);
            	    mixture420=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture420.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, unnamedmoleculeamount6_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount6"

    public static class asAstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asAstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:235:1: asAstate : inas ( dt )? ( jj | jjchem )* nnstate ( quantity )* ;
    public final ChemicalChunkerParser.asAstate_return asAstate() throws RecognitionException {
        ChemicalChunkerParser.asAstate_return retval = new ChemicalChunkerParser.asAstate_return();
        retval.start = input.LT(1);
        int asAstate_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.inas_return inas421 = null;

        ChemicalChunkerParser.dt_return dt422 = null;

        ChemicalChunkerParser.jj_return jj423 = null;

        ChemicalChunkerParser.jjchem_return jjchem424 = null;

        ChemicalChunkerParser.nnstate_return nnstate425 = null;

        ChemicalChunkerParser.quantity_return quantity426 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:2: ( inas ( dt )? ( jj | jjchem )* nnstate ( quantity )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:4: inas ( dt )? ( jj | jjchem )* nnstate ( quantity )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inas_in_asAstate1951_static.FOLLOW_inas_in_asAstate1951);
            inas421=inas();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inas421.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:9: ( dt )?
            int alt128=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    alt128=1;
                    }
                    break;
            }

            switch (alt128) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_asAstate1953_static.FOLLOW_dt_in_asAstate1953);
                    dt422=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt422.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:13: ( jj | jjchem )*
            loop129:
            do {
                int alt129=3;
                switch ( input.LA(1) ) {
                case 151:
                    {
                    alt129=1;
                    }
                    break;
                case 45:
                    {
                    alt129=2;
                    }
                    break;

                }

                switch (alt129) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:14: jj
            	    {
            	    pushFollow(FOLLOW_jj_in_asAstate1957_static.FOLLOW_jj_in_asAstate1957);
            	    jj423=jj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj423.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:17: jjchem
            	    {
            	    pushFollow(FOLLOW_jjchem_in_asAstate1959_static.FOLLOW_jjchem_in_asAstate1959);
            	    jjchem424=jjchem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem424.getTree());

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);

            pushFollow(FOLLOW_nnstate_in_asAstate1963_static.FOLLOW_nnstate_in_asAstate1963);
            nnstate425=nnstate();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate425.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:34: ( quantity )*
            loop130:
            do {
                int alt130=2;
                alt130 = dfa130.predict(input);
                switch (alt130) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_asAstate1965_static.FOLLOW_quantity_in_asAstate1965);
            	    quantity426=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity426.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, asAstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "asAstate"

    public static class unnamedmoleculeamount7_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount7"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:238:1: unnamedmoleculeamount7 : ( nnchementity | {...}?) numericOrIdentifierCompoundReference ( quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount7_return unnamedmoleculeamount7() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount7_return retval = new ChemicalChunkerParser.unnamedmoleculeamount7_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount7_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity427 = null;

        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference428 = null;

        ChemicalChunkerParser.quantity_return quantity429 = null;

        ChemicalChunkerParser.mixture_return mixture430 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:2: ( ( nnchementity | {...}?) numericOrIdentifierCompoundReference ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:4: ( nnchementity | {...}?) numericOrIdentifierCompoundReference ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:4: ( nnchementity | {...}?)
            int alt131=2;
            switch ( input.LA(1) ) {
            case 71:
                {
                alt131=1;
                }
                break;
            case 38:
            case 139:
            case 141:
            case 143:
            case 146:
                {
                alt131=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;
            }

            switch (alt131) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:5: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount71976_static.FOLLOW_nnchementity_in_unnamedmoleculeamount71976);
                    nnchementity427=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity427.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:20: {...}?
                    {
                    if ( !((numberLooksLikeAReferenceToACompound(input))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "unnamedmoleculeamount7", "numberLooksLikeAReferenceToACompound(input)");
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount71983_static.FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount71983);
            numericOrIdentifierCompoundReference428=numericOrIdentifierCompoundReference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numericOrIdentifierCompoundReference428.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:105: ( quantity | mixture )*
            loop132:
            do {
                int alt132=3;
                alt132 = dfa132.predict(input);
                switch (alt132) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:106: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount71986_static.FOLLOW_quantity_in_unnamedmoleculeamount71986);
            	    quantity429=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity429.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:115: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount71988_static.FOLLOW_mixture_in_unnamedmoleculeamount71988);
            	    mixture430=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture430.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, unnamedmoleculeamount7_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount7"

    public static class unnamedmoleculeamount8_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unnamedmoleculeamount8"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:241:1: unnamedmoleculeamount8 : ( nnchementity | nnstate ) ( inas ( dt )? ( jj | jjchem )* nnstate )? ( quantity )+ ( quantity | mixture )* ;
    public final ChemicalChunkerParser.unnamedmoleculeamount8_return unnamedmoleculeamount8() throws RecognitionException {
        ChemicalChunkerParser.unnamedmoleculeamount8_return retval = new ChemicalChunkerParser.unnamedmoleculeamount8_return();
        retval.start = input.LT(1);
        int unnamedmoleculeamount8_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnchementity_return nnchementity431 = null;

        ChemicalChunkerParser.nnstate_return nnstate432 = null;

        ChemicalChunkerParser.inas_return inas433 = null;

        ChemicalChunkerParser.dt_return dt434 = null;

        ChemicalChunkerParser.jj_return jj435 = null;

        ChemicalChunkerParser.jjchem_return jjchem436 = null;

        ChemicalChunkerParser.nnstate_return nnstate437 = null;

        ChemicalChunkerParser.quantity_return quantity438 = null;

        ChemicalChunkerParser.quantity_return quantity439 = null;

        ChemicalChunkerParser.mixture_return mixture440 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:2: ( ( nnchementity | nnstate ) ( inas ( dt )? ( jj | jjchem )* nnstate )? ( quantity )+ ( quantity | mixture )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:4: ( nnchementity | nnstate ) ( inas ( dt )? ( jj | jjchem )* nnstate )? ( quantity )+ ( quantity | mixture )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:4: ( nnchementity | nnstate )
            int alt133=2;
            switch ( input.LA(1) ) {
            case 71:
                {
                alt133=1;
                }
                break;
            case 63:
                {
                alt133=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;
            }

            switch (alt133) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:5: nnchementity
                    {
                    pushFollow(FOLLOW_nnchementity_in_unnamedmoleculeamount82000_static.FOLLOW_nnchementity_in_unnamedmoleculeamount82000);
                    nnchementity431=nnchementity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnchementity431.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:20: nnstate
                    {
                    pushFollow(FOLLOW_nnstate_in_unnamedmoleculeamount82004_static.FOLLOW_nnstate_in_unnamedmoleculeamount82004);
                    nnstate432=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate432.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:29: ( inas ( dt )? ( jj | jjchem )* nnstate )?
            int alt136=2;
            switch ( input.LA(1) ) {
                case 47:
                    {
                    alt136=1;
                    }
                    break;
            }

            switch (alt136) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:30: inas ( dt )? ( jj | jjchem )* nnstate
                    {
                    pushFollow(FOLLOW_inas_in_unnamedmoleculeamount82008_static.FOLLOW_inas_in_unnamedmoleculeamount82008);
                    inas433=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas433.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:35: ( dt )?
                    int alt134=2;
                    switch ( input.LA(1) ) {
                        case 147:
                            {
                            alt134=1;
                            }
                            break;
                    }

                    switch (alt134) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                            {
                            pushFollow(FOLLOW_dt_in_unnamedmoleculeamount82010_static.FOLLOW_dt_in_unnamedmoleculeamount82010);
                            dt434=dt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dt434.getTree());

                            }
                            break;

                    }

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:39: ( jj | jjchem )*
                    loop135:
                    do {
                        int alt135=3;
                        switch ( input.LA(1) ) {
                        case 151:
                            {
                            alt135=1;
                            }
                            break;
                        case 45:
                            {
                            alt135=2;
                            }
                            break;

                        }

                        switch (alt135) {
                    	case 1 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:40: jj
                    	    {
                    	    pushFollow(FOLLOW_jj_in_unnamedmoleculeamount82014_static.FOLLOW_jj_in_unnamedmoleculeamount82014);
                    	    jj435=jj();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj435.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:43: jjchem
                    	    {
                    	    pushFollow(FOLLOW_jjchem_in_unnamedmoleculeamount82016_static.FOLLOW_jjchem_in_unnamedmoleculeamount82016);
                    	    jjchem436=jjchem();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem436.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop135;
                        }
                    } while (true);

                    pushFollow(FOLLOW_nnstate_in_unnamedmoleculeamount82020_static.FOLLOW_nnstate_in_unnamedmoleculeamount82020);
                    nnstate437=nnstate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnstate437.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:62: ( quantity )+
            int cnt137=0;
            loop137:
            do {
                int alt137=2;
                alt137 = dfa137.predict(input);
                switch (alt137) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount82024_static.FOLLOW_quantity_in_unnamedmoleculeamount82024);
            	    quantity438=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity438.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt137 >= 1 ) break loop137;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(137, input);
                        throw eee;
                }
                cnt137++;
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:72: ( quantity | mixture )*
            loop138:
            do {
                int alt138=3;
                alt138 = dfa138.predict(input);
                switch (alt138) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:73: quantity
            	    {
            	    pushFollow(FOLLOW_quantity_in_unnamedmoleculeamount82028_static.FOLLOW_quantity_in_unnamedmoleculeamount82028);
            	    quantity439=quantity();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity439.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:82: mixture
            	    {
            	    pushFollow(FOLLOW_mixture_in_unnamedmoleculeamount82030_static.FOLLOW_mixture_in_unnamedmoleculeamount82030);
            	    mixture440=mixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mixture440.getTree());

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, unnamedmoleculeamount8_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unnamedmoleculeamount8"

    public static class numericOrIdentifierCompoundReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrIdentifierCompoundReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:244:1: numericOrIdentifierCompoundReference : ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? ) ;
    public final ChemicalChunkerParser.numericOrIdentifierCompoundReference_return numericOrIdentifierCompoundReference() throws RecognitionException {
        ChemicalChunkerParser.numericOrIdentifierCompoundReference_return retval = new ChemicalChunkerParser.numericOrIdentifierCompoundReference_return();
        retval.start = input.LT(1);
        int numericOrIdentifierCompoundReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference441 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier442 = null;

        ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric443 = null;


        RewriteRuleSubtreeStream stream_squareBracketedReference=new RewriteRuleSubtreeStream(adaptor,"rule squareBracketedReference");
        RewriteRuleSubtreeStream stream_numericOrBracketedNumeric=new RewriteRuleSubtreeStream(adaptor,"rule numericOrBracketedNumeric");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:3: ( ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric ) -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )
            int alt139=3;
            alt139 = dfa139.predict(input);
            switch (alt139) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:6: squareBracketedReference
                    {
                    pushFollow(FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference2043_static.FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference2043);
                    squareBracketedReference441=squareBracketedReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_squareBracketedReference.add(squareBracketedReference441.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:31: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference2045_static.FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference2045);
                    identifierOrBracketedIdentifier442=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier442.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:63: numericOrBracketedNumeric
                    {
                    pushFollow(FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference2047_static.FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference2047);
                    numericOrBracketedNumeric443=numericOrBracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numericOrBracketedNumeric.add(numericOrBracketedNumeric443.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: squareBracketedReference, numericOrBracketedNumeric, identifierOrBracketedIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 245:90: -> ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:93: ^( REFERENCETOCOMPOUND ( squareBracketedReference )? ( identifierOrBracketedIdentifier )? ( numericOrBracketedNumeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:115: ( squareBracketedReference )?
                if ( stream_squareBracketedReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_squareBracketedReference.nextTree());

                }
                stream_squareBracketedReference.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:141: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:174: ( numericOrBracketedNumeric )?
                if ( stream_numericOrBracketedNumeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericOrBracketedNumeric.nextTree());

                }
                stream_numericOrBracketedNumeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, numericOrIdentifierCompoundReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrIdentifierCompoundReference"

    public static class squareBracketedReference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "squareBracketedReference"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:247:1: squareBracketedReference : lsqb numeric rsqb ;
    public final ChemicalChunkerParser.squareBracketedReference_return squareBracketedReference() throws RecognitionException {
        ChemicalChunkerParser.squareBracketedReference_return retval = new ChemicalChunkerParser.squareBracketedReference_return();
        retval.start = input.LT(1);
        int squareBracketedReference_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lsqb_return lsqb444 = null;

        ChemicalChunkerParser.numeric_return numeric445 = null;

        ChemicalChunkerParser.rsqb_return rsqb446 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:2: ( lsqb numeric rsqb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:248:4: lsqb numeric rsqb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lsqb_in_squareBracketedReference2073_static.FOLLOW_lsqb_in_squareBracketedReference2073);
            lsqb444=lsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lsqb444.getTree());
            pushFollow(FOLLOW_numeric_in_squareBracketedReference2075_static.FOLLOW_numeric_in_squareBracketedReference2075);
            numeric445=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric445.getTree());
            pushFollow(FOLLOW_rsqb_in_squareBracketedReference2077_static.FOLLOW_rsqb_in_squareBracketedReference2077);
            rsqb446=rsqb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rsqb446.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, squareBracketedReference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "squareBracketedReference"

    public static class quantity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:1: quantity : ( quantity1Node | quantity2Node ) ;
    public final ChemicalChunkerParser.quantity_return quantity() throws RecognitionException {
        ChemicalChunkerParser.quantity_return retval = new ChemicalChunkerParser.quantity_return();
        retval.start = input.LT(1);
        int quantity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1Node_return quantity1Node447 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node448 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:11: ( ( quantity1Node | quantity2Node ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:14: ( quantity1Node | quantity2Node )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:14: ( quantity1Node | quantity2Node )
            int alt140=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt140=1;
                }
                break;
            case 38:
            case 73:
            case 130:
            case 146:
                {
                alt140=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;
            }

            switch (alt140) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:15: quantity1Node
                    {
                    pushFollow(FOLLOW_quantity1Node_in_quantity2088_static.FOLLOW_quantity1Node_in_quantity2088);
                    quantity1Node447=quantity1Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity1Node447.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:250:29: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_quantity2090_static.FOLLOW_quantity2Node_in_quantity2090);
                    quantity2Node448=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node448.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, quantity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity"

    public static class quantity1Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:1: quantity1Node : quantity1 -> ^( QUANTITY quantity1 ) ;
    public final ChemicalChunkerParser.quantity1Node_return quantity1Node() throws RecognitionException {
        ChemicalChunkerParser.quantity1Node_return retval = new ChemicalChunkerParser.quantity1Node_return();
        retval.start = input.LT(1);
        int quantity1Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity1_return quantity1449 = null;


        RewriteRuleSubtreeStream stream_quantity1=new RewriteRuleSubtreeStream(adaptor,"rule quantity1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:15: ( quantity1 -> ^( QUANTITY quantity1 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:17: quantity1
            {
            pushFollow(FOLLOW_quantity1_in_quantity1Node2099_static.FOLLOW_quantity1_in_quantity1Node2099);
            quantity1449=quantity1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity1.add(quantity1449.getTree());


            // AST REWRITE
            // elements: quantity1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 252:27: -> ^( QUANTITY quantity1 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:252:32: ^( QUANTITY quantity1 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity1.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, quantity1Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1Node"

    public static class quantity1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:254:1: quantity1 : lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb ;
    public final ChemicalChunkerParser.quantity1_return quantity1() throws RecognitionException {
        ChemicalChunkerParser.quantity1_return retval = new ChemicalChunkerParser.quantity1_return();
        retval.start = input.LT(1);
        int quantity1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb450 = null;

        ChemicalChunkerParser.measurements_return measurements451 = null;

        ChemicalChunkerParser.comma_return comma452 = null;

        ChemicalChunkerParser.measurements_return measurements453 = null;

        ChemicalChunkerParser.comma_return comma454 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase455 = null;

        ChemicalChunkerParser.stop_return stop456 = null;

        ChemicalChunkerParser.preparationphrase_return preparationphrase457 = null;

        ChemicalChunkerParser.rrb_return rrb458 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:2: ( lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:4: lrb measurements ( comma measurements )* ( comma preparationphrase )* ( stop preparationphrase )* rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_quantity12119_static.FOLLOW_lrb_in_quantity12119);
            lrb450=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb450.getTree());
            pushFollow(FOLLOW_measurements_in_quantity12121_static.FOLLOW_measurements_in_quantity12121);
            measurements451=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements451.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:21: ( comma measurements )*
            loop141:
            do {
                int alt141=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 38:
                        case 73:
                        case 130:
                        case 146:
                            {
                            alt141=1;
                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt141) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:22: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12124_static.FOLLOW_comma_in_quantity12124);
            	    comma452=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma452.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity12127_static.FOLLOW_measurements_in_quantity12127);
            	    measurements453=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements453.getTree());

            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:44: ( comma preparationphrase )*
            loop142:
            do {
                int alt142=2;
                switch ( input.LA(1) ) {
                case 133:
                    {
                    alt142=1;
                    }
                    break;

                }

                switch (alt142) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:45: comma preparationphrase
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity12132_static.FOLLOW_comma_in_quantity12132);
            	    comma454=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma454.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12134_static.FOLLOW_preparationphrase_in_quantity12134);
            	    preparationphrase455=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase455.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:71: ( stop preparationphrase )*
            loop143:
            do {
                int alt143=2;
                switch ( input.LA(1) ) {
                case 137:
                    {
                    alt143=1;
                    }
                    break;

                }

                switch (alt143) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:255:72: stop preparationphrase
            	    {
            	    pushFollow(FOLLOW_stop_in_quantity12139_static.FOLLOW_stop_in_quantity12139);
            	    stop456=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop456.getTree());
            	    pushFollow(FOLLOW_preparationphrase_in_quantity12141_static.FOLLOW_preparationphrase_in_quantity12141);
            	    preparationphrase457=preparationphrase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, preparationphrase457.getTree());

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);

            pushFollow(FOLLOW_rrb_in_quantity12146_static.FOLLOW_rrb_in_quantity12146);
            rrb458=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb458.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, quantity1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity1"

    public static class quantity2Node_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2Node"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:1: quantity2Node : quantity2 -> ^( QUANTITY quantity2 ) ;
    public final ChemicalChunkerParser.quantity2Node_return quantity2Node() throws RecognitionException {
        ChemicalChunkerParser.quantity2Node_return retval = new ChemicalChunkerParser.quantity2Node_return();
        retval.start = input.LT(1);
        int quantity2Node_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.quantity2_return quantity2459 = null;


        RewriteRuleSubtreeStream stream_quantity2=new RewriteRuleSubtreeStream(adaptor,"rule quantity2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:15: ( quantity2 -> ^( QUANTITY quantity2 ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:17: quantity2
            {
            pushFollow(FOLLOW_quantity2_in_quantity2Node2154_static.FOLLOW_quantity2_in_quantity2Node2154);
            quantity2459=quantity2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quantity2.add(quantity2459.getTree());


            // AST REWRITE
            // elements: quantity2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 257:27: -> ^( QUANTITY quantity2 )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:257:32: ^( QUANTITY quantity2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUANTITY, "QUANTITY"), root_1);

                adaptor.addChild(root_1, stream_quantity2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, quantity2Node_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2Node"

    public static class quantity2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quantity2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:259:1: quantity2 : measurements ( comma measurements )* ;
    public final ChemicalChunkerParser.quantity2_return quantity2() throws RecognitionException {
        ChemicalChunkerParser.quantity2_return retval = new ChemicalChunkerParser.quantity2_return();
        retval.start = input.LT(1);
        int quantity2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.measurements_return measurements460 = null;

        ChemicalChunkerParser.comma_return comma461 = null;

        ChemicalChunkerParser.measurements_return measurements462 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:2: ( measurements ( comma measurements )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:5: measurements ( comma measurements )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measurements_in_quantity22175_static.FOLLOW_measurements_in_quantity22175);
            measurements460=measurements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements460.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:18: ( comma measurements )*
            loop144:
            do {
                int alt144=2;
                alt144 = dfa144.predict(input);
                switch (alt144) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:19: comma measurements
            	    {
            	    pushFollow(FOLLOW_comma_in_quantity22178_static.FOLLOW_comma_in_quantity22178);
            	    comma461=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma461.getTree());
            	    pushFollow(FOLLOW_measurements_in_quantity22181_static.FOLLOW_measurements_in_quantity22181);
            	    measurements462=measurements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurements462.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, quantity2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quantity2"

    public static class measurements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurements"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:262:1: measurements : ( cd nn )? ( multiple | measurementtypes ) ( dt )? ;
    public final ChemicalChunkerParser.measurements_return measurements() throws RecognitionException {
        ChemicalChunkerParser.measurements_return retval = new ChemicalChunkerParser.measurements_return();
        retval.start = input.LT(1);
        int measurements_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd463 = null;

        ChemicalChunkerParser.nn_return nn464 = null;

        ChemicalChunkerParser.multiple_return multiple465 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes466 = null;

        ChemicalChunkerParser.dt_return dt467 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:2: ( ( cd nn )? ( multiple | measurementtypes ) ( dt )? )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:3: ( cd nn )? ( multiple | measurementtypes ) ( dt )?
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:3: ( cd nn )?
            int alt145=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                                case 156:
                                    {
                                    switch ( input.LA(4) ) {
                                        case TOKEN:
                                            {
                                            switch ( input.LA(5) ) {
                                                case 38:
                                                case 73:
                                                case 130:
                                                case 146:
                                                    {
                                                    alt145=1;
                                                    }
                                                    break;
                                            }

                                            }
                                            break;
                                    }

                                    }
                                    break;
                            }

                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt145) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:4: cd nn
                    {
                    pushFollow(FOLLOW_cd_in_measurements2194_static.FOLLOW_cd_in_measurements2194);
                    cd463=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd463.getTree());
                    pushFollow(FOLLOW_nn_in_measurements2196_static.FOLLOW_nn_in_measurements2196);
                    nn464=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn464.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:12: ( multiple | measurementtypes )
            int alt146=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 65:
                    case 66:
                    case 67:
                    case 69:
                    case 70:
                    case 138:
                    case 146:
                    case 156:
                        {
                        alt146=2;
                        }
                        break;
                    case 44:
                        {
                        alt146=1;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 146, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 146, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
            case 73:
            case 130:
                {
                alt146=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }

            switch (alt146) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:13: multiple
                    {
                    pushFollow(FOLLOW_multiple_in_measurements2201_static.FOLLOW_multiple_in_measurements2201);
                    multiple465=multiple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiple465.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:22: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_measurements2203_static.FOLLOW_measurementtypes_in_measurements2203);
                    measurementtypes466=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, measurementtypes466.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:40: ( dt )?
            int alt147=2;
            switch ( input.LA(1) ) {
                case 147:
                    {
                    switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            int LA147_3 = input.LA(3);

                            if ( (synpred378_ChemicalChunker()) ) {
                                alt147=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
            }

            switch (alt147) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dt
                    {
                    pushFollow(FOLLOW_dt_in_measurements2206_static.FOLLOW_dt_in_measurements2206);
                    dt467=dt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dt467.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, measurements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurements"

    public static class multiple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiple"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:1: multiple : cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) ;
    public final ChemicalChunkerParser.multiple_return multiple() throws RecognitionException {
        ChemicalChunkerParser.multiple_return retval = new ChemicalChunkerParser.multiple_return();
        retval.start = input.LT(1);
        int multiple_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd468 = null;

        ChemicalChunkerParser.cdunicode_return cdunicode469 = null;

        ChemicalChunkerParser.measurementtypes_return measurementtypes470 = null;


        RewriteRuleSubtreeStream stream_cdunicode=new RewriteRuleSubtreeStream(adaptor,"rule cdunicode");
        RewriteRuleSubtreeStream stream_measurementtypes=new RewriteRuleSubtreeStream(adaptor,"rule measurementtypes");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:10: ( cd cdunicode ( measurementtypes )? -> ^( MULTIPLE cd cdunicode ( measurementtypes )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:12: cd cdunicode ( measurementtypes )?
            {
            pushFollow(FOLLOW_cd_in_multiple2214_static.FOLLOW_cd_in_multiple2214);
            cd468=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd468.getTree());
            pushFollow(FOLLOW_cdunicode_in_multiple2216_static.FOLLOW_cdunicode_in_multiple2216);
            cdunicode469=cdunicode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdunicode.add(cdunicode469.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:25: ( measurementtypes )?
            int alt148=2;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: measurementtypes
                    {
                    pushFollow(FOLLOW_measurementtypes_in_multiple2218_static.FOLLOW_measurementtypes_in_multiple2218);
                    measurementtypes470=measurementtypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_measurementtypes.add(measurementtypes470.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: measurementtypes, cdunicode, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 264:43: -> ^( MULTIPLE cd cdunicode ( measurementtypes )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:46: ^( MULTIPLE cd cdunicode ( measurementtypes )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MULTIPLE, "MULTIPLE"), root_1);

                adaptor.addChild(root_1, stream_cd.nextTree());
                adaptor.addChild(root_1, stream_cdunicode.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:72: ( measurementtypes )?
                if ( stream_measurementtypes.hasNext() ) {
                    adaptor.addChild(root_1, stream_measurementtypes.nextTree());

                }
                stream_measurementtypes.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, multiple_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiple"

    public static class measurementtypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measurementtypes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:265:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );
    public final ChemicalChunkerParser.measurementtypes_return measurementtypes() throws RecognitionException {
        ChemicalChunkerParser.measurementtypes_return retval = new ChemicalChunkerParser.measurementtypes_return();
        retval.start = input.LT(1);
        int measurementtypes_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.molar_return molar471 = null;

        ChemicalChunkerParser.amount_return amount472 = null;

        ChemicalChunkerParser.mass_return mass473 = null;

        ChemicalChunkerParser.volume_return volume474 = null;

        ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity475 = null;

        ChemicalChunkerParser.equivalent_return equivalent476 = null;

        ChemicalChunkerParser.yield_return yield477 = null;

        ChemicalChunkerParser.percent_return percent478 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:2: ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent )
            int alt149=8;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:4: molar
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_molar_in_measurementtypes2243_static.FOLLOW_molar_in_measurementtypes2243);
                    molar471=molar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molar471.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:10: amount
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_amount_in_measurementtypes2245_static.FOLLOW_amount_in_measurementtypes2245);
                    amount472=amount();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, amount472.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:17: mass
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_mass_in_measurementtypes2247_static.FOLLOW_mass_in_measurementtypes2247);
                    mass473=mass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mass473.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:22: volume
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_volume_in_measurementtypes2249_static.FOLLOW_volume_in_measurementtypes2249);
                    volume474=volume();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, volume474.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:29: logHydrogenActivity
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_logHydrogenActivity_in_measurementtypes2251_static.FOLLOW_logHydrogenActivity_in_measurementtypes2251);
                    logHydrogenActivity475=logHydrogenActivity();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logHydrogenActivity475.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:49: equivalent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_equivalent_in_measurementtypes2253_static.FOLLOW_equivalent_in_measurementtypes2253);
                    equivalent476=equivalent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, equivalent476.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:60: yield
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_yield_in_measurementtypes2255_static.FOLLOW_yield_in_measurementtypes2255);
                    yield477=yield();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield477.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:66: percent
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_percent_in_measurementtypes2257_static.FOLLOW_percent_in_measurementtypes2257);
                    percent478=percent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, percent478.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, measurementtypes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measurementtypes"

    public static class molar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "molar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:1: molar : ( cd )+ nnmolar -> ^( MOLAR ( cd )+ nnmolar ) ;
    public final ChemicalChunkerParser.molar_return molar() throws RecognitionException {
        ChemicalChunkerParser.molar_return retval = new ChemicalChunkerParser.molar_return();
        retval.start = input.LT(1);
        int molar_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd479 = null;

        ChemicalChunkerParser.nnmolar_return nnmolar480 = null;


        RewriteRuleSubtreeStream stream_nnmolar=new RewriteRuleSubtreeStream(adaptor,"rule nnmolar");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:7: ( ( cd )+ nnmolar -> ^( MOLAR ( cd )+ nnmolar ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:9: ( cd )+ nnmolar
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:9: ( cd )+
            int cnt150=0;
            loop150:
            do {
                int alt150=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt150=1;
                    }
                    break;

                }

                switch (alt150) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_molar2265_static.FOLLOW_cd_in_molar2265);
            	    cd479=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd479.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt150 >= 1 ) break loop150;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(150, input);
                        throw eee;
                }
                cnt150++;
            } while (true);

            pushFollow(FOLLOW_nnmolar_in_molar2268_static.FOLLOW_nnmolar_in_molar2268);
            nnmolar480=nnmolar();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmolar.add(nnmolar480.getTree());


            // AST REWRITE
            // elements: nnmolar, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 268:21: -> ^( MOLAR ( cd )+ nnmolar )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:268:24: ^( MOLAR ( cd )+ nnmolar )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MOLAR, "MOLAR"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmolar.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, molar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "molar"

    public static class amount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "amount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:1: amount : ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) ;
    public final ChemicalChunkerParser.amount_return amount() throws RecognitionException {
        ChemicalChunkerParser.amount_return retval = new ChemicalChunkerParser.amount_return();
        retval.start = input.LT(1);
        int amount_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd481 = null;

        ChemicalChunkerParser.nnamount_return nnamount482 = null;


        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        RewriteRuleSubtreeStream stream_nnamount=new RewriteRuleSubtreeStream(adaptor,"rule nnamount");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:8: ( ( cd )+ nnamount -> ^( AMOUNT ( cd )+ nnamount ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:10: ( cd )+ nnamount
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:10: ( cd )+
            int cnt151=0;
            loop151:
            do {
                int alt151=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt151=1;
                    }
                    break;

                }

                switch (alt151) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_amount2289_static.FOLLOW_cd_in_amount2289);
            	    cd481=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd481.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt151 >= 1 ) break loop151;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(151, input);
                        throw eee;
                }
                cnt151++;
            } while (true);

            pushFollow(FOLLOW_nnamount_in_amount2292_static.FOLLOW_nnamount_in_amount2292);
            nnamount482=nnamount();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnamount.add(nnamount482.getTree());


            // AST REWRITE
            // elements: nnamount, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 269:23: -> ^( AMOUNT ( cd )+ nnamount )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:269:26: ^( AMOUNT ( cd )+ nnamount )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AMOUNT, "AMOUNT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnamount.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, amount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "amount"

    public static class mass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:1: mass : ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) ;
    public final ChemicalChunkerParser.mass_return mass() throws RecognitionException {
        ChemicalChunkerParser.mass_return retval = new ChemicalChunkerParser.mass_return();
        retval.start = input.LT(1);
        int mass_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd483 = null;

        ChemicalChunkerParser.nnmass_return nnmass484 = null;


        RewriteRuleSubtreeStream stream_nnmass=new RewriteRuleSubtreeStream(adaptor,"rule nnmass");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:6: ( ( cd )+ nnmass -> ^( MASS ( cd )+ nnmass ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:8: ( cd )+ nnmass
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:8: ( cd )+
            int cnt152=0;
            loop152:
            do {
                int alt152=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt152=1;
                    }
                    break;

                }

                switch (alt152) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mass2313_static.FOLLOW_cd_in_mass2313);
            	    cd483=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd483.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt152 >= 1 ) break loop152;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(152, input);
                        throw eee;
                }
                cnt152++;
            } while (true);

            pushFollow(FOLLOW_nnmass_in_mass2316_static.FOLLOW_nnmass_in_mass2316);
            nnmass484=nnmass();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnmass.add(nnmass484.getTree());


            // AST REWRITE
            // elements: cd, nnmass
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 270:18: -> ^( MASS ( cd )+ nnmass )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:270:21: ^( MASS ( cd )+ nnmass )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MASS, "MASS"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnmass.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, mass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mass"

    public static class volume_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "volume"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:1: volume : ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) ;
    public final ChemicalChunkerParser.volume_return volume() throws RecognitionException {
        ChemicalChunkerParser.volume_return retval = new ChemicalChunkerParser.volume_return();
        retval.start = input.LT(1);
        int volume_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd485 = null;

        ChemicalChunkerParser.nnvol_return nnvol486 = null;


        RewriteRuleSubtreeStream stream_nnvol=new RewriteRuleSubtreeStream(adaptor,"rule nnvol");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:8: ( ( cd )+ nnvol -> ^( VOLUME ( cd )+ nnvol ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:10: ( cd )+ nnvol
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:10: ( cd )+
            int cnt153=0;
            loop153:
            do {
                int alt153=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt153=1;
                    }
                    break;

                }

                switch (alt153) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_volume2336_static.FOLLOW_cd_in_volume2336);
            	    cd485=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd485.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt153 >= 1 ) break loop153;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(153, input);
                        throw eee;
                }
                cnt153++;
            } while (true);

            pushFollow(FOLLOW_nnvol_in_volume2339_static.FOLLOW_nnvol_in_volume2339);
            nnvol486=nnvol();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnvol.add(nnvol486.getTree());


            // AST REWRITE
            // elements: nnvol, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 271:20: -> ^( VOLUME ( cd )+ nnvol )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:271:23: ^( VOLUME ( cd )+ nnvol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VOLUME, "VOLUME"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nnvol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, volume_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "volume"

    public static class logHydrogenActivity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "logHydrogenActivity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:1: logHydrogenActivity : nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) ;
    public final ChemicalChunkerParser.logHydrogenActivity_return logHydrogenActivity() throws RecognitionException {
        ChemicalChunkerParser.logHydrogenActivity_return retval = new ChemicalChunkerParser.logHydrogenActivity_return();
        retval.start = input.LT(1);
        int logHydrogenActivity_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnph_return nnph487 = null;

        ChemicalChunkerParser.sym_return sym488 = null;

        ChemicalChunkerParser.cd_return cd489 = null;


        RewriteRuleSubtreeStream stream_nnph=new RewriteRuleSubtreeStream(adaptor,"rule nnph");
        RewriteRuleSubtreeStream stream_sym=new RewriteRuleSubtreeStream(adaptor,"rule sym");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:21: ( nnph ( sym )? cd -> ^( PH nnph ( sym )? cd ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:23: nnph ( sym )? cd
            {
            pushFollow(FOLLOW_nnph_in_logHydrogenActivity2360_static.FOLLOW_nnph_in_logHydrogenActivity2360);
            nnph487=nnph();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnph.add(nnph487.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:28: ( sym )?
            int alt154=2;
            switch ( input.LA(1) ) {
                case 168:
                    {
                    alt154=1;
                    }
                    break;
            }

            switch (alt154) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: sym
                    {
                    pushFollow(FOLLOW_sym_in_logHydrogenActivity2362_static.FOLLOW_sym_in_logHydrogenActivity2362);
                    sym488=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sym.add(sym488.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_cd_in_logHydrogenActivity2365_static.FOLLOW_cd_in_logHydrogenActivity2365);
            cd489=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cd.add(cd489.getTree());


            // AST REWRITE
            // elements: nnph, cd, sym
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 272:36: -> ^( PH nnph ( sym )? cd )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:39: ^( PH nnph ( sym )? cd )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PH, "PH"), root_1);

                adaptor.addChild(root_1, stream_nnph.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:272:49: ( sym )?
                if ( stream_sym.hasNext() ) {
                    adaptor.addChild(root_1, stream_sym.nextTree());

                }
                stream_sym.reset();
                adaptor.addChild(root_1, stream_cd.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, logHydrogenActivity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "logHydrogenActivity"

    public static class equivalent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equivalent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:1: equivalent : ( cd )+ nneq -> ^( EQUIVALENT ( cd )+ nneq ) ;
    public final ChemicalChunkerParser.equivalent_return equivalent() throws RecognitionException {
        ChemicalChunkerParser.equivalent_return retval = new ChemicalChunkerParser.equivalent_return();
        retval.start = input.LT(1);
        int equivalent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd490 = null;

        ChemicalChunkerParser.nneq_return nneq491 = null;


        RewriteRuleSubtreeStream stream_nneq=new RewriteRuleSubtreeStream(adaptor,"rule nneq");
        RewriteRuleSubtreeStream stream_cd=new RewriteRuleSubtreeStream(adaptor,"rule cd");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:11: ( ( cd )+ nneq -> ^( EQUIVALENT ( cd )+ nneq ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:13: ( cd )+ nneq
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:13: ( cd )+
            int cnt155=0;
            loop155:
            do {
                int alt155=2;
                switch ( input.LA(1) ) {
                case 146:
                    {
                    alt155=1;
                    }
                    break;

                }

                switch (alt155) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_equivalent2385_static.FOLLOW_cd_in_equivalent2385);
            	    cd490=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_cd.add(cd490.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt155 >= 1 ) break loop155;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(155, input);
                        throw eee;
                }
                cnt155++;
            } while (true);

            pushFollow(FOLLOW_nneq_in_equivalent2388_static.FOLLOW_nneq_in_equivalent2388);
            nneq491=nneq();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nneq.add(nneq491.getTree());


            // AST REWRITE
            // elements: nneq, cd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 273:22: -> ^( EQUIVALENT ( cd )+ nneq )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:273:25: ^( EQUIVALENT ( cd )+ nneq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQUIVALENT, "EQUIVALENT"), root_1);

                if ( !(stream_cd.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_cd.hasNext() ) {
                    adaptor.addChild(root_1, stream_cd.nextTree());

                }
                stream_cd.reset();
                adaptor.addChild(root_1, stream_nneq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, equivalent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equivalent"

    public static class yield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:1: yield : ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) );
    public final ChemicalChunkerParser.yield_return yield() throws RecognitionException {
        ChemicalChunkerParser.yield_return retval = new ChemicalChunkerParser.yield_return();
        retval.start = input.LT(1);
        int yield_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.yield1_return yield1492 = null;

        ChemicalChunkerParser.yield2_return yield2493 = null;


        RewriteRuleSubtreeStream stream_yield2=new RewriteRuleSubtreeStream(adaptor,"rule yield2");
        RewriteRuleSubtreeStream stream_yield1=new RewriteRuleSubtreeStream(adaptor,"rule yield1");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:6: ( yield1 -> ^( YIELD yield1 ) | yield2 -> ^( YIELD yield2 ) )
            int alt156=2;
            switch ( input.LA(1) ) {
            case 130:
                {
                alt156=1;
                }
                break;
            case 38:
            case 146:
                {
                alt156=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:8: yield1
                    {
                    pushFollow(FOLLOW_yield1_in_yield2406_static.FOLLOW_yield1_in_yield2406);
                    yield1492=yield1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield1.add(yield1492.getTree());


                    // AST REWRITE
                    // elements: yield1
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 274:15: -> ^( YIELD yield1 )
                    {
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:18: ^( YIELD yield1 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:35: yield2
                    {
                    pushFollow(FOLLOW_yield2_in_yield2417_static.FOLLOW_yield2_in_yield2417);
                    yield2493=yield2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yield2.add(yield2493.getTree());


                    // AST REWRITE
                    // elements: yield2
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 274:42: -> ^( YIELD yield2 )
                    {
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:274:45: ^( YIELD yield2 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(YIELD, "YIELD"), root_1);

                        adaptor.addChild(root_1, stream_yield2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, yield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield"

    public static class yield1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:1: yield1 : nnyield inof percent ;
    public final ChemicalChunkerParser.yield1_return yield1() throws RecognitionException {
        ChemicalChunkerParser.yield1_return retval = new ChemicalChunkerParser.yield1_return();
        retval.start = input.LT(1);
        int yield1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnyield_return nnyield494 = null;

        ChemicalChunkerParser.inof_return inof495 = null;

        ChemicalChunkerParser.percent_return percent496 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:7: ( nnyield inof percent )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:275:9: nnyield inof percent
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nnyield_in_yield12431_static.FOLLOW_nnyield_in_yield12431);
            nnyield494=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield494.getTree());
            pushFollow(FOLLOW_inof_in_yield12433_static.FOLLOW_inof_in_yield12433);
            inof495=inof();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, inof495.getTree());
            pushFollow(FOLLOW_percent_in_yield12435_static.FOLLOW_percent_in_yield12435);
            percent496=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent496.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, yield1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield1"

    public static class yield2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:1: yield2 : percent nnyield ;
    public final ChemicalChunkerParser.yield2_return yield2() throws RecognitionException {
        ChemicalChunkerParser.yield2_return retval = new ChemicalChunkerParser.yield2_return();
        retval.start = input.LT(1);
        int yield2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.percent_return percent497 = null;

        ChemicalChunkerParser.nnyield_return nnyield498 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:7: ( percent nnyield )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:276:9: percent nnyield
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_percent_in_yield22441_static.FOLLOW_percent_in_yield22441);
            percent497=percent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, percent497.getTree());
            pushFollow(FOLLOW_nnyield_in_yield22443_static.FOLLOW_nnyield_in_yield22443);
            nnyield498=nnyield();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield498.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, yield2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "yield2"

    public static class percent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "percent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:1: percent : numeric ( nn )? nnpercent -> ^( PERCENT numeric ( nn )? nnpercent ) ;
    public final ChemicalChunkerParser.percent_return percent() throws RecognitionException {
        ChemicalChunkerParser.percent_return retval = new ChemicalChunkerParser.percent_return();
        retval.start = input.LT(1);
        int percent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric499 = null;

        ChemicalChunkerParser.nn_return nn500 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent501 = null;


        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        RewriteRuleSubtreeStream stream_nnpercent=new RewriteRuleSubtreeStream(adaptor,"rule nnpercent");
        RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:9: ( numeric ( nn )? nnpercent -> ^( PERCENT numeric ( nn )? nnpercent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:11: numeric ( nn )? nnpercent
            {
            pushFollow(FOLLOW_numeric_in_percent2451_static.FOLLOW_numeric_in_percent2451);
            numeric499=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numeric.add(numeric499.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:19: ( nn )?
            int alt157=2;
            switch ( input.LA(1) ) {
                case 156:
                    {
                    alt157=1;
                    }
                    break;
            }

            switch (alt157) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: nn
                    {
                    pushFollow(FOLLOW_nn_in_percent2453_static.FOLLOW_nn_in_percent2453);
                    nn500=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nn.add(nn500.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnpercent_in_percent2456_static.FOLLOW_nnpercent_in_percent2456);
            nnpercent501=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnpercent.add(nnpercent501.getTree());


            // AST REWRITE
            // elements: nn, nnpercent, numeric
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 277:33: -> ^( PERCENT numeric ( nn )? nnpercent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:36: ^( PERCENT numeric ( nn )? nnpercent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PERCENT, "PERCENT"), root_1);

                adaptor.addChild(root_1, stream_numeric.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:277:56: ( nn )?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_1, stream_nn.nextTree());

                }
                stream_nn.reset();
                adaptor.addChild(root_1, stream_nnpercent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, percent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "percent"

    public static class mixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:1: mixture : ( cdRatioNode )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( cdRatioNode )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.mixture_return mixture() throws RecognitionException {
        ChemicalChunkerParser.mixture_return retval = new ChemicalChunkerParser.mixture_return();
        retval.start = input.LT(1);
        int mixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cdRatioNode_return cdRatioNode502 = null;

        ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3503 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2504 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1505 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        RewriteRuleSubtreeStream stream_cdRatioNode=new RewriteRuleSubtreeStream(adaptor,"rule cdRatioNode");
        RewriteRuleSubtreeStream stream_mixtureStructure3=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure3");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:8: ( ( cdRatioNode )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( cdRatioNode )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:10: ( cdRatioNode )? ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:10: ( cdRatioNode )?
            int alt158=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt158=1;
                    }
                    break;
            }

            switch (alt158) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cdRatioNode
                    {
                    pushFollow(FOLLOW_cdRatioNode_in_mixture2479_static.FOLLOW_cdRatioNode_in_mixture2479);
                    cdRatioNode502=cdRatioNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cdRatioNode.add(cdRatioNode502.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:24: ( mixtureStructure3 | mixtureStructure2 | mixtureStructure1 )
            int alt159=3;
            switch ( input.LA(1) ) {
            case 143:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 138:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 66:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 116:
                            case 117:
                            case 118:
                            case 119:
                            case 120:
                            case 121:
                            case 122:
                            case 123:
                            case 124:
                            case 125:
                            case 126:
                            case 127:
                            case 128:
                            case 129:
                            case 130:
                            case 132:
                            case 133:
                            case 136:
                            case 137:
                            case 138:
                            case 139:
                            case 141:
                            case 143:
                            case 146:
                            case 147:
                            case 148:
                            case 149:
                            case 150:
                            case 151:
                            case 152:
                            case 153:
                            case 154:
                            case 155:
                            case 156:
                            case 157:
                            case 158:
                            case 159:
                            case 160:
                            case 161:
                            case 162:
                            case 163:
                            case 168:
                            case 169:
                            case 171:
                            case 172:
                            case 173:
                            case 174:
                            case 175:
                            case 176:
                            case 177:
                            case 178:
                            case 179:
                            case 180:
                                {
                                alt159=3;
                                }
                                break;
                            case 144:
                                {
                                alt159=1;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 159, 6, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 159, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 66:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 132:
                    case 133:
                    case 136:
                    case 137:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 168:
                    case 169:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt159=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 159, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 1, input);

                    throw nvae;
                }

                }
                break;
            case 133:
                {
                alt159=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:25: mixtureStructure3
                    {
                    pushFollow(FOLLOW_mixtureStructure3_in_mixture2484_static.FOLLOW_mixtureStructure3_in_mixture2484);
                    mixtureStructure3503=mixtureStructure3();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure3.add(mixtureStructure3503.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:43: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_mixture2486_static.FOLLOW_mixtureStructure2_in_mixture2486);
                    mixtureStructure2504=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2504.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:61: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_mixture2488_static.FOLLOW_mixtureStructure1_in_mixture2488);
                    mixtureStructure1505=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1505.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure2, cdRatioNode, mixtureStructure3, mixtureStructure1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 279:80: -> ^( MIXTURE ( cdRatioNode )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:83: ^( MIXTURE ( cdRatioNode )? ( mixtureStructure3 )? ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:93: ( cdRatioNode )?
                if ( stream_cdRatioNode.hasNext() ) {
                    adaptor.addChild(root_1, stream_cdRatioNode.nextTree());

                }
                stream_cdRatioNode.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:106: ( mixtureStructure3 )?
                if ( stream_mixtureStructure3.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure3.nextTree());

                }
                stream_mixtureStructure3.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:125: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:279:144: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, mixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixture"

    public static class mixtureStructure2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure2"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:1: mixtureStructure2 : comma lrb mixtureContent rrb comma ;
    public final ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure2_return retval = new ChemicalChunkerParser.mixtureStructure2_return();
        retval.start = input.LT(1);
        int mixtureStructure2_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.comma_return comma506 = null;

        ChemicalChunkerParser.lrb_return lrb507 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent508 = null;

        ChemicalChunkerParser.rrb_return rrb509 = null;

        ChemicalChunkerParser.comma_return comma510 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:18: ( comma lrb mixtureContent rrb comma )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:280:20: comma lrb mixtureContent rrb comma
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_comma_in_mixtureStructure22513_static.FOLLOW_comma_in_mixtureStructure22513);
            comma506=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma506.getTree());
            pushFollow(FOLLOW_lrb_in_mixtureStructure22515_static.FOLLOW_lrb_in_mixtureStructure22515);
            lrb507=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb507.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure22517_static.FOLLOW_mixtureContent_in_mixtureStructure22517);
            mixtureContent508=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent508.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure22519_static.FOLLOW_rrb_in_mixtureStructure22519);
            rrb509=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb509.getTree());
            pushFollow(FOLLOW_comma_in_mixtureStructure22521_static.FOLLOW_comma_in_mixtureStructure22521);
            comma510=comma();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comma510.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, mixtureStructure2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure2"

    public static class mixtureStructure1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure1"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:1: mixtureStructure1 : lrb mixtureContent rrb ;
    public final ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure1_return retval = new ChemicalChunkerParser.mixtureStructure1_return();
        retval.start = input.LT(1);
        int mixtureStructure1_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb511 = null;

        ChemicalChunkerParser.mixtureContent_return mixtureContent512 = null;

        ChemicalChunkerParser.rrb_return rrb513 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:18: ( lrb mixtureContent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:281:20: lrb mixtureContent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure12527_static.FOLLOW_lrb_in_mixtureStructure12527);
            lrb511=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb511.getTree());
            pushFollow(FOLLOW_mixtureContent_in_mixtureStructure12529_static.FOLLOW_mixtureContent_in_mixtureStructure12529);
            mixtureContent512=mixtureContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mixtureContent512.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure12531_static.FOLLOW_rrb_in_mixtureStructure12531);
            rrb513=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb513.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, mixtureStructure1_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure1"

    public static class mixtureStructure3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureStructure3"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:282:1: mixtureStructure3 : lrb nnpercent rrb ;
    public final ChemicalChunkerParser.mixtureStructure3_return mixtureStructure3() throws RecognitionException {
        ChemicalChunkerParser.mixtureStructure3_return retval = new ChemicalChunkerParser.mixtureStructure3_return();
        retval.start = input.LT(1);
        int mixtureStructure3_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb514 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent515 = null;

        ChemicalChunkerParser.rrb_return rrb516 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:2: ( lrb nnpercent rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:283:4: lrb nnpercent rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_mixtureStructure32539_static.FOLLOW_lrb_in_mixtureStructure32539);
            lrb514=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb514.getTree());
            pushFollow(FOLLOW_nnpercent_in_mixtureStructure32542_static.FOLLOW_nnpercent_in_mixtureStructure32542);
            nnpercent515=nnpercent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent515.getTree());
            pushFollow(FOLLOW_rrb_in_mixtureStructure32544_static.FOLLOW_rrb_in_mixtureStructure32544);
            rrb516=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb516.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, mixtureStructure3_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureStructure3"

    public static class mixtureContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mixtureContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:1: mixtureContent : ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+ ;
    public final ChemicalChunkerParser.mixtureContent_return mixtureContent() throws RecognitionException {
        ChemicalChunkerParser.mixtureContent_return retval = new ChemicalChunkerParser.mixtureContent_return();
        retval.start = input.LT(1);
        int mixtureContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.fw_return fw517 = null;

        ChemicalChunkerParser.verb_return verb518 = null;

        ChemicalChunkerParser.nn_return nn519 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node520 = null;

        ChemicalChunkerParser.md_return md521 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent522 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound523 = null;

        ChemicalChunkerParser.molecule_return molecule524 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule525 = null;

        ChemicalChunkerParser.dash_return dash526 = null;

        ChemicalChunkerParser.sym_return sym527 = null;

        ChemicalChunkerParser.noun_return noun528 = null;

        ChemicalChunkerParser.inAll_return inAll529 = null;

        ChemicalChunkerParser.cd_return cd530 = null;

        ChemicalChunkerParser.comma_return comma531 = null;

        ChemicalChunkerParser.adj_return adj532 = null;

        ChemicalChunkerParser.colon_return colon533 = null;

        ChemicalChunkerParser.stop_return stop534 = null;

        ChemicalChunkerParser.minimixture_return minimixture535 = null;

        ChemicalChunkerParser.fw_return fw536 = null;

        ChemicalChunkerParser.verb_return verb537 = null;

        ChemicalChunkerParser.quantity2Node_return quantity2Node538 = null;

        ChemicalChunkerParser.nnyield_return nnyield539 = null;

        ChemicalChunkerParser.md_return md540 = null;

        ChemicalChunkerParser.nnpercent_return nnpercent541 = null;

        ChemicalChunkerParser.oscarCompound_return oscarCompound542 = null;

        ChemicalChunkerParser.molecule_return molecule543 = null;

        ChemicalChunkerParser.unnamedmolecule_return unnamedmolecule544 = null;

        ChemicalChunkerParser.dash_return dash545 = null;

        ChemicalChunkerParser.sym_return sym546 = null;

        ChemicalChunkerParser.noun_return noun547 = null;

        ChemicalChunkerParser.inAll_return inAll548 = null;

        ChemicalChunkerParser.cd_return cd549 = null;

        ChemicalChunkerParser.comma_return comma550 = null;

        ChemicalChunkerParser.adj_return adj551 = null;

        ChemicalChunkerParser.colon_return colon552 = null;

        ChemicalChunkerParser.stop_return stop553 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:15: ( ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:19: ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop ) ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:19: ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )
            int alt160=18;
            alt160 = dfa160.predict(input);
            switch (alt160) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:20: fw
                    {
                    pushFollow(FOLLOW_fw_in_mixtureContent2554_static.FOLLOW_fw_in_mixtureContent2554);
                    fw517=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw517.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:23: verb
                    {
                    pushFollow(FOLLOW_verb_in_mixtureContent2556_static.FOLLOW_verb_in_mixtureContent2556);
                    verb518=verb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb518.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:28: nn
                    {
                    pushFollow(FOLLOW_nn_in_mixtureContent2558_static.FOLLOW_nn_in_mixtureContent2558);
                    nn519=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn519.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:31: quantity2Node
                    {
                    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2560_static.FOLLOW_quantity2Node_in_mixtureContent2560);
                    quantity2Node520=quantity2Node();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node520.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:45: md
                    {
                    pushFollow(FOLLOW_md_in_mixtureContent2562_static.FOLLOW_md_in_mixtureContent2562);
                    md521=md();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, md521.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:48: nnpercent
                    {
                    pushFollow(FOLLOW_nnpercent_in_mixtureContent2564_static.FOLLOW_nnpercent_in_mixtureContent2564);
                    nnpercent522=nnpercent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent522.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:58: oscarCompound
                    {
                    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2566_static.FOLLOW_oscarCompound_in_mixtureContent2566);
                    oscarCompound523=oscarCompound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound523.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:72: molecule
                    {
                    pushFollow(FOLLOW_molecule_in_mixtureContent2568_static.FOLLOW_molecule_in_mixtureContent2568);
                    molecule524=molecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule524.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:81: unnamedmolecule
                    {
                    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent2570_static.FOLLOW_unnamedmolecule_in_mixtureContent2570);
                    unnamedmolecule525=unnamedmolecule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule525.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:97: dash
                    {
                    pushFollow(FOLLOW_dash_in_mixtureContent2572_static.FOLLOW_dash_in_mixtureContent2572);
                    dash526=dash();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash526.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:102: sym
                    {
                    pushFollow(FOLLOW_sym_in_mixtureContent2574_static.FOLLOW_sym_in_mixtureContent2574);
                    sym527=sym();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym527.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:106: noun
                    {
                    pushFollow(FOLLOW_noun_in_mixtureContent2576_static.FOLLOW_noun_in_mixtureContent2576);
                    noun528=noun();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun528.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:111: inAll
                    {
                    pushFollow(FOLLOW_inAll_in_mixtureContent2578_static.FOLLOW_inAll_in_mixtureContent2578);
                    inAll529=inAll();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll529.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:117: cd
                    {
                    pushFollow(FOLLOW_cd_in_mixtureContent2580_static.FOLLOW_cd_in_mixtureContent2580);
                    cd530=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd530.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:120: comma
                    {
                    pushFollow(FOLLOW_comma_in_mixtureContent2582_static.FOLLOW_comma_in_mixtureContent2582);
                    comma531=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma531.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:126: adj
                    {
                    pushFollow(FOLLOW_adj_in_mixtureContent2584_static.FOLLOW_adj_in_mixtureContent2584);
                    adj532=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj532.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:130: colon
                    {
                    pushFollow(FOLLOW_colon_in_mixtureContent2586_static.FOLLOW_colon_in_mixtureContent2586);
                    colon533=colon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon533.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:136: stop
                    {
                    pushFollow(FOLLOW_stop_in_mixtureContent2588_static.FOLLOW_stop_in_mixtureContent2588);
                    stop534=stop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop534.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:142: ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+
            int cnt161=0;
            loop161:
            do {
                int alt161=20;
                alt161 = dfa161.predict(input);
                switch (alt161) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:143: minimixture
            	    {
            	    pushFollow(FOLLOW_minimixture_in_mixtureContent2592_static.FOLLOW_minimixture_in_mixtureContent2592);
            	    minimixture535=minimixture();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, minimixture535.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:155: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_mixtureContent2594_static.FOLLOW_fw_in_mixtureContent2594);
            	    fw536=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw536.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:158: verb
            	    {
            	    pushFollow(FOLLOW_verb_in_mixtureContent2596_static.FOLLOW_verb_in_mixtureContent2596);
            	    verb537=verb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, verb537.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:163: quantity2Node
            	    {
            	    pushFollow(FOLLOW_quantity2Node_in_mixtureContent2598_static.FOLLOW_quantity2Node_in_mixtureContent2598);
            	    quantity2Node538=quantity2Node();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, quantity2Node538.getTree());

            	    }
            	    break;
            	case 5 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:177: nnyield
            	    {
            	    pushFollow(FOLLOW_nnyield_in_mixtureContent2600_static.FOLLOW_nnyield_in_mixtureContent2600);
            	    nnyield539=nnyield();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnyield539.getTree());

            	    }
            	    break;
            	case 6 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:185: md
            	    {
            	    pushFollow(FOLLOW_md_in_mixtureContent2602_static.FOLLOW_md_in_mixtureContent2602);
            	    md540=md();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, md540.getTree());

            	    }
            	    break;
            	case 7 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:188: nnpercent
            	    {
            	    pushFollow(FOLLOW_nnpercent_in_mixtureContent2604_static.FOLLOW_nnpercent_in_mixtureContent2604);
            	    nnpercent541=nnpercent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnpercent541.getTree());

            	    }
            	    break;
            	case 8 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:198: oscarCompound
            	    {
            	    pushFollow(FOLLOW_oscarCompound_in_mixtureContent2606_static.FOLLOW_oscarCompound_in_mixtureContent2606);
            	    oscarCompound542=oscarCompound();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarCompound542.getTree());

            	    }
            	    break;
            	case 9 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:212: molecule
            	    {
            	    pushFollow(FOLLOW_molecule_in_mixtureContent2608_static.FOLLOW_molecule_in_mixtureContent2608);
            	    molecule543=molecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, molecule543.getTree());

            	    }
            	    break;
            	case 10 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:221: unnamedmolecule
            	    {
            	    pushFollow(FOLLOW_unnamedmolecule_in_mixtureContent2610_static.FOLLOW_unnamedmolecule_in_mixtureContent2610);
            	    unnamedmolecule544=unnamedmolecule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unnamedmolecule544.getTree());

            	    }
            	    break;
            	case 11 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:237: dash
            	    {
            	    pushFollow(FOLLOW_dash_in_mixtureContent2612_static.FOLLOW_dash_in_mixtureContent2612);
            	    dash545=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash545.getTree());

            	    }
            	    break;
            	case 12 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:242: sym
            	    {
            	    pushFollow(FOLLOW_sym_in_mixtureContent2614_static.FOLLOW_sym_in_mixtureContent2614);
            	    sym546=sym();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sym546.getTree());

            	    }
            	    break;
            	case 13 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:246: noun
            	    {
            	    pushFollow(FOLLOW_noun_in_mixtureContent2616_static.FOLLOW_noun_in_mixtureContent2616);
            	    noun547=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun547.getTree());

            	    }
            	    break;
            	case 14 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:251: inAll
            	    {
            	    pushFollow(FOLLOW_inAll_in_mixtureContent2618_static.FOLLOW_inAll_in_mixtureContent2618);
            	    inAll548=inAll();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inAll548.getTree());

            	    }
            	    break;
            	case 15 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:257: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_mixtureContent2620_static.FOLLOW_cd_in_mixtureContent2620);
            	    cd549=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd549.getTree());

            	    }
            	    break;
            	case 16 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:260: comma
            	    {
            	    pushFollow(FOLLOW_comma_in_mixtureContent2622_static.FOLLOW_comma_in_mixtureContent2622);
            	    comma550=comma();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma550.getTree());

            	    }
            	    break;
            	case 17 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:266: adj
            	    {
            	    pushFollow(FOLLOW_adj_in_mixtureContent2624_static.FOLLOW_adj_in_mixtureContent2624);
            	    adj551=adj();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj551.getTree());

            	    }
            	    break;
            	case 18 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:270: colon
            	    {
            	    pushFollow(FOLLOW_colon_in_mixtureContent2626_static.FOLLOW_colon_in_mixtureContent2626);
            	    colon552=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon552.getTree());

            	    }
            	    break;
            	case 19 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:276: stop
            	    {
            	    pushFollow(FOLLOW_stop_in_mixtureContent2628_static.FOLLOW_stop_in_mixtureContent2628);
            	    stop553=stop();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stop553.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt161 >= 1 ) break loop161;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(161, input);
                        throw eee;
                }
                cnt161++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, mixtureContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mixtureContent"

    public static class minimixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minimixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:1: minimixture : ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) ;
    public final ChemicalChunkerParser.minimixture_return minimixture() throws RecognitionException {
        ChemicalChunkerParser.minimixture_return retval = new ChemicalChunkerParser.minimixture_return();
        retval.start = input.LT(1);
        int minimixture_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.mixtureStructure2_return mixtureStructure2554 = null;

        ChemicalChunkerParser.mixtureStructure1_return mixtureStructure1555 = null;


        RewriteRuleSubtreeStream stream_mixtureStructure1=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure1");
        RewriteRuleSubtreeStream stream_mixtureStructure2=new RewriteRuleSubtreeStream(adaptor,"rule mixtureStructure2");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:12: ( ( mixtureStructure2 | mixtureStructure1 ) -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:14: ( mixtureStructure2 | mixtureStructure1 )
            {
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:14: ( mixtureStructure2 | mixtureStructure1 )
            int alt162=2;
            switch ( input.LA(1) ) {
            case 133:
                {
                alt162=1;
                }
                break;
            case 143:
                {
                alt162=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:15: mixtureStructure2
                    {
                    pushFollow(FOLLOW_mixtureStructure2_in_minimixture2639_static.FOLLOW_mixtureStructure2_in_minimixture2639);
                    mixtureStructure2554=mixtureStructure2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure2.add(mixtureStructure2554.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:33: mixtureStructure1
                    {
                    pushFollow(FOLLOW_mixtureStructure1_in_minimixture2641_static.FOLLOW_mixtureStructure1_in_minimixture2641);
                    mixtureStructure1555=mixtureStructure1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mixtureStructure1.add(mixtureStructure1555.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: mixtureStructure1, mixtureStructure2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 287:52: -> ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:55: ^( MIXTURE ( mixtureStructure2 )? ( mixtureStructure1 )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MIXTURE, "MIXTURE"), root_1);

                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:66: ( mixtureStructure2 )?
                if ( stream_mixtureStructure2.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure2.nextTree());

                }
                stream_mixtureStructure2.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:287:85: ( mixtureStructure1 )?
                if ( stream_mixtureStructure1.hasNext() ) {
                    adaptor.addChild(root_1, stream_mixtureStructure1.nextTree());

                }
                stream_mixtureStructure1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, minimixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "minimixture"

    public static class fromProcedure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromProcedure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:1: fromProcedure : infrom procedureNode ;
    public final ChemicalChunkerParser.fromProcedure_return fromProcedure() throws RecognitionException {
        ChemicalChunkerParser.fromProcedure_return retval = new ChemicalChunkerParser.fromProcedure_return();
        retval.start = input.LT(1);
        int fromProcedure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.infrom_return infrom556 = null;

        ChemicalChunkerParser.procedureNode_return procedureNode557 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:14: ( infrom procedureNode )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:289:16: infrom procedureNode
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_infrom_in_fromProcedure2662_static.FOLLOW_infrom_in_fromProcedure2662);
            infrom556=infrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom556.getTree());
            pushFollow(FOLLOW_procedureNode_in_fromProcedure2664_static.FOLLOW_procedureNode_in_fromProcedure2664);
            procedureNode557=procedureNode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedureNode557.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, fromProcedure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fromProcedure"

    public static class procedureNode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedureNode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:1: procedureNode : method -> ^( PROCEDURE method ) ;
    public final ChemicalChunkerParser.procedureNode_return procedureNode() throws RecognitionException {
        ChemicalChunkerParser.procedureNode_return retval = new ChemicalChunkerParser.procedureNode_return();
        retval.start = input.LT(1);
        int procedureNode_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.method_return method558 = null;


        RewriteRuleSubtreeStream stream_method=new RewriteRuleSubtreeStream(adaptor,"rule method");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:14: ( method -> ^( PROCEDURE method ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:16: method
            {
            pushFollow(FOLLOW_method_in_procedureNode2671_static.FOLLOW_method_in_procedureNode2671);
            method558=method();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method.add(method558.getTree());


            // AST REWRITE
            // elements: method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 291:23: -> ^( PROCEDURE method )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:291:26: ^( PROCEDURE method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE, "PROCEDURE"), root_1);

                adaptor.addChild(root_1, stream_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, procedureNode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureNode"

    public static class method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "method"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:1: method : ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) ) ( submethod | lrb submethod rrb )* ;
    public final ChemicalChunkerParser.method_return method() throws RecognitionException {
        ChemicalChunkerParser.method_return retval = new ChemicalChunkerParser.method_return();
        retval.start = input.LT(1);
        int method_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nngeneral_return nngeneral559 = null;

        ChemicalChunkerParser.nn_return nn560 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod561 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier562 = null;

        ChemicalChunkerParser.numeric_return numeric563 = null;

        ChemicalChunkerParser.nnexample_return nnexample564 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier565 = null;

        ChemicalChunkerParser.numeric_return numeric566 = null;

        ChemicalChunkerParser.submethod_return submethod567 = null;

        ChemicalChunkerParser.lrb_return lrb568 = null;

        ChemicalChunkerParser.submethod_return submethod569 = null;

        ChemicalChunkerParser.rrb_return rrb570 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:293:7: ( ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) ) ( submethod | lrb submethod rrb )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:5: ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) ) ( submethod | lrb submethod rrb )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:5: ( ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )? | nnexample ( identifierOrBracketedIdentifier | numeric ) )
            int alt166=2;
            switch ( input.LA(1) ) {
            case 75:
            case 76:
            case 156:
                {
                alt166=1;
                }
                break;
            case 83:
                {
                alt166=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }

            switch (alt166) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:6: ( nngeneral | nn )? nnmethod ( identifierOrBracketedIdentifier | numeric )?
                    {
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:6: ( nngeneral | nn )?
                    int alt163=3;
                    switch ( input.LA(1) ) {
                        case 75:
                            {
                            alt163=1;
                            }
                            break;
                        case 156:
                            {
                            alt163=2;
                            }
                            break;
                    }

                    switch (alt163) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:7: nngeneral
                            {
                            pushFollow(FOLLOW_nngeneral_in_method2692_static.FOLLOW_nngeneral_in_method2692);
                            nngeneral559=nngeneral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nngeneral559.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:17: nn
                            {
                            pushFollow(FOLLOW_nn_in_method2694_static.FOLLOW_nn_in_method2694);
                            nn560=nn();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn560.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnmethod_in_method2698_static.FOLLOW_nnmethod_in_method2698);
                    nnmethod561=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod561.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:31: ( identifierOrBracketedIdentifier | numeric )?
                    int alt164=3;
                    alt164 = dfa164.predict(input);
                    switch (alt164) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:32: identifierOrBracketedIdentifier
                            {
                            pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_method2701_static.FOLLOW_identifierOrBracketedIdentifier_in_method2701);
                            identifierOrBracketedIdentifier562=identifierOrBracketedIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier562.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:64: numeric
                            {
                            pushFollow(FOLLOW_numeric_in_method2703_static.FOLLOW_numeric_in_method2703);
                            numeric563=numeric();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric563.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:76: nnexample ( identifierOrBracketedIdentifier | numeric )
                    {
                    pushFollow(FOLLOW_nnexample_in_method2709_static.FOLLOW_nnexample_in_method2709);
                    nnexample564=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample564.getTree());
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:86: ( identifierOrBracketedIdentifier | numeric )
                    int alt165=2;
                    switch ( input.LA(1) ) {
                    case 146:
                        {
                        switch ( input.LA(2) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(3) ) {
                            case 141:
                                {
                                switch ( input.LA(4) ) {
                                case TOKEN:
                                    {
                                    int LA165_6 = input.LA(5);

                                    if ( (synpred440_ChemicalChunker()) ) {
                                        alt165=1;
                                    }
                                    else if ( (true) ) {
                                        alt165=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 165, 6, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 165, 5, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case EOF:
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                            case 58:
                            case 59:
                            case 60:
                            case 61:
                            case 62:
                            case 63:
                            case 64:
                            case 65:
                            case 66:
                            case 67:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 85:
                            case 86:
                            case 87:
                            case 88:
                            case 89:
                            case 90:
                            case 91:
                            case 92:
                            case 93:
                            case 94:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 115:
                            case 116:
                            case 117:
                            case 118:
                            case 119:
                            case 120:
                            case 121:
                            case 122:
                            case 123:
                            case 124:
                            case 125:
                            case 126:
                            case 127:
                            case 128:
                            case 129:
                            case 130:
                            case 131:
                            case 132:
                            case 133:
                            case 134:
                            case 135:
                            case 136:
                            case 137:
                            case 138:
                            case 139:
                            case 140:
                            case 142:
                            case 143:
                            case 144:
                            case 145:
                            case 146:
                            case 147:
                            case 148:
                            case 149:
                            case 150:
                            case 151:
                            case 152:
                            case 153:
                            case 154:
                            case 155:
                            case 156:
                            case 157:
                            case 158:
                            case 159:
                            case 160:
                            case 161:
                            case 162:
                            case 163:
                            case 164:
                            case 165:
                            case 166:
                            case 167:
                            case 168:
                            case 169:
                            case 170:
                            case 171:
                            case 172:
                            case 173:
                            case 174:
                            case 175:
                            case 176:
                            case 177:
                            case 178:
                            case 179:
                            case 180:
                                {
                                alt165=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 165, 4, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 165, 1, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 141:
                    case 143:
                        {
                        alt165=1;
                        }
                        break;
                    case 38:
                        {
                        alt165=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 165, 0, input);

                        throw nvae;
                    }

                    switch (alt165) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:87: identifierOrBracketedIdentifier
                            {
                            pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_method2712_static.FOLLOW_identifierOrBracketedIdentifier_in_method2712);
                            identifierOrBracketedIdentifier565=identifierOrBracketedIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier565.getTree());

                            }
                            break;
                        case 2 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:119: numeric
                            {
                            pushFollow(FOLLOW_numeric_in_method2714_static.FOLLOW_numeric_in_method2714);
                            numeric566=numeric();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric566.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:129: ( submethod | lrb submethod rrb )*
            loop167:
            do {
                int alt167=3;
                alt167 = dfa167.predict(input);
                switch (alt167) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:130: submethod
            	    {
            	    pushFollow(FOLLOW_submethod_in_method2719_static.FOLLOW_submethod_in_method2719);
            	    submethod567=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod567.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:142: lrb submethod rrb
            	    {
            	    pushFollow(FOLLOW_lrb_in_method2723_static.FOLLOW_lrb_in_method2723);
            	    lrb568=lrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb568.getTree());
            	    pushFollow(FOLLOW_submethod_in_method2725_static.FOLLOW_submethod_in_method2725);
            	    submethod569=submethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, submethod569.getTree());
            	    pushFollow(FOLLOW_rrb_in_method2727_static.FOLLOW_rrb_in_method2727);
            	    rrb570=rrb();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb570.getTree());

            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, method_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "method"

    public static class submethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "submethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:1: submethod : ( nnmethod | nnexample ) ( identifierOrBracketedIdentifier | numeric ) ;
    public final ChemicalChunkerParser.submethod_return submethod() throws RecognitionException {
        ChemicalChunkerParser.submethod_return retval = new ChemicalChunkerParser.submethod_return();
        retval.start = input.LT(1);
        int submethod_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnmethod_return nnmethod571 = null;

        ChemicalChunkerParser.nnexample_return nnexample572 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier573 = null;

        ChemicalChunkerParser.numeric_return numeric574 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:11: ( ( nnmethod | nnexample ) ( identifierOrBracketedIdentifier | numeric ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:13: ( nnmethod | nnexample ) ( identifierOrBracketedIdentifier | numeric )
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:13: ( nnmethod | nnexample )
            int alt168=2;
            switch ( input.LA(1) ) {
            case 76:
                {
                alt168=1;
                }
                break;
            case 83:
                {
                alt168=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;
            }

            switch (alt168) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:14: nnmethod
                    {
                    pushFollow(FOLLOW_nnmethod_in_submethod2738_static.FOLLOW_nnmethod_in_submethod2738);
                    nnmethod571=nnmethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnmethod571.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:23: nnexample
                    {
                    pushFollow(FOLLOW_nnexample_in_submethod2740_static.FOLLOW_nnexample_in_submethod2740);
                    nnexample572=nnexample();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnexample572.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:34: ( identifierOrBracketedIdentifier | numeric )
            int alt169=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt169=2;
                        }
                        break;
                    case 141:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA169_6 = input.LA(5);

                            if ( (synpred444_ChemicalChunker()) ) {
                                alt169=1;
                            }
                            else if ( (true) ) {
                                alt169=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 169, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 169, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 169, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 169, 1, input);

                    throw nvae;
                }

                }
                break;
            case 141:
            case 143:
                {
                alt169=1;
                }
                break;
            case 38:
                {
                alt169=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }

            switch (alt169) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:35: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_submethod2744_static.FOLLOW_identifierOrBracketedIdentifier_in_submethod2744);
                    identifierOrBracketedIdentifier573=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierOrBracketedIdentifier573.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:67: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_submethod2746_static.FOLLOW_numeric_in_submethod2746);
                    numeric574=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric574.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, submethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "submethod"

    public static class referenceToExampleCompound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "referenceToExampleCompound"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:1: referenceToExampleCompound : nnexample ( identifierOrBracketedIdentifier | numeric ) -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? ) ;
    public final ChemicalChunkerParser.referenceToExampleCompound_return referenceToExampleCompound() throws RecognitionException {
        ChemicalChunkerParser.referenceToExampleCompound_return retval = new ChemicalChunkerParser.referenceToExampleCompound_return();
        retval.start = input.LT(1);
        int referenceToExampleCompound_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.nnexample_return nnexample575 = null;

        ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier576 = null;

        ChemicalChunkerParser.numeric_return numeric577 = null;


        RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
        RewriteRuleSubtreeStream stream_nnexample=new RewriteRuleSubtreeStream(adaptor,"rule nnexample");
        RewriteRuleSubtreeStream stream_identifierOrBracketedIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule identifierOrBracketedIdentifier");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:298:28: ( nnexample ( identifierOrBracketedIdentifier | numeric ) -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:2: nnexample ( identifierOrBracketedIdentifier | numeric )
            {
            pushFollow(FOLLOW_nnexample_in_referenceToExampleCompound2756_static.FOLLOW_nnexample_in_referenceToExampleCompound2756);
            nnexample575=nnexample();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_nnexample.add(nnexample575.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:12: ( identifierOrBracketedIdentifier | numeric )
            int alt170=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case EOF:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 66:
                    case 67:
                    case 68:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 76:
                    case 77:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                    case 99:
                    case 100:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 108:
                    case 109:
                    case 110:
                    case 111:
                    case 112:
                    case 113:
                    case 114:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                    case 136:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 142:
                    case 143:
                    case 144:
                    case 145:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                    case 160:
                    case 161:
                    case 162:
                    case 163:
                    case 164:
                    case 165:
                    case 166:
                    case 167:
                    case 168:
                    case 169:
                    case 170:
                    case 171:
                    case 172:
                    case 173:
                    case 174:
                    case 175:
                    case 176:
                    case 177:
                    case 178:
                    case 179:
                    case 180:
                        {
                        alt170=2;
                        }
                        break;
                    case 141:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            int LA170_6 = input.LA(5);

                            if ( (synpred445_ChemicalChunker()) ) {
                                alt170=1;
                            }
                            else if ( (true) ) {
                                alt170=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 170, 6, input);

                                throw nvae;
                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 5, input);

                            throw nvae;
                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 4, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 170, 1, input);

                    throw nvae;
                }

                }
                break;
            case 141:
            case 143:
                {
                alt170=1;
                }
                break;
            case 38:
                {
                alt170=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }

            switch (alt170) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:13: identifierOrBracketedIdentifier
                    {
                    pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2759_static.FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2759);
                    identifierOrBracketedIdentifier576=identifierOrBracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_identifierOrBracketedIdentifier.add(identifierOrBracketedIdentifier576.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:45: numeric
                    {
                    pushFollow(FOLLOW_numeric_in_referenceToExampleCompound2761_static.FOLLOW_numeric_in_referenceToExampleCompound2761);
                    numeric577=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numeric.add(numeric577.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: numeric, identifierOrBracketedIdentifier, nnexample
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 299:54: -> ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:57: ^( REFERENCETOCOMPOUND nnexample ( identifierOrBracketedIdentifier )? ( numeric )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCETOCOMPOUND, "REFERENCETOCOMPOUND"), root_1);

                adaptor.addChild(root_1, stream_nnexample.nextTree());
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:89: ( identifierOrBracketedIdentifier )?
                if ( stream_identifierOrBracketedIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_identifierOrBracketedIdentifier.nextTree());

                }
                stream_identifierOrBracketedIdentifier.reset();
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:122: ( numeric )?
                if ( stream_numeric.hasNext() ) {
                    adaptor.addChild(root_1, stream_numeric.nextTree());

                }
                stream_numeric.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, referenceToExampleCompound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "referenceToExampleCompound"

    public static class advAdj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "advAdj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:301:1: advAdj : ( adv | adj );
    public final ChemicalChunkerParser.advAdj_return advAdj() throws RecognitionException {
        ChemicalChunkerParser.advAdj_return retval = new ChemicalChunkerParser.advAdj_return();
        retval.start = input.LT(1);
        int advAdj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adv_return adv578 = null;

        ChemicalChunkerParser.adj_return adj579 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:2: ( adv | adj )
            int alt171=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt171=1;
                }
                break;
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt171=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);

                throw nvae;
            }

            switch (alt171) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:3: adv
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adv_in_advAdj2784_static.FOLLOW_adv_in_advAdj2784);
                    adv578=adv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adv578.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:302:7: adj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_adj_in_advAdj2786_static.FOLLOW_adj_in_advAdj2786);
                    adj579=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj579.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, advAdj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "advAdj"

    public static class range_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "range"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:1: range : numeric dash numeric ;
    public final ChemicalChunkerParser.range_return range() throws RecognitionException {
        ChemicalChunkerParser.range_return retval = new ChemicalChunkerParser.range_return();
        retval.start = input.LT(1);
        int range_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric580 = null;

        ChemicalChunkerParser.dash_return dash581 = null;

        ChemicalChunkerParser.numeric_return numeric582 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:6: ( numeric dash numeric )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:304:8: numeric dash numeric
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_numeric_in_range2793_static.FOLLOW_numeric_in_range2793);
            numeric580=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric580.getTree());
            pushFollow(FOLLOW_dash_in_range2795_static.FOLLOW_dash_in_range2795);
            dash581=dash();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dash581.getTree());
            pushFollow(FOLLOW_numeric_in_range2797_static.FOLLOW_numeric_in_range2797);
            numeric582=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric582.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, range_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "range"

    public static class cycles_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycles"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:1: cycles : cycleStructure -> ^( CYCLES cycleStructure ) ;
    public final ChemicalChunkerParser.cycles_return cycles() throws RecognitionException {
        ChemicalChunkerParser.cycles_return retval = new ChemicalChunkerParser.cycles_return();
        retval.start = input.LT(1);
        int cycles_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cycleStructure_return cycleStructure583 = null;


        RewriteRuleSubtreeStream stream_cycleStructure=new RewriteRuleSubtreeStream(adaptor,"rule cycleStructure");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:8: ( cycleStructure -> ^( CYCLES cycleStructure ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:10: cycleStructure
            {
            pushFollow(FOLLOW_cycleStructure_in_cycles2804_static.FOLLOW_cycleStructure_in_cycles2804);
            cycleStructure583=cycleStructure();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cycleStructure.add(cycleStructure583.getTree());


            // AST REWRITE
            // elements: cycleStructure
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 305:25: -> ^( CYCLES cycleStructure )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:305:28: ^( CYCLES cycleStructure )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CYCLES, "CYCLES"), root_1);

                adaptor.addChild(root_1, stream_cycleStructure.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, cycles_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycles"

    public static class cycleStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cycleStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:1: cycleStructure : cd ( dashNN )? nncycle ;
    public final ChemicalChunkerParser.cycleStructure_return cycleStructure() throws RecognitionException {
        ChemicalChunkerParser.cycleStructure_return retval = new ChemicalChunkerParser.cycleStructure_return();
        retval.start = input.LT(1);
        int cycleStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd584 = null;

        ChemicalChunkerParser.dashNN_return dashNN585 = null;

        ChemicalChunkerParser.nncycle_return nncycle586 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:16: ( cd ( dashNN )? nncycle )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:18: cd ( dashNN )? nncycle
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cycleStructure2821_static.FOLLOW_cd_in_cycleStructure2821);
            cd584=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd584.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:306:21: ( dashNN )?
            int alt172=2;
            switch ( input.LA(1) ) {
                case 39:
                case 40:
                case 45:
                case 146:
                case 151:
                case 152:
                case 153:
                case 156:
                    {
                    alt172=1;
                    }
                    break;
            }

            switch (alt172) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dashNN
                    {
                    pushFollow(FOLLOW_dashNN_in_cycleStructure2823_static.FOLLOW_dashNN_in_cycleStructure2823);
                    dashNN585=dashNN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dashNN585.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nncycle_in_cycleStructure2826_static.FOLLOW_nncycle_in_cycleStructure2826);
            nncycle586=nncycle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nncycle586.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, cycleStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cycleStructure"

    public static class dashNN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dashNN"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:1: dashNN : ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* ;
    public final ChemicalChunkerParser.dashNN_return dashNN() throws RecognitionException {
        ChemicalChunkerParser.dashNN_return retval = new ChemicalChunkerParser.dashNN_return();
        retval.start = input.LT(1);
        int dashNN_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.adj_return adj587 = null;

        ChemicalChunkerParser.nn_return nn588 = null;

        ChemicalChunkerParser.cd_return cd589 = null;

        ChemicalChunkerParser.dash_return dash590 = null;

        ChemicalChunkerParser.adj_return adj591 = null;

        ChemicalChunkerParser.nn_return nn592 = null;

        ChemicalChunkerParser.cd_return cd593 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:8: ( ( adj | nn | cd ) ( dash ( adj | nn | cd ) )* )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:10: ( adj | nn | cd ) ( dash ( adj | nn | cd ) )*
            {
            root_0 = (Object)adaptor.nil();

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:10: ( adj | nn | cd )
            int alt173=3;
            switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt173=1;
                }
                break;
            case 156:
                {
                alt173=2;
                }
                break;
            case 146:
                {
                alt173=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }

            switch (alt173) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:11: adj
                    {
                    pushFollow(FOLLOW_adj_in_dashNN2834_static.FOLLOW_adj_in_dashNN2834);
                    adj587=adj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adj587.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:15: nn
                    {
                    pushFollow(FOLLOW_nn_in_dashNN2836_static.FOLLOW_nn_in_dashNN2836);
                    nn588=nn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nn588.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:18: cd
                    {
                    pushFollow(FOLLOW_cd_in_dashNN2838_static.FOLLOW_cd_in_dashNN2838);
                    cd589=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd589.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:22: ( dash ( adj | nn | cd ) )*
            loop175:
            do {
                int alt175=2;
                switch ( input.LA(1) ) {
                case 136:
                    {
                    alt175=1;
                    }
                    break;

                }

                switch (alt175) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:23: dash ( adj | nn | cd )
            	    {
            	    pushFollow(FOLLOW_dash_in_dashNN2842_static.FOLLOW_dash_in_dashNN2842);
            	    dash590=dash();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dash590.getTree());
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:28: ( adj | nn | cd )
            	    int alt174=3;
            	    switch ( input.LA(1) ) {
            	    case 39:
            	    case 40:
            	    case 45:
            	    case 151:
            	    case 152:
            	    case 153:
            	        {
            	        alt174=1;
            	        }
            	        break;
            	    case 156:
            	        {
            	        alt174=2;
            	        }
            	        break;
            	    case 146:
            	        {
            	        alt174=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 174, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt174) {
            	        case 1 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:29: adj
            	            {
            	            pushFollow(FOLLOW_adj_in_dashNN2845_static.FOLLOW_adj_in_dashNN2845);
            	            adj591=adj();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, adj591.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:33: nn
            	            {
            	            pushFollow(FOLLOW_nn_in_dashNN2847_static.FOLLOW_nn_in_dashNN2847);
            	            nn592=nn();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, nn592.getTree());

            	            }
            	            break;
            	        case 3 :
            	            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:307:36: cd
            	            {
            	            pushFollow(FOLLOW_cd_in_dashNN2849_static.FOLLOW_cd_in_dashNN2849);
            	            cd593=cd();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd593.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop175;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, dashNN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dashNN"

    public static class ratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:1: ratio : ( cdRatioNode | nounratio -> ^( RATIO nounratio ) );
    public final ChemicalChunkerParser.ratio_return ratio() throws RecognitionException {
        ChemicalChunkerParser.ratio_return retval = new ChemicalChunkerParser.ratio_return();
        retval.start = input.LT(1);
        int ratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cdRatioNode_return cdRatioNode594 = null;

        ChemicalChunkerParser.nounratio_return nounratio595 = null;


        RewriteRuleSubtreeStream stream_nounratio=new RewriteRuleSubtreeStream(adaptor,"rule nounratio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:7: ( cdRatioNode | nounratio -> ^( RATIO nounratio ) )
            int alt176=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 132:
                        {
                        switch ( input.LA(4) ) {
                        case TOKEN:
                            {
                            switch ( input.LA(5) ) {
                            case 146:
                                {
                                switch ( input.LA(6) ) {
                                case TOKEN:
                                    {
                                    int LA176_7 = input.LA(7);

                                    if ( (synpred453_ChemicalChunker()) ) {
                                        alt176=1;
                                    }
                                    else if ( (true) ) {
                                        alt176=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 176, 7, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 176, 6, input);

                                    throw nvae;
                                }

                                }
                                break;
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                            case 42:
                            case 43:
                            case 45:
                            case 46:
                            case 63:
                            case 64:
                            case 66:
                            case 68:
                            case 69:
                            case 70:
                            case 71:
                            case 72:
                            case 73:
                            case 74:
                            case 75:
                            case 76:
                            case 77:
                            case 78:
                            case 79:
                            case 80:
                            case 81:
                            case 82:
                            case 83:
                            case 84:
                            case 89:
                            case 90:
                            case 100:
                            case 102:
                            case 107:
                            case 109:
                            case 111:
                            case 117:
                            case 119:
                            case 123:
                            case 125:
                            case 126:
                            case 130:
                            case 133:
                            case 139:
                            case 141:
                            case 143:
                            case 147:
                            case 148:
                            case 149:
                            case 151:
                            case 152:
                            case 153:
                            case 154:
                            case 156:
                            case 157:
                            case 158:
                            case 159:
                            case 160:
                            case 161:
                            case 162:
                            case 163:
                            case 168:
                            case 177:
                            case 178:
                            case 179:
                            case 180:
                                {
                                alt176=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 176, 5, input);

                                throw nvae;
                            }

                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 176, 4, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 38:
                    case 39:
                    case 40:
                    case 44:
                    case 45:
                    case 47:
                    case 59:
                    case 65:
                    case 66:
                    case 67:
                    case 69:
                    case 70:
                    case 73:
                    case 81:
                    case 130:
                    case 133:
                    case 136:
                    case 138:
                    case 141:
                    case 143:
                    case 146:
                    case 151:
                    case 152:
                    case 153:
                    case 156:
                        {
                        alt176=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 176, 3, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 176, 1, input);

                    throw nvae;
                }

                }
                break;
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 45:
            case 46:
            case 63:
            case 64:
            case 66:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 89:
            case 90:
            case 100:
            case 102:
            case 107:
            case 109:
            case 111:
            case 117:
            case 119:
            case 123:
            case 125:
            case 126:
            case 130:
            case 133:
            case 139:
            case 141:
            case 143:
            case 147:
            case 148:
            case 149:
            case 151:
            case 152:
            case 153:
            case 154:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 168:
            case 177:
            case 178:
            case 179:
            case 180:
                {
                alt176=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;
            }

            switch (alt176) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:9: cdRatioNode
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdRatioNode_in_ratio2859_static.FOLLOW_cdRatioNode_in_ratio2859);
                    cdRatioNode594=cdRatioNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdRatioNode594.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:23: nounratio
                    {
                    pushFollow(FOLLOW_nounratio_in_ratio2863_static.FOLLOW_nounratio_in_ratio2863);
                    nounratio595=nounratio();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nounratio.add(nounratio595.getTree());


                    // AST REWRITE
                    // elements: nounratio
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 308:33: -> ^( RATIO nounratio )
                    {
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:36: ^( RATIO nounratio )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                        adaptor.addChild(root_1, stream_nounratio.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, ratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ratio"

    public static class cdRatioNode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdRatioNode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:1: cdRatioNode : cdRatio -> ^( RATIO cdRatio ) ;
    public final ChemicalChunkerParser.cdRatioNode_return cdRatioNode() throws RecognitionException {
        ChemicalChunkerParser.cdRatioNode_return retval = new ChemicalChunkerParser.cdRatioNode_return();
        retval.start = input.LT(1);
        int cdRatioNode_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cdRatio_return cdRatio596 = null;


        RewriteRuleSubtreeStream stream_cdRatio=new RewriteRuleSubtreeStream(adaptor,"rule cdRatio");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:13: ( cdRatio -> ^( RATIO cdRatio ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:15: cdRatio
            {
            pushFollow(FOLLOW_cdRatio_in_cdRatioNode2879_static.FOLLOW_cdRatio_in_cdRatioNode2879);
            cdRatio596=cdRatio();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_cdRatio.add(cdRatio596.getTree());


            // AST REWRITE
            // elements: cdRatio
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 310:23: -> ^( RATIO cdRatio )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:310:26: ^( RATIO cdRatio )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RATIO, "RATIO"), root_1);

                adaptor.addChild(root_1, stream_cdRatio.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, cdRatioNode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdRatioNode"

    public static class cdRatio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdRatio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:1: cdRatio : cd ( colon cd )+ ;
    public final ChemicalChunkerParser.cdRatio_return cdRatio() throws RecognitionException {
        ChemicalChunkerParser.cdRatio_return retval = new ChemicalChunkerParser.cdRatio_return();
        retval.start = input.LT(1);
        int cdRatio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd597 = null;

        ChemicalChunkerParser.colon_return colon598 = null;

        ChemicalChunkerParser.cd_return cd599 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:9: ( cd ( colon cd )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:11: cd ( colon cd )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cd_in_cdRatio2894_static.FOLLOW_cd_in_cdRatio2894);
            cd597=cd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd597.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:14: ( colon cd )+
            int cnt177=0;
            loop177:
            do {
                int alt177=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    switch ( input.LA(2) ) {
                    case TOKEN:
                        {
                        switch ( input.LA(3) ) {
                        case 146:
                            {
                            switch ( input.LA(4) ) {
                            case TOKEN:
                                {
                                int LA177_5 = input.LA(5);

                                if ( (synpred454_ChemicalChunker()) ) {
                                    alt177=1;
                                }


                                }
                                break;

                            }

                            }
                            break;

                        }

                        }
                        break;

                    }

                    }
                    break;

                }

                switch (alt177) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:15: colon cd
            	    {
            	    pushFollow(FOLLOW_colon_in_cdRatio2897_static.FOLLOW_colon_in_cdRatio2897);
            	    colon598=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon598.getTree());
            	    pushFollow(FOLLOW_cd_in_cdRatio2899_static.FOLLOW_cd_in_cdRatio2899);
            	    cd599=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd599.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt177 >= 1 ) break loop177;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(177, input);
                        throw eee;
                }
                cnt177++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, cdRatio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdRatio"

    public static class nounratio_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nounratio"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:312:1: nounratio : noun ( colon noun )+ ;
    public final ChemicalChunkerParser.nounratio_return nounratio() throws RecognitionException {
        ChemicalChunkerParser.nounratio_return retval = new ChemicalChunkerParser.nounratio_return();
        retval.start = input.LT(1);
        int nounratio_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.noun_return noun600 = null;

        ChemicalChunkerParser.colon_return colon601 = null;

        ChemicalChunkerParser.noun_return noun602 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:2: ( noun ( colon noun )+ )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:5: noun ( colon noun )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_noun_in_nounratio2910_static.FOLLOW_noun_in_nounratio2910);
            noun600=noun();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, noun600.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:11: ( colon noun )+
            int cnt178=0;
            loop178:
            do {
                int alt178=2;
                switch ( input.LA(1) ) {
                case 132:
                    {
                    int LA178_2 = input.LA(2);

                    if ( (synpred455_ChemicalChunker()) ) {
                        alt178=1;
                    }


                    }
                    break;

                }

                switch (alt178) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:12: colon noun
            	    {
            	    pushFollow(FOLLOW_colon_in_nounratio2914_static.FOLLOW_colon_in_nounratio2914);
            	    colon601=colon();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, colon601.getTree());
            	    pushFollow(FOLLOW_noun_in_nounratio2916_static.FOLLOW_noun_in_nounratio2916);
            	    noun602=noun();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, noun602.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt178 >= 1 ) break loop178;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(178, input);
                        throw eee;
                }
                cnt178++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, nounratio_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nounratio"

    public static class citation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citation"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:1: citation : ( citationStructure | comma citationContent comma );
    public final ChemicalChunkerParser.citation_return citation() throws RecognitionException {
        ChemicalChunkerParser.citation_return retval = new ChemicalChunkerParser.citation_return();
        retval.start = input.LT(1);
        int citation_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationStructure_return citationStructure603 = null;

        ChemicalChunkerParser.comma_return comma604 = null;

        ChemicalChunkerParser.citationContent_return citationContent605 = null;

        ChemicalChunkerParser.comma_return comma606 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:9: ( citationStructure | comma citationContent comma )
            int alt179=2;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt179=1;
                }
                break;
            case 133:
                {
                alt179=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }

            switch (alt179) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:12: citationStructure
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_citationStructure_in_citation2928_static.FOLLOW_citationStructure_in_citation2928);
                    citationStructure603=citationStructure();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationStructure603.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:315:30: comma citationContent comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_citation2930_static.FOLLOW_comma_in_citation2930);
                    comma604=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma604.getTree());
                    pushFollow(FOLLOW_citationContent_in_citation2932_static.FOLLOW_citationContent_in_citation2932);
                    citationContent605=citationContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, citationContent605.getTree());
                    pushFollow(FOLLOW_comma_in_citation2934_static.FOLLOW_comma_in_citation2934);
                    comma606=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma606.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, citation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citation"

    public static class citationStructure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationStructure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:1: citationStructure : citationContent -> ^( CITATION citationContent ) ;
    public final ChemicalChunkerParser.citationStructure_return citationStructure() throws RecognitionException {
        ChemicalChunkerParser.citationStructure_return retval = new ChemicalChunkerParser.citationStructure_return();
        retval.start = input.LT(1);
        int citationStructure_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.citationContent_return citationContent607 = null;


        RewriteRuleSubtreeStream stream_citationContent=new RewriteRuleSubtreeStream(adaptor,"rule citationContent");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:18: ( citationContent -> ^( CITATION citationContent ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:21: citationContent
            {
            pushFollow(FOLLOW_citationContent_in_citationStructure2942_static.FOLLOW_citationContent_in_citationStructure2942);
            citationContent607=citationContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_citationContent.add(citationContent607.getTree());


            // AST REWRITE
            // elements: citationContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 317:37: -> ^( CITATION citationContent )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:317:40: ^( CITATION citationContent )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CITATION, "CITATION"), root_1);

                adaptor.addChild(root_1, stream_citationContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, citationStructure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationStructure"

    public static class citationContent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "citationContent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:1: citationContent : lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb ;
    public final ChemicalChunkerParser.citationContent_return citationContent() throws RecognitionException {
        ChemicalChunkerParser.citationContent_return retval = new ChemicalChunkerParser.citationContent_return();
        retval.start = input.LT(1);
        int citationContent_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb608 = null;

        ChemicalChunkerParser.nnp_return nnp609 = null;

        ChemicalChunkerParser.fw_return fw610 = null;

        ChemicalChunkerParser.cd_return cd611 = null;

        ChemicalChunkerParser.conjunction_return conjunction612 = null;

        ChemicalChunkerParser.nnp_return nnp613 = null;

        ChemicalChunkerParser.fw_return fw614 = null;

        ChemicalChunkerParser.cd_return cd615 = null;

        ChemicalChunkerParser.conjunction_return conjunction616 = null;

        ChemicalChunkerParser.rrb_return rrb617 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:16: ( lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:20: lrb ( nnp | fw | cd | conjunction ) ( nnp | fw | cd | conjunction )+ rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_citationContent2958_static.FOLLOW_lrb_in_citationContent2958);
            lrb608=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb608.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:24: ( nnp | fw | cd | conjunction )
            int alt180=4;
            switch ( input.LA(1) ) {
            case 158:
                {
                alt180=1;
                }
                break;
            case 149:
                {
                alt180=2;
                }
                break;
            case 146:
                {
                alt180=3;
                }
                break;
            case 133:
            case 145:
                {
                alt180=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:25: nnp
                    {
                    pushFollow(FOLLOW_nnp_in_citationContent2961_static.FOLLOW_nnp_in_citationContent2961);
                    nnp609=nnp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp609.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:29: fw
                    {
                    pushFollow(FOLLOW_fw_in_citationContent2963_static.FOLLOW_fw_in_citationContent2963);
                    fw610=fw();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw610.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:32: cd
                    {
                    pushFollow(FOLLOW_cd_in_citationContent2965_static.FOLLOW_cd_in_citationContent2965);
                    cd611=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd611.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:35: conjunction
                    {
                    pushFollow(FOLLOW_conjunction_in_citationContent2967_static.FOLLOW_conjunction_in_citationContent2967);
                    conjunction612=conjunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction612.getTree());

                    }
                    break;

            }

            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:48: ( nnp | fw | cd | conjunction )+
            int cnt181=0;
            loop181:
            do {
                int alt181=5;
                switch ( input.LA(1) ) {
                case 158:
                    {
                    alt181=1;
                    }
                    break;
                case 149:
                    {
                    alt181=2;
                    }
                    break;
                case 146:
                    {
                    alt181=3;
                    }
                    break;
                case 133:
                case 145:
                    {
                    alt181=4;
                    }
                    break;

                }

                switch (alt181) {
            	case 1 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:49: nnp
            	    {
            	    pushFollow(FOLLOW_nnp_in_citationContent2971_static.FOLLOW_nnp_in_citationContent2971);
            	    nnp613=nnp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnp613.getTree());

            	    }
            	    break;
            	case 2 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:53: fw
            	    {
            	    pushFollow(FOLLOW_fw_in_citationContent2973_static.FOLLOW_fw_in_citationContent2973);
            	    fw614=fw();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, fw614.getTree());

            	    }
            	    break;
            	case 3 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:56: cd
            	    {
            	    pushFollow(FOLLOW_cd_in_citationContent2975_static.FOLLOW_cd_in_citationContent2975);
            	    cd615=cd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd615.getTree());

            	    }
            	    break;
            	case 4 :
            	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:318:59: conjunction
            	    {
            	    pushFollow(FOLLOW_conjunction_in_citationContent2977_static.FOLLOW_conjunction_in_citationContent2977);
            	    conjunction616=conjunction();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, conjunction616.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt181 >= 1 ) break loop181;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(181, input);
                        throw eee;
                }
                cnt181++;
            } while (true);

            pushFollow(FOLLOW_rrb_in_citationContent2981_static.FOLLOW_rrb_in_citationContent2981);
            rrb617=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb617.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, citationContent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "citationContent"

    public static class numericOrBracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericOrBracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:1: numericOrBracketedNumeric : ( numeric | bracketedNumeric );
    public final ChemicalChunkerParser.numericOrBracketedNumeric_return numericOrBracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.numericOrBracketedNumeric_return retval = new ChemicalChunkerParser.numericOrBracketedNumeric_return();
        retval.start = input.LT(1);
        int numericOrBracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.numeric_return numeric618 = null;

        ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric619 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:27: ( numeric | bracketedNumeric )
            int alt182=2;
            switch ( input.LA(1) ) {
            case 38:
            case 146:
                {
                alt182=1;
                }
                break;
            case 143:
                {
                alt182=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }

            switch (alt182) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:30: numeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_numeric_in_numericOrBracketedNumeric2991_static.FOLLOW_numeric_in_numericOrBracketedNumeric2991);
                    numeric618=numeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric618.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:320:40: bracketedNumeric
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2995_static.FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2995);
                    bracketedNumeric619=bracketedNumeric();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedNumeric619.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, numericOrBracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numericOrBracketedNumeric"

    public static class bracketedNumeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedNumeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:1: bracketedNumeric : lrb numeric rrb ;
    public final ChemicalChunkerParser.bracketedNumeric_return bracketedNumeric() throws RecognitionException {
        ChemicalChunkerParser.bracketedNumeric_return retval = new ChemicalChunkerParser.bracketedNumeric_return();
        retval.start = input.LT(1);
        int bracketedNumeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb620 = null;

        ChemicalChunkerParser.numeric_return numeric621 = null;

        ChemicalChunkerParser.rrb_return rrb622 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:18: ( lrb numeric rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:321:21: lrb numeric rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedNumeric3003_static.FOLLOW_lrb_in_bracketedNumeric3003);
            lrb620=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb620.getTree());
            pushFollow(FOLLOW_numeric_in_bracketedNumeric3005_static.FOLLOW_numeric_in_bracketedNumeric3005);
            numeric621=numeric();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric621.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedNumeric3007_static.FOLLOW_rrb_in_bracketedNumeric3007);
            rrb622=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb622.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, bracketedNumeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedNumeric"

    public static class identifierOrBracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierOrBracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:1: identifierOrBracketedIdentifier : ( ( cd )? nnidentifier | bracketedIdentifier );
    public final ChemicalChunkerParser.identifierOrBracketedIdentifier_return identifierOrBracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.identifierOrBracketedIdentifier_return retval = new ChemicalChunkerParser.identifierOrBracketedIdentifier_return();
        retval.start = input.LT(1);
        int identifierOrBracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd623 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier624 = null;

        ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier625 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:33: ( ( cd )? nnidentifier | bracketedIdentifier )
            int alt184=2;
            switch ( input.LA(1) ) {
            case 141:
            case 146:
                {
                alt184=1;
                }
                break;
            case 143:
                {
                alt184=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }

            switch (alt184) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:35: ( cd )? nnidentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:35: ( cd )?
                    int alt183=2;
                    switch ( input.LA(1) ) {
                        case 146:
                            {
                            alt183=1;
                            }
                            break;
                    }

                    switch (alt183) {
                        case 1 :
                            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                            {
                            pushFollow(FOLLOW_cd_in_identifierOrBracketedIdentifier3014_static.FOLLOW_cd_in_identifierOrBracketedIdentifier3014);
                            cd623=cd();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd623.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3017_static.FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3017);
                    nnidentifier624=nnidentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier624.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:322:54: bracketedIdentifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3021_static.FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3021);
                    bracketedIdentifier625=bracketedIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedIdentifier625.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, identifierOrBracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierOrBracketedIdentifier"

    public static class bracketedIdentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracketedIdentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:1: bracketedIdentifier : lrb ( cd )? nnidentifier rrb ;
    public final ChemicalChunkerParser.bracketedIdentifier_return bracketedIdentifier() throws RecognitionException {
        ChemicalChunkerParser.bracketedIdentifier_return retval = new ChemicalChunkerParser.bracketedIdentifier_return();
        retval.start = input.LT(1);
        int bracketedIdentifier_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.lrb_return lrb626 = null;

        ChemicalChunkerParser.cd_return cd627 = null;

        ChemicalChunkerParser.nnidentifier_return nnidentifier628 = null;

        ChemicalChunkerParser.rrb_return rrb629 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:21: ( lrb ( cd )? nnidentifier rrb )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:24: lrb ( cd )? nnidentifier rrb
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lrb_in_bracketedIdentifier3029_static.FOLLOW_lrb_in_bracketedIdentifier3029);
            lrb626=lrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lrb626.getTree());
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:323:28: ( cd )?
            int alt185=2;
            switch ( input.LA(1) ) {
                case 146:
                    {
                    alt185=1;
                    }
                    break;
            }

            switch (alt185) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cd
                    {
                    pushFollow(FOLLOW_cd_in_bracketedIdentifier3031_static.FOLLOW_cd_in_bracketedIdentifier3031);
                    cd627=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd627.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_nnidentifier_in_bracketedIdentifier3034_static.FOLLOW_nnidentifier_in_bracketedIdentifier3034);
            nnidentifier628=nnidentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nnidentifier628.getTree());
            pushFollow(FOLLOW_rrb_in_bracketedIdentifier3036_static.FOLLOW_rrb_in_bracketedIdentifier3036);
            rrb629=rrb();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rrb629.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, bracketedIdentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracketedIdentifier"

    public static class adj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:1: adj : ( jj | jjr | jjs | oscarcj | jjchem | oscarrn );
    public final ChemicalChunkerParser.adj_return adj() throws RecognitionException {
        ChemicalChunkerParser.adj_return retval = new ChemicalChunkerParser.adj_return();
        retval.start = input.LT(1);
        int adj_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.jj_return jj630 = null;

        ChemicalChunkerParser.jjr_return jjr631 = null;

        ChemicalChunkerParser.jjs_return jjs632 = null;

        ChemicalChunkerParser.oscarcj_return oscarcj633 = null;

        ChemicalChunkerParser.jjchem_return jjchem634 = null;

        ChemicalChunkerParser.oscarrn_return oscarrn635 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:5: ( jj | jjr | jjs | oscarcj | jjchem | oscarrn )
            int alt186=6;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt186=1;
                }
                break;
            case 152:
                {
                alt186=2;
                }
                break;
            case 153:
                {
                alt186=3;
                }
                break;
            case 39:
                {
                alt186=4;
                }
                break;
            case 45:
                {
                alt186=5;
                }
                break;
            case 40:
                {
                alt186=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }

            switch (alt186) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:7: jj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jj_in_adj3044_static.FOLLOW_jj_in_adj3044);
                    jj630=jj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jj630.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:10: jjr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjr_in_adj3046_static.FOLLOW_jjr_in_adj3046);
                    jjr631=jjr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjr631.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:14: jjs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjs_in_adj3048_static.FOLLOW_jjs_in_adj3048);
                    jjs632=jjs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjs632.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:18: oscarcj
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarcj_in_adj3050_static.FOLLOW_oscarcj_in_adj3050);
                    oscarcj633=oscarcj();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarcj633.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:26: jjchem
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_jjchem_in_adj3052_static.FOLLOW_jjchem_in_adj3052);
                    jjchem634=jjchem();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, jjchem634.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:325:33: oscarrn
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_oscarrn_in_adj3054_static.FOLLOW_oscarrn_in_adj3054);
                    oscarrn635=oscarrn();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, oscarrn635.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, adj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adj"

    public static class adv_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adv"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:1: adv : ( rb | rbr | rp | rbs );
    public final ChemicalChunkerParser.adv_return adv() throws RecognitionException {
        ChemicalChunkerParser.adv_return retval = new ChemicalChunkerParser.adv_return();
        retval.start = input.LT(1);
        int adv_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.rb_return rb636 = null;

        ChemicalChunkerParser.rbr_return rbr637 = null;

        ChemicalChunkerParser.rp_return rp638 = null;

        ChemicalChunkerParser.rbs_return rbs639 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:5: ( rb | rbr | rp | rbs )
            int alt187=4;
            switch ( input.LA(1) ) {
            case 164:
                {
                alt187=1;
                }
                break;
            case 165:
                {
                alt187=2;
                }
                break;
            case 167:
                {
                alt187=3;
                }
                break;
            case 166:
                {
                alt187=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }

            switch (alt187) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:7: rb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rb_in_adv3061_static.FOLLOW_rb_in_adv3061);
                    rb636=rb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rb636.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:10: rbr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbr_in_adv3063_static.FOLLOW_rbr_in_adv3063);
                    rbr637=rbr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbr637.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:14: rp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rp_in_adv3065_static.FOLLOW_rp_in_adv3065);
                    rp638=rp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rp638.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:326:17: rbs
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rbs_in_adv3067_static.FOLLOW_rbs_in_adv3067);
                    rbs639=rbs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rbs639.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, adv_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "adv"

    public static class clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "clause"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:1: clause : ( wdt | wp_poss | wrb | ex | pdt | wp );
    public final ChemicalChunkerParser.clause_return clause() throws RecognitionException {
        ChemicalChunkerParser.clause_return retval = new ChemicalChunkerParser.clause_return();
        retval.start = input.LT(1);
        int clause_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.wdt_return wdt640 = null;

        ChemicalChunkerParser.wp_poss_return wp_poss641 = null;

        ChemicalChunkerParser.wrb_return wrb642 = null;

        ChemicalChunkerParser.ex_return ex643 = null;

        ChemicalChunkerParser.pdt_return pdt644 = null;

        ChemicalChunkerParser.wp_return wp645 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:8: ( wdt | wp_poss | wrb | ex | pdt | wp )
            int alt188=6;
            switch ( input.LA(1) ) {
            case 177:
                {
                alt188=1;
                }
                break;
            case 179:
                {
                alt188=2;
                }
                break;
            case 180:
                {
                alt188=3;
                }
                break;
            case 148:
                {
                alt188=4;
                }
                break;
            case 160:
                {
                alt188=5;
                }
                break;
            case 178:
                {
                alt188=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;
            }

            switch (alt188) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:10: wdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wdt_in_clause3074_static.FOLLOW_wdt_in_clause3074);
                    wdt640=wdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wdt640.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:14: wp_poss
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_poss_in_clause3076_static.FOLLOW_wp_poss_in_clause3076);
                    wp_poss641=wp_poss();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp_poss641.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:22: wrb
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wrb_in_clause3078_static.FOLLOW_wrb_in_clause3078);
                    wrb642=wrb();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wrb642.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:26: ex
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ex_in_clause3080_static.FOLLOW_ex_in_clause3080);
                    ex643=ex();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex643.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:29: pdt
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pdt_in_clause3082_static.FOLLOW_pdt_in_clause3082);
                    pdt644=pdt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pdt644.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:327:33: wp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_wp_in_clause3084_static.FOLLOW_wp_in_clause3084);
                    wp645=wp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wp645.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "clause"

    public static class conjunction_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conjunction"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:1: conjunction : ( cc | comma );
    public final ChemicalChunkerParser.conjunction_return conjunction() throws RecognitionException {
        ChemicalChunkerParser.conjunction_return retval = new ChemicalChunkerParser.conjunction_return();
        retval.start = input.LT(1);
        int conjunction_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cc_return cc646 = null;

        ChemicalChunkerParser.comma_return comma647 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:13: ( cc | comma )
            int alt189=2;
            switch ( input.LA(1) ) {
            case 145:
                {
                alt189=1;
                }
                break;
            case 133:
                {
                alt189=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }

            switch (alt189) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:15: cc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cc_in_conjunction3091_static.FOLLOW_cc_in_conjunction3091);
                    cc646=cc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cc646.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:328:18: comma
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_comma_in_conjunction3093_static.FOLLOW_comma_in_conjunction3093);
                    comma647=comma();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comma647.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, conjunction_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conjunction"

    public static class inAll_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inAll"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:1: inAll : ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inAll_return inAll() throws RecognitionException {
        ChemicalChunkerParser.inAll_return retval = new ChemicalChunkerParser.inAll_return();
        retval.start = input.LT(1);
        int inAll_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in648 = null;

        ChemicalChunkerParser.inafter_return inafter649 = null;

        ChemicalChunkerParser.inas_return inas650 = null;

        ChemicalChunkerParser.inbefore_return inbefore651 = null;

        ChemicalChunkerParser.inby_return inby652 = null;

        ChemicalChunkerParser.infor_return infor653 = null;

        ChemicalChunkerParser.infrom_return infrom654 = null;

        ChemicalChunkerParser.inin_return inin655 = null;

        ChemicalChunkerParser.ininto_return ininto656 = null;

        ChemicalChunkerParser.inof_return inof657 = null;

        ChemicalChunkerParser.inoff_return inoff658 = null;

        ChemicalChunkerParser.inon_return inon659 = null;

        ChemicalChunkerParser.inover_return inover660 = null;

        ChemicalChunkerParser.inunder_return inunder661 = null;

        ChemicalChunkerParser.invia_return invia662 = null;

        ChemicalChunkerParser.inwith_return inwith663 = null;

        ChemicalChunkerParser.inwithout_return inwithout664 = null;

        ChemicalChunkerParser.to_return to665 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:7: ( in | inafter | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt190=18;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt190=1;
                }
                break;
            case 49:
                {
                alt190=2;
                }
                break;
            case 47:
                {
                alt190=3;
                }
                break;
            case 48:
                {
                alt190=4;
                }
                break;
            case 54:
                {
                alt190=5;
                }
                break;
            case 58:
                {
                alt190=6;
                }
                break;
            case 59:
                {
                alt190=7;
                }
                break;
            case 50:
                {
                alt190=8;
                }
                break;
            case 51:
                {
                alt190=9;
                }
                break;
            case 56:
                {
                alt190=10;
                }
                break;
            case 62:
                {
                alt190=11;
                }
                break;
            case 57:
                {
                alt190=12;
                }
                break;
            case 61:
                {
                alt190=13;
                }
                break;
            case 60:
                {
                alt190=14;
                }
                break;
            case 55:
                {
                alt190=15;
                }
                break;
            case 52:
                {
                alt190=16;
                }
                break;
            case 53:
                {
                alt190=17;
                }
                break;
            case 169:
                {
                alt190=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }

            switch (alt190) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:9: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inAll3100_static.FOLLOW_in_in_inAll3100);
                    in648=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in648.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:12: inafter
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inafter_in_inAll3102_static.FOLLOW_inafter_in_inAll3102);
                    inafter649=inafter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inafter649.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:20: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inAll3104_static.FOLLOW_inas_in_inAll3104);
                    inas650=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas650.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:25: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inAll3106_static.FOLLOW_inbefore_in_inAll3106);
                    inbefore651=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore651.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:34: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inAll3108_static.FOLLOW_inby_in_inAll3108);
                    inby652=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby652.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:39: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inAll3110_static.FOLLOW_infor_in_inAll3110);
                    infor653=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor653.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:45: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inAll3112_static.FOLLOW_infrom_in_inAll3112);
                    infrom654=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom654.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:52: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inAll3114_static.FOLLOW_inin_in_inAll3114);
                    inin655=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin655.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:57: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inAll3116_static.FOLLOW_ininto_in_inAll3116);
                    ininto656=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto656.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:64: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inAll3118_static.FOLLOW_inof_in_inAll3118);
                    inof657=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof657.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:69: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inAll3120_static.FOLLOW_inoff_in_inAll3120);
                    inoff658=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff658.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:75: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inAll3122_static.FOLLOW_inon_in_inAll3122);
                    inon659=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon659.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:80: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inAll3124_static.FOLLOW_inover_in_inAll3124);
                    inover660=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover660.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:87: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inAll3126_static.FOLLOW_inunder_in_inAll3126);
                    inunder661=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder661.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:95: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inAll3128_static.FOLLOW_invia_in_inAll3128);
                    invia662=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia662.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:101: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inAll3130_static.FOLLOW_inwith_in_inAll3130);
                    inwith663=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith663.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:108: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inAll3132_static.FOLLOW_inwithout_in_inAll3132);
                    inwithout664=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout664.getTree());

                    }
                    break;
                case 18 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:329:118: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inAll3134_static.FOLLOW_to_in_inAll3134);
                    to665=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to665.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, inAll_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inAll"

    public static class inMost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inMost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:1: inMost : ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to );
    public final ChemicalChunkerParser.inMost_return inMost() throws RecognitionException {
        ChemicalChunkerParser.inMost_return retval = new ChemicalChunkerParser.inMost_return();
        retval.start = input.LT(1);
        int inMost_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.in_return in666 = null;

        ChemicalChunkerParser.inas_return inas667 = null;

        ChemicalChunkerParser.inbefore_return inbefore668 = null;

        ChemicalChunkerParser.inby_return inby669 = null;

        ChemicalChunkerParser.infor_return infor670 = null;

        ChemicalChunkerParser.infrom_return infrom671 = null;

        ChemicalChunkerParser.inin_return inin672 = null;

        ChemicalChunkerParser.ininto_return ininto673 = null;

        ChemicalChunkerParser.inof_return inof674 = null;

        ChemicalChunkerParser.inoff_return inoff675 = null;

        ChemicalChunkerParser.inon_return inon676 = null;

        ChemicalChunkerParser.inover_return inover677 = null;

        ChemicalChunkerParser.inunder_return inunder678 = null;

        ChemicalChunkerParser.invia_return invia679 = null;

        ChemicalChunkerParser.inwith_return inwith680 = null;

        ChemicalChunkerParser.inwithout_return inwithout681 = null;

        ChemicalChunkerParser.to_return to682 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:8: ( in | inas | inbefore | inby | infor | infrom | inin | ininto | inof | inoff | inon | inover | inunder | invia | inwith | inwithout | to )
            int alt191=17;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt191=1;
                }
                break;
            case 47:
                {
                alt191=2;
                }
                break;
            case 48:
                {
                alt191=3;
                }
                break;
            case 54:
                {
                alt191=4;
                }
                break;
            case 58:
                {
                alt191=5;
                }
                break;
            case 59:
                {
                alt191=6;
                }
                break;
            case 50:
                {
                alt191=7;
                }
                break;
            case 51:
                {
                alt191=8;
                }
                break;
            case 56:
                {
                alt191=9;
                }
                break;
            case 62:
                {
                alt191=10;
                }
                break;
            case 57:
                {
                alt191=11;
                }
                break;
            case 61:
                {
                alt191=12;
                }
                break;
            case 60:
                {
                alt191=13;
                }
                break;
            case 55:
                {
                alt191=14;
                }
                break;
            case 52:
                {
                alt191=15;
                }
                break;
            case 53:
                {
                alt191=16;
                }
                break;
            case 169:
                {
                alt191=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:10: in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_in_in_inMost3141_static.FOLLOW_in_in_inMost3141);
                    in666=in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in666.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:13: inas
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inas_in_inMost3143_static.FOLLOW_inas_in_inMost3143);
                    inas667=inas();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inas667.getTree());

                    }
                    break;
                case 3 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:18: inbefore
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inbefore_in_inMost3145_static.FOLLOW_inbefore_in_inMost3145);
                    inbefore668=inbefore();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inbefore668.getTree());

                    }
                    break;
                case 4 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:27: inby
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inby_in_inMost3147_static.FOLLOW_inby_in_inMost3147);
                    inby669=inby();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inby669.getTree());

                    }
                    break;
                case 5 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:32: infor
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infor_in_inMost3149_static.FOLLOW_infor_in_inMost3149);
                    infor670=infor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infor670.getTree());

                    }
                    break;
                case 6 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:38: infrom
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_infrom_in_inMost3151_static.FOLLOW_infrom_in_inMost3151);
                    infrom671=infrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, infrom671.getTree());

                    }
                    break;
                case 7 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:45: inin
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inin_in_inMost3153_static.FOLLOW_inin_in_inMost3153);
                    inin672=inin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inin672.getTree());

                    }
                    break;
                case 8 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:50: ininto
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_ininto_in_inMost3155_static.FOLLOW_ininto_in_inMost3155);
                    ininto673=ininto();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ininto673.getTree());

                    }
                    break;
                case 9 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:57: inof
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inof_in_inMost3157_static.FOLLOW_inof_in_inMost3157);
                    inof674=inof();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inof674.getTree());

                    }
                    break;
                case 10 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:62: inoff
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inoff_in_inMost3159_static.FOLLOW_inoff_in_inMost3159);
                    inoff675=inoff();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inoff675.getTree());

                    }
                    break;
                case 11 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:68: inon
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inon_in_inMost3161_static.FOLLOW_inon_in_inMost3161);
                    inon676=inon();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inon676.getTree());

                    }
                    break;
                case 12 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:73: inover
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inover_in_inMost3163_static.FOLLOW_inover_in_inMost3163);
                    inover677=inover();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inover677.getTree());

                    }
                    break;
                case 13 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:80: inunder
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inunder_in_inMost3165_static.FOLLOW_inunder_in_inMost3165);
                    inunder678=inunder();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inunder678.getTree());

                    }
                    break;
                case 14 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:88: invia
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_invia_in_inMost3167_static.FOLLOW_invia_in_inMost3167);
                    invia679=invia();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, invia679.getTree());

                    }
                    break;
                case 15 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:94: inwith
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwith_in_inMost3169_static.FOLLOW_inwith_in_inMost3169);
                    inwith680=inwith();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwith680.getTree());

                    }
                    break;
                case 16 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:101: inwithout
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_inwithout_in_inMost3171_static.FOLLOW_inwithout_in_inMost3171);
                    inwithout681=inwithout();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inwithout681.getTree());

                    }
                    break;
                case 17 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:330:111: to
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_in_inMost3173_static.FOLLOW_to_in_inMost3173);
                    to682=to();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to682.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, inMost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inMost"

    public static class numeric_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:1: numeric : ( cd | cdAlphanum );
    public final ChemicalChunkerParser.numeric_return numeric() throws RecognitionException {
        ChemicalChunkerParser.numeric_return retval = new ChemicalChunkerParser.numeric_return();
        retval.start = input.LT(1);
        int numeric_StartIndex = input.index();
        Object root_0 = null;

        ChemicalChunkerParser.cd_return cd683 = null;

        ChemicalChunkerParser.cdAlphanum_return cdAlphanum684 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:9: ( cd | cdAlphanum )
            int alt192=2;
            switch ( input.LA(1) ) {
            case 146:
                {
                alt192=1;
                }
                break;
            case 38:
                {
                alt192=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }

            switch (alt192) {
                case 1 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:11: cd
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cd_in_numeric3180_static.FOLLOW_cd_in_numeric3180);
                    cd683=cd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd683.getTree());

                    }
                    break;
                case 2 :
                    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:331:14: cdAlphanum
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cdAlphanum_in_numeric3182_static.FOLLOW_cdAlphanum_in_numeric3182);
                    cdAlphanum684=cdAlphanum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cdAlphanum684.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, numeric_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric"

    public static class cdAlphanum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdAlphanum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:1: cdAlphanum : 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) ;
    public final ChemicalChunkerParser.cdAlphanum_return cdAlphanum() throws RecognitionException {
        ChemicalChunkerParser.cdAlphanum_return retval = new ChemicalChunkerParser.cdAlphanum_return();
        retval.start = input.LT(1);
        int cdAlphanum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal685=null;
        Token TOKEN686=null;

        Object string_literal685_tree=null;
        Object TOKEN686_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_38=new RewriteRuleTokenStream(adaptor,"token 38");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:11: ( 'CD-ALPHANUM' TOKEN -> ^( 'CD-ALPHANUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:12: 'CD-ALPHANUM' TOKEN
            {
            string_literal685=(Token)match(input,38,FOLLOW_38_in_cdAlphanum3190_static.FOLLOW_38_in_cdAlphanum3190); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_38.add(string_literal685);

            TOKEN686=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdAlphanum3192_static.FOLLOW_TOKEN_in_cdAlphanum3192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN686);



            // AST REWRITE
            // elements: TOKEN, 38
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 335:32: -> ^( 'CD-ALPHANUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:335:35: ^( 'CD-ALPHANUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_38.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, cdAlphanum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdAlphanum"

    public static class oscarcj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:1: oscarcj : 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcj_return oscarcj() throws RecognitionException {
        ChemicalChunkerParser.oscarcj_return retval = new ChemicalChunkerParser.oscarcj_return();
        retval.start = input.LT(1);
        int oscarcj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal687=null;
        Token TOKEN688=null;

        Object string_literal687_tree=null;
        Object TOKEN688_tree=null;
        RewriteRuleTokenStream stream_39=new RewriteRuleTokenStream(adaptor,"token 39");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:8: ( 'OSCAR-CJ' TOKEN -> ^( 'OSCAR-CJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:9: 'OSCAR-CJ' TOKEN
            {
            string_literal687=(Token)match(input,39,FOLLOW_39_in_oscarcj3205_static.FOLLOW_39_in_oscarcj3205); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_39.add(string_literal687);

            TOKEN688=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcj3207_static.FOLLOW_TOKEN_in_oscarcj3207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN688);



            // AST REWRITE
            // elements: 39, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 336:26: -> ^( 'OSCAR-CJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:336:29: ^( 'OSCAR-CJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_39.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, oscarcj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcj"

    public static class oscarrn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarrn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:1: oscarrn : 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) ;
    public final ChemicalChunkerParser.oscarrn_return oscarrn() throws RecognitionException {
        ChemicalChunkerParser.oscarrn_return retval = new ChemicalChunkerParser.oscarrn_return();
        retval.start = input.LT(1);
        int oscarrn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal689=null;
        Token TOKEN690=null;

        Object string_literal689_tree=null;
        Object TOKEN690_tree=null;
        RewriteRuleTokenStream stream_40=new RewriteRuleTokenStream(adaptor,"token 40");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:8: ( 'OSCAR-RN' TOKEN -> ^( 'OSCAR-RN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:9: 'OSCAR-RN' TOKEN
            {
            string_literal689=(Token)match(input,40,FOLLOW_40_in_oscarrn3220_static.FOLLOW_40_in_oscarrn3220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_40.add(string_literal689);

            TOKEN690=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarrn3222_static.FOLLOW_TOKEN_in_oscarrn3222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN690);



            // AST REWRITE
            // elements: 40, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:26: -> ^( 'OSCAR-RN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:337:29: ^( 'OSCAR-RN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_40.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, oscarrn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarrn"

    public static class oscarase_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarase"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:1: oscarase : 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) ;
    public final ChemicalChunkerParser.oscarase_return oscarase() throws RecognitionException {
        ChemicalChunkerParser.oscarase_return retval = new ChemicalChunkerParser.oscarase_return();
        retval.start = input.LT(1);
        int oscarase_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal691=null;
        Token TOKEN692=null;

        Object string_literal691_tree=null;
        Object TOKEN692_tree=null;
        RewriteRuleTokenStream stream_41=new RewriteRuleTokenStream(adaptor,"token 41");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:9: ( 'OSCAR-ASE' TOKEN -> ^( 'OSCAR-ASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:10: 'OSCAR-ASE' TOKEN
            {
            string_literal691=(Token)match(input,41,FOLLOW_41_in_oscarase3235_static.FOLLOW_41_in_oscarase3235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_41.add(string_literal691);

            TOKEN692=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarase3237_static.FOLLOW_TOKEN_in_oscarase3237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN692);



            // AST REWRITE
            // elements: 41, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 338:28: -> ^( 'OSCAR-ASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:338:31: ^( 'OSCAR-ASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_41.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, oscarase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarase"

    public static class oscaront_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscaront"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:1: oscaront : 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) ;
    public final ChemicalChunkerParser.oscaront_return oscaront() throws RecognitionException {
        ChemicalChunkerParser.oscaront_return retval = new ChemicalChunkerParser.oscaront_return();
        retval.start = input.LT(1);
        int oscaront_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal693=null;
        Token TOKEN694=null;

        Object string_literal693_tree=null;
        Object TOKEN694_tree=null;
        RewriteRuleTokenStream stream_42=new RewriteRuleTokenStream(adaptor,"token 42");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:9: ( 'OSCAR-ONT' TOKEN -> ^( 'OSCAR-ONT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:10: 'OSCAR-ONT' TOKEN
            {
            string_literal693=(Token)match(input,42,FOLLOW_42_in_oscaront3250_static.FOLLOW_42_in_oscaront3250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_42.add(string_literal693);

            TOKEN694=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscaront3252_static.FOLLOW_TOKEN_in_oscaront3252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN694);



            // AST REWRITE
            // elements: TOKEN, 42
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 339:28: -> ^( 'OSCAR-ONT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:339:31: ^( 'OSCAR-ONT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_42.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, oscaront_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscaront"

    public static class tmunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "tmunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:1: tmunicode : 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.tmunicode_return tmunicode() throws RecognitionException {
        ChemicalChunkerParser.tmunicode_return retval = new ChemicalChunkerParser.tmunicode_return();
        retval.start = input.LT(1);
        int tmunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal695=null;
        Token TOKEN696=null;

        Object string_literal695_tree=null;
        Object TOKEN696_tree=null;
        RewriteRuleTokenStream stream_43=new RewriteRuleTokenStream(adaptor,"token 43");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:10: ( 'TM-UNICODE' TOKEN -> ^( 'TM-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:11: 'TM-UNICODE' TOKEN
            {
            string_literal695=(Token)match(input,43,FOLLOW_43_in_tmunicode3265_static.FOLLOW_43_in_tmunicode3265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_43.add(string_literal695);

            TOKEN696=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_tmunicode3267_static.FOLLOW_TOKEN_in_tmunicode3267); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN696);



            // AST REWRITE
            // elements: TOKEN, 43
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 340:30: -> ^( 'TM-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:340:33: ^( 'TM-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_43.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, tmunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tmunicode"

    public static class cdunicode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cdunicode"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:1: cdunicode : 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) ;
    public final ChemicalChunkerParser.cdunicode_return cdunicode() throws RecognitionException {
        ChemicalChunkerParser.cdunicode_return retval = new ChemicalChunkerParser.cdunicode_return();
        retval.start = input.LT(1);
        int cdunicode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal697=null;
        Token TOKEN698=null;

        Object string_literal697_tree=null;
        Object TOKEN698_tree=null;
        RewriteRuleTokenStream stream_44=new RewriteRuleTokenStream(adaptor,"token 44");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:10: ( 'CD-UNICODE' TOKEN -> ^( 'CD-UNICODE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:11: 'CD-UNICODE' TOKEN
            {
            string_literal697=(Token)match(input,44,FOLLOW_44_in_cdunicode3280_static.FOLLOW_44_in_cdunicode3280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_44.add(string_literal697);

            TOKEN698=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cdunicode3282_static.FOLLOW_TOKEN_in_cdunicode3282); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN698);



            // AST REWRITE
            // elements: TOKEN, 44
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 341:30: -> ^( 'CD-UNICODE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:341:33: ^( 'CD-UNICODE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_44.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, cdunicode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cdunicode"

    public static class jjchem_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjchem"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:1: jjchem : 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) ;
    public final ChemicalChunkerParser.jjchem_return jjchem() throws RecognitionException {
        ChemicalChunkerParser.jjchem_return retval = new ChemicalChunkerParser.jjchem_return();
        retval.start = input.LT(1);
        int jjchem_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal699=null;
        Token TOKEN700=null;

        Object string_literal699_tree=null;
        Object TOKEN700_tree=null;
        RewriteRuleTokenStream stream_45=new RewriteRuleTokenStream(adaptor,"token 45");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:7: ( 'JJ-CHEM' TOKEN -> ^( 'JJ-CHEM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:8: 'JJ-CHEM' TOKEN
            {
            string_literal699=(Token)match(input,45,FOLLOW_45_in_jjchem3295_static.FOLLOW_45_in_jjchem3295); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_45.add(string_literal699);

            TOKEN700=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjchem3297_static.FOLLOW_TOKEN_in_jjchem3297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN700);



            // AST REWRITE
            // elements: TOKEN, 45
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:24: -> ^( 'JJ-CHEM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:342:27: ^( 'JJ-CHEM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_45.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, jjchem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjchem"

    public static class jjcomp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjcomp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:1: jjcomp : 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) ;
    public final ChemicalChunkerParser.jjcomp_return jjcomp() throws RecognitionException {
        ChemicalChunkerParser.jjcomp_return retval = new ChemicalChunkerParser.jjcomp_return();
        retval.start = input.LT(1);
        int jjcomp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal701=null;
        Token TOKEN702=null;

        Object string_literal701_tree=null;
        Object TOKEN702_tree=null;
        RewriteRuleTokenStream stream_46=new RewriteRuleTokenStream(adaptor,"token 46");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:7: ( 'JJ-COMPOUND' TOKEN -> ^( 'JJ-COMPOUND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:8: 'JJ-COMPOUND' TOKEN
            {
            string_literal701=(Token)match(input,46,FOLLOW_46_in_jjcomp3310_static.FOLLOW_46_in_jjcomp3310); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_46.add(string_literal701);

            TOKEN702=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjcomp3312_static.FOLLOW_TOKEN_in_jjcomp3312); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN702);



            // AST REWRITE
            // elements: TOKEN, 46
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 343:28: -> ^( 'JJ-COMPOUND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:343:31: ^( 'JJ-COMPOUND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_46.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, jjcomp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjcomp"

    public static class inas_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inas"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:1: inas : 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) ;
    public final ChemicalChunkerParser.inas_return inas() throws RecognitionException {
        ChemicalChunkerParser.inas_return retval = new ChemicalChunkerParser.inas_return();
        retval.start = input.LT(1);
        int inas_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal703=null;
        Token TOKEN704=null;

        Object string_literal703_tree=null;
        Object TOKEN704_tree=null;
        RewriteRuleTokenStream stream_47=new RewriteRuleTokenStream(adaptor,"token 47");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:5: ( 'IN-AS' TOKEN -> ^( 'IN-AS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:6: 'IN-AS' TOKEN
            {
            string_literal703=(Token)match(input,47,FOLLOW_47_in_inas3326_static.FOLLOW_47_in_inas3326); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_47.add(string_literal703);

            TOKEN704=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inas3328_static.FOLLOW_TOKEN_in_inas3328); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN704);



            // AST REWRITE
            // elements: 47, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 345:20: -> ^( 'IN-AS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:345:23: ^( 'IN-AS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_47.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, inas_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inas"

    public static class inbefore_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inbefore"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:1: inbefore : 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) ;
    public final ChemicalChunkerParser.inbefore_return inbefore() throws RecognitionException {
        ChemicalChunkerParser.inbefore_return retval = new ChemicalChunkerParser.inbefore_return();
        retval.start = input.LT(1);
        int inbefore_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal705=null;
        Token TOKEN706=null;

        Object string_literal705_tree=null;
        Object TOKEN706_tree=null;
        RewriteRuleTokenStream stream_48=new RewriteRuleTokenStream(adaptor,"token 48");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:9: ( 'IN-BEFORE' TOKEN -> ^( 'IN-BEFORE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:10: 'IN-BEFORE' TOKEN
            {
            string_literal705=(Token)match(input,48,FOLLOW_48_in_inbefore3341_static.FOLLOW_48_in_inbefore3341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_48.add(string_literal705);

            TOKEN706=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inbefore3343_static.FOLLOW_TOKEN_in_inbefore3343); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN706);



            // AST REWRITE
            // elements: TOKEN, 48
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 346:28: -> ^( 'IN-BEFORE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:346:31: ^( 'IN-BEFORE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_48.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, inbefore_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inbefore"

    public static class inafter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inafter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:1: inafter : 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) ;
    public final ChemicalChunkerParser.inafter_return inafter() throws RecognitionException {
        ChemicalChunkerParser.inafter_return retval = new ChemicalChunkerParser.inafter_return();
        retval.start = input.LT(1);
        int inafter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal707=null;
        Token TOKEN708=null;

        Object string_literal707_tree=null;
        Object TOKEN708_tree=null;
        RewriteRuleTokenStream stream_49=new RewriteRuleTokenStream(adaptor,"token 49");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:8: ( 'IN-AFTER' TOKEN -> ^( 'IN-AFTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:9: 'IN-AFTER' TOKEN
            {
            string_literal707=(Token)match(input,49,FOLLOW_49_in_inafter3356_static.FOLLOW_49_in_inafter3356); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_49.add(string_literal707);

            TOKEN708=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inafter3358_static.FOLLOW_TOKEN_in_inafter3358); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN708);



            // AST REWRITE
            // elements: TOKEN, 49
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 347:26: -> ^( 'IN-AFTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:347:29: ^( 'IN-AFTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_49.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, inafter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inafter"

    public static class inin_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inin"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:1: inin : 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) ;
    public final ChemicalChunkerParser.inin_return inin() throws RecognitionException {
        ChemicalChunkerParser.inin_return retval = new ChemicalChunkerParser.inin_return();
        retval.start = input.LT(1);
        int inin_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal709=null;
        Token TOKEN710=null;

        Object string_literal709_tree=null;
        Object TOKEN710_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_50=new RewriteRuleTokenStream(adaptor,"token 50");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:5: ( 'IN-IN' TOKEN -> ^( 'IN-IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:6: 'IN-IN' TOKEN
            {
            string_literal709=(Token)match(input,50,FOLLOW_50_in_inin3371_static.FOLLOW_50_in_inin3371); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_50.add(string_literal709);

            TOKEN710=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inin3373_static.FOLLOW_TOKEN_in_inin3373); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN710);



            // AST REWRITE
            // elements: TOKEN, 50
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:20: -> ^( 'IN-IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:348:23: ^( 'IN-IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_50.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, inin_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inin"

    public static class ininto_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ininto"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:1: ininto : 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) ;
    public final ChemicalChunkerParser.ininto_return ininto() throws RecognitionException {
        ChemicalChunkerParser.ininto_return retval = new ChemicalChunkerParser.ininto_return();
        retval.start = input.LT(1);
        int ininto_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal711=null;
        Token TOKEN712=null;

        Object string_literal711_tree=null;
        Object TOKEN712_tree=null;
        RewriteRuleTokenStream stream_51=new RewriteRuleTokenStream(adaptor,"token 51");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:7: ( 'IN-INTO' TOKEN -> ^( 'IN-INTO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:8: 'IN-INTO' TOKEN
            {
            string_literal711=(Token)match(input,51,FOLLOW_51_in_ininto3386_static.FOLLOW_51_in_ininto3386); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_51.add(string_literal711);

            TOKEN712=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ininto3388_static.FOLLOW_TOKEN_in_ininto3388); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN712);



            // AST REWRITE
            // elements: 51, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 349:24: -> ^( 'IN-INTO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:349:27: ^( 'IN-INTO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_51.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, ininto_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ininto"

    public static class inwith_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwith"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:1: inwith : 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) ;
    public final ChemicalChunkerParser.inwith_return inwith() throws RecognitionException {
        ChemicalChunkerParser.inwith_return retval = new ChemicalChunkerParser.inwith_return();
        retval.start = input.LT(1);
        int inwith_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal713=null;
        Token TOKEN714=null;

        Object string_literal713_tree=null;
        Object TOKEN714_tree=null;
        RewriteRuleTokenStream stream_52=new RewriteRuleTokenStream(adaptor,"token 52");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:7: ( 'IN-WITH' TOKEN -> ^( 'IN-WITH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:8: 'IN-WITH' TOKEN
            {
            string_literal713=(Token)match(input,52,FOLLOW_52_in_inwith3401_static.FOLLOW_52_in_inwith3401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_52.add(string_literal713);

            TOKEN714=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwith3403_static.FOLLOW_TOKEN_in_inwith3403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN714);



            // AST REWRITE
            // elements: TOKEN, 52
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:24: -> ^( 'IN-WITH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:350:27: ^( 'IN-WITH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_52.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, inwith_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwith"

    public static class inwithout_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inwithout"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:1: inwithout : 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) ;
    public final ChemicalChunkerParser.inwithout_return inwithout() throws RecognitionException {
        ChemicalChunkerParser.inwithout_return retval = new ChemicalChunkerParser.inwithout_return();
        retval.start = input.LT(1);
        int inwithout_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal715=null;
        Token TOKEN716=null;

        Object string_literal715_tree=null;
        Object TOKEN716_tree=null;
        RewriteRuleTokenStream stream_53=new RewriteRuleTokenStream(adaptor,"token 53");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:10: ( 'IN-WITHOUT' TOKEN -> ^( 'IN-WITHOUT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:11: 'IN-WITHOUT' TOKEN
            {
            string_literal715=(Token)match(input,53,FOLLOW_53_in_inwithout3416_static.FOLLOW_53_in_inwithout3416); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_53.add(string_literal715);

            TOKEN716=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inwithout3418_static.FOLLOW_TOKEN_in_inwithout3418); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN716);



            // AST REWRITE
            // elements: 53, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 351:30: -> ^( 'IN-WITHOUT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:351:33: ^( 'IN-WITHOUT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_53.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, inwithout_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inwithout"

    public static class inby_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inby"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:1: inby : 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) ;
    public final ChemicalChunkerParser.inby_return inby() throws RecognitionException {
        ChemicalChunkerParser.inby_return retval = new ChemicalChunkerParser.inby_return();
        retval.start = input.LT(1);
        int inby_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal717=null;
        Token TOKEN718=null;

        Object string_literal717_tree=null;
        Object TOKEN718_tree=null;
        RewriteRuleTokenStream stream_54=new RewriteRuleTokenStream(adaptor,"token 54");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:5: ( 'IN-BY' TOKEN -> ^( 'IN-BY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:6: 'IN-BY' TOKEN
            {
            string_literal717=(Token)match(input,54,FOLLOW_54_in_inby3431_static.FOLLOW_54_in_inby3431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_54.add(string_literal717);

            TOKEN718=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inby3433_static.FOLLOW_TOKEN_in_inby3433); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN718);



            // AST REWRITE
            // elements: 54, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 352:20: -> ^( 'IN-BY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:352:23: ^( 'IN-BY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_54.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, inby_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inby"

    public static class invia_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "invia"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:1: invia : 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) ;
    public final ChemicalChunkerParser.invia_return invia() throws RecognitionException {
        ChemicalChunkerParser.invia_return retval = new ChemicalChunkerParser.invia_return();
        retval.start = input.LT(1);
        int invia_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal719=null;
        Token TOKEN720=null;

        Object string_literal719_tree=null;
        Object TOKEN720_tree=null;
        RewriteRuleTokenStream stream_55=new RewriteRuleTokenStream(adaptor,"token 55");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:6: ( 'IN-VIA' TOKEN -> ^( 'IN-VIA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:7: 'IN-VIA' TOKEN
            {
            string_literal719=(Token)match(input,55,FOLLOW_55_in_invia3446_static.FOLLOW_55_in_invia3446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_55.add(string_literal719);

            TOKEN720=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_invia3448_static.FOLLOW_TOKEN_in_invia3448); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN720);



            // AST REWRITE
            // elements: 55, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 353:22: -> ^( 'IN-VIA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:353:25: ^( 'IN-VIA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_55.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, invia_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "invia"

    public static class inof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inof"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:1: inof : 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) ;
    public final ChemicalChunkerParser.inof_return inof() throws RecognitionException {
        ChemicalChunkerParser.inof_return retval = new ChemicalChunkerParser.inof_return();
        retval.start = input.LT(1);
        int inof_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal721=null;
        Token TOKEN722=null;

        Object string_literal721_tree=null;
        Object TOKEN722_tree=null;
        RewriteRuleTokenStream stream_56=new RewriteRuleTokenStream(adaptor,"token 56");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:5: ( 'IN-OF' TOKEN -> ^( 'IN-OF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:6: 'IN-OF' TOKEN
            {
            string_literal721=(Token)match(input,56,FOLLOW_56_in_inof3461_static.FOLLOW_56_in_inof3461); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_56.add(string_literal721);

            TOKEN722=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inof3463_static.FOLLOW_TOKEN_in_inof3463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN722);



            // AST REWRITE
            // elements: 56, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 354:20: -> ^( 'IN-OF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:354:23: ^( 'IN-OF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_56.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, inof_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inof"

    public static class inon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:1: inon : 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) ;
    public final ChemicalChunkerParser.inon_return inon() throws RecognitionException {
        ChemicalChunkerParser.inon_return retval = new ChemicalChunkerParser.inon_return();
        retval.start = input.LT(1);
        int inon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal723=null;
        Token TOKEN724=null;

        Object string_literal723_tree=null;
        Object TOKEN724_tree=null;
        RewriteRuleTokenStream stream_57=new RewriteRuleTokenStream(adaptor,"token 57");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:5: ( 'IN-ON' TOKEN -> ^( 'IN-ON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:6: 'IN-ON' TOKEN
            {
            string_literal723=(Token)match(input,57,FOLLOW_57_in_inon3476_static.FOLLOW_57_in_inon3476); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_57.add(string_literal723);

            TOKEN724=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inon3478_static.FOLLOW_TOKEN_in_inon3478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN724);



            // AST REWRITE
            // elements: TOKEN, 57
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 355:20: -> ^( 'IN-ON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:355:23: ^( 'IN-ON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_57.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, inon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inon"

    public static class infor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infor"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:1: infor : 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) ;
    public final ChemicalChunkerParser.infor_return infor() throws RecognitionException {
        ChemicalChunkerParser.infor_return retval = new ChemicalChunkerParser.infor_return();
        retval.start = input.LT(1);
        int infor_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal725=null;
        Token TOKEN726=null;

        Object string_literal725_tree=null;
        Object TOKEN726_tree=null;
        RewriteRuleTokenStream stream_58=new RewriteRuleTokenStream(adaptor,"token 58");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:6: ( 'IN-FOR' TOKEN -> ^( 'IN-FOR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:7: 'IN-FOR' TOKEN
            {
            string_literal725=(Token)match(input,58,FOLLOW_58_in_infor3491_static.FOLLOW_58_in_infor3491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_58.add(string_literal725);

            TOKEN726=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infor3493_static.FOLLOW_TOKEN_in_infor3493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN726);



            // AST REWRITE
            // elements: TOKEN, 58
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 356:22: -> ^( 'IN-FOR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:356:25: ^( 'IN-FOR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_58.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, infor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infor"

    public static class infrom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "infrom"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:1: infrom : 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) ;
    public final ChemicalChunkerParser.infrom_return infrom() throws RecognitionException {
        ChemicalChunkerParser.infrom_return retval = new ChemicalChunkerParser.infrom_return();
        retval.start = input.LT(1);
        int infrom_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal727=null;
        Token TOKEN728=null;

        Object string_literal727_tree=null;
        Object TOKEN728_tree=null;
        RewriteRuleTokenStream stream_59=new RewriteRuleTokenStream(adaptor,"token 59");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:7: ( 'IN-FROM' TOKEN -> ^( 'IN-FROM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:8: 'IN-FROM' TOKEN
            {
            string_literal727=(Token)match(input,59,FOLLOW_59_in_infrom3506_static.FOLLOW_59_in_infrom3506); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_59.add(string_literal727);

            TOKEN728=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_infrom3508_static.FOLLOW_TOKEN_in_infrom3508); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN728);



            // AST REWRITE
            // elements: 59, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 357:24: -> ^( 'IN-FROM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:357:27: ^( 'IN-FROM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_59.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, infrom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "infrom"

    public static class inunder_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inunder"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:1: inunder : 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) ;
    public final ChemicalChunkerParser.inunder_return inunder() throws RecognitionException {
        ChemicalChunkerParser.inunder_return retval = new ChemicalChunkerParser.inunder_return();
        retval.start = input.LT(1);
        int inunder_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal729=null;
        Token TOKEN730=null;

        Object string_literal729_tree=null;
        Object TOKEN730_tree=null;
        RewriteRuleTokenStream stream_60=new RewriteRuleTokenStream(adaptor,"token 60");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:8: ( 'IN-UNDER' TOKEN -> ^( 'IN-UNDER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:9: 'IN-UNDER' TOKEN
            {
            string_literal729=(Token)match(input,60,FOLLOW_60_in_inunder3521_static.FOLLOW_60_in_inunder3521); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_60.add(string_literal729);

            TOKEN730=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inunder3523_static.FOLLOW_TOKEN_in_inunder3523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN730);



            // AST REWRITE
            // elements: 60, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:26: -> ^( 'IN-UNDER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:358:29: ^( 'IN-UNDER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_60.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, inunder_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inunder"

    public static class inover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:1: inover : 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) ;
    public final ChemicalChunkerParser.inover_return inover() throws RecognitionException {
        ChemicalChunkerParser.inover_return retval = new ChemicalChunkerParser.inover_return();
        retval.start = input.LT(1);
        int inover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal731=null;
        Token TOKEN732=null;

        Object string_literal731_tree=null;
        Object TOKEN732_tree=null;
        RewriteRuleTokenStream stream_61=new RewriteRuleTokenStream(adaptor,"token 61");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:7: ( 'IN-OVER' TOKEN -> ^( 'IN-OVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:8: 'IN-OVER' TOKEN
            {
            string_literal731=(Token)match(input,61,FOLLOW_61_in_inover3536_static.FOLLOW_61_in_inover3536); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_61.add(string_literal731);

            TOKEN732=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inover3538_static.FOLLOW_TOKEN_in_inover3538); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN732);



            // AST REWRITE
            // elements: TOKEN, 61
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 359:24: -> ^( 'IN-OVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:359:27: ^( 'IN-OVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_61.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, inover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inover"

    public static class inoff_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inoff"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:1: inoff : 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) ;
    public final ChemicalChunkerParser.inoff_return inoff() throws RecognitionException {
        ChemicalChunkerParser.inoff_return retval = new ChemicalChunkerParser.inoff_return();
        retval.start = input.LT(1);
        int inoff_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal733=null;
        Token TOKEN734=null;

        Object string_literal733_tree=null;
        Object TOKEN734_tree=null;
        RewriteRuleTokenStream stream_62=new RewriteRuleTokenStream(adaptor,"token 62");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:6: ( 'IN-OFF' TOKEN -> ^( 'IN-OFF' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:7: 'IN-OFF' TOKEN
            {
            string_literal733=(Token)match(input,62,FOLLOW_62_in_inoff3551_static.FOLLOW_62_in_inoff3551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_62.add(string_literal733);

            TOKEN734=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_inoff3553_static.FOLLOW_TOKEN_in_inoff3553); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN734);



            // AST REWRITE
            // elements: 62, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:22: -> ^( 'IN-OFF' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:360:25: ^( 'IN-OFF' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_62.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, inoff_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inoff"

    public static class nnstate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnstate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:1: nnstate : 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnstate_return nnstate() throws RecognitionException {
        ChemicalChunkerParser.nnstate_return retval = new ChemicalChunkerParser.nnstate_return();
        retval.start = input.LT(1);
        int nnstate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal735=null;
        Token TOKEN736=null;

        Object string_literal735_tree=null;
        Object TOKEN736_tree=null;
        RewriteRuleTokenStream stream_63=new RewriteRuleTokenStream(adaptor,"token 63");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:8: ( 'NN-STATE' TOKEN -> ^( 'NN-STATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:9: 'NN-STATE' TOKEN
            {
            string_literal735=(Token)match(input,63,FOLLOW_63_in_nnstate3568_static.FOLLOW_63_in_nnstate3568); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_63.add(string_literal735);

            TOKEN736=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnstate3570_static.FOLLOW_TOKEN_in_nnstate3570); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN736);



            // AST REWRITE
            // elements: TOKEN, 63
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:26: -> ^( 'NN-STATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:363:29: ^( 'NN-STATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_63.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, nnstate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnstate"

    public static class nntime_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntime"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:1: nntime : 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) ;
    public final ChemicalChunkerParser.nntime_return nntime() throws RecognitionException {
        ChemicalChunkerParser.nntime_return retval = new ChemicalChunkerParser.nntime_return();
        retval.start = input.LT(1);
        int nntime_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal737=null;
        Token TOKEN738=null;

        Object string_literal737_tree=null;
        Object TOKEN738_tree=null;
        RewriteRuleTokenStream stream_64=new RewriteRuleTokenStream(adaptor,"token 64");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:7: ( 'NN-TIME' TOKEN -> ^( 'NN-TIME' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:8: 'NN-TIME' TOKEN
            {
            string_literal737=(Token)match(input,64,FOLLOW_64_in_nntime3583_static.FOLLOW_64_in_nntime3583); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_64.add(string_literal737);

            TOKEN738=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntime3585_static.FOLLOW_TOKEN_in_nntime3585); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN738);



            // AST REWRITE
            // elements: TOKEN, 64
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 364:24: -> ^( 'NN-TIME' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:364:27: ^( 'NN-TIME' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_64.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, nntime_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntime"

    public static class nnmass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:1: nnmass : 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) ;
    public final ChemicalChunkerParser.nnmass_return nnmass() throws RecognitionException {
        ChemicalChunkerParser.nnmass_return retval = new ChemicalChunkerParser.nnmass_return();
        retval.start = input.LT(1);
        int nnmass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal739=null;
        Token TOKEN740=null;

        Object string_literal739_tree=null;
        Object TOKEN740_tree=null;
        RewriteRuleTokenStream stream_65=new RewriteRuleTokenStream(adaptor,"token 65");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:7: ( 'NN-MASS' TOKEN -> ^( 'NN-MASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:8: 'NN-MASS' TOKEN
            {
            string_literal739=(Token)match(input,65,FOLLOW_65_in_nnmass3598_static.FOLLOW_65_in_nnmass3598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_65.add(string_literal739);

            TOKEN740=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmass3600_static.FOLLOW_TOKEN_in_nnmass3600); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN740);



            // AST REWRITE
            // elements: TOKEN, 65
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:24: -> ^( 'NN-MASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:365:27: ^( 'NN-MASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_65.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, nnmass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmass"

    public static class nnamount_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnamount"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:1: nnamount : 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) ;
    public final ChemicalChunkerParser.nnamount_return nnamount() throws RecognitionException {
        ChemicalChunkerParser.nnamount_return retval = new ChemicalChunkerParser.nnamount_return();
        retval.start = input.LT(1);
        int nnamount_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal741=null;
        Token TOKEN742=null;

        Object string_literal741_tree=null;
        Object TOKEN742_tree=null;
        RewriteRuleTokenStream stream_66=new RewriteRuleTokenStream(adaptor,"token 66");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:9: ( 'NN-AMOUNT' TOKEN -> ^( 'NN-AMOUNT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:10: 'NN-AMOUNT' TOKEN
            {
            string_literal741=(Token)match(input,66,FOLLOW_66_in_nnamount3613_static.FOLLOW_66_in_nnamount3613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_66.add(string_literal741);

            TOKEN742=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnamount3615_static.FOLLOW_TOKEN_in_nnamount3615); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN742);



            // AST REWRITE
            // elements: TOKEN, 66
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:28: -> ^( 'NN-AMOUNT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:366:31: ^( 'NN-AMOUNT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_66.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, nnamount_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnamount"

    public static class nnmolar_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmolar"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:1: nnmolar : 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) ;
    public final ChemicalChunkerParser.nnmolar_return nnmolar() throws RecognitionException {
        ChemicalChunkerParser.nnmolar_return retval = new ChemicalChunkerParser.nnmolar_return();
        retval.start = input.LT(1);
        int nnmolar_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal743=null;
        Token TOKEN744=null;

        Object string_literal743_tree=null;
        Object TOKEN744_tree=null;
        RewriteRuleTokenStream stream_67=new RewriteRuleTokenStream(adaptor,"token 67");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:8: ( 'NN-MOLAR' TOKEN -> ^( 'NN-MOLAR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:9: 'NN-MOLAR' TOKEN
            {
            string_literal743=(Token)match(input,67,FOLLOW_67_in_nnmolar3628_static.FOLLOW_67_in_nnmolar3628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_67.add(string_literal743);

            TOKEN744=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmolar3630_static.FOLLOW_TOKEN_in_nnmolar3630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN744);



            // AST REWRITE
            // elements: TOKEN, 67
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:26: -> ^( 'NN-MOLAR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:367:29: ^( 'NN-MOLAR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_67.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, nnmolar_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmolar"

    public static class nnatmosphere_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnatmosphere"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:1: nnatmosphere : 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) ;
    public final ChemicalChunkerParser.nnatmosphere_return nnatmosphere() throws RecognitionException {
        ChemicalChunkerParser.nnatmosphere_return retval = new ChemicalChunkerParser.nnatmosphere_return();
        retval.start = input.LT(1);
        int nnatmosphere_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal745=null;
        Token TOKEN746=null;

        Object string_literal745_tree=null;
        Object TOKEN746_tree=null;
        RewriteRuleTokenStream stream_68=new RewriteRuleTokenStream(adaptor,"token 68");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:13: ( 'NN-ATMOSPHERE' TOKEN -> ^( 'NN-ATMOSPHERE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:14: 'NN-ATMOSPHERE' TOKEN
            {
            string_literal745=(Token)match(input,68,FOLLOW_68_in_nnatmosphere3643_static.FOLLOW_68_in_nnatmosphere3643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_68.add(string_literal745);

            TOKEN746=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnatmosphere3645_static.FOLLOW_TOKEN_in_nnatmosphere3645); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN746);



            // AST REWRITE
            // elements: 68, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:36: -> ^( 'NN-ATMOSPHERE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:368:39: ^( 'NN-ATMOSPHERE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_68.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, nnatmosphere_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnatmosphere"

    public static class nneq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nneq"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:1: nneq : 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) ;
    public final ChemicalChunkerParser.nneq_return nneq() throws RecognitionException {
        ChemicalChunkerParser.nneq_return retval = new ChemicalChunkerParser.nneq_return();
        retval.start = input.LT(1);
        int nneq_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal747=null;
        Token TOKEN748=null;

        Object string_literal747_tree=null;
        Object TOKEN748_tree=null;
        RewriteRuleTokenStream stream_69=new RewriteRuleTokenStream(adaptor,"token 69");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:5: ( 'NN-EQ' TOKEN -> ^( 'NN-EQ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:6: 'NN-EQ' TOKEN
            {
            string_literal747=(Token)match(input,69,FOLLOW_69_in_nneq3658_static.FOLLOW_69_in_nneq3658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_69.add(string_literal747);

            TOKEN748=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nneq3660_static.FOLLOW_TOKEN_in_nneq3660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN748);



            // AST REWRITE
            // elements: TOKEN, 69
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 369:20: -> ^( 'NN-EQ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:369:23: ^( 'NN-EQ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_69.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, nneq_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nneq"

    public static class nnvol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvol"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:1: nnvol : 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) ;
    public final ChemicalChunkerParser.nnvol_return nnvol() throws RecognitionException {
        ChemicalChunkerParser.nnvol_return retval = new ChemicalChunkerParser.nnvol_return();
        retval.start = input.LT(1);
        int nnvol_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal749=null;
        Token TOKEN750=null;

        Object string_literal749_tree=null;
        Object TOKEN750_tree=null;
        RewriteRuleTokenStream stream_70=new RewriteRuleTokenStream(adaptor,"token 70");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:6: ( 'NN-VOL' TOKEN -> ^( 'NN-VOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:7: 'NN-VOL' TOKEN
            {
            string_literal749=(Token)match(input,70,FOLLOW_70_in_nnvol3673_static.FOLLOW_70_in_nnvol3673); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_70.add(string_literal749);

            TOKEN750=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvol3675_static.FOLLOW_TOKEN_in_nnvol3675); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN750);



            // AST REWRITE
            // elements: TOKEN, 70
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 370:22: -> ^( 'NN-VOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:370:25: ^( 'NN-VOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_70.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, nnvol_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvol"

    public static class nnchementity_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchementity"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:1: nnchementity : 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchementity_return nnchementity() throws RecognitionException {
        ChemicalChunkerParser.nnchementity_return retval = new ChemicalChunkerParser.nnchementity_return();
        retval.start = input.LT(1);
        int nnchementity_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal751=null;
        Token TOKEN752=null;

        Object string_literal751_tree=null;
        Object TOKEN752_tree=null;
        RewriteRuleTokenStream stream_71=new RewriteRuleTokenStream(adaptor,"token 71");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:13: ( 'NN-CHEMENTITY' TOKEN -> ^( 'NN-CHEMENTITY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:14: 'NN-CHEMENTITY' TOKEN
            {
            string_literal751=(Token)match(input,71,FOLLOW_71_in_nnchementity3688_static.FOLLOW_71_in_nnchementity3688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_71.add(string_literal751);

            TOKEN752=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchementity3690_static.FOLLOW_TOKEN_in_nnchementity3690); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN752);



            // AST REWRITE
            // elements: TOKEN, 71
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:36: -> ^( 'NN-CHEMENTITY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:371:39: ^( 'NN-CHEMENTITY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_71.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, nnchementity_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchementity"

    public static class nntemp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntemp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:1: nntemp : 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) ;
    public final ChemicalChunkerParser.nntemp_return nntemp() throws RecognitionException {
        ChemicalChunkerParser.nntemp_return retval = new ChemicalChunkerParser.nntemp_return();
        retval.start = input.LT(1);
        int nntemp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal753=null;
        Token TOKEN754=null;

        Object string_literal753_tree=null;
        Object TOKEN754_tree=null;
        RewriteRuleTokenStream stream_72=new RewriteRuleTokenStream(adaptor,"token 72");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:7: ( 'NN-TEMP' TOKEN -> ^( 'NN-TEMP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:8: 'NN-TEMP' TOKEN
            {
            string_literal753=(Token)match(input,72,FOLLOW_72_in_nntemp3703_static.FOLLOW_72_in_nntemp3703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_72.add(string_literal753);

            TOKEN754=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntemp3705_static.FOLLOW_TOKEN_in_nntemp3705); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN754);



            // AST REWRITE
            // elements: 72, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 372:24: -> ^( 'NN-TEMP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:372:27: ^( 'NN-TEMP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_72.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, nntemp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntemp"

    public static class nnph_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnph"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:1: nnph : 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) ;
    public final ChemicalChunkerParser.nnph_return nnph() throws RecognitionException {
        ChemicalChunkerParser.nnph_return retval = new ChemicalChunkerParser.nnph_return();
        retval.start = input.LT(1);
        int nnph_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal755=null;
        Token TOKEN756=null;

        Object string_literal755_tree=null;
        Object TOKEN756_tree=null;
        RewriteRuleTokenStream stream_73=new RewriteRuleTokenStream(adaptor,"token 73");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:5: ( 'NN-PH' TOKEN -> ^( 'NN-PH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:6: 'NN-PH' TOKEN
            {
            string_literal755=(Token)match(input,73,FOLLOW_73_in_nnph3718_static.FOLLOW_73_in_nnph3718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_73.add(string_literal755);

            TOKEN756=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnph3720_static.FOLLOW_TOKEN_in_nnph3720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN756);



            // AST REWRITE
            // elements: TOKEN, 73
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:20: -> ^( 'NN-PH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:373:23: ^( 'NN-PH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_73.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, nnph_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnph"

    public static class nnflash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnflash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:1: nnflash : 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) ;
    public final ChemicalChunkerParser.nnflash_return nnflash() throws RecognitionException {
        ChemicalChunkerParser.nnflash_return retval = new ChemicalChunkerParser.nnflash_return();
        retval.start = input.LT(1);
        int nnflash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal757=null;
        Token TOKEN758=null;

        Object string_literal757_tree=null;
        Object TOKEN758_tree=null;
        RewriteRuleTokenStream stream_74=new RewriteRuleTokenStream(adaptor,"token 74");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:8: ( 'NN-FLASH' TOKEN -> ^( 'NN-FLASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:9: 'NN-FLASH' TOKEN
            {
            string_literal757=(Token)match(input,74,FOLLOW_74_in_nnflash3733_static.FOLLOW_74_in_nnflash3733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_74.add(string_literal757);

            TOKEN758=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnflash3735_static.FOLLOW_TOKEN_in_nnflash3735); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN758);



            // AST REWRITE
            // elements: 74, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 374:26: -> ^( 'NN-FLASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:374:29: ^( 'NN-FLASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_74.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, nnflash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnflash"

    public static class nngeneral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nngeneral"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:1: nngeneral : 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) ;
    public final ChemicalChunkerParser.nngeneral_return nngeneral() throws RecognitionException {
        ChemicalChunkerParser.nngeneral_return retval = new ChemicalChunkerParser.nngeneral_return();
        retval.start = input.LT(1);
        int nngeneral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal759=null;
        Token TOKEN760=null;

        Object string_literal759_tree=null;
        Object TOKEN760_tree=null;
        RewriteRuleTokenStream stream_75=new RewriteRuleTokenStream(adaptor,"token 75");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:10: ( 'NN-GENERAL' TOKEN -> ^( 'NN-GENERAL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:11: 'NN-GENERAL' TOKEN
            {
            string_literal759=(Token)match(input,75,FOLLOW_75_in_nngeneral3748_static.FOLLOW_75_in_nngeneral3748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_75.add(string_literal759);

            TOKEN760=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nngeneral3750_static.FOLLOW_TOKEN_in_nngeneral3750); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN760);



            // AST REWRITE
            // elements: TOKEN, 75
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:30: -> ^( 'NN-GENERAL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:375:33: ^( 'NN-GENERAL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_75.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, nngeneral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nngeneral"

    public static class nnmethod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmethod"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:1: nnmethod : 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) ;
    public final ChemicalChunkerParser.nnmethod_return nnmethod() throws RecognitionException {
        ChemicalChunkerParser.nnmethod_return retval = new ChemicalChunkerParser.nnmethod_return();
        retval.start = input.LT(1);
        int nnmethod_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal761=null;
        Token TOKEN762=null;

        Object string_literal761_tree=null;
        Object TOKEN762_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_76=new RewriteRuleTokenStream(adaptor,"token 76");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:9: ( 'NN-METHOD' TOKEN -> ^( 'NN-METHOD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:10: 'NN-METHOD' TOKEN
            {
            string_literal761=(Token)match(input,76,FOLLOW_76_in_nnmethod3763_static.FOLLOW_76_in_nnmethod3763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_76.add(string_literal761);

            TOKEN762=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmethod3765_static.FOLLOW_TOKEN_in_nnmethod3765); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN762);



            // AST REWRITE
            // elements: 76, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 376:28: -> ^( 'NN-METHOD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:376:31: ^( 'NN-METHOD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_76.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, nnmethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmethod"

    public static class nnpressure_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpressure"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:1: nnpressure : 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnpressure_return nnpressure() throws RecognitionException {
        ChemicalChunkerParser.nnpressure_return retval = new ChemicalChunkerParser.nnpressure_return();
        retval.start = input.LT(1);
        int nnpressure_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal763=null;
        Token TOKEN764=null;

        Object string_literal763_tree=null;
        Object TOKEN764_tree=null;
        RewriteRuleTokenStream stream_77=new RewriteRuleTokenStream(adaptor,"token 77");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:11: ( 'NN-PRESSURE' TOKEN -> ^( 'NN-PRESSURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:12: 'NN-PRESSURE' TOKEN
            {
            string_literal763=(Token)match(input,77,FOLLOW_77_in_nnpressure3778_static.FOLLOW_77_in_nnpressure3778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_77.add(string_literal763);

            TOKEN764=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpressure3780_static.FOLLOW_TOKEN_in_nnpressure3780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN764);



            // AST REWRITE
            // elements: TOKEN, 77
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 377:32: -> ^( 'NN-PRESSURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:377:35: ^( 'NN-PRESSURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_77.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, nnpressure_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpressure"

    public static class nncolumn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncolumn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:1: nncolumn : 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) ;
    public final ChemicalChunkerParser.nncolumn_return nncolumn() throws RecognitionException {
        ChemicalChunkerParser.nncolumn_return retval = new ChemicalChunkerParser.nncolumn_return();
        retval.start = input.LT(1);
        int nncolumn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal765=null;
        Token TOKEN766=null;

        Object string_literal765_tree=null;
        Object TOKEN766_tree=null;
        RewriteRuleTokenStream stream_78=new RewriteRuleTokenStream(adaptor,"token 78");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:9: ( 'NN-COLUMN' TOKEN -> ^( 'NN-COLUMN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:10: 'NN-COLUMN' TOKEN
            {
            string_literal765=(Token)match(input,78,FOLLOW_78_in_nncolumn3793_static.FOLLOW_78_in_nncolumn3793); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_78.add(string_literal765);

            TOKEN766=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncolumn3795_static.FOLLOW_TOKEN_in_nncolumn3795); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN766);



            // AST REWRITE
            // elements: 78, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 378:28: -> ^( 'NN-COLUMN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:378:31: ^( 'NN-COLUMN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_78.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, nncolumn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncolumn"

    public static class nnchromatography_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnchromatography"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:1: nnchromatography : 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) ;
    public final ChemicalChunkerParser.nnchromatography_return nnchromatography() throws RecognitionException {
        ChemicalChunkerParser.nnchromatography_return retval = new ChemicalChunkerParser.nnchromatography_return();
        retval.start = input.LT(1);
        int nnchromatography_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal767=null;
        Token TOKEN768=null;

        Object string_literal767_tree=null;
        Object TOKEN768_tree=null;
        RewriteRuleTokenStream stream_79=new RewriteRuleTokenStream(adaptor,"token 79");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:17: ( 'NN-CHROMATOGRAPHY' TOKEN -> ^( 'NN-CHROMATOGRAPHY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:18: 'NN-CHROMATOGRAPHY' TOKEN
            {
            string_literal767=(Token)match(input,79,FOLLOW_79_in_nnchromatography3808_static.FOLLOW_79_in_nnchromatography3808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_79.add(string_literal767);

            TOKEN768=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnchromatography3810_static.FOLLOW_TOKEN_in_nnchromatography3810); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN768);



            // AST REWRITE
            // elements: TOKEN, 79
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:44: -> ^( 'NN-CHROMATOGRAPHY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:379:47: ^( 'NN-CHROMATOGRAPHY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_79.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, nnchromatography_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnchromatography"

    public static class nnvacuum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnvacuum"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:1: nnvacuum : 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) ;
    public final ChemicalChunkerParser.nnvacuum_return nnvacuum() throws RecognitionException {
        ChemicalChunkerParser.nnvacuum_return retval = new ChemicalChunkerParser.nnvacuum_return();
        retval.start = input.LT(1);
        int nnvacuum_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal769=null;
        Token TOKEN770=null;

        Object string_literal769_tree=null;
        Object TOKEN770_tree=null;
        RewriteRuleTokenStream stream_80=new RewriteRuleTokenStream(adaptor,"token 80");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:9: ( 'NN-VACUUM' TOKEN -> ^( 'NN-VACUUM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:10: 'NN-VACUUM' TOKEN
            {
            string_literal769=(Token)match(input,80,FOLLOW_80_in_nnvacuum3823_static.FOLLOW_80_in_nnvacuum3823); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_80.add(string_literal769);

            TOKEN770=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnvacuum3825_static.FOLLOW_TOKEN_in_nnvacuum3825); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN770);



            // AST REWRITE
            // elements: 80, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 380:28: -> ^( 'NN-VACUUM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:380:31: ^( 'NN-VACUUM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_80.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, nnvacuum_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnvacuum"

    public static class nncycle_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nncycle"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:1: nncycle : 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) ;
    public final ChemicalChunkerParser.nncycle_return nncycle() throws RecognitionException {
        ChemicalChunkerParser.nncycle_return retval = new ChemicalChunkerParser.nncycle_return();
        retval.start = input.LT(1);
        int nncycle_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal771=null;
        Token TOKEN772=null;

        Object string_literal771_tree=null;
        Object TOKEN772_tree=null;
        RewriteRuleTokenStream stream_81=new RewriteRuleTokenStream(adaptor,"token 81");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:8: ( 'NN-CYCLE' TOKEN -> ^( 'NN-CYCLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:9: 'NN-CYCLE' TOKEN
            {
            string_literal771=(Token)match(input,81,FOLLOW_81_in_nncycle3838_static.FOLLOW_81_in_nncycle3838); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_81.add(string_literal771);

            TOKEN772=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nncycle3840_static.FOLLOW_TOKEN_in_nncycle3840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN772);



            // AST REWRITE
            // elements: 81, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:26: -> ^( 'NN-CYCLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:381:29: ^( 'NN-CYCLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_81.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, nncycle_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nncycle"

    public static class nntimes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nntimes"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:1: nntimes : 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) ;
    public final ChemicalChunkerParser.nntimes_return nntimes() throws RecognitionException {
        ChemicalChunkerParser.nntimes_return retval = new ChemicalChunkerParser.nntimes_return();
        retval.start = input.LT(1);
        int nntimes_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal773=null;
        Token TOKEN774=null;

        Object string_literal773_tree=null;
        Object TOKEN774_tree=null;
        RewriteRuleTokenStream stream_82=new RewriteRuleTokenStream(adaptor,"token 82");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:8: ( 'NN-TIMES' TOKEN -> ^( 'NN-TIMES' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:9: 'NN-TIMES' TOKEN
            {
            string_literal773=(Token)match(input,82,FOLLOW_82_in_nntimes3853_static.FOLLOW_82_in_nntimes3853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_82.add(string_literal773);

            TOKEN774=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nntimes3855_static.FOLLOW_TOKEN_in_nntimes3855); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN774);



            // AST REWRITE
            // elements: TOKEN, 82
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 382:26: -> ^( 'NN-TIMES' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:382:29: ^( 'NN-TIMES' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_82.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, nntimes_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nntimes"

    public static class nnexample_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnexample"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:1: nnexample : 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) ;
    public final ChemicalChunkerParser.nnexample_return nnexample() throws RecognitionException {
        ChemicalChunkerParser.nnexample_return retval = new ChemicalChunkerParser.nnexample_return();
        retval.start = input.LT(1);
        int nnexample_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal775=null;
        Token TOKEN776=null;

        Object string_literal775_tree=null;
        Object TOKEN776_tree=null;
        RewriteRuleTokenStream stream_83=new RewriteRuleTokenStream(adaptor,"token 83");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:10: ( 'NN-EXAMPLE' TOKEN -> ^( 'NN-EXAMPLE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:11: 'NN-EXAMPLE' TOKEN
            {
            string_literal775=(Token)match(input,83,FOLLOW_83_in_nnexample3868_static.FOLLOW_83_in_nnexample3868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_83.add(string_literal775);

            TOKEN776=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnexample3870_static.FOLLOW_TOKEN_in_nnexample3870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN776);



            // AST REWRITE
            // elements: TOKEN, 83
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 383:30: -> ^( 'NN-EXAMPLE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:383:33: ^( 'NN-EXAMPLE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_83.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, nnexample_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnexample"

    public static class oscarcm_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "oscarcm"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:1: oscarcm : 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) ;
    public final ChemicalChunkerParser.oscarcm_return oscarcm() throws RecognitionException {
        ChemicalChunkerParser.oscarcm_return retval = new ChemicalChunkerParser.oscarcm_return();
        retval.start = input.LT(1);
        int oscarcm_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal777=null;
        Token TOKEN778=null;

        Object string_literal777_tree=null;
        Object TOKEN778_tree=null;
        RewriteRuleTokenStream stream_84=new RewriteRuleTokenStream(adaptor,"token 84");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:8: ( 'OSCAR-CM' TOKEN -> ^( 'OSCAR-CM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:9: 'OSCAR-CM' TOKEN
            {
            string_literal777=(Token)match(input,84,FOLLOW_84_in_oscarcm3885_static.FOLLOW_84_in_oscarcm3885); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_84.add(string_literal777);

            TOKEN778=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_oscarcm3887_static.FOLLOW_TOKEN_in_oscarcm3887); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN778);



            // AST REWRITE
            // elements: TOKEN, 84
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 386:26: -> ^( 'OSCAR-CM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:386:29: ^( 'OSCAR-CM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_84.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, oscarcm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "oscarcm"

    public static class vbuse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbuse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:1: vbuse : 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) ;
    public final ChemicalChunkerParser.vbuse_return vbuse() throws RecognitionException {
        ChemicalChunkerParser.vbuse_return retval = new ChemicalChunkerParser.vbuse_return();
        retval.start = input.LT(1);
        int vbuse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal779=null;
        Token TOKEN780=null;

        Object string_literal779_tree=null;
        Object TOKEN780_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_85=new RewriteRuleTokenStream(adaptor,"token 85");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:6: ( 'VB-USE' TOKEN -> ^( 'VB-USE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:7: 'VB-USE' TOKEN
            {
            string_literal779=(Token)match(input,85,FOLLOW_85_in_vbuse3902_static.FOLLOW_85_in_vbuse3902); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_85.add(string_literal779);

            TOKEN780=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbuse3904_static.FOLLOW_TOKEN_in_vbuse3904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN780);



            // AST REWRITE
            // elements: 85, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 389:22: -> ^( 'VB-USE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:389:25: ^( 'VB-USE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_85.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, vbuse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbuse"

    public static class vbchange_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbchange"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:1: vbchange : 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbchange_return vbchange() throws RecognitionException {
        ChemicalChunkerParser.vbchange_return retval = new ChemicalChunkerParser.vbchange_return();
        retval.start = input.LT(1);
        int vbchange_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal781=null;
        Token TOKEN782=null;

        Object string_literal781_tree=null;
        Object TOKEN782_tree=null;
        RewriteRuleTokenStream stream_86=new RewriteRuleTokenStream(adaptor,"token 86");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:9: ( 'VB-CHANGE' TOKEN -> ^( 'VB-CHANGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:10: 'VB-CHANGE' TOKEN
            {
            string_literal781=(Token)match(input,86,FOLLOW_86_in_vbchange3917_static.FOLLOW_86_in_vbchange3917); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_86.add(string_literal781);

            TOKEN782=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbchange3919_static.FOLLOW_TOKEN_in_vbchange3919); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN782);



            // AST REWRITE
            // elements: TOKEN, 86
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 390:28: -> ^( 'VB-CHANGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:390:31: ^( 'VB-CHANGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_86.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, vbchange_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbchange"

    public static class vbsubmerge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubmerge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:1: vbsubmerge : 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubmerge_return vbsubmerge() throws RecognitionException {
        ChemicalChunkerParser.vbsubmerge_return retval = new ChemicalChunkerParser.vbsubmerge_return();
        retval.start = input.LT(1);
        int vbsubmerge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal783=null;
        Token TOKEN784=null;

        Object string_literal783_tree=null;
        Object TOKEN784_tree=null;
        RewriteRuleTokenStream stream_87=new RewriteRuleTokenStream(adaptor,"token 87");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:11: ( 'VB-SUBMERGE' TOKEN -> ^( 'VB-SUBMERGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:12: 'VB-SUBMERGE' TOKEN
            {
            string_literal783=(Token)match(input,87,FOLLOW_87_in_vbsubmerge3932_static.FOLLOW_87_in_vbsubmerge3932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_87.add(string_literal783);

            TOKEN784=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubmerge3934_static.FOLLOW_TOKEN_in_vbsubmerge3934); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN784);



            // AST REWRITE
            // elements: TOKEN, 87
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:32: -> ^( 'VB-SUBMERGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:391:35: ^( 'VB-SUBMERGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_87.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, vbsubmerge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubmerge"

    public static class vbsubject_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsubject"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:1: vbsubject : 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) ;
    public final ChemicalChunkerParser.vbsubject_return vbsubject() throws RecognitionException {
        ChemicalChunkerParser.vbsubject_return retval = new ChemicalChunkerParser.vbsubject_return();
        retval.start = input.LT(1);
        int vbsubject_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal785=null;
        Token TOKEN786=null;

        Object string_literal785_tree=null;
        Object TOKEN786_tree=null;
        RewriteRuleTokenStream stream_88=new RewriteRuleTokenStream(adaptor,"token 88");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:10: ( 'VB-SUBJECT' TOKEN -> ^( 'VB-SUBJECT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:11: 'VB-SUBJECT' TOKEN
            {
            string_literal785=(Token)match(input,88,FOLLOW_88_in_vbsubject3947_static.FOLLOW_88_in_vbsubject3947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_88.add(string_literal785);

            TOKEN786=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsubject3949_static.FOLLOW_TOKEN_in_vbsubject3949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN786);



            // AST REWRITE
            // elements: 88, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 392:30: -> ^( 'VB-SUBJECT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:392:33: ^( 'VB-SUBJECT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_88.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, vbsubject_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsubject"

    public static class nnadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:1: nnadd : 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.nnadd_return nnadd() throws RecognitionException {
        ChemicalChunkerParser.nnadd_return retval = new ChemicalChunkerParser.nnadd_return();
        retval.start = input.LT(1);
        int nnadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal787=null;
        Token TOKEN788=null;

        Object string_literal787_tree=null;
        Object TOKEN788_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:6: ( 'NN-ADD' TOKEN -> ^( 'NN-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:7: 'NN-ADD' TOKEN
            {
            string_literal787=(Token)match(input,89,FOLLOW_89_in_nnadd3964_static.FOLLOW_89_in_nnadd3964); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_89.add(string_literal787);

            TOKEN788=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnadd3966_static.FOLLOW_TOKEN_in_nnadd3966); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN788);



            // AST REWRITE
            // elements: TOKEN, 89
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 395:22: -> ^( 'NN-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:395:25: ^( 'NN-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_89.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, nnadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnadd"

    public static class nnmixture_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnmixture"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:1: nnmixture : 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) ;
    public final ChemicalChunkerParser.nnmixture_return nnmixture() throws RecognitionException {
        ChemicalChunkerParser.nnmixture_return retval = new ChemicalChunkerParser.nnmixture_return();
        retval.start = input.LT(1);
        int nnmixture_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal789=null;
        Token TOKEN790=null;

        Object string_literal789_tree=null;
        Object TOKEN790_tree=null;
        RewriteRuleTokenStream stream_90=new RewriteRuleTokenStream(adaptor,"token 90");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:10: ( 'NN-MIXTURE' TOKEN -> ^( 'NN-MIXTURE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:11: 'NN-MIXTURE' TOKEN
            {
            string_literal789=(Token)match(input,90,FOLLOW_90_in_nnmixture3979_static.FOLLOW_90_in_nnmixture3979); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_90.add(string_literal789);

            TOKEN790=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnmixture3981_static.FOLLOW_TOKEN_in_nnmixture3981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN790);



            // AST REWRITE
            // elements: TOKEN, 90
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 396:30: -> ^( 'NN-MIXTURE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:396:33: ^( 'NN-MIXTURE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_90.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, nnmixture_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnmixture"

    public static class vbdilute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdilute"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:1: vbdilute : 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdilute_return vbdilute() throws RecognitionException {
        ChemicalChunkerParser.vbdilute_return retval = new ChemicalChunkerParser.vbdilute_return();
        retval.start = input.LT(1);
        int vbdilute_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal791=null;
        Token TOKEN792=null;

        Object string_literal791_tree=null;
        Object TOKEN792_tree=null;
        RewriteRuleTokenStream stream_91=new RewriteRuleTokenStream(adaptor,"token 91");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:9: ( 'VB-DILUTE' TOKEN -> ^( 'VB-DILUTE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:10: 'VB-DILUTE' TOKEN
            {
            string_literal791=(Token)match(input,91,FOLLOW_91_in_vbdilute3994_static.FOLLOW_91_in_vbdilute3994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_91.add(string_literal791);

            TOKEN792=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdilute3996_static.FOLLOW_TOKEN_in_vbdilute3996); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN792);



            // AST REWRITE
            // elements: 91, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:28: -> ^( 'VB-DILUTE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:397:31: ^( 'VB-DILUTE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_91.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, vbdilute_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdilute"

    public static class vbadd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbadd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:1: vbadd : 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) ;
    public final ChemicalChunkerParser.vbadd_return vbadd() throws RecognitionException {
        ChemicalChunkerParser.vbadd_return retval = new ChemicalChunkerParser.vbadd_return();
        retval.start = input.LT(1);
        int vbadd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal793=null;
        Token TOKEN794=null;

        Object string_literal793_tree=null;
        Object TOKEN794_tree=null;
        RewriteRuleTokenStream stream_92=new RewriteRuleTokenStream(adaptor,"token 92");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:6: ( 'VB-ADD' TOKEN -> ^( 'VB-ADD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:7: 'VB-ADD' TOKEN
            {
            string_literal793=(Token)match(input,92,FOLLOW_92_in_vbadd4009_static.FOLLOW_92_in_vbadd4009); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_92.add(string_literal793);

            TOKEN794=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbadd4011_static.FOLLOW_TOKEN_in_vbadd4011); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN794);



            // AST REWRITE
            // elements: 92, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 398:22: -> ^( 'VB-ADD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:398:25: ^( 'VB-ADD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_92.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, vbadd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbadd"

    public static class vbcharge_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcharge"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:1: vbcharge : 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) ;
    public final ChemicalChunkerParser.vbcharge_return vbcharge() throws RecognitionException {
        ChemicalChunkerParser.vbcharge_return retval = new ChemicalChunkerParser.vbcharge_return();
        retval.start = input.LT(1);
        int vbcharge_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal795=null;
        Token TOKEN796=null;

        Object string_literal795_tree=null;
        Object TOKEN796_tree=null;
        RewriteRuleTokenStream stream_93=new RewriteRuleTokenStream(adaptor,"token 93");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:9: ( 'VB-CHARGE' TOKEN -> ^( 'VB-CHARGE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:10: 'VB-CHARGE' TOKEN
            {
            string_literal795=(Token)match(input,93,FOLLOW_93_in_vbcharge4024_static.FOLLOW_93_in_vbcharge4024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_93.add(string_literal795);

            TOKEN796=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcharge4026_static.FOLLOW_TOKEN_in_vbcharge4026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN796);



            // AST REWRITE
            // elements: 93, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 399:28: -> ^( 'VB-CHARGE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:399:31: ^( 'VB-CHARGE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_93.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, vbcharge_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcharge"

    public static class vbcontain_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcontain"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:1: vbcontain : 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) ;
    public final ChemicalChunkerParser.vbcontain_return vbcontain() throws RecognitionException {
        ChemicalChunkerParser.vbcontain_return retval = new ChemicalChunkerParser.vbcontain_return();
        retval.start = input.LT(1);
        int vbcontain_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal797=null;
        Token TOKEN798=null;

        Object string_literal797_tree=null;
        Object TOKEN798_tree=null;
        RewriteRuleTokenStream stream_94=new RewriteRuleTokenStream(adaptor,"token 94");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:10: ( 'VB-CONTAIN' TOKEN -> ^( 'VB-CONTAIN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:11: 'VB-CONTAIN' TOKEN
            {
            string_literal797=(Token)match(input,94,FOLLOW_94_in_vbcontain4039_static.FOLLOW_94_in_vbcontain4039); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_94.add(string_literal797);

            TOKEN798=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcontain4041_static.FOLLOW_TOKEN_in_vbcontain4041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN798);



            // AST REWRITE
            // elements: 94, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 400:30: -> ^( 'VB-CONTAIN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:400:33: ^( 'VB-CONTAIN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_94.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, vbcontain_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcontain"

    public static class vbdrop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdrop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:1: vbdrop : 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) ;
    public final ChemicalChunkerParser.vbdrop_return vbdrop() throws RecognitionException {
        ChemicalChunkerParser.vbdrop_return retval = new ChemicalChunkerParser.vbdrop_return();
        retval.start = input.LT(1);
        int vbdrop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal799=null;
        Token TOKEN800=null;

        Object string_literal799_tree=null;
        Object TOKEN800_tree=null;
        RewriteRuleTokenStream stream_95=new RewriteRuleTokenStream(adaptor,"token 95");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:7: ( 'VB-DROP' TOKEN -> ^( 'VB-DROP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:8: 'VB-DROP' TOKEN
            {
            string_literal799=(Token)match(input,95,FOLLOW_95_in_vbdrop4054_static.FOLLOW_95_in_vbdrop4054); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_95.add(string_literal799);

            TOKEN800=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdrop4056_static.FOLLOW_TOKEN_in_vbdrop4056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN800);



            // AST REWRITE
            // elements: TOKEN, 95
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 401:24: -> ^( 'VB-DROP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:401:27: ^( 'VB-DROP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_95.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, vbdrop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdrop"

    public static class vbfill_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfill"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:1: vbfill : 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) ;
    public final ChemicalChunkerParser.vbfill_return vbfill() throws RecognitionException {
        ChemicalChunkerParser.vbfill_return retval = new ChemicalChunkerParser.vbfill_return();
        retval.start = input.LT(1);
        int vbfill_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal801=null;
        Token TOKEN802=null;

        Object string_literal801_tree=null;
        Object TOKEN802_tree=null;
        RewriteRuleTokenStream stream_96=new RewriteRuleTokenStream(adaptor,"token 96");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:7: ( 'VB-FILL' TOKEN -> ^( 'VB-FILL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:8: 'VB-FILL' TOKEN
            {
            string_literal801=(Token)match(input,96,FOLLOW_96_in_vbfill4069_static.FOLLOW_96_in_vbfill4069); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_96.add(string_literal801);

            TOKEN802=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfill4071_static.FOLLOW_TOKEN_in_vbfill4071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN802);



            // AST REWRITE
            // elements: TOKEN, 96
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 402:24: -> ^( 'VB-FILL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:402:27: ^( 'VB-FILL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_96.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, vbfill_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfill"

    public static class vbsuspend_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsuspend"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:1: vbsuspend : 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) ;
    public final ChemicalChunkerParser.vbsuspend_return vbsuspend() throws RecognitionException {
        ChemicalChunkerParser.vbsuspend_return retval = new ChemicalChunkerParser.vbsuspend_return();
        retval.start = input.LT(1);
        int vbsuspend_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal803=null;
        Token TOKEN804=null;

        Object string_literal803_tree=null;
        Object TOKEN804_tree=null;
        RewriteRuleTokenStream stream_97=new RewriteRuleTokenStream(adaptor,"token 97");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:10: ( 'VB-SUSPEND' TOKEN -> ^( 'VB-SUSPEND' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:11: 'VB-SUSPEND' TOKEN
            {
            string_literal803=(Token)match(input,97,FOLLOW_97_in_vbsuspend4084_static.FOLLOW_97_in_vbsuspend4084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_97.add(string_literal803);

            TOKEN804=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsuspend4086_static.FOLLOW_TOKEN_in_vbsuspend4086); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN804);



            // AST REWRITE
            // elements: TOKEN, 97
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 403:30: -> ^( 'VB-SUSPEND' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:403:33: ^( 'VB-SUSPEND' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_97.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, vbsuspend_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsuspend"

    public static class vbtreat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbtreat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:1: vbtreat : 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbtreat_return vbtreat() throws RecognitionException {
        ChemicalChunkerParser.vbtreat_return retval = new ChemicalChunkerParser.vbtreat_return();
        retval.start = input.LT(1);
        int vbtreat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal805=null;
        Token TOKEN806=null;

        Object string_literal805_tree=null;
        Object TOKEN806_tree=null;
        RewriteRuleTokenStream stream_98=new RewriteRuleTokenStream(adaptor,"token 98");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:8: ( 'VB-TREAT' TOKEN -> ^( 'VB-TREAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:9: 'VB-TREAT' TOKEN
            {
            string_literal805=(Token)match(input,98,FOLLOW_98_in_vbtreat4099_static.FOLLOW_98_in_vbtreat4099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_98.add(string_literal805);

            TOKEN806=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbtreat4101_static.FOLLOW_TOKEN_in_vbtreat4101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN806);



            // AST REWRITE
            // elements: 98, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 404:26: -> ^( 'VB-TREAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:404:29: ^( 'VB-TREAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_98.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, vbtreat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbtreat"

    public static class vbapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:1: vbapparatus : 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.vbapparatus_return vbapparatus() throws RecognitionException {
        ChemicalChunkerParser.vbapparatus_return retval = new ChemicalChunkerParser.vbapparatus_return();
        retval.start = input.LT(1);
        int vbapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal807=null;
        Token TOKEN808=null;

        Object string_literal807_tree=null;
        Object TOKEN808_tree=null;
        RewriteRuleTokenStream stream_99=new RewriteRuleTokenStream(adaptor,"token 99");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:12: ( 'VB-APPARATUS' TOKEN -> ^( 'VB-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:13: 'VB-APPARATUS' TOKEN
            {
            string_literal807=(Token)match(input,99,FOLLOW_99_in_vbapparatus4116_static.FOLLOW_99_in_vbapparatus4116); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_99.add(string_literal807);

            TOKEN808=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbapparatus4118_static.FOLLOW_TOKEN_in_vbapparatus4118); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN808);



            // AST REWRITE
            // elements: TOKEN, 99
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 407:34: -> ^( 'VB-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:407:37: ^( 'VB-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_99.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, vbapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbapparatus"

    public static class nnapparatus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnapparatus"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:1: nnapparatus : 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) ;
    public final ChemicalChunkerParser.nnapparatus_return nnapparatus() throws RecognitionException {
        ChemicalChunkerParser.nnapparatus_return retval = new ChemicalChunkerParser.nnapparatus_return();
        retval.start = input.LT(1);
        int nnapparatus_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal809=null;
        Token TOKEN810=null;

        Object string_literal809_tree=null;
        Object TOKEN810_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:12: ( 'NN-APPARATUS' TOKEN -> ^( 'NN-APPARATUS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:13: 'NN-APPARATUS' TOKEN
            {
            string_literal809=(Token)match(input,100,FOLLOW_100_in_nnapparatus4131_static.FOLLOW_100_in_nnapparatus4131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(string_literal809);

            TOKEN810=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnapparatus4133_static.FOLLOW_TOKEN_in_nnapparatus4133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN810);



            // AST REWRITE
            // elements: TOKEN, 100
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:34: -> ^( 'NN-APPARATUS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:408:37: ^( 'NN-APPARATUS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_100.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, nnapparatus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnapparatus"

    public static class vbconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:1: vbconcentrate : 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbconcentrate_return vbconcentrate() throws RecognitionException {
        ChemicalChunkerParser.vbconcentrate_return retval = new ChemicalChunkerParser.vbconcentrate_return();
        retval.start = input.LT(1);
        int vbconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal811=null;
        Token TOKEN812=null;

        Object string_literal811_tree=null;
        Object TOKEN812_tree=null;
        RewriteRuleTokenStream stream_101=new RewriteRuleTokenStream(adaptor,"token 101");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:14: ( 'VB-CONCENTRATE' TOKEN -> ^( 'VB-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:15: 'VB-CONCENTRATE' TOKEN
            {
            string_literal811=(Token)match(input,101,FOLLOW_101_in_vbconcentrate4148_static.FOLLOW_101_in_vbconcentrate4148); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_101.add(string_literal811);

            TOKEN812=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbconcentrate4150_static.FOLLOW_TOKEN_in_vbconcentrate4150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN812);



            // AST REWRITE
            // elements: 101, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 411:38: -> ^( 'VB-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:411:41: ^( 'VB-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_101.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, vbconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbconcentrate"

    public static class nnconcentrate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnconcentrate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:1: nnconcentrate : 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnconcentrate_return nnconcentrate() throws RecognitionException {
        ChemicalChunkerParser.nnconcentrate_return retval = new ChemicalChunkerParser.nnconcentrate_return();
        retval.start = input.LT(1);
        int nnconcentrate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal813=null;
        Token TOKEN814=null;

        Object string_literal813_tree=null;
        Object TOKEN814_tree=null;
        RewriteRuleTokenStream stream_102=new RewriteRuleTokenStream(adaptor,"token 102");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:14: ( 'NN-CONCENTRATE' TOKEN -> ^( 'NN-CONCENTRATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:15: 'NN-CONCENTRATE' TOKEN
            {
            string_literal813=(Token)match(input,102,FOLLOW_102_in_nnconcentrate4163_static.FOLLOW_102_in_nnconcentrate4163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_102.add(string_literal813);

            TOKEN814=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnconcentrate4165_static.FOLLOW_TOKEN_in_nnconcentrate4165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN814);



            // AST REWRITE
            // elements: 102, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 412:38: -> ^( 'NN-CONCENTRATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:412:41: ^( 'NN-CONCENTRATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_102.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, nnconcentrate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnconcentrate"

    public static class vbcool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbcool"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:1: vbcool : 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) ;
    public final ChemicalChunkerParser.vbcool_return vbcool() throws RecognitionException {
        ChemicalChunkerParser.vbcool_return retval = new ChemicalChunkerParser.vbcool_return();
        retval.start = input.LT(1);
        int vbcool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal815=null;
        Token TOKEN816=null;

        Object string_literal815_tree=null;
        Object TOKEN816_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:7: ( 'VB-COOL' TOKEN -> ^( 'VB-COOL' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:8: 'VB-COOL' TOKEN
            {
            string_literal815=(Token)match(input,103,FOLLOW_103_in_vbcool4180_static.FOLLOW_103_in_vbcool4180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal815);

            TOKEN816=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbcool4182_static.FOLLOW_TOKEN_in_vbcool4182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN816);



            // AST REWRITE
            // elements: TOKEN, 103
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 415:24: -> ^( 'VB-COOL' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:415:27: ^( 'VB-COOL' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_103.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, vbcool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbcool"

    public static class vbdegass_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdegass"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:1: vbdegass : 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) ;
    public final ChemicalChunkerParser.vbdegass_return vbdegass() throws RecognitionException {
        ChemicalChunkerParser.vbdegass_return retval = new ChemicalChunkerParser.vbdegass_return();
        retval.start = input.LT(1);
        int vbdegass_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal817=null;
        Token TOKEN818=null;

        Object string_literal817_tree=null;
        Object TOKEN818_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:9: ( 'VB-DEGASS' TOKEN -> ^( 'VB-DEGASS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:10: 'VB-DEGASS' TOKEN
            {
            string_literal817=(Token)match(input,104,FOLLOW_104_in_vbdegass4197_static.FOLLOW_104_in_vbdegass4197); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(string_literal817);

            TOKEN818=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdegass4199_static.FOLLOW_TOKEN_in_vbdegass4199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN818);



            // AST REWRITE
            // elements: TOKEN, 104
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 418:28: -> ^( 'VB-DEGASS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:418:31: ^( 'VB-DEGASS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_104.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, vbdegass_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdegass"

    public static class vbdissolve_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdissolve"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:1: vbdissolve : 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbdissolve_return vbdissolve() throws RecognitionException {
        ChemicalChunkerParser.vbdissolve_return retval = new ChemicalChunkerParser.vbdissolve_return();
        retval.start = input.LT(1);
        int vbdissolve_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal819=null;
        Token TOKEN820=null;

        Object string_literal819_tree=null;
        Object TOKEN820_tree=null;
        RewriteRuleTokenStream stream_105=new RewriteRuleTokenStream(adaptor,"token 105");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:11: ( 'VB-DISSOLVE' TOKEN -> ^( 'VB-DISSOLVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:12: 'VB-DISSOLVE' TOKEN
            {
            string_literal819=(Token)match(input,105,FOLLOW_105_in_vbdissolve4214_static.FOLLOW_105_in_vbdissolve4214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_105.add(string_literal819);

            TOKEN820=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdissolve4216_static.FOLLOW_TOKEN_in_vbdissolve4216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN820);



            // AST REWRITE
            // elements: 105, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 421:32: -> ^( 'VB-DISSOLVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:421:35: ^( 'VB-DISSOLVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_105.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, vbdissolve_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdissolve"

    public static class vbdry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbdry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:1: vbdry : 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.vbdry_return vbdry() throws RecognitionException {
        ChemicalChunkerParser.vbdry_return retval = new ChemicalChunkerParser.vbdry_return();
        retval.start = input.LT(1);
        int vbdry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal821=null;
        Token TOKEN822=null;

        Object string_literal821_tree=null;
        Object TOKEN822_tree=null;
        RewriteRuleTokenStream stream_106=new RewriteRuleTokenStream(adaptor,"token 106");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:6: ( 'VB-DRY' TOKEN -> ^( 'VB-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:7: 'VB-DRY' TOKEN
            {
            string_literal821=(Token)match(input,106,FOLLOW_106_in_vbdry4231_static.FOLLOW_106_in_vbdry4231); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_106.add(string_literal821);

            TOKEN822=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbdry4233_static.FOLLOW_TOKEN_in_vbdry4233); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN822);



            // AST REWRITE
            // elements: 106, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 424:22: -> ^( 'VB-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:424:25: ^( 'VB-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_106.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, vbdry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbdry"

    public static class nndry_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nndry"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:1: nndry : 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) ;
    public final ChemicalChunkerParser.nndry_return nndry() throws RecognitionException {
        ChemicalChunkerParser.nndry_return retval = new ChemicalChunkerParser.nndry_return();
        retval.start = input.LT(1);
        int nndry_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal823=null;
        Token TOKEN824=null;

        Object string_literal823_tree=null;
        Object TOKEN824_tree=null;
        RewriteRuleTokenStream stream_107=new RewriteRuleTokenStream(adaptor,"token 107");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:6: ( 'NN-DRY' TOKEN -> ^( 'NN-DRY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:7: 'NN-DRY' TOKEN
            {
            string_literal823=(Token)match(input,107,FOLLOW_107_in_nndry4246_static.FOLLOW_107_in_nndry4246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_107.add(string_literal823);

            TOKEN824=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nndry4248_static.FOLLOW_TOKEN_in_nndry4248); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN824);



            // AST REWRITE
            // elements: TOKEN, 107
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:22: -> ^( 'NN-DRY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:425:25: ^( 'NN-DRY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_107.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, nndry_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nndry"

    public static class vbextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:1: vbextract : 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.vbextract_return vbextract() throws RecognitionException {
        ChemicalChunkerParser.vbextract_return retval = new ChemicalChunkerParser.vbextract_return();
        retval.start = input.LT(1);
        int vbextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal825=null;
        Token TOKEN826=null;

        Object string_literal825_tree=null;
        Object TOKEN826_tree=null;
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:10: ( 'VB-EXTRACT' TOKEN -> ^( 'VB-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:11: 'VB-EXTRACT' TOKEN
            {
            string_literal825=(Token)match(input,108,FOLLOW_108_in_vbextract4263_static.FOLLOW_108_in_vbextract4263); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(string_literal825);

            TOKEN826=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbextract4265_static.FOLLOW_TOKEN_in_vbextract4265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN826);



            // AST REWRITE
            // elements: 108, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 428:30: -> ^( 'VB-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:428:33: ^( 'VB-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_108.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, vbextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbextract"

    public static class nnextract_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnextract"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:1: nnextract : 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) ;
    public final ChemicalChunkerParser.nnextract_return nnextract() throws RecognitionException {
        ChemicalChunkerParser.nnextract_return retval = new ChemicalChunkerParser.nnextract_return();
        retval.start = input.LT(1);
        int nnextract_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal827=null;
        Token TOKEN828=null;

        Object string_literal827_tree=null;
        Object TOKEN828_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:10: ( 'NN-EXTRACT' TOKEN -> ^( 'NN-EXTRACT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:11: 'NN-EXTRACT' TOKEN
            {
            string_literal827=(Token)match(input,109,FOLLOW_109_in_nnextract4278_static.FOLLOW_109_in_nnextract4278); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(string_literal827);

            TOKEN828=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnextract4280_static.FOLLOW_TOKEN_in_nnextract4280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN828);



            // AST REWRITE
            // elements: 109, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:30: -> ^( 'NN-EXTRACT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:429:33: ^( 'NN-EXTRACT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_109.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, nnextract_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnextract"

    public static class vbfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:1: vbfilter : 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.vbfilter_return vbfilter() throws RecognitionException {
        ChemicalChunkerParser.vbfilter_return retval = new ChemicalChunkerParser.vbfilter_return();
        retval.start = input.LT(1);
        int vbfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal829=null;
        Token TOKEN830=null;

        Object string_literal829_tree=null;
        Object TOKEN830_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:9: ( 'VB-FILTER' TOKEN -> ^( 'VB-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:10: 'VB-FILTER' TOKEN
            {
            string_literal829=(Token)match(input,110,FOLLOW_110_in_vbfilter4295_static.FOLLOW_110_in_vbfilter4295); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_110.add(string_literal829);

            TOKEN830=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbfilter4297_static.FOLLOW_TOKEN_in_vbfilter4297); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN830);



            // AST REWRITE
            // elements: TOKEN, 110
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 432:28: -> ^( 'VB-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:432:31: ^( 'VB-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_110.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, vbfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbfilter"

    public static class nnfilter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnfilter"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:1: nnfilter : 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) ;
    public final ChemicalChunkerParser.nnfilter_return nnfilter() throws RecognitionException {
        ChemicalChunkerParser.nnfilter_return retval = new ChemicalChunkerParser.nnfilter_return();
        retval.start = input.LT(1);
        int nnfilter_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal831=null;
        Token TOKEN832=null;

        Object string_literal831_tree=null;
        Object TOKEN832_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:9: ( 'NN-FILTER' TOKEN -> ^( 'NN-FILTER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:10: 'NN-FILTER' TOKEN
            {
            string_literal831=(Token)match(input,111,FOLLOW_111_in_nnfilter4310_static.FOLLOW_111_in_nnfilter4310); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_111.add(string_literal831);

            TOKEN832=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnfilter4312_static.FOLLOW_TOKEN_in_nnfilter4312); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN832);



            // AST REWRITE
            // elements: TOKEN, 111
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:28: -> ^( 'NN-FILTER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:433:31: ^( 'NN-FILTER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_111.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, nnfilter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnfilter"

    public static class vbheat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbheat"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:1: vbheat : 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) ;
    public final ChemicalChunkerParser.vbheat_return vbheat() throws RecognitionException {
        ChemicalChunkerParser.vbheat_return retval = new ChemicalChunkerParser.vbheat_return();
        retval.start = input.LT(1);
        int vbheat_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal833=null;
        Token TOKEN834=null;

        Object string_literal833_tree=null;
        Object TOKEN834_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:7: ( 'VB-HEAT' TOKEN -> ^( 'VB-HEAT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:8: 'VB-HEAT' TOKEN
            {
            string_literal833=(Token)match(input,112,FOLLOW_112_in_vbheat4327_static.FOLLOW_112_in_vbheat4327); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_112.add(string_literal833);

            TOKEN834=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbheat4329_static.FOLLOW_TOKEN_in_vbheat4329); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN834);



            // AST REWRITE
            // elements: 112, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:24: -> ^( 'VB-HEAT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:436:27: ^( 'VB-HEAT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_112.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, vbheat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbheat"

    public static class vbincrease_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbincrease"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:1: vbincrease : 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) ;
    public final ChemicalChunkerParser.vbincrease_return vbincrease() throws RecognitionException {
        ChemicalChunkerParser.vbincrease_return retval = new ChemicalChunkerParser.vbincrease_return();
        retval.start = input.LT(1);
        int vbincrease_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal835=null;
        Token TOKEN836=null;

        Object string_literal835_tree=null;
        Object TOKEN836_tree=null;
        RewriteRuleTokenStream stream_113=new RewriteRuleTokenStream(adaptor,"token 113");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:11: ( 'VB-INCREASE' TOKEN -> ^( 'VB-INCREASE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:12: 'VB-INCREASE' TOKEN
            {
            string_literal835=(Token)match(input,113,FOLLOW_113_in_vbincrease4342_static.FOLLOW_113_in_vbincrease4342); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_113.add(string_literal835);

            TOKEN836=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbincrease4344_static.FOLLOW_TOKEN_in_vbincrease4344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN836);



            // AST REWRITE
            // elements: TOKEN, 113
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 437:32: -> ^( 'VB-INCREASE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:437:35: ^( 'VB-INCREASE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_113.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, vbincrease_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbincrease"

    public static class vbimmerse_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbimmerse"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:1: vbimmerse : 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) ;
    public final ChemicalChunkerParser.vbimmerse_return vbimmerse() throws RecognitionException {
        ChemicalChunkerParser.vbimmerse_return retval = new ChemicalChunkerParser.vbimmerse_return();
        retval.start = input.LT(1);
        int vbimmerse_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal837=null;
        Token TOKEN838=null;

        Object string_literal837_tree=null;
        Object TOKEN838_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:10: ( 'VB-IMMERSE' TOKEN -> ^( 'VB-IMMERSE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:11: 'VB-IMMERSE' TOKEN
            {
            string_literal837=(Token)match(input,114,FOLLOW_114_in_vbimmerse4359_static.FOLLOW_114_in_vbimmerse4359); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_114.add(string_literal837);

            TOKEN838=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbimmerse4361_static.FOLLOW_TOKEN_in_vbimmerse4361); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN838);



            // AST REWRITE
            // elements: 114, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 440:30: -> ^( 'VB-IMMERSE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:440:33: ^( 'VB-IMMERSE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_114.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, vbimmerse_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbimmerse"

    public static class vbpartition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpartition"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:1: vbpartition : 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) ;
    public final ChemicalChunkerParser.vbpartition_return vbpartition() throws RecognitionException {
        ChemicalChunkerParser.vbpartition_return retval = new ChemicalChunkerParser.vbpartition_return();
        retval.start = input.LT(1);
        int vbpartition_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal839=null;
        Token TOKEN840=null;

        Object string_literal839_tree=null;
        Object TOKEN840_tree=null;
        RewriteRuleTokenStream stream_115=new RewriteRuleTokenStream(adaptor,"token 115");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:12: ( 'VB-PARTITION' TOKEN -> ^( 'VB-PARTITION' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:13: 'VB-PARTITION' TOKEN
            {
            string_literal839=(Token)match(input,115,FOLLOW_115_in_vbpartition4376_static.FOLLOW_115_in_vbpartition4376); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_115.add(string_literal839);

            TOKEN840=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpartition4378_static.FOLLOW_TOKEN_in_vbpartition4378); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN840);



            // AST REWRITE
            // elements: 115, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 443:34: -> ^( 'VB-PARTITION' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:443:37: ^( 'VB-PARTITION' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_115.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, vbpartition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpartition"

    public static class vbprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:1: vbprecipitate : 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.vbprecipitate_return vbprecipitate() throws RecognitionException {
        ChemicalChunkerParser.vbprecipitate_return retval = new ChemicalChunkerParser.vbprecipitate_return();
        retval.start = input.LT(1);
        int vbprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal841=null;
        Token TOKEN842=null;

        Object string_literal841_tree=null;
        Object TOKEN842_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:14: ( 'VB-PRECIPITATE' TOKEN -> ^( 'VB-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:15: 'VB-PRECIPITATE' TOKEN
            {
            string_literal841=(Token)match(input,116,FOLLOW_116_in_vbprecipitate4393_static.FOLLOW_116_in_vbprecipitate4393); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(string_literal841);

            TOKEN842=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbprecipitate4395_static.FOLLOW_TOKEN_in_vbprecipitate4395); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN842);



            // AST REWRITE
            // elements: TOKEN, 116
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:38: -> ^( 'VB-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:446:41: ^( 'VB-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_116.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, vbprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbprecipitate"

    public static class nnprecipitate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnprecipitate"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:1: nnprecipitate : 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) ;
    public final ChemicalChunkerParser.nnprecipitate_return nnprecipitate() throws RecognitionException {
        ChemicalChunkerParser.nnprecipitate_return retval = new ChemicalChunkerParser.nnprecipitate_return();
        retval.start = input.LT(1);
        int nnprecipitate_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal843=null;
        Token TOKEN844=null;

        Object string_literal843_tree=null;
        Object TOKEN844_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:14: ( 'NN-PRECIPITATE' TOKEN -> ^( 'NN-PRECIPITATE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:15: 'NN-PRECIPITATE' TOKEN
            {
            string_literal843=(Token)match(input,117,FOLLOW_117_in_nnprecipitate4408_static.FOLLOW_117_in_nnprecipitate4408); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(string_literal843);

            TOKEN844=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnprecipitate4410_static.FOLLOW_TOKEN_in_nnprecipitate4410); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN844);



            // AST REWRITE
            // elements: 117, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 447:38: -> ^( 'NN-PRECIPITATE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:447:41: ^( 'NN-PRECIPITATE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_117.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, nnprecipitate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnprecipitate"

    public static class vbpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:1: vbpurify : 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.vbpurify_return vbpurify() throws RecognitionException {
        ChemicalChunkerParser.vbpurify_return retval = new ChemicalChunkerParser.vbpurify_return();
        retval.start = input.LT(1);
        int vbpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal845=null;
        Token TOKEN846=null;

        Object string_literal845_tree=null;
        Object TOKEN846_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:9: ( 'VB-PURIFY' TOKEN -> ^( 'VB-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:10: 'VB-PURIFY' TOKEN
            {
            string_literal845=(Token)match(input,118,FOLLOW_118_in_vbpurify4425_static.FOLLOW_118_in_vbpurify4425); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(string_literal845);

            TOKEN846=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbpurify4427_static.FOLLOW_TOKEN_in_vbpurify4427); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN846);



            // AST REWRITE
            // elements: TOKEN, 118
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 450:28: -> ^( 'VB-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:450:31: ^( 'VB-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_118.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, vbpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbpurify"

    public static class nnpurify_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpurify"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:1: nnpurify : 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) ;
    public final ChemicalChunkerParser.nnpurify_return nnpurify() throws RecognitionException {
        ChemicalChunkerParser.nnpurify_return retval = new ChemicalChunkerParser.nnpurify_return();
        retval.start = input.LT(1);
        int nnpurify_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal847=null;
        Token TOKEN848=null;

        Object string_literal847_tree=null;
        Object TOKEN848_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:9: ( 'NN-PURIFY' TOKEN -> ^( 'NN-PURIFY' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:10: 'NN-PURIFY' TOKEN
            {
            string_literal847=(Token)match(input,119,FOLLOW_119_in_nnpurify4440_static.FOLLOW_119_in_nnpurify4440); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal847);

            TOKEN848=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpurify4442_static.FOLLOW_TOKEN_in_nnpurify4442); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN848);



            // AST REWRITE
            // elements: 119, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 451:28: -> ^( 'NN-PURIFY' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:451:31: ^( 'NN-PURIFY' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_119.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, nnpurify_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpurify"

    public static class vbquench_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbquench"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:1: vbquench : 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) ;
    public final ChemicalChunkerParser.vbquench_return vbquench() throws RecognitionException {
        ChemicalChunkerParser.vbquench_return retval = new ChemicalChunkerParser.vbquench_return();
        retval.start = input.LT(1);
        int vbquench_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal849=null;
        Token TOKEN850=null;

        Object string_literal849_tree=null;
        Object TOKEN850_tree=null;
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:9: ( 'VB-QUENCH' TOKEN -> ^( 'VB-QUENCH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:10: 'VB-QUENCH' TOKEN
            {
            string_literal849=(Token)match(input,120,FOLLOW_120_in_vbquench4457_static.FOLLOW_120_in_vbquench4457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal849);

            TOKEN850=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbquench4459_static.FOLLOW_TOKEN_in_vbquench4459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN850);



            // AST REWRITE
            // elements: TOKEN, 120
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 454:28: -> ^( 'VB-QUENCH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:454:31: ^( 'VB-QUENCH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_120.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, vbquench_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbquench"

    public static class vbrecover_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbrecover"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:1: vbrecover : 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) ;
    public final ChemicalChunkerParser.vbrecover_return vbrecover() throws RecognitionException {
        ChemicalChunkerParser.vbrecover_return retval = new ChemicalChunkerParser.vbrecover_return();
        retval.start = input.LT(1);
        int vbrecover_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal851=null;
        Token TOKEN852=null;

        Object string_literal851_tree=null;
        Object TOKEN852_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:10: ( 'VB-RECOVER' TOKEN -> ^( 'VB-RECOVER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:11: 'VB-RECOVER' TOKEN
            {
            string_literal851=(Token)match(input,121,FOLLOW_121_in_vbrecover4474_static.FOLLOW_121_in_vbrecover4474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(string_literal851);

            TOKEN852=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbrecover4476_static.FOLLOW_TOKEN_in_vbrecover4476); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN852);



            // AST REWRITE
            // elements: TOKEN, 121
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:30: -> ^( 'VB-RECOVER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:457:33: ^( 'VB-RECOVER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_121.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, vbrecover_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbrecover"

    public static class vbremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:1: vbremove : 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.vbremove_return vbremove() throws RecognitionException {
        ChemicalChunkerParser.vbremove_return retval = new ChemicalChunkerParser.vbremove_return();
        retval.start = input.LT(1);
        int vbremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal853=null;
        Token TOKEN854=null;

        Object string_literal853_tree=null;
        Object TOKEN854_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:9: ( 'VB-REMOVE' TOKEN -> ^( 'VB-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:10: 'VB-REMOVE' TOKEN
            {
            string_literal853=(Token)match(input,122,FOLLOW_122_in_vbremove4491_static.FOLLOW_122_in_vbremove4491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal853);

            TOKEN854=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbremove4493_static.FOLLOW_TOKEN_in_vbremove4493); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN854);



            // AST REWRITE
            // elements: 122, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 460:28: -> ^( 'VB-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:460:31: ^( 'VB-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_122.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, vbremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbremove"

    public static class nnremove_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnremove"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:1: nnremove : 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) ;
    public final ChemicalChunkerParser.nnremove_return nnremove() throws RecognitionException {
        ChemicalChunkerParser.nnremove_return retval = new ChemicalChunkerParser.nnremove_return();
        retval.start = input.LT(1);
        int nnremove_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal855=null;
        Token TOKEN856=null;

        Object string_literal855_tree=null;
        Object TOKEN856_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:9: ( 'NN-REMOVE' TOKEN -> ^( 'NN-REMOVE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:10: 'NN-REMOVE' TOKEN
            {
            string_literal855=(Token)match(input,123,FOLLOW_123_in_nnremove4506_static.FOLLOW_123_in_nnremove4506); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_123.add(string_literal855);

            TOKEN856=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnremove4508_static.FOLLOW_TOKEN_in_nnremove4508); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN856);



            // AST REWRITE
            // elements: 123, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 461:28: -> ^( 'NN-REMOVE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:461:31: ^( 'NN-REMOVE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_123.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, nnremove_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnremove"

    public static class vbstir_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbstir"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:1: vbstir : 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) ;
    public final ChemicalChunkerParser.vbstir_return vbstir() throws RecognitionException {
        ChemicalChunkerParser.vbstir_return retval = new ChemicalChunkerParser.vbstir_return();
        retval.start = input.LT(1);
        int vbstir_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal857=null;
        Token TOKEN858=null;

        Object string_literal857_tree=null;
        Object TOKEN858_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:7: ( 'VB-STIR' TOKEN -> ^( 'VB-STIR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:8: 'VB-STIR' TOKEN
            {
            string_literal857=(Token)match(input,124,FOLLOW_124_in_vbstir4523_static.FOLLOW_124_in_vbstir4523); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_124.add(string_literal857);

            TOKEN858=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbstir4525_static.FOLLOW_TOKEN_in_vbstir4525); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN858);



            // AST REWRITE
            // elements: 124, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 464:24: -> ^( 'VB-STIR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:464:27: ^( 'VB-STIR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_124.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, vbstir_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbstir"

    public static class vbsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:1: vbsynthesize : 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.vbsynthesize_return vbsynthesize() throws RecognitionException {
        ChemicalChunkerParser.vbsynthesize_return retval = new ChemicalChunkerParser.vbsynthesize_return();
        retval.start = input.LT(1);
        int vbsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal859=null;
        Token TOKEN860=null;

        Object string_literal859_tree=null;
        Object TOKEN860_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:13: ( 'VB-SYNTHESIZE' TOKEN -> ^( 'VB-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:14: 'VB-SYNTHESIZE' TOKEN
            {
            string_literal859=(Token)match(input,125,FOLLOW_125_in_vbsynthesize4540_static.FOLLOW_125_in_vbsynthesize4540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_125.add(string_literal859);

            TOKEN860=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbsynthesize4542_static.FOLLOW_TOKEN_in_vbsynthesize4542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN860);



            // AST REWRITE
            // elements: TOKEN, 125
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 467:36: -> ^( 'VB-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:467:39: ^( 'VB-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_125.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, vbsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbsynthesize"

    public static class nnsynthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnsynthesize"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:1: nnsynthesize : 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) ;
    public final ChemicalChunkerParser.nnsynthesize_return nnsynthesize() throws RecognitionException {
        ChemicalChunkerParser.nnsynthesize_return retval = new ChemicalChunkerParser.nnsynthesize_return();
        retval.start = input.LT(1);
        int nnsynthesize_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal861=null;
        Token TOKEN862=null;

        Object string_literal861_tree=null;
        Object TOKEN862_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:13: ( 'NN-SYNTHESIZE' TOKEN -> ^( 'NN-SYNTHESIZE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:14: 'NN-SYNTHESIZE' TOKEN
            {
            string_literal861=(Token)match(input,126,FOLLOW_126_in_nnsynthesize4555_static.FOLLOW_126_in_nnsynthesize4555); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal861);

            TOKEN862=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnsynthesize4557_static.FOLLOW_TOKEN_in_nnsynthesize4557); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN862);



            // AST REWRITE
            // elements: 126, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 468:36: -> ^( 'NN-SYNTHESIZE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:468:39: ^( 'NN-SYNTHESIZE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_126.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, nnsynthesize_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnsynthesize"

    public static class vbwait_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwait"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:1: vbwait : 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) ;
    public final ChemicalChunkerParser.vbwait_return vbwait() throws RecognitionException {
        ChemicalChunkerParser.vbwait_return retval = new ChemicalChunkerParser.vbwait_return();
        retval.start = input.LT(1);
        int vbwait_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal863=null;
        Token TOKEN864=null;

        Object string_literal863_tree=null;
        Object TOKEN864_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:7: ( 'VB-WAIT' TOKEN -> ^( 'VB-WAIT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:8: 'VB-WAIT' TOKEN
            {
            string_literal863=(Token)match(input,127,FOLLOW_127_in_vbwait4572_static.FOLLOW_127_in_vbwait4572); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_127.add(string_literal863);

            TOKEN864=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwait4574_static.FOLLOW_TOKEN_in_vbwait4574); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN864);



            // AST REWRITE
            // elements: TOKEN, 127
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 471:24: -> ^( 'VB-WAIT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:471:27: ^( 'VB-WAIT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_127.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, vbwait_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwait"

    public static class vbwash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbwash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:1: vbwash : 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) ;
    public final ChemicalChunkerParser.vbwash_return vbwash() throws RecognitionException {
        ChemicalChunkerParser.vbwash_return retval = new ChemicalChunkerParser.vbwash_return();
        retval.start = input.LT(1);
        int vbwash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal865=null;
        Token TOKEN866=null;

        Object string_literal865_tree=null;
        Object TOKEN866_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:7: ( 'VB-WASH' TOKEN -> ^( 'VB-WASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:8: 'VB-WASH' TOKEN
            {
            string_literal865=(Token)match(input,128,FOLLOW_128_in_vbwash4589_static.FOLLOW_128_in_vbwash4589); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_128.add(string_literal865);

            TOKEN866=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbwash4591_static.FOLLOW_TOKEN_in_vbwash4591); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN866);



            // AST REWRITE
            // elements: TOKEN, 128
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 474:24: -> ^( 'VB-WASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:474:27: ^( 'VB-WASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_128.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, vbwash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbwash"

    public static class vbyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:1: vbyield : 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.vbyield_return vbyield() throws RecognitionException {
        ChemicalChunkerParser.vbyield_return retval = new ChemicalChunkerParser.vbyield_return();
        retval.start = input.LT(1);
        int vbyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal867=null;
        Token TOKEN868=null;

        Object string_literal867_tree=null;
        Object TOKEN868_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:8: ( 'VB-YIELD' TOKEN -> ^( 'VB-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:9: 'VB-YIELD' TOKEN
            {
            string_literal867=(Token)match(input,129,FOLLOW_129_in_vbyield4606_static.FOLLOW_129_in_vbyield4606); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(string_literal867);

            TOKEN868=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbyield4608_static.FOLLOW_TOKEN_in_vbyield4608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN868);



            // AST REWRITE
            // elements: 129, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 477:26: -> ^( 'VB-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:477:29: ^( 'VB-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_129.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, vbyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbyield"

    public static class nnyield_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnyield"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:1: nnyield : 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) ;
    public final ChemicalChunkerParser.nnyield_return nnyield() throws RecognitionException {
        ChemicalChunkerParser.nnyield_return retval = new ChemicalChunkerParser.nnyield_return();
        retval.start = input.LT(1);
        int nnyield_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal869=null;
        Token TOKEN870=null;

        Object string_literal869_tree=null;
        Object TOKEN870_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:8: ( 'NN-YIELD' TOKEN -> ^( 'NN-YIELD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:9: 'NN-YIELD' TOKEN
            {
            string_literal869=(Token)match(input,130,FOLLOW_130_in_nnyield4623_static.FOLLOW_130_in_nnyield4623); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(string_literal869);

            TOKEN870=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnyield4625_static.FOLLOW_TOKEN_in_nnyield4625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN870);



            // AST REWRITE
            // elements: 130, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 480:26: -> ^( 'NN-YIELD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:480:29: ^( 'NN-YIELD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_130.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, nnyield_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnyield"

    public static class rbconj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbconj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:1: rbconj : 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) ;
    public final ChemicalChunkerParser.rbconj_return rbconj() throws RecognitionException {
        ChemicalChunkerParser.rbconj_return retval = new ChemicalChunkerParser.rbconj_return();
        retval.start = input.LT(1);
        int rbconj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal871=null;
        Token TOKEN872=null;

        Object string_literal871_tree=null;
        Object TOKEN872_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:7: ( 'RB-CONJ' TOKEN -> ^( 'RB-CONJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:8: 'RB-CONJ' TOKEN
            {
            string_literal871=(Token)match(input,131,FOLLOW_131_in_rbconj4641_static.FOLLOW_131_in_rbconj4641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(string_literal871);

            TOKEN872=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbconj4643_static.FOLLOW_TOKEN_in_rbconj4643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN872);



            // AST REWRITE
            // elements: TOKEN, 131
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:24: -> ^( 'RB-CONJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:484:27: ^( 'RB-CONJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_131.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, rbconj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbconj"

    public static class colon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "colon"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:1: colon : 'COLON' TOKEN -> ^( 'COLON' TOKEN ) ;
    public final ChemicalChunkerParser.colon_return colon() throws RecognitionException {
        ChemicalChunkerParser.colon_return retval = new ChemicalChunkerParser.colon_return();
        retval.start = input.LT(1);
        int colon_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal873=null;
        Token TOKEN874=null;

        Object string_literal873_tree=null;
        Object TOKEN874_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:6: ( 'COLON' TOKEN -> ^( 'COLON' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:7: 'COLON' TOKEN
            {
            string_literal873=(Token)match(input,132,FOLLOW_132_in_colon4656_static.FOLLOW_132_in_colon4656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_132.add(string_literal873);

            TOKEN874=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_colon4658_static.FOLLOW_TOKEN_in_colon4658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN874);



            // AST REWRITE
            // elements: 132, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 485:21: -> ^( 'COLON' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:485:24: ^( 'COLON' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_132.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, colon_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "colon"

    public static class comma_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comma"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:1: comma : 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) ;
    public final ChemicalChunkerParser.comma_return comma() throws RecognitionException {
        ChemicalChunkerParser.comma_return retval = new ChemicalChunkerParser.comma_return();
        retval.start = input.LT(1);
        int comma_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal875=null;
        Token TOKEN876=null;

        Object string_literal875_tree=null;
        Object TOKEN876_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:6: ( 'COMMA' TOKEN -> ^( 'COMMA' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:7: 'COMMA' TOKEN
            {
            string_literal875=(Token)match(input,133,FOLLOW_133_in_comma4671_static.FOLLOW_133_in_comma4671); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(string_literal875);

            TOKEN876=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_comma4673_static.FOLLOW_TOKEN_in_comma4673); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN876);



            // AST REWRITE
            // elements: TOKEN, 133
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 486:21: -> ^( 'COMMA' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:486:24: ^( 'COMMA' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_133.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, comma_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "comma"

    public static class apost_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "apost"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:1: apost : 'APOST' TOKEN -> ^( 'APOST' TOKEN ) ;
    public final ChemicalChunkerParser.apost_return apost() throws RecognitionException {
        ChemicalChunkerParser.apost_return retval = new ChemicalChunkerParser.apost_return();
        retval.start = input.LT(1);
        int apost_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal877=null;
        Token TOKEN878=null;

        Object string_literal877_tree=null;
        Object TOKEN878_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:6: ( 'APOST' TOKEN -> ^( 'APOST' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:7: 'APOST' TOKEN
            {
            string_literal877=(Token)match(input,134,FOLLOW_134_in_apost4686_static.FOLLOW_134_in_apost4686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(string_literal877);

            TOKEN878=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_apost4688_static.FOLLOW_TOKEN_in_apost4688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN878);



            // AST REWRITE
            // elements: TOKEN, 134
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 487:21: -> ^( 'APOST' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:487:24: ^( 'APOST' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_134.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, apost_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "apost"

    public static class neg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "neg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:1: neg : 'NEG' TOKEN -> ^( 'NEG' TOKEN ) ;
    public final ChemicalChunkerParser.neg_return neg() throws RecognitionException {
        ChemicalChunkerParser.neg_return retval = new ChemicalChunkerParser.neg_return();
        retval.start = input.LT(1);
        int neg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal879=null;
        Token TOKEN880=null;

        Object string_literal879_tree=null;
        Object TOKEN880_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:4: ( 'NEG' TOKEN -> ^( 'NEG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:5: 'NEG' TOKEN
            {
            string_literal879=(Token)match(input,135,FOLLOW_135_in_neg4701_static.FOLLOW_135_in_neg4701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal879);

            TOKEN880=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_neg4703_static.FOLLOW_TOKEN_in_neg4703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN880);



            // AST REWRITE
            // elements: TOKEN, 135
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 488:17: -> ^( 'NEG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:488:20: ^( 'NEG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_135.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, neg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "neg"

    public static class dash_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dash"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:1: dash : 'DASH' TOKEN -> ^( 'DASH' TOKEN ) ;
    public final ChemicalChunkerParser.dash_return dash() throws RecognitionException {
        ChemicalChunkerParser.dash_return retval = new ChemicalChunkerParser.dash_return();
        retval.start = input.LT(1);
        int dash_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal881=null;
        Token TOKEN882=null;

        Object string_literal881_tree=null;
        Object TOKEN882_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:5: ( 'DASH' TOKEN -> ^( 'DASH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:6: 'DASH' TOKEN
            {
            string_literal881=(Token)match(input,136,FOLLOW_136_in_dash4716_static.FOLLOW_136_in_dash4716); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(string_literal881);

            TOKEN882=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dash4718_static.FOLLOW_TOKEN_in_dash4718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN882);



            // AST REWRITE
            // elements: 136, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 489:19: -> ^( 'DASH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:489:22: ^( 'DASH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_136.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, dash_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dash"

    public static class stop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stop"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:1: stop : 'STOP' TOKEN -> ^( 'STOP' TOKEN ) ;
    public final ChemicalChunkerParser.stop_return stop() throws RecognitionException {
        ChemicalChunkerParser.stop_return retval = new ChemicalChunkerParser.stop_return();
        retval.start = input.LT(1);
        int stop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal883=null;
        Token TOKEN884=null;

        Object string_literal883_tree=null;
        Object TOKEN884_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:5: ( 'STOP' TOKEN -> ^( 'STOP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:6: 'STOP' TOKEN
            {
            string_literal883=(Token)match(input,137,FOLLOW_137_in_stop4731_static.FOLLOW_137_in_stop4731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(string_literal883);

            TOKEN884=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_stop4733_static.FOLLOW_TOKEN_in_stop4733); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN884);



            // AST REWRITE
            // elements: 137, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 490:19: -> ^( 'STOP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:490:22: ^( 'STOP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_137.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, stop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stop"

    public static class nnpercent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnpercent"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:1: nnpercent : 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) ;
    public final ChemicalChunkerParser.nnpercent_return nnpercent() throws RecognitionException {
        ChemicalChunkerParser.nnpercent_return retval = new ChemicalChunkerParser.nnpercent_return();
        retval.start = input.LT(1);
        int nnpercent_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal885=null;
        Token TOKEN886=null;

        Object string_literal885_tree=null;
        Object TOKEN886_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:10: ( 'NN-PERCENT' TOKEN -> ^( 'NN-PERCENT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:11: 'NN-PERCENT' TOKEN
            {
            string_literal885=(Token)match(input,138,FOLLOW_138_in_nnpercent4746_static.FOLLOW_138_in_nnpercent4746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_138.add(string_literal885);

            TOKEN886=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnpercent4748_static.FOLLOW_TOKEN_in_nnpercent4748); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN886);



            // AST REWRITE
            // elements: TOKEN, 138
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 491:30: -> ^( 'NN-PERCENT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:491:33: ^( 'NN-PERCENT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_138.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, nnpercent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnpercent"

    public static class lsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:1: lsqb : 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) ;
    public final ChemicalChunkerParser.lsqb_return lsqb() throws RecognitionException {
        ChemicalChunkerParser.lsqb_return retval = new ChemicalChunkerParser.lsqb_return();
        retval.start = input.LT(1);
        int lsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal887=null;
        Token TOKEN888=null;

        Object string_literal887_tree=null;
        Object TOKEN888_tree=null;
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:5: ( 'LSQB' TOKEN -> ^( 'LSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:6: 'LSQB' TOKEN
            {
            string_literal887=(Token)match(input,139,FOLLOW_139_in_lsqb4761_static.FOLLOW_139_in_lsqb4761); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_139.add(string_literal887);

            TOKEN888=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lsqb4763_static.FOLLOW_TOKEN_in_lsqb4763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN888);



            // AST REWRITE
            // elements: 139, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 492:19: -> ^( 'LSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:492:22: ^( 'LSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_139.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, lsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lsqb"

    public static class rsqb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rsqb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:1: rsqb : 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) ;
    public final ChemicalChunkerParser.rsqb_return rsqb() throws RecognitionException {
        ChemicalChunkerParser.rsqb_return retval = new ChemicalChunkerParser.rsqb_return();
        retval.start = input.LT(1);
        int rsqb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal889=null;
        Token TOKEN890=null;

        Object string_literal889_tree=null;
        Object TOKEN890_tree=null;
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:5: ( 'RSQB' TOKEN -> ^( 'RSQB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:6: 'RSQB' TOKEN
            {
            string_literal889=(Token)match(input,140,FOLLOW_140_in_rsqb4776_static.FOLLOW_140_in_rsqb4776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(string_literal889);

            TOKEN890=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rsqb4778_static.FOLLOW_TOKEN_in_rsqb4778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN890);



            // AST REWRITE
            // elements: 140, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 493:19: -> ^( 'RSQB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:493:22: ^( 'RSQB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_140.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, rsqb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rsqb"

    public static class nnidentifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnidentifier"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:1: nnidentifier : 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) ;
    public final ChemicalChunkerParser.nnidentifier_return nnidentifier() throws RecognitionException {
        ChemicalChunkerParser.nnidentifier_return retval = new ChemicalChunkerParser.nnidentifier_return();
        retval.start = input.LT(1);
        int nnidentifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal891=null;
        Token TOKEN892=null;

        Object string_literal891_tree=null;
        Object TOKEN892_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:13: ( 'NN-IDENTIFIER' TOKEN -> ^( 'NN-IDENTIFIER' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:14: 'NN-IDENTIFIER' TOKEN
            {
            string_literal891=(Token)match(input,141,FOLLOW_141_in_nnidentifier4792_static.FOLLOW_141_in_nnidentifier4792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(string_literal891);

            TOKEN892=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnidentifier4794_static.FOLLOW_TOKEN_in_nnidentifier4794); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN892);



            // AST REWRITE
            // elements: 141, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 495:36: -> ^( 'NN-IDENTIFIER' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:495:39: ^( 'NN-IDENTIFIER' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_141.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, nnidentifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnidentifier"

    public static class dtTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dtTHE"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:1: dtTHE : 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) ;
    public final ChemicalChunkerParser.dtTHE_return dtTHE() throws RecognitionException {
        ChemicalChunkerParser.dtTHE_return retval = new ChemicalChunkerParser.dtTHE_return();
        retval.start = input.LT(1);
        int dtTHE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal893=null;
        Token TOKEN894=null;

        Object string_literal893_tree=null;
        Object TOKEN894_tree=null;
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:6: ( 'DT-THE' TOKEN -> ^( 'DT-THE' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:7: 'DT-THE' TOKEN
            {
            string_literal893=(Token)match(input,142,FOLLOW_142_in_dtTHE4809_static.FOLLOW_142_in_dtTHE4809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal893);

            TOKEN894=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dtTHE4811_static.FOLLOW_TOKEN_in_dtTHE4811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN894);



            // AST REWRITE
            // elements: TOKEN, 142
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 498:22: -> ^( 'DT-THE' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:498:25: ^( 'DT-THE' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_142.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, dtTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dtTHE"

    public static class lrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:1: lrb : '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) ;
    public final ChemicalChunkerParser.lrb_return lrb() throws RecognitionException {
        ChemicalChunkerParser.lrb_return retval = new ChemicalChunkerParser.lrb_return();
        retval.start = input.LT(1);
        int lrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal895=null;
        Token TOKEN896=null;

        Object string_literal895_tree=null;
        Object TOKEN896_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:4: ( '-LRB-' TOKEN -> ^( '-LRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:5: '-LRB-' TOKEN
            {
            string_literal895=(Token)match(input,143,FOLLOW_143_in_lrb4825_static.FOLLOW_143_in_lrb4825); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal895);

            TOKEN896=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_lrb4827_static.FOLLOW_TOKEN_in_lrb4827); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN896);



            // AST REWRITE
            // elements: 143, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 500:19: -> ^( '-LRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:500:22: ^( '-LRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_143.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, lrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lrb"

    public static class rrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:1: rrb : '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) ;
    public final ChemicalChunkerParser.rrb_return rrb() throws RecognitionException {
        ChemicalChunkerParser.rrb_return retval = new ChemicalChunkerParser.rrb_return();
        retval.start = input.LT(1);
        int rrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal897=null;
        Token TOKEN898=null;

        Object string_literal897_tree=null;
        Object TOKEN898_tree=null;
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:4: ( '-RRB-' TOKEN -> ^( '-RRB-' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:5: '-RRB-' TOKEN
            {
            string_literal897=(Token)match(input,144,FOLLOW_144_in_rrb4840_static.FOLLOW_144_in_rrb4840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_144.add(string_literal897);

            TOKEN898=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rrb4842_static.FOLLOW_TOKEN_in_rrb4842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN898);



            // AST REWRITE
            // elements: TOKEN, 144
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 501:19: -> ^( '-RRB-' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:501:22: ^( '-RRB-' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_144.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, rrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rrb"

    public static class cc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cc"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:1: cc : 'CC' TOKEN -> ^( 'CC' TOKEN ) ;
    public final ChemicalChunkerParser.cc_return cc() throws RecognitionException {
        ChemicalChunkerParser.cc_return retval = new ChemicalChunkerParser.cc_return();
        retval.start = input.LT(1);
        int cc_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal899=null;
        Token TOKEN900=null;

        Object string_literal899_tree=null;
        Object TOKEN900_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:3: ( 'CC' TOKEN -> ^( 'CC' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:4: 'CC' TOKEN
            {
            string_literal899=(Token)match(input,145,FOLLOW_145_in_cc4859_static.FOLLOW_145_in_cc4859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(string_literal899);

            TOKEN900=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cc4861_static.FOLLOW_TOKEN_in_cc4861); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN900);



            // AST REWRITE
            // elements: TOKEN, 145
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 506:15: -> ^( 'CC' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:506:18: ^( 'CC' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_145.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, cc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cc"

    public static class cd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:1: cd : 'CD' TOKEN -> ^( 'CD' TOKEN ) ;
    public final ChemicalChunkerParser.cd_return cd() throws RecognitionException {
        ChemicalChunkerParser.cd_return retval = new ChemicalChunkerParser.cd_return();
        retval.start = input.LT(1);
        int cd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal901=null;
        Token TOKEN902=null;

        Object string_literal901_tree=null;
        Object TOKEN902_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:3: ( 'CD' TOKEN -> ^( 'CD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:4: 'CD' TOKEN
            {
            string_literal901=(Token)match(input,146,FOLLOW_146_in_cd4876_static.FOLLOW_146_in_cd4876); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal901);

            TOKEN902=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_cd4878_static.FOLLOW_TOKEN_in_cd4878); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN902);



            // AST REWRITE
            // elements: TOKEN, 146
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 509:15: -> ^( 'CD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:509:18: ^( 'CD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_146.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, cd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cd"

    public static class dt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:1: dt : 'DT' TOKEN -> ^( 'DT' TOKEN ) ;
    public final ChemicalChunkerParser.dt_return dt() throws RecognitionException {
        ChemicalChunkerParser.dt_return retval = new ChemicalChunkerParser.dt_return();
        retval.start = input.LT(1);
        int dt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal903=null;
        Token TOKEN904=null;

        Object string_literal903_tree=null;
        Object TOKEN904_tree=null;
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:3: ( 'DT' TOKEN -> ^( 'DT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:4: 'DT' TOKEN
            {
            string_literal903=(Token)match(input,147,FOLLOW_147_in_dt4893_static.FOLLOW_147_in_dt4893); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(string_literal903);

            TOKEN904=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_dt4895_static.FOLLOW_TOKEN_in_dt4895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN904);



            // AST REWRITE
            // elements: TOKEN, 147
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 512:15: -> ^( 'DT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:512:18: ^( 'DT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_147.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, dt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "dt"

    public static class ex_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ex"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:1: ex : 'EX' TOKEN -> ^( 'EX' TOKEN ) ;
    public final ChemicalChunkerParser.ex_return ex() throws RecognitionException {
        ChemicalChunkerParser.ex_return retval = new ChemicalChunkerParser.ex_return();
        retval.start = input.LT(1);
        int ex_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal905=null;
        Token TOKEN906=null;

        Object string_literal905_tree=null;
        Object TOKEN906_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:3: ( 'EX' TOKEN -> ^( 'EX' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:4: 'EX' TOKEN
            {
            string_literal905=(Token)match(input,148,FOLLOW_148_in_ex4910_static.FOLLOW_148_in_ex4910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(string_literal905);

            TOKEN906=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ex4912_static.FOLLOW_TOKEN_in_ex4912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN906);



            // AST REWRITE
            // elements: 148, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 515:15: -> ^( 'EX' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:515:18: ^( 'EX' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_148.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, ex_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ex"

    public static class fw_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fw"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:1: fw : 'FW' TOKEN -> ^( 'FW' TOKEN ) ;
    public final ChemicalChunkerParser.fw_return fw() throws RecognitionException {
        ChemicalChunkerParser.fw_return retval = new ChemicalChunkerParser.fw_return();
        retval.start = input.LT(1);
        int fw_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal907=null;
        Token TOKEN908=null;

        Object string_literal907_tree=null;
        Object TOKEN908_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:3: ( 'FW' TOKEN -> ^( 'FW' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:4: 'FW' TOKEN
            {
            string_literal907=(Token)match(input,149,FOLLOW_149_in_fw4927_static.FOLLOW_149_in_fw4927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal907);

            TOKEN908=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_fw4929_static.FOLLOW_TOKEN_in_fw4929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN908);



            // AST REWRITE
            // elements: 149, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 518:15: -> ^( 'FW' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:518:18: ^( 'FW' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_149.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, fw_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fw"

    public static class in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "in"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:1: in : 'IN' TOKEN -> ^( 'IN' TOKEN ) ;
    public final ChemicalChunkerParser.in_return in() throws RecognitionException {
        ChemicalChunkerParser.in_return retval = new ChemicalChunkerParser.in_return();
        retval.start = input.LT(1);
        int in_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal909=null;
        Token TOKEN910=null;

        Object string_literal909_tree=null;
        Object TOKEN910_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:3: ( 'IN' TOKEN -> ^( 'IN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:4: 'IN' TOKEN
            {
            string_literal909=(Token)match(input,150,FOLLOW_150_in_in4944_static.FOLLOW_150_in_in4944); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal909);

            TOKEN910=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_in4946_static.FOLLOW_TOKEN_in_in4946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN910);



            // AST REWRITE
            // elements: 150, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 521:15: -> ^( 'IN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:521:18: ^( 'IN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_150.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "in"

    public static class jj_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jj"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:1: jj : 'JJ' TOKEN -> ^( 'JJ' TOKEN ) ;
    public final ChemicalChunkerParser.jj_return jj() throws RecognitionException {
        ChemicalChunkerParser.jj_return retval = new ChemicalChunkerParser.jj_return();
        retval.start = input.LT(1);
        int jj_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal911=null;
        Token TOKEN912=null;

        Object string_literal911_tree=null;
        Object TOKEN912_tree=null;
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:3: ( 'JJ' TOKEN -> ^( 'JJ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:4: 'JJ' TOKEN
            {
            string_literal911=(Token)match(input,151,FOLLOW_151_in_jj4961_static.FOLLOW_151_in_jj4961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal911);

            TOKEN912=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jj4963_static.FOLLOW_TOKEN_in_jj4963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN912);



            // AST REWRITE
            // elements: 151, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:15: -> ^( 'JJ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:524:18: ^( 'JJ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_151.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, jj_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jj"

    public static class jjr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:527:1: jjr : 'JJR' TOKEN -> ^( 'JJR' TOKEN ) ;
    public final ChemicalChunkerParser.jjr_return jjr() throws RecognitionException {
        ChemicalChunkerParser.jjr_return retval = new ChemicalChunkerParser.jjr_return();
        retval.start = input.LT(1);
        int jjr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal913=null;
        Token TOKEN914=null;

        Object string_literal913_tree=null;
        Object TOKEN914_tree=null;
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:527:4: ( 'JJR' TOKEN -> ^( 'JJR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:527:5: 'JJR' TOKEN
            {
            string_literal913=(Token)match(input,152,FOLLOW_152_in_jjr4978_static.FOLLOW_152_in_jjr4978); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_152.add(string_literal913);

            TOKEN914=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjr4980_static.FOLLOW_TOKEN_in_jjr4980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN914);



            // AST REWRITE
            // elements: 152, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 527:17: -> ^( 'JJR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:527:20: ^( 'JJR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_152.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, jjr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjr"

    public static class jjs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "jjs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:1: jjs : 'JJS' TOKEN -> ^( 'JJS' TOKEN ) ;
    public final ChemicalChunkerParser.jjs_return jjs() throws RecognitionException {
        ChemicalChunkerParser.jjs_return retval = new ChemicalChunkerParser.jjs_return();
        retval.start = input.LT(1);
        int jjs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal915=null;
        Token TOKEN916=null;

        Object string_literal915_tree=null;
        Object TOKEN916_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:4: ( 'JJS' TOKEN -> ^( 'JJS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:5: 'JJS' TOKEN
            {
            string_literal915=(Token)match(input,153,FOLLOW_153_in_jjs4995_static.FOLLOW_153_in_jjs4995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal915);

            TOKEN916=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_jjs4997_static.FOLLOW_TOKEN_in_jjs4997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN916);



            // AST REWRITE
            // elements: TOKEN, 153
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 530:17: -> ^( 'JJS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:530:20: ^( 'JJS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_153.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, jjs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "jjs"

    public static class ls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ls"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:1: ls : 'LS' TOKEN -> ^( 'LS' TOKEN ) ;
    public final ChemicalChunkerParser.ls_return ls() throws RecognitionException {
        ChemicalChunkerParser.ls_return retval = new ChemicalChunkerParser.ls_return();
        retval.start = input.LT(1);
        int ls_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal917=null;
        Token TOKEN918=null;

        Object string_literal917_tree=null;
        Object TOKEN918_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_154=new RewriteRuleTokenStream(adaptor,"token 154");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:3: ( 'LS' TOKEN -> ^( 'LS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:4: 'LS' TOKEN
            {
            string_literal917=(Token)match(input,154,FOLLOW_154_in_ls5012_static.FOLLOW_154_in_ls5012); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_154.add(string_literal917);

            TOKEN918=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_ls5014_static.FOLLOW_TOKEN_in_ls5014); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN918);



            // AST REWRITE
            // elements: TOKEN, 154
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 533:15: -> ^( 'LS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:533:18: ^( 'LS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_154.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, ls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ls"

    public static class md_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "md"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:1: md : 'MD' TOKEN -> ^( 'MD' TOKEN ) ;
    public final ChemicalChunkerParser.md_return md() throws RecognitionException {
        ChemicalChunkerParser.md_return retval = new ChemicalChunkerParser.md_return();
        retval.start = input.LT(1);
        int md_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal919=null;
        Token TOKEN920=null;

        Object string_literal919_tree=null;
        Object TOKEN920_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:3: ( 'MD' TOKEN -> ^( 'MD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:4: 'MD' TOKEN
            {
            string_literal919=(Token)match(input,155,FOLLOW_155_in_md5029_static.FOLLOW_155_in_md5029); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal919);

            TOKEN920=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_md5031_static.FOLLOW_TOKEN_in_md5031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN920);



            // AST REWRITE
            // elements: TOKEN, 155
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 536:15: -> ^( 'MD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:536:18: ^( 'MD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_155.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, md_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "md"

    public static class nn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:1: nn : 'NN' TOKEN -> ^( 'NN' TOKEN ) ;
    public final ChemicalChunkerParser.nn_return nn() throws RecognitionException {
        ChemicalChunkerParser.nn_return retval = new ChemicalChunkerParser.nn_return();
        retval.start = input.LT(1);
        int nn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal921=null;
        Token TOKEN922=null;

        Object string_literal921_tree=null;
        Object TOKEN922_tree=null;
        RewriteRuleTokenStream stream_156=new RewriteRuleTokenStream(adaptor,"token 156");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:3: ( 'NN' TOKEN -> ^( 'NN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:4: 'NN' TOKEN
            {
            string_literal921=(Token)match(input,156,FOLLOW_156_in_nn5046_static.FOLLOW_156_in_nn5046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_156.add(string_literal921);

            TOKEN922=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nn5048_static.FOLLOW_TOKEN_in_nn5048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN922);



            // AST REWRITE
            // elements: 156, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 539:15: -> ^( 'NN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:539:18: ^( 'NN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_156.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, nn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nn"

    public static class nns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nns"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:542:1: nns : 'NNS' TOKEN -> ^( 'NNS' TOKEN ) ;
    public final ChemicalChunkerParser.nns_return nns() throws RecognitionException {
        ChemicalChunkerParser.nns_return retval = new ChemicalChunkerParser.nns_return();
        retval.start = input.LT(1);
        int nns_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal923=null;
        Token TOKEN924=null;

        Object string_literal923_tree=null;
        Object TOKEN924_tree=null;
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:542:4: ( 'NNS' TOKEN -> ^( 'NNS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:542:5: 'NNS' TOKEN
            {
            string_literal923=(Token)match(input,157,FOLLOW_157_in_nns5063_static.FOLLOW_157_in_nns5063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_157.add(string_literal923);

            TOKEN924=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nns5065_static.FOLLOW_TOKEN_in_nns5065); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN924);



            // AST REWRITE
            // elements: 157, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 542:17: -> ^( 'NNS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:542:20: ^( 'NNS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_157.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, nns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nns"

    public static class nnp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:545:1: nnp : 'NNP' TOKEN -> ^( 'NNP' TOKEN ) ;
    public final ChemicalChunkerParser.nnp_return nnp() throws RecognitionException {
        ChemicalChunkerParser.nnp_return retval = new ChemicalChunkerParser.nnp_return();
        retval.start = input.LT(1);
        int nnp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal925=null;
        Token TOKEN926=null;

        Object string_literal925_tree=null;
        Object TOKEN926_tree=null;
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:545:4: ( 'NNP' TOKEN -> ^( 'NNP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:545:5: 'NNP' TOKEN
            {
            string_literal925=(Token)match(input,158,FOLLOW_158_in_nnp5080_static.FOLLOW_158_in_nnp5080); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_158.add(string_literal925);

            TOKEN926=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnp5082_static.FOLLOW_TOKEN_in_nnp5082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN926);



            // AST REWRITE
            // elements: 158, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 545:17: -> ^( 'NNP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:545:20: ^( 'NNP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_158.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, nnp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnp"

    public static class nnps_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nnps"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:1: nnps : 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) ;
    public final ChemicalChunkerParser.nnps_return nnps() throws RecognitionException {
        ChemicalChunkerParser.nnps_return retval = new ChemicalChunkerParser.nnps_return();
        retval.start = input.LT(1);
        int nnps_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal927=null;
        Token TOKEN928=null;

        Object string_literal927_tree=null;
        Object TOKEN928_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:5: ( 'NNPS' TOKEN -> ^( 'NNPS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:6: 'NNPS' TOKEN
            {
            string_literal927=(Token)match(input,159,FOLLOW_159_in_nnps5097_static.FOLLOW_159_in_nnps5097); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal927);

            TOKEN928=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_nnps5099_static.FOLLOW_TOKEN_in_nnps5099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN928);



            // AST REWRITE
            // elements: TOKEN, 159
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 548:19: -> ^( 'NNPS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:548:22: ^( 'NNPS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, nnps_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nnps"

    public static class pdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:1: pdt : 'PDT' TOKEN -> ^( 'PDT' TOKEN ) ;
    public final ChemicalChunkerParser.pdt_return pdt() throws RecognitionException {
        ChemicalChunkerParser.pdt_return retval = new ChemicalChunkerParser.pdt_return();
        retval.start = input.LT(1);
        int pdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal929=null;
        Token TOKEN930=null;

        Object string_literal929_tree=null;
        Object TOKEN930_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:4: ( 'PDT' TOKEN -> ^( 'PDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:5: 'PDT' TOKEN
            {
            string_literal929=(Token)match(input,160,FOLLOW_160_in_pdt5114_static.FOLLOW_160_in_pdt5114); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_160.add(string_literal929);

            TOKEN930=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pdt5116_static.FOLLOW_TOKEN_in_pdt5116); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN930);



            // AST REWRITE
            // elements: 160, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 551:17: -> ^( 'PDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:551:20: ^( 'PDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_160.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, pdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pdt"

    public static class pos_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pos"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:1: pos : 'POS' TOKEN -> ^( 'POS' TOKEN ) ;
    public final ChemicalChunkerParser.pos_return pos() throws RecognitionException {
        ChemicalChunkerParser.pos_return retval = new ChemicalChunkerParser.pos_return();
        retval.start = input.LT(1);
        int pos_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal931=null;
        Token TOKEN932=null;

        Object string_literal931_tree=null;
        Object TOKEN932_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:4: ( 'POS' TOKEN -> ^( 'POS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:5: 'POS' TOKEN
            {
            string_literal931=(Token)match(input,161,FOLLOW_161_in_pos5131_static.FOLLOW_161_in_pos5131); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(string_literal931);

            TOKEN932=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_pos5133_static.FOLLOW_TOKEN_in_pos5133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN932);



            // AST REWRITE
            // elements: TOKEN, 161
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 554:17: -> ^( 'POS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:554:20: ^( 'POS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_161.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, pos_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pos"

    public static class prp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:1: prp : 'PRP' TOKEN -> ^( 'PRP' TOKEN ) ;
    public final ChemicalChunkerParser.prp_return prp() throws RecognitionException {
        ChemicalChunkerParser.prp_return retval = new ChemicalChunkerParser.prp_return();
        retval.start = input.LT(1);
        int prp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal933=null;
        Token TOKEN934=null;

        Object string_literal933_tree=null;
        Object TOKEN934_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:4: ( 'PRP' TOKEN -> ^( 'PRP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:5: 'PRP' TOKEN
            {
            string_literal933=(Token)match(input,162,FOLLOW_162_in_prp5148_static.FOLLOW_162_in_prp5148); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(string_literal933);

            TOKEN934=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp5150_static.FOLLOW_TOKEN_in_prp5150); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN934);



            // AST REWRITE
            // elements: 162, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 557:17: -> ^( 'PRP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:557:20: ^( 'PRP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_162.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, prp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp"

    public static class prp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:1: prp_poss : 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) ;
    public final ChemicalChunkerParser.prp_poss_return prp_poss() throws RecognitionException {
        ChemicalChunkerParser.prp_poss_return retval = new ChemicalChunkerParser.prp_poss_return();
        retval.start = input.LT(1);
        int prp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal935=null;
        Token TOKEN936=null;

        Object string_literal935_tree=null;
        Object TOKEN936_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:9: ( 'PRP$' TOKEN -> ^( 'PRP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:10: 'PRP$' TOKEN
            {
            string_literal935=(Token)match(input,163,FOLLOW_163_in_prp_poss5165_static.FOLLOW_163_in_prp_poss5165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal935);

            TOKEN936=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_prp_poss5167_static.FOLLOW_TOKEN_in_prp_poss5167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN936);



            // AST REWRITE
            // elements: TOKEN, 163
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 560:23: -> ^( 'PRP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:560:26: ^( 'PRP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_163.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, prp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "prp_poss"

    public static class rb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:563:1: rb : 'RB' TOKEN -> ^( 'RB' TOKEN ) ;
    public final ChemicalChunkerParser.rb_return rb() throws RecognitionException {
        ChemicalChunkerParser.rb_return retval = new ChemicalChunkerParser.rb_return();
        retval.start = input.LT(1);
        int rb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal937=null;
        Token TOKEN938=null;

        Object string_literal937_tree=null;
        Object TOKEN938_tree=null;
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:563:3: ( 'RB' TOKEN -> ^( 'RB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:563:4: 'RB' TOKEN
            {
            string_literal937=(Token)match(input,164,FOLLOW_164_in_rb5182_static.FOLLOW_164_in_rb5182); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_164.add(string_literal937);

            TOKEN938=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rb5184_static.FOLLOW_TOKEN_in_rb5184); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN938);



            // AST REWRITE
            // elements: TOKEN, 164
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 563:15: -> ^( 'RB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:563:18: ^( 'RB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_164.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, rb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rb"

    public static class rbr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbr"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:566:1: rbr : 'RBR' TOKEN -> ^( 'RBR' TOKEN ) ;
    public final ChemicalChunkerParser.rbr_return rbr() throws RecognitionException {
        ChemicalChunkerParser.rbr_return retval = new ChemicalChunkerParser.rbr_return();
        retval.start = input.LT(1);
        int rbr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal939=null;
        Token TOKEN940=null;

        Object string_literal939_tree=null;
        Object TOKEN940_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:566:4: ( 'RBR' TOKEN -> ^( 'RBR' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:566:5: 'RBR' TOKEN
            {
            string_literal939=(Token)match(input,165,FOLLOW_165_in_rbr5199_static.FOLLOW_165_in_rbr5199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal939);

            TOKEN940=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbr5201_static.FOLLOW_TOKEN_in_rbr5201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN940);



            // AST REWRITE
            // elements: TOKEN, 165
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 566:17: -> ^( 'RBR' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:566:20: ^( 'RBR' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_165.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, rbr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbr"

    public static class rbs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rbs"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:569:1: rbs : 'RBS' TOKEN -> ^( 'RBS' TOKEN ) ;
    public final ChemicalChunkerParser.rbs_return rbs() throws RecognitionException {
        ChemicalChunkerParser.rbs_return retval = new ChemicalChunkerParser.rbs_return();
        retval.start = input.LT(1);
        int rbs_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal941=null;
        Token TOKEN942=null;

        Object string_literal941_tree=null;
        Object TOKEN942_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:569:4: ( 'RBS' TOKEN -> ^( 'RBS' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:569:5: 'RBS' TOKEN
            {
            string_literal941=(Token)match(input,166,FOLLOW_166_in_rbs5216_static.FOLLOW_166_in_rbs5216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal941);

            TOKEN942=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rbs5218_static.FOLLOW_TOKEN_in_rbs5218); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN942);



            // AST REWRITE
            // elements: TOKEN, 166
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 569:17: -> ^( 'RBS' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:569:20: ^( 'RBS' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_166.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, rbs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rbs"

    public static class rp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:572:1: rp : 'RP' TOKEN -> ^( 'RP' TOKEN ) ;
    public final ChemicalChunkerParser.rp_return rp() throws RecognitionException {
        ChemicalChunkerParser.rp_return retval = new ChemicalChunkerParser.rp_return();
        retval.start = input.LT(1);
        int rp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal943=null;
        Token TOKEN944=null;

        Object string_literal943_tree=null;
        Object TOKEN944_tree=null;
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:572:3: ( 'RP' TOKEN -> ^( 'RP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:572:4: 'RP' TOKEN
            {
            string_literal943=(Token)match(input,167,FOLLOW_167_in_rp5233_static.FOLLOW_167_in_rp5233); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal943);

            TOKEN944=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_rp5235_static.FOLLOW_TOKEN_in_rp5235); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN944);



            // AST REWRITE
            // elements: 167, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 572:15: -> ^( 'RP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:572:18: ^( 'RP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_167.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, rp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rp"

    public static class sym_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sym"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:575:1: sym : 'SYM' TOKEN -> ^( 'SYM' TOKEN ) ;
    public final ChemicalChunkerParser.sym_return sym() throws RecognitionException {
        ChemicalChunkerParser.sym_return retval = new ChemicalChunkerParser.sym_return();
        retval.start = input.LT(1);
        int sym_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal945=null;
        Token TOKEN946=null;

        Object string_literal945_tree=null;
        Object TOKEN946_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:575:4: ( 'SYM' TOKEN -> ^( 'SYM' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:575:5: 'SYM' TOKEN
            {
            string_literal945=(Token)match(input,168,FOLLOW_168_in_sym5250_static.FOLLOW_168_in_sym5250); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal945);

            TOKEN946=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_sym5252_static.FOLLOW_TOKEN_in_sym5252); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN946);



            // AST REWRITE
            // elements: TOKEN, 168
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 575:17: -> ^( 'SYM' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:575:20: ^( 'SYM' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_168.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, sym_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sym"

    public static class to_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:578:1: to : 'TO' TOKEN -> ^( 'TO' TOKEN ) ;
    public final ChemicalChunkerParser.to_return to() throws RecognitionException {
        ChemicalChunkerParser.to_return retval = new ChemicalChunkerParser.to_return();
        retval.start = input.LT(1);
        int to_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal947=null;
        Token TOKEN948=null;

        Object string_literal947_tree=null;
        Object TOKEN948_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:578:3: ( 'TO' TOKEN -> ^( 'TO' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:578:4: 'TO' TOKEN
            {
            string_literal947=(Token)match(input,169,FOLLOW_169_in_to5267_static.FOLLOW_169_in_to5267); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal947);

            TOKEN948=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_to5269_static.FOLLOW_TOKEN_in_to5269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN948);



            // AST REWRITE
            // elements: TOKEN, 169
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 578:15: -> ^( 'TO' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:578:18: ^( 'TO' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_169.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, to_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to"

    public static class uh_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "uh"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:1: uh : 'UH' TOKEN -> ^( 'UH' TOKEN ) ;
    public final ChemicalChunkerParser.uh_return uh() throws RecognitionException {
        ChemicalChunkerParser.uh_return retval = new ChemicalChunkerParser.uh_return();
        retval.start = input.LT(1);
        int uh_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal949=null;
        Token TOKEN950=null;

        Object string_literal949_tree=null;
        Object TOKEN950_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:3: ( 'UH' TOKEN -> ^( 'UH' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:4: 'UH' TOKEN
            {
            string_literal949=(Token)match(input,170,FOLLOW_170_in_uh5284_static.FOLLOW_170_in_uh5284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal949);

            TOKEN950=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_uh5286_static.FOLLOW_TOKEN_in_uh5286); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN950);



            // AST REWRITE
            // elements: 170, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 581:15: -> ^( 'UH' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:581:18: ^( 'UH' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_170.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, uh_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "uh"

    public static class vb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:1: vb : 'VB' TOKEN -> ^( 'VB' TOKEN ) ;
    public final ChemicalChunkerParser.vb_return vb() throws RecognitionException {
        ChemicalChunkerParser.vb_return retval = new ChemicalChunkerParser.vb_return();
        retval.start = input.LT(1);
        int vb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal951=null;
        Token TOKEN952=null;

        Object string_literal951_tree=null;
        Object TOKEN952_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:3: ( 'VB' TOKEN -> ^( 'VB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:4: 'VB' TOKEN
            {
            string_literal951=(Token)match(input,171,FOLLOW_171_in_vb5301_static.FOLLOW_171_in_vb5301); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal951);

            TOKEN952=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vb5303_static.FOLLOW_TOKEN_in_vb5303); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN952);



            // AST REWRITE
            // elements: TOKEN, 171
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 584:15: -> ^( 'VB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:584:18: ^( 'VB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_171.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, vb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vb"

    public static class vbd_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbd"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:1: vbd : 'VBD' TOKEN -> ^( 'VBD' TOKEN ) ;
    public final ChemicalChunkerParser.vbd_return vbd() throws RecognitionException {
        ChemicalChunkerParser.vbd_return retval = new ChemicalChunkerParser.vbd_return();
        retval.start = input.LT(1);
        int vbd_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal953=null;
        Token TOKEN954=null;

        Object string_literal953_tree=null;
        Object TOKEN954_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:4: ( 'VBD' TOKEN -> ^( 'VBD' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:5: 'VBD' TOKEN
            {
            string_literal953=(Token)match(input,172,FOLLOW_172_in_vbd5318_static.FOLLOW_172_in_vbd5318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal953);

            TOKEN954=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbd5320_static.FOLLOW_TOKEN_in_vbd5320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN954);



            // AST REWRITE
            // elements: TOKEN, 172
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 587:17: -> ^( 'VBD' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:587:20: ^( 'VBD' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_172.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, vbd_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbd"

    public static class vbg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbg"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:1: vbg : 'VBG' TOKEN -> ^( 'VBG' TOKEN ) ;
    public final ChemicalChunkerParser.vbg_return vbg() throws RecognitionException {
        ChemicalChunkerParser.vbg_return retval = new ChemicalChunkerParser.vbg_return();
        retval.start = input.LT(1);
        int vbg_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal955=null;
        Token TOKEN956=null;

        Object string_literal955_tree=null;
        Object TOKEN956_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:4: ( 'VBG' TOKEN -> ^( 'VBG' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:5: 'VBG' TOKEN
            {
            string_literal955=(Token)match(input,173,FOLLOW_173_in_vbg5335_static.FOLLOW_173_in_vbg5335); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(string_literal955);

            TOKEN956=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbg5337_static.FOLLOW_TOKEN_in_vbg5337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN956);



            // AST REWRITE
            // elements: 173, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 590:17: -> ^( 'VBG' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:590:20: ^( 'VBG' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_173.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, vbg_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbg"

    public static class vbn_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbn"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:1: vbn : 'VBN' TOKEN -> ^( 'VBN' TOKEN ) ;
    public final ChemicalChunkerParser.vbn_return vbn() throws RecognitionException {
        ChemicalChunkerParser.vbn_return retval = new ChemicalChunkerParser.vbn_return();
        retval.start = input.LT(1);
        int vbn_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal957=null;
        Token TOKEN958=null;

        Object string_literal957_tree=null;
        Object TOKEN958_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:4: ( 'VBN' TOKEN -> ^( 'VBN' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:5: 'VBN' TOKEN
            {
            string_literal957=(Token)match(input,174,FOLLOW_174_in_vbn5352_static.FOLLOW_174_in_vbn5352); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal957);

            TOKEN958=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbn5354_static.FOLLOW_TOKEN_in_vbn5354); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN958);



            // AST REWRITE
            // elements: TOKEN, 174
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 593:17: -> ^( 'VBN' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:593:20: ^( 'VBN' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_174.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, vbn_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbn"

    public static class vbp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:596:1: vbp : 'VBP' TOKEN -> ^( 'VBP' TOKEN ) ;
    public final ChemicalChunkerParser.vbp_return vbp() throws RecognitionException {
        ChemicalChunkerParser.vbp_return retval = new ChemicalChunkerParser.vbp_return();
        retval.start = input.LT(1);
        int vbp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal959=null;
        Token TOKEN960=null;

        Object string_literal959_tree=null;
        Object TOKEN960_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:596:4: ( 'VBP' TOKEN -> ^( 'VBP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:596:5: 'VBP' TOKEN
            {
            string_literal959=(Token)match(input,175,FOLLOW_175_in_vbp5369_static.FOLLOW_175_in_vbp5369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal959);

            TOKEN960=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbp5371_static.FOLLOW_TOKEN_in_vbp5371); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN960);



            // AST REWRITE
            // elements: 175, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 596:17: -> ^( 'VBP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:596:20: ^( 'VBP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_175.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 253, vbp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbp"

    public static class vbz_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "vbz"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:599:1: vbz : 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) ;
    public final ChemicalChunkerParser.vbz_return vbz() throws RecognitionException {
        ChemicalChunkerParser.vbz_return retval = new ChemicalChunkerParser.vbz_return();
        retval.start = input.LT(1);
        int vbz_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal961=null;
        Token TOKEN962=null;

        Object string_literal961_tree=null;
        Object TOKEN962_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:599:4: ( 'VBZ' TOKEN -> ^( 'VBZ' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:599:5: 'VBZ' TOKEN
            {
            string_literal961=(Token)match(input,176,FOLLOW_176_in_vbz5386_static.FOLLOW_176_in_vbz5386); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal961);

            TOKEN962=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_vbz5388_static.FOLLOW_TOKEN_in_vbz5388); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN962);



            // AST REWRITE
            // elements: TOKEN, 176
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 599:17: -> ^( 'VBZ' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:599:20: ^( 'VBZ' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_176.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 254, vbz_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "vbz"

    public static class wdt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wdt"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:602:1: wdt : 'WDT' TOKEN -> ^( 'WDT' TOKEN ) ;
    public final ChemicalChunkerParser.wdt_return wdt() throws RecognitionException {
        ChemicalChunkerParser.wdt_return retval = new ChemicalChunkerParser.wdt_return();
        retval.start = input.LT(1);
        int wdt_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal963=null;
        Token TOKEN964=null;

        Object string_literal963_tree=null;
        Object TOKEN964_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:602:4: ( 'WDT' TOKEN -> ^( 'WDT' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:602:5: 'WDT' TOKEN
            {
            string_literal963=(Token)match(input,177,FOLLOW_177_in_wdt5403_static.FOLLOW_177_in_wdt5403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal963);

            TOKEN964=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wdt5405_static.FOLLOW_TOKEN_in_wdt5405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN964);



            // AST REWRITE
            // elements: TOKEN, 177
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 602:17: -> ^( 'WDT' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:602:20: ^( 'WDT' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_177.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 255, wdt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wdt"

    public static class wp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:605:1: wp : 'WP' TOKEN -> ^( 'WP' TOKEN ) ;
    public final ChemicalChunkerParser.wp_return wp() throws RecognitionException {
        ChemicalChunkerParser.wp_return retval = new ChemicalChunkerParser.wp_return();
        retval.start = input.LT(1);
        int wp_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal965=null;
        Token TOKEN966=null;

        Object string_literal965_tree=null;
        Object TOKEN966_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:605:3: ( 'WP' TOKEN -> ^( 'WP' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:605:4: 'WP' TOKEN
            {
            string_literal965=(Token)match(input,178,FOLLOW_178_in_wp5420_static.FOLLOW_178_in_wp5420); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal965);

            TOKEN966=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp5422_static.FOLLOW_TOKEN_in_wp5422); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN966);



            // AST REWRITE
            // elements: 178, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 605:15: -> ^( 'WP' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:605:18: ^( 'WP' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_178.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 256, wp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp"

    public static class wp_poss_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wp_poss"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:608:1: wp_poss : 'WP$' TOKEN -> ^( 'WP$' TOKEN ) ;
    public final ChemicalChunkerParser.wp_poss_return wp_poss() throws RecognitionException {
        ChemicalChunkerParser.wp_poss_return retval = new ChemicalChunkerParser.wp_poss_return();
        retval.start = input.LT(1);
        int wp_poss_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal967=null;
        Token TOKEN968=null;

        Object string_literal967_tree=null;
        Object TOKEN968_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:608:8: ( 'WP$' TOKEN -> ^( 'WP$' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:608:9: 'WP$' TOKEN
            {
            string_literal967=(Token)match(input,179,FOLLOW_179_in_wp_poss5437_static.FOLLOW_179_in_wp_poss5437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal967);

            TOKEN968=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wp_poss5439_static.FOLLOW_TOKEN_in_wp_poss5439); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN968);



            // AST REWRITE
            // elements: 179, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 608:21: -> ^( 'WP$' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:608:24: ^( 'WP$' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_179.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 257, wp_poss_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wp_poss"

    public static class wrb_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "wrb"
    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:611:1: wrb : 'WRB' TOKEN -> ^( 'WRB' TOKEN ) ;
    public final ChemicalChunkerParser.wrb_return wrb() throws RecognitionException {
        ChemicalChunkerParser.wrb_return retval = new ChemicalChunkerParser.wrb_return();
        retval.start = input.LT(1);
        int wrb_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal969=null;
        Token TOKEN970=null;

        Object string_literal969_tree=null;
        Object TOKEN970_tree=null;
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_TOKEN=new RewriteRuleTokenStream(adaptor,"token TOKEN");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:611:4: ( 'WRB' TOKEN -> ^( 'WRB' TOKEN ) )
            // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:611:5: 'WRB' TOKEN
            {
            string_literal969=(Token)match(input,180,FOLLOW_180_in_wrb5454_static.FOLLOW_180_in_wrb5454); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(string_literal969);

            TOKEN970=(Token)match(input,TOKEN,FOLLOW_TOKEN_in_wrb5456_static.FOLLOW_TOKEN_in_wrb5456); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_TOKEN.add(TOKEN970);



            // AST REWRITE
            // elements: 180, TOKEN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 611:17: -> ^( 'WRB' TOKEN )
            {
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:611:20: ^( 'WRB' TOKEN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_180.nextNode(), root_1);

                adaptor.addChild(root_1, stream_TOKEN.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 258, wrb_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "wrb"

    // $ANTLR start synpred2_ChemicalChunker
    public final void synpred2_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:14: ( sentenceStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:14: sentenceStructure
        {
        pushFollow(FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker223_static.FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker223);
        sentenceStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_ChemicalChunker

    // $ANTLR start synpred3_ChemicalChunker
    public final void synpred3_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:32: ( unmatchedPhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:81:32: unmatchedPhrase
        {
        pushFollow(FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker225_static.FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker225);
        unmatchedPhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_ChemicalChunker

    // $ANTLR start synpred5_ChemicalChunker
    public final void synpred5_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:22: ( nounphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:22: nounphrase
        {
        pushFollow(FOLLOW_nounphrase_in_synpred5_ChemicalChunker239_static.FOLLOW_nounphrase_in_synpred5_ChemicalChunker239);
        nounphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_ChemicalChunker

    // $ANTLR start synpred6_ChemicalChunker
    public final void synpred6_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:33: ( verbphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:33: verbphrase
        {
        pushFollow(FOLLOW_verbphrase_in_synpred6_ChemicalChunker241_static.FOLLOW_verbphrase_in_synpred6_ChemicalChunker241);
        verbphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_ChemicalChunker

    // $ANTLR start synpred7_ChemicalChunker
    public final void synpred7_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:44: ( prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:44: prepphrase
        {
        pushFollow(FOLLOW_prepphrase_in_synpred7_ChemicalChunker243_static.FOLLOW_prepphrase_in_synpred7_ChemicalChunker243);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_ChemicalChunker

    // $ANTLR start synpred8_ChemicalChunker
    public final void synpred8_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:55: ( prepphraseAfter )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:55: prepphraseAfter
        {
        pushFollow(FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker245_static.FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker245);
        prepphraseAfter();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_ChemicalChunker

    // $ANTLR start synpred9_ChemicalChunker
    public final void synpred9_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:74: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:74: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred9_ChemicalChunker250_static.FOLLOW_advAdj_in_synpred9_ChemicalChunker250);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_ChemicalChunker

    // $ANTLR start synpred10_ChemicalChunker
    public final void synpred10_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:81: ( colon )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:81: colon
        {
        pushFollow(FOLLOW_colon_in_synpred10_ChemicalChunker252_static.FOLLOW_colon_in_synpred10_ChemicalChunker252);
        colon();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_ChemicalChunker

    // $ANTLR start synpred11_ChemicalChunker
    public final void synpred11_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:90: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:90: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred11_ChemicalChunker257_static.FOLLOW_conjunction_in_synpred11_ChemicalChunker257);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_ChemicalChunker

    // $ANTLR start synpred12_ChemicalChunker
    public final void synpred12_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:102: ( rbconj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:102: rbconj
        {
        pushFollow(FOLLOW_rbconj_in_synpred12_ChemicalChunker259_static.FOLLOW_rbconj_in_synpred12_ChemicalChunker259);
        rbconj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_ChemicalChunker

    // $ANTLR start synpred13_ChemicalChunker
    public final void synpred13_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:109: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:83:109: comma
        {
        pushFollow(FOLLOW_comma_in_synpred13_ChemicalChunker261_static.FOLLOW_comma_in_synpred13_ChemicalChunker261);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_ChemicalChunker

    // $ANTLR start synpred84_ChemicalChunker
    public final void synpred84_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:4: ( nounphraseStructure1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:98:4: nounphraseStructure1
        {
        pushFollow(FOLLOW_nounphraseStructure1_in_synpred84_ChemicalChunker467_static.FOLLOW_nounphraseStructure1_in_synpred84_ChemicalChunker467);
        nounphraseStructure1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_ChemicalChunker

    // $ANTLR start synpred86_ChemicalChunker
    public final void synpred86_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:11: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:11: dt
        {
        pushFollow(FOLLOW_dt_in_synpred86_ChemicalChunker498_static.FOLLOW_dt_in_synpred86_ChemicalChunker498);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred86_ChemicalChunker

    // $ANTLR start synpred87_ChemicalChunker
    public final void synpred87_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred87_ChemicalChunker505_static.FOLLOW_conjunction_in_synpred87_ChemicalChunker505);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred87_ChemicalChunker

    // $ANTLR start synpred88_ChemicalChunker
    public final void synpred88_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: ( ( conjunction )* nounphraseContent )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: ( conjunction )* nounphraseContent
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:35: ( conjunction )*
        loop193:
        do {
            int alt193=2;
            alt193 = dfa193.predict(input);
            switch (alt193) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred88_ChemicalChunker505_static.FOLLOW_conjunction_in_synpred88_ChemicalChunker505);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop193;
            }
        } while (true);

        pushFollow(FOLLOW_nounphraseContent_in_synpred88_ChemicalChunker508_static.FOLLOW_nounphraseContent_in_synpred88_ChemicalChunker508);
        nounphraseContent();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred88_ChemicalChunker

    // $ANTLR start synpred89_ChemicalChunker
    public final void synpred89_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:69: ( prepphraseOf )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:69: prepphraseOf
        {
        pushFollow(FOLLOW_prepphraseOf_in_synpred89_ChemicalChunker513_static.FOLLOW_prepphraseOf_in_synpred89_ChemicalChunker513);
        prepphraseOf();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_ChemicalChunker

    // $ANTLR start synpred90_ChemicalChunker
    public final void synpred90_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:83: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:102:83: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred90_ChemicalChunker516_static.FOLLOW_prepphraseIN_in_synpred90_ChemicalChunker516);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_ChemicalChunker

    // $ANTLR start synpred91_ChemicalChunker
    public final void synpred91_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:4: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:4: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred91_ChemicalChunker528_static.FOLLOW_advAdj_in_synpred91_ChemicalChunker528);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred91_ChemicalChunker

    // $ANTLR start synpred92_ChemicalChunker
    public final void synpred92_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:14: ( dissolvePhrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:14: dissolvePhrase
        {
        pushFollow(FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker533_static.FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker533);
        dissolvePhrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_ChemicalChunker

    // $ANTLR start synpred93_ChemicalChunker
    public final void synpred93_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:29: ( ratio )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:29: ratio
        {
        pushFollow(FOLLOW_ratio_in_synpred93_ChemicalChunker535_static.FOLLOW_ratio_in_synpred93_ChemicalChunker535);
        ratio();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred93_ChemicalChunker

    // $ANTLR start synpred94_ChemicalChunker
    public final void synpred94_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:35: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:35: noun
        {
        pushFollow(FOLLOW_noun_in_synpred94_ChemicalChunker537_static.FOLLOW_noun_in_synpred94_ChemicalChunker537);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_ChemicalChunker

    // $ANTLR start synpred95_ChemicalChunker
    public final void synpred95_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:40: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:105:40: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred95_ChemicalChunker539_static.FOLLOW_numeric_in_synpred95_ChemicalChunker539);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred95_ChemicalChunker

    // $ANTLR start synpred96_ChemicalChunker
    public final void synpred96_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:5: ( dissolveStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:108:5: dissolveStructure
        {
        pushFollow(FOLLOW_dissolveStructure_in_synpred96_ChemicalChunker551_static.FOLLOW_dissolveStructure_in_synpred96_ChemicalChunker551);
        dissolveStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred96_ChemicalChunker

    // $ANTLR start synpred97_ChemicalChunker
    public final void synpred97_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:4: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:4: adj
        {
        pushFollow(FOLLOW_adj_in_synpred97_ChemicalChunker582_static.FOLLOW_adj_in_synpred97_ChemicalChunker582);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_ChemicalChunker

    // $ANTLR start synpred100_ChemicalChunker
    public final void synpred100_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:33: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:33: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred100_ChemicalChunker594_static.FOLLOW_molecule_in_synpred100_ChemicalChunker594);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_ChemicalChunker

    // $ANTLR start synpred101_ChemicalChunker
    public final void synpred101_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:72: ( conjunction molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:111:72: conjunction molecule
        {
        pushFollow(FOLLOW_conjunction_in_synpred101_ChemicalChunker603_static.FOLLOW_conjunction_in_synpred101_ChemicalChunker603);
        conjunction();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_molecule_in_synpred101_ChemicalChunker605_static.FOLLOW_molecule_in_synpred101_ChemicalChunker605);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_ChemicalChunker

    // $ANTLR start synpred103_ChemicalChunker
    public final void synpred103_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:16: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:16: adj
        {
        pushFollow(FOLLOW_adj_in_synpred103_ChemicalChunker622_static.FOLLOW_adj_in_synpred103_ChemicalChunker622);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_ChemicalChunker

    // $ANTLR start synpred105_ChemicalChunker
    public final void synpred105_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:27: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:114:27: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred105_ChemicalChunker629_static.FOLLOW_molecule_in_synpred105_ChemicalChunker629);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_ChemicalChunker

    // $ANTLR start synpred107_ChemicalChunker
    public final void synpred107_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:28: ( to )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:28: to
        {
        pushFollow(FOLLOW_to_in_synpred107_ChemicalChunker662_static.FOLLOW_to_in_synpred107_ChemicalChunker662);
        to();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred107_ChemicalChunker

    // $ANTLR start synpred108_ChemicalChunker
    public final void synpred108_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:32: ( inAll )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:32: inAll
        {
        pushFollow(FOLLOW_inAll_in_synpred108_ChemicalChunker665_static.FOLLOW_inAll_in_synpred108_ChemicalChunker665);
        inAll();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_ChemicalChunker

    // $ANTLR start synpred114_ChemicalChunker
    public final void synpred114_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:71: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:71: verb
        {
        pushFollow(FOLLOW_verb_in_synpred114_ChemicalChunker684_static.FOLLOW_verb_in_synpred114_ChemicalChunker684);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_ChemicalChunker

    // $ANTLR start synpred115_ChemicalChunker
    public final void synpred115_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:77: ( md )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:77: md
        {
        pushFollow(FOLLOW_md_in_synpred115_ChemicalChunker687_static.FOLLOW_md_in_synpred115_ChemicalChunker687);
        md();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred115_ChemicalChunker

    // $ANTLR start synpred116_ChemicalChunker
    public final void synpred116_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:81: ( adv )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:81: adv
        {
        pushFollow(FOLLOW_adv_in_synpred116_ChemicalChunker690_static.FOLLOW_adv_in_synpred116_ChemicalChunker690);
        adv();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_ChemicalChunker

    // $ANTLR start synpred117_ChemicalChunker
    public final void synpred117_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:86: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:86: adj
        {
        pushFollow(FOLLOW_adj_in_synpred117_ChemicalChunker693_static.FOLLOW_adj_in_synpred117_ChemicalChunker693);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred117_ChemicalChunker

    // $ANTLR start synpred118_ChemicalChunker
    public final void synpred118_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:91: ( neg )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:91: neg
        {
        pushFollow(FOLLOW_neg_in_synpred118_ChemicalChunker696_static.FOLLOW_neg_in_synpred118_ChemicalChunker696);
        neg();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred118_ChemicalChunker

    // $ANTLR start synpred119_ChemicalChunker
    public final void synpred119_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:49: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:49: ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:49: ( md )*
        loop194:
        do {
            int alt194=2;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt194=1;
                }
                break;

            }

            switch (alt194) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred119_ChemicalChunker672_static.FOLLOW_md_in_synpred119_ChemicalChunker672);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop194;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:53: ( rbconj )?
        int alt195=2;
        switch ( input.LA(1) ) {
            case 131:
                {
                alt195=1;
                }
                break;
        }

        switch (alt195) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: rbconj
                {
                pushFollow(FOLLOW_rbconj_in_synpred119_ChemicalChunker675_static.FOLLOW_rbconj_in_synpred119_ChemicalChunker675);
                rbconj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:61: ( adv )*
        loop196:
        do {
            int alt196=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt196=1;
                }
                break;

            }

            switch (alt196) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred119_ChemicalChunker678_static.FOLLOW_adv_in_synpred119_ChemicalChunker678);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop196;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:66: ( adj )?
        int alt197=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt197=1;
                }
                break;
        }

        switch (alt197) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred119_ChemicalChunker681_static.FOLLOW_adj_in_synpred119_ChemicalChunker681);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:71: ( verb )+
        int cnt198=0;
        loop198:
        do {
            int alt198=2;
            switch ( input.LA(1) ) {
            case 85:
            case 86:
            case 87:
            case 88:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
            case 101:
            case 103:
            case 104:
            case 105:
            case 106:
            case 108:
            case 110:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 118:
            case 120:
            case 121:
            case 122:
            case 124:
            case 125:
            case 127:
            case 128:
            case 129:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
                {
                alt198=1;
                }
                break;

            }

            switch (alt198) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: verb
        	    {
        	    pushFollow(FOLLOW_verb_in_synpred119_ChemicalChunker684_static.FOLLOW_verb_in_synpred119_ChemicalChunker684);
        	    verb();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt198 >= 1 ) break loop198;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(198, input);
                    throw eee;
            }
            cnt198++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:77: ( md )*
        loop199:
        do {
            int alt199=2;
            switch ( input.LA(1) ) {
            case 155:
                {
                alt199=1;
                }
                break;

            }

            switch (alt199) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: md
        	    {
        	    pushFollow(FOLLOW_md_in_synpred119_ChemicalChunker687_static.FOLLOW_md_in_synpred119_ChemicalChunker687);
        	    md();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop199;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:81: ( adv )*
        loop200:
        do {
            int alt200=2;
            switch ( input.LA(1) ) {
            case 164:
            case 165:
            case 166:
            case 167:
                {
                alt200=1;
                }
                break;

            }

            switch (alt200) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adv
        	    {
        	    pushFollow(FOLLOW_adv_in_synpred119_ChemicalChunker690_static.FOLLOW_adv_in_synpred119_ChemicalChunker690);
        	    adv();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop200;
            }
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:86: ( adj )?
        int alt201=2;
        switch ( input.LA(1) ) {
            case 39:
            case 40:
            case 45:
            case 151:
            case 152:
            case 153:
                {
                alt201=1;
                }
                break;
        }

        switch (alt201) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: adj
                {
                pushFollow(FOLLOW_adj_in_synpred119_ChemicalChunker693_static.FOLLOW_adj_in_synpred119_ChemicalChunker693);
                adj();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:91: ( neg )?
        int alt202=2;
        switch ( input.LA(1) ) {
            case 135:
                {
                alt202=1;
                }
                break;
        }

        switch (alt202) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: neg
                {
                pushFollow(FOLLOW_neg_in_synpred119_ChemicalChunker696_static.FOLLOW_neg_in_synpred119_ChemicalChunker696);
                neg();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred119_ChemicalChunker

    // $ANTLR start synpred120_ChemicalChunker
    public final void synpred120_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:99: ( inoff )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:99: inoff
        {
        pushFollow(FOLLOW_inoff_in_synpred120_ChemicalChunker702_static.FOLLOW_inoff_in_synpred120_ChemicalChunker702);
        inoff();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred120_ChemicalChunker

    // $ANTLR start synpred123_ChemicalChunker
    public final void synpred123_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:107: ( ( cc )? ( comma )? prepphrase )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:107: ( cc )? ( comma )? prepphrase
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:107: ( cc )?
        int alt203=2;
        switch ( input.LA(1) ) {
            case 145:
                {
                alt203=1;
                }
                break;
        }

        switch (alt203) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: cc
                {
                pushFollow(FOLLOW_cc_in_synpred123_ChemicalChunker706_static.FOLLOW_cc_in_synpred123_ChemicalChunker706);
                cc();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:118:111: ( comma )?
        int alt204=2;
        switch ( input.LA(1) ) {
            case 133:
                {
                alt204=1;
                }
                break;
        }

        switch (alt204) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: comma
                {
                pushFollow(FOLLOW_comma_in_synpred123_ChemicalChunker709_static.FOLLOW_comma_in_synpred123_ChemicalChunker709);
                comma();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_prepphrase_in_synpred123_ChemicalChunker712_static.FOLLOW_prepphrase_in_synpred123_ChemicalChunker712);
        prepphrase();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_ChemicalChunker

    // $ANTLR start synpred133_ChemicalChunker
    public final void synpred133_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:58: ( degassMultiVerb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:58: degassMultiVerb
        {
        pushFollow(FOLLOW_degassMultiVerb_in_synpred133_ChemicalChunker742_static.FOLLOW_degassMultiVerb_in_synpred133_ChemicalChunker742);
        degassMultiVerb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred133_ChemicalChunker

    // $ANTLR start synpred146_ChemicalChunker
    public final void synpred146_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:183: ( vbdegass )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:119:183: vbdegass
        {
        pushFollow(FOLLOW_vbdegass_in_synpred146_ChemicalChunker768_static.FOLLOW_vbdegass_in_synpred146_ChemicalChunker768);
        vbdegass();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred146_ChemicalChunker

    // $ANTLR start synpred164_ChemicalChunker
    public final void synpred164_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:24: ( dash nounStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:124:24: dash nounStructure
        {
        pushFollow(FOLLOW_dash_in_synpred164_ChemicalChunker830_static.FOLLOW_dash_in_synpred164_ChemicalChunker830);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nounStructure_in_synpred164_ChemicalChunker832_static.FOLLOW_nounStructure_in_synpred164_ChemicalChunker832);
        nounStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred164_ChemicalChunker

    // $ANTLR start synpred167_ChemicalChunker
    public final void synpred167_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:31: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:31: citation
        {
        pushFollow(FOLLOW_citation_in_synpred167_ChemicalChunker847_static.FOLLOW_citation_in_synpred167_ChemicalChunker847);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred167_ChemicalChunker

    // $ANTLR start synpred168_ChemicalChunker
    public final void synpred168_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:40: ( cycles )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:40: cycles
        {
        pushFollow(FOLLOW_cycles_in_synpred168_ChemicalChunker849_static.FOLLOW_cycles_in_synpred168_ChemicalChunker849);
        cycles();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred168_ChemicalChunker

    // $ANTLR start synpred169_ChemicalChunker
    public final void synpred169_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:47: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:47: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred169_ChemicalChunker851_static.FOLLOW_molecule_in_synpred169_ChemicalChunker851);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred169_ChemicalChunker

    // $ANTLR start synpred170_ChemicalChunker
    public final void synpred170_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:56: ( apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:56: apparatus
        {
        pushFollow(FOLLOW_apparatus_in_synpred170_ChemicalChunker853_static.FOLLOW_apparatus_in_synpred170_ChemicalChunker853);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred170_ChemicalChunker

    // $ANTLR start synpred171_ChemicalChunker
    public final void synpred171_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:66: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred171_ChemicalChunker855_static.FOLLOW_mixture_in_synpred171_ChemicalChunker855);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred171_ChemicalChunker

    // $ANTLR start synpred172_ChemicalChunker
    public final void synpred172_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:74: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:74: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred172_ChemicalChunker857_static.FOLLOW_unnamedmolecule_in_synpred172_ChemicalChunker857);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_ChemicalChunker

    // $ANTLR start synpred173_ChemicalChunker
    public final void synpred173_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:90: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:90: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred173_ChemicalChunker859_static.FOLLOW_nnstate_in_synpred173_ChemicalChunker859);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_ChemicalChunker

    // $ANTLR start synpred174_ChemicalChunker
    public final void synpred174_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:98: ( procedureNode )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:98: procedureNode
        {
        pushFollow(FOLLOW_procedureNode_in_synpred174_ChemicalChunker861_static.FOLLOW_procedureNode_in_synpred174_ChemicalChunker861);
        procedureNode();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_ChemicalChunker

    // $ANTLR start synpred175_ChemicalChunker
    public final void synpred175_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:112: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:112: nn
        {
        pushFollow(FOLLOW_nn_in_synpred175_ChemicalChunker863_static.FOLLOW_nn_in_synpred175_ChemicalChunker863);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_ChemicalChunker

    // $ANTLR start synpred178_ChemicalChunker
    public final void synpred178_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:123: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:123: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred178_ChemicalChunker869_static.FOLLOW_nnadd_in_synpred178_ChemicalChunker869);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_ChemicalChunker

    // $ANTLR start synpred180_ChemicalChunker
    public final void synpred180_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:147: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:147: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred180_ChemicalChunker873_static.FOLLOW_nnexample_in_synpred180_ChemicalChunker873);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_ChemicalChunker

    // $ANTLR start synpred181_ChemicalChunker
    public final void synpred181_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:157: ( range )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:157: range
        {
        pushFollow(FOLLOW_range_in_synpred181_ChemicalChunker875_static.FOLLOW_range_in_synpred181_ChemicalChunker875);
        range();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_ChemicalChunker

    // $ANTLR start synpred186_ChemicalChunker
    public final void synpred186_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:203: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:203: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred186_ChemicalChunker885_static.FOLLOW_quantity_in_synpred186_ChemicalChunker885);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_ChemicalChunker

    // $ANTLR start synpred187_ChemicalChunker
    public final void synpred187_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:212: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:212: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred187_ChemicalChunker887_static.FOLLOW_nnchementity_in_synpred187_ChemicalChunker887);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred187_ChemicalChunker

    // $ANTLR start synpred189_ChemicalChunker
    public final void synpred189_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:232: ( nnph )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:232: nnph
        {
        pushFollow(FOLLOW_nnph_in_synpred189_ChemicalChunker891_static.FOLLOW_nnph_in_synpred189_ChemicalChunker891);
        nnph();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_ChemicalChunker

    // $ANTLR start synpred191_ChemicalChunker
    public final void synpred191_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:245: ( nngeneral )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:245: nngeneral
        {
        pushFollow(FOLLOW_nngeneral_in_synpred191_ChemicalChunker895_static.FOLLOW_nngeneral_in_synpred191_ChemicalChunker895);
        nngeneral();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_ChemicalChunker

    // $ANTLR start synpred194_ChemicalChunker
    public final void synpred194_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:269: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:269: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred194_ChemicalChunker901_static.FOLLOW_nnpressure_in_synpred194_ChemicalChunker901);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_ChemicalChunker

    // $ANTLR start synpred205_ChemicalChunker
    public final void synpred205_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:383: ( squareBracketedReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:383: squareBracketedReference
        {
        pushFollow(FOLLOW_squareBracketedReference_in_synpred205_ChemicalChunker923_static.FOLLOW_squareBracketedReference_in_synpred205_ChemicalChunker923);
        squareBracketedReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred205_ChemicalChunker

    // $ANTLR start synpred207_ChemicalChunker
    public final void synpred207_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:414: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:414: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred207_ChemicalChunker927_static.FOLLOW_numeric_in_synpred207_ChemicalChunker927);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_ChemicalChunker

    // $ANTLR start synpred212_ChemicalChunker
    public final void synpred212_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:464: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:126:464: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred212_ChemicalChunker937_static.FOLLOW_nnyield_in_synpred212_ChemicalChunker937);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_ChemicalChunker

    // $ANTLR start synpred220_ChemicalChunker
    public final void synpred220_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:11: ( prepphraseAtmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:11: prepphraseAtmosphere
        {
        pushFollow(FOLLOW_prepphraseAtmosphere_in_synpred220_ChemicalChunker967_static.FOLLOW_prepphraseAtmosphere_in_synpred220_ChemicalChunker967);
        prepphraseAtmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred220_ChemicalChunker

    // $ANTLR start synpred221_ChemicalChunker
    public final void synpred221_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:32: ( prepphraseTime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:32: prepphraseTime
        {
        pushFollow(FOLLOW_prepphraseTime_in_synpred221_ChemicalChunker969_static.FOLLOW_prepphraseTime_in_synpred221_ChemicalChunker969);
        prepphraseTime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred221_ChemicalChunker

    // $ANTLR start synpred222_ChemicalChunker
    public final void synpred222_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:47: ( prepphraseTemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:47: prepphraseTemp
        {
        pushFollow(FOLLOW_prepphraseTemp_in_synpred222_ChemicalChunker971_static.FOLLOW_prepphraseTemp_in_synpred222_ChemicalChunker971);
        prepphraseTemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_ChemicalChunker

    // $ANTLR start synpred223_ChemicalChunker
    public final void synpred223_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:62: ( prepphraseIN )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:62: prepphraseIN
        {
        pushFollow(FOLLOW_prepphraseIN_in_synpred223_ChemicalChunker973_static.FOLLOW_prepphraseIN_in_synpred223_ChemicalChunker973);
        prepphraseIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred223_ChemicalChunker

    // $ANTLR start synpred224_ChemicalChunker
    public final void synpred224_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:75: ( prepphraseRole )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:131:75: prepphraseRole
        {
        pushFollow(FOLLOW_prepphraseRole_in_synpred224_ChemicalChunker975_static.FOLLOW_prepphraseRole_in_synpred224_ChemicalChunker975);
        prepphraseRole();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred224_ChemicalChunker

    // $ANTLR start synpred226_ChemicalChunker
    public final void synpred226_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:16: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:16: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred226_ChemicalChunker1015_static.FOLLOW_advAdj_in_synpred226_ChemicalChunker1015);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred226_ChemicalChunker

    // $ANTLR start synpred227_ChemicalChunker
    public final void synpred227_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:33: ( nnatmosphere )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:137:33: nnatmosphere
        {
        pushFollow(FOLLOW_nnatmosphere_in_synpred227_ChemicalChunker1020_static.FOLLOW_nnatmosphere_in_synpred227_ChemicalChunker1020);
        nnatmosphere();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_ChemicalChunker

    // $ANTLR start synpred228_ChemicalChunker
    public final void synpred228_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:3: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:3: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred228_ChemicalChunker1048_static.FOLLOW_advAdj_in_synpred228_ChemicalChunker1048);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_ChemicalChunker

    // $ANTLR start synpred233_ChemicalChunker
    public final void synpred233_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:35: ( nntime )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:143:35: nntime
        {
        pushFollow(FOLLOW_nntime_in_synpred233_ChemicalChunker1064_static.FOLLOW_nntime_in_synpred233_ChemicalChunker1064);
        nntime();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred233_ChemicalChunker

    // $ANTLR start synpred234_ChemicalChunker
    public final void synpred234_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:5: ( advAdj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:5: advAdj
        {
        pushFollow(FOLLOW_advAdj_in_synpred234_ChemicalChunker1095_static.FOLLOW_advAdj_in_synpred234_ChemicalChunker1095);
        advAdj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred234_ChemicalChunker

    // $ANTLR start synpred239_ChemicalChunker
    public final void synpred239_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:36: ( nntemp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:148:36: nntemp
        {
        pushFollow(FOLLOW_nntemp_in_synpred239_ChemicalChunker1110_static.FOLLOW_nntemp_in_synpred239_ChemicalChunker1110);
        nntemp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_ChemicalChunker

    // $ANTLR start synpred245_ChemicalChunker
    public final void synpred245_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:15: ( conjunction )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:15: conjunction
        {
        pushFollow(FOLLOW_conjunction_in_synpred245_ChemicalChunker1283_static.FOLLOW_conjunction_in_synpred245_ChemicalChunker1283);
        conjunction();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_ChemicalChunker

    // $ANTLR start synpred246_ChemicalChunker
    public final void synpred246_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:15: ( ( conjunction )* apparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:15: ( conjunction )* apparatus
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:169:15: ( conjunction )*
        loop205:
        do {
            int alt205=2;
            alt205 = dfa205.predict(input);
            switch (alt205) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: conjunction
        	    {
        	    pushFollow(FOLLOW_conjunction_in_synpred246_ChemicalChunker1283_static.FOLLOW_conjunction_in_synpred246_ChemicalChunker1283);
        	    conjunction();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop205;
            }
        } while (true);

        pushFollow(FOLLOW_apparatus_in_synpred246_ChemicalChunker1286_static.FOLLOW_apparatus_in_synpred246_ChemicalChunker1286);
        apparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred246_ChemicalChunker

    // $ANTLR start synpred249_ChemicalChunker
    public final void synpred249_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:22: ( nnApp )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:171:22: nnApp
        {
        pushFollow(FOLLOW_nnApp_in_synpred249_ChemicalChunker1303_static.FOLLOW_nnApp_in_synpred249_ChemicalChunker1303);
        nnApp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_ChemicalChunker

    // $ANTLR start synpred250_ChemicalChunker
    public final void synpred250_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:4: ( nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:4: nnapparatus
        {
        pushFollow(FOLLOW_nnapparatus_in_synpred250_ChemicalChunker1330_static.FOLLOW_nnapparatus_in_synpred250_ChemicalChunker1330);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_ChemicalChunker

    // $ANTLR start synpred251_ChemicalChunker
    public final void synpred251_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:18: ( dash nnapparatus )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:174:18: dash nnapparatus
        {
        pushFollow(FOLLOW_dash_in_synpred251_ChemicalChunker1334_static.FOLLOW_dash_in_synpred251_ChemicalChunker1334);
        dash();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_nnapparatus_in_synpred251_ChemicalChunker1336_static.FOLLOW_nnapparatus_in_synpred251_ChemicalChunker1336);
        nnapparatus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_ChemicalChunker

    // $ANTLR start synpred252_ChemicalChunker
    public final void synpred252_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:8: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:8: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred252_ChemicalChunker1350_static.FOLLOW_quantity_in_synpred252_ChemicalChunker1350);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_ChemicalChunker

    // $ANTLR start synpred253_ChemicalChunker
    public final void synpred253_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:17: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:17: adj
        {
        pushFollow(FOLLOW_adj_in_synpred253_ChemicalChunker1352_static.FOLLOW_adj_in_synpred253_ChemicalChunker1352);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_ChemicalChunker

    // $ANTLR start synpred254_ChemicalChunker
    public final void synpred254_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:21: ( nnpressure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:21: nnpressure
        {
        pushFollow(FOLLOW_nnpressure_in_synpred254_ChemicalChunker1354_static.FOLLOW_nnpressure_in_synpred254_ChemicalChunker1354);
        nnpressure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_ChemicalChunker

    // $ANTLR start synpred255_ChemicalChunker
    public final void synpred255_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:32: ( nnadd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:32: nnadd
        {
        pushFollow(FOLLOW_nnadd_in_synpred255_ChemicalChunker1356_static.FOLLOW_nnadd_in_synpred255_ChemicalChunker1356);
        nnadd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred255_ChemicalChunker

    // $ANTLR start synpred256_ChemicalChunker
    public final void synpred256_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:38: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:38: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred256_ChemicalChunker1358_static.FOLLOW_molecule_in_synpred256_ChemicalChunker1358);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_ChemicalChunker

    // $ANTLR start synpred257_ChemicalChunker
    public final void synpred257_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:47: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:47: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred257_ChemicalChunker1360_static.FOLLOW_nnchementity_in_synpred257_ChemicalChunker1360);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_ChemicalChunker

    // $ANTLR start synpred258_ChemicalChunker
    public final void synpred258_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:60: ( nnstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:60: nnstate
        {
        pushFollow(FOLLOW_nnstate_in_synpred258_ChemicalChunker1362_static.FOLLOW_nnstate_in_synpred258_ChemicalChunker1362);
        nnstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_ChemicalChunker

    // $ANTLR start synpred259_ChemicalChunker
    public final void synpred259_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:68: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:176:68: nn
        {
        pushFollow(FOLLOW_nn_in_synpred259_ChemicalChunker1364_static.FOLLOW_nn_in_synpred259_ChemicalChunker1364);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_ChemicalChunker

    // $ANTLR start synpred260_ChemicalChunker
    public final void synpred260_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:4: ( oscaront )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:179:4: oscaront
        {
        pushFollow(FOLLOW_oscaront_in_synpred260_ChemicalChunker1376_static.FOLLOW_oscaront_in_synpred260_ChemicalChunker1376);
        oscaront();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_ChemicalChunker

    // $ANTLR start synpred262_ChemicalChunker
    public final void synpred262_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:46: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:46: adj
        {
        pushFollow(FOLLOW_adj_in_synpred262_ChemicalChunker1401_static.FOLLOW_adj_in_synpred262_ChemicalChunker1401);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_ChemicalChunker

    // $ANTLR start synpred263_ChemicalChunker
    public final void synpred263_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:52: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:52: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred263_ChemicalChunker1405_static.FOLLOW_quantity_in_synpred263_ChemicalChunker1405);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_ChemicalChunker

    // $ANTLR start synpred264_ChemicalChunker
    public final void synpred264_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:63: ( nnchementity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:63: nnchementity
        {
        pushFollow(FOLLOW_nnchementity_in_synpred264_ChemicalChunker1409_static.FOLLOW_nnchementity_in_synpred264_ChemicalChunker1409);
        nnchementity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_ChemicalChunker

    // $ANTLR start synpred265_ChemicalChunker
    public final void synpred265_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:78: ({...}? numericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:78: {...}? numericOrIdentifierCompoundReference
        {
        if ( !((!followedByNumberWhichIsNotAReference(input))) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred265_ChemicalChunker", "!followedByNumberWhichIsNotAReference(input)");
        }
        pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_synpred265_ChemicalChunker1415_static.FOLLOW_numericOrIdentifierCompoundReference_in_synpred265_ChemicalChunker1415);
        numericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_ChemicalChunker

    // $ANTLR start synpred266_ChemicalChunker
    public final void synpred266_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:165: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:165: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred266_ChemicalChunker1419_static.FOLLOW_quantity_in_synpred266_ChemicalChunker1419);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_ChemicalChunker

    // $ANTLR start synpred267_ChemicalChunker
    public final void synpred267_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:175: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:180:175: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred267_ChemicalChunker1422_static.FOLLOW_fromProcedure_in_synpred267_ChemicalChunker1422);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_ChemicalChunker

    // $ANTLR start synpred268_ChemicalChunker
    public final void synpred268_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:34: ( afterOscarCompoundStructure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:182:34: afterOscarCompoundStructure
        {
        pushFollow(FOLLOW_afterOscarCompoundStructure_in_synpred268_ChemicalChunker1433_static.FOLLOW_afterOscarCompoundStructure_in_synpred268_ChemicalChunker1433);
        afterOscarCompoundStructure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_ChemicalChunker

    // $ANTLR start synpred270_ChemicalChunker
    public final void synpred270_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:30: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:30: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred270_ChemicalChunker1460_static.FOLLOW_oscarcm_in_synpred270_ChemicalChunker1460);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_ChemicalChunker

    // $ANTLR start synpred272_ChemicalChunker
    public final void synpred272_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:45: ( oscarcm )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:45: oscarcm
        {
        pushFollow(FOLLOW_oscarcm_in_synpred272_ChemicalChunker1466_static.FOLLOW_oscarcm_in_synpred272_ChemicalChunker1466);
        oscarcm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_ChemicalChunker

    // $ANTLR start synpred273_ChemicalChunker
    public final void synpred273_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:40: ( dash ( oscarcm )+ )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:40: dash ( oscarcm )+
        {
        pushFollow(FOLLOW_dash_in_synpred273_ChemicalChunker1464_static.FOLLOW_dash_in_synpred273_ChemicalChunker1464);
        dash();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:45: ( oscarcm )+
        int cnt208=0;
        loop208:
        do {
            int alt208=2;
            switch ( input.LA(1) ) {
            case 84:
                {
                alt208=1;
                }
                break;

            }

            switch (alt208) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    {
        	    pushFollow(FOLLOW_oscarcm_in_synpred273_ChemicalChunker1466_static.FOLLOW_oscarcm_in_synpred273_ChemicalChunker1466);
        	    oscarcm();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt208 >= 1 ) break loop208;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(208, input);
                    throw eee;
            }
            cnt208++;
        } while (true);


        }
    }
    // $ANTLR end synpred273_ChemicalChunker

    // $ANTLR start synpred274_ChemicalChunker
    public final void synpred274_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:56: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:56: dash
        {
        pushFollow(FOLLOW_dash_in_synpred274_ChemicalChunker1471_static.FOLLOW_dash_in_synpred274_ChemicalChunker1471);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred274_ChemicalChunker

    // $ANTLR start synpred275_ChemicalChunker
    public final void synpred275_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:39: ( ( dash ( oscarcm )+ )+ ( dash )? )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:39: ( dash ( oscarcm )+ )+ ( dash )?
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:39: ( dash ( oscarcm )+ )+
        int cnt210=0;
        loop210:
        do {
            int alt210=2;
            switch ( input.LA(1) ) {
            case 136:
                {
                switch ( input.LA(2) ) {
                case TOKEN:
                    {
                    switch ( input.LA(3) ) {
                    case 84:
                        {
                        alt210=1;
                        }
                        break;

                    }

                    }
                    break;

                }

                }
                break;

            }

            switch (alt210) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:40: dash ( oscarcm )+
        	    {
        	    pushFollow(FOLLOW_dash_in_synpred275_ChemicalChunker1464_static.FOLLOW_dash_in_synpred275_ChemicalChunker1464);
        	    dash();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:45: ( oscarcm )+
        	    int cnt209=0;
        	    loop209:
        	    do {
        	        int alt209=2;
        	        switch ( input.LA(1) ) {
        	        case 84:
        	            {
        	            alt209=1;
        	            }
        	            break;

        	        }

        	        switch (alt209) {
        	    	case 1 :
        	    	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: oscarcm
        	    	    {
        	    	    pushFollow(FOLLOW_oscarcm_in_synpred275_ChemicalChunker1466_static.FOLLOW_oscarcm_in_synpred275_ChemicalChunker1466);
        	    	    oscarcm();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt209 >= 1 ) break loop209;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(209, input);
        	                throw eee;
        	        }
        	        cnt209++;
        	    } while (true);


        	    }
        	    break;

        	default :
        	    if ( cnt210 >= 1 ) break loop210;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(210, input);
                    throw eee;
            }
            cnt210++;
        } while (true);

        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:56: ( dash )?
        int alt211=2;
        switch ( input.LA(1) ) {
            case 136:
                {
                alt211=1;
                }
                break;
        }

        switch (alt211) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: dash
                {
                pushFollow(FOLLOW_dash_in_synpred275_ChemicalChunker1471_static.FOLLOW_dash_in_synpred275_ChemicalChunker1471);
                dash();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred275_ChemicalChunker

    // $ANTLR start synpred276_ChemicalChunker
    public final void synpred276_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:63: ( dash )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:63: dash
        {
        pushFollow(FOLLOW_dash_in_synpred276_ChemicalChunker1475_static.FOLLOW_dash_in_synpred276_ChemicalChunker1475);
        dash();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred276_ChemicalChunker

    // $ANTLR start synpred277_ChemicalChunker
    public final void synpred277_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:68: ( apost )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:183:68: apost
        {
        pushFollow(FOLLOW_apost_in_synpred277_ChemicalChunker1477_static.FOLLOW_apost_in_synpred277_ChemicalChunker1477);
        apost();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_ChemicalChunker

    // $ANTLR start synpred279_ChemicalChunker
    public final void synpred279_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:19: ( moleculeamount3 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:19: moleculeamount3
        {
        pushFollow(FOLLOW_moleculeamount3_in_synpred279_ChemicalChunker1520_static.FOLLOW_moleculeamount3_in_synpred279_ChemicalChunker1520);
        moleculeamount3();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_ChemicalChunker

    // $ANTLR start synpred280_ChemicalChunker
    public final void synpred280_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:36: ( moleculeamount1 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:36: moleculeamount1
        {
        pushFollow(FOLLOW_moleculeamount1_in_synpred280_ChemicalChunker1523_static.FOLLOW_moleculeamount1_in_synpred280_ChemicalChunker1523);
        moleculeamount1();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred280_ChemicalChunker

    // $ANTLR start synpred281_ChemicalChunker
    public final void synpred281_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:71: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:189:71: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred281_ChemicalChunker1530_static.FOLLOW_asAstate_in_synpred281_ChemicalChunker1530);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_ChemicalChunker

    // $ANTLR start synpred282_ChemicalChunker
    public final void synpred282_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred282_ChemicalChunker1541_static.FOLLOW_quantity_in_synpred282_ChemicalChunker1541);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred282_ChemicalChunker

    // $ANTLR start synpred283_ChemicalChunker
    public final void synpred283_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred283_ChemicalChunker1543_static.FOLLOW_mixture_in_synpred283_ChemicalChunker1543);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_ChemicalChunker

    // $ANTLR start synpred286_ChemicalChunker
    public final void synpred286_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:54: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:192:54: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred286_ChemicalChunker1560_static.FOLLOW_mixture_in_synpred286_ChemicalChunker1560);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred286_ChemicalChunker

    // $ANTLR start synpred289_ChemicalChunker
    public final void synpred289_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:30: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:30: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred289_ChemicalChunker1582_static.FOLLOW_quantity_in_synpred289_ChemicalChunker1582);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_ChemicalChunker

    // $ANTLR start synpred290_ChemicalChunker
    public final void synpred290_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:39: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:39: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred290_ChemicalChunker1584_static.FOLLOW_mixture_in_synpred290_ChemicalChunker1584);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_ChemicalChunker

    // $ANTLR start synpred295_ChemicalChunker
    public final void synpred295_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:86: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:195:86: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred295_ChemicalChunker1607_static.FOLLOW_oscarCompound_in_synpred295_ChemicalChunker1607);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_ChemicalChunker

    // $ANTLR start synpred296_ChemicalChunker
    public final void synpred296_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred296_ChemicalChunker1619_static.FOLLOW_quantity_in_synpred296_ChemicalChunker1619);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_ChemicalChunker

    // $ANTLR start synpred297_ChemicalChunker
    public final void synpred297_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred297_ChemicalChunker1621_static.FOLLOW_mixture_in_synpred297_ChemicalChunker1621);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred297_ChemicalChunker

    // $ANTLR start synpred298_ChemicalChunker
    public final void synpred298_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:23: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:198:23: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred298_ChemicalChunker1625_static.FOLLOW_oscarCompound_in_synpred298_ChemicalChunker1625);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred298_ChemicalChunker

    // $ANTLR start synpred299_ChemicalChunker
    public final void synpred299_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:35: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:35: citation
        {
        pushFollow(FOLLOW_citation_in_synpred299_ChemicalChunker1636_static.FOLLOW_citation_in_synpred299_ChemicalChunker1636);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_ChemicalChunker

    // $ANTLR start synpred300_ChemicalChunker
    public final void synpred300_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:44: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:44: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred300_ChemicalChunker1638_static.FOLLOW_quantity_in_synpred300_ChemicalChunker1638);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred300_ChemicalChunker

    // $ANTLR start synpred302_ChemicalChunker
    public final void synpred302_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:53: ( comma ( quantity1Node | citationStructure ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:53: comma ( quantity1Node | citationStructure )
        {
        pushFollow(FOLLOW_comma_in_synpred302_ChemicalChunker1640_static.FOLLOW_comma_in_synpred302_ChemicalChunker1640);
        comma();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:59: ( quantity1Node | citationStructure )
        int alt213=2;
        alt213 = dfa213.predict(input);
        switch (alt213) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:60: quantity1Node
                {
                pushFollow(FOLLOW_quantity1Node_in_synpred302_ChemicalChunker1643_static.FOLLOW_quantity1Node_in_synpred302_ChemicalChunker1643);
                quantity1Node();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:74: citationStructure
                {
                pushFollow(FOLLOW_citationStructure_in_synpred302_ChemicalChunker1645_static.FOLLOW_citationStructure_in_synpred302_ChemicalChunker1645);
                citationStructure();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred302_ChemicalChunker

    // $ANTLR start synpred303_ChemicalChunker
    public final void synpred303_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:93: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:200:93: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred303_ChemicalChunker1648_static.FOLLOW_mixture_in_synpred303_ChemicalChunker1648);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred303_ChemicalChunker

    // $ANTLR start synpred304_ChemicalChunker
    public final void synpred304_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:31: ( asAstate )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:203:31: asAstate
        {
        pushFollow(FOLLOW_asAstate_in_synpred304_ChemicalChunker1661_static.FOLLOW_asAstate_in_synpred304_ChemicalChunker1661);
        asAstate();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred304_ChemicalChunker

    // $ANTLR start synpred307_ChemicalChunker
    public final void synpred307_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:66: ( optionalUnnamedMoleculeEnding )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:66: optionalUnnamedMoleculeEnding
        {
        pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_synpred307_ChemicalChunker1692_static.FOLLOW_optionalUnnamedMoleculeEnding_in_synpred307_ChemicalChunker1692);
        optionalUnnamedMoleculeEnding();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_ChemicalChunker

    // $ANTLR start synpred308_ChemicalChunker
    public final void synpred308_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:4: ( ( quantity )+ inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:4: ( quantity )+ inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? )
        {
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:4: ( quantity )+
        int cnt214=0;
        loop214:
        do {
            int alt214=2;
            switch ( input.LA(1) ) {
            case 38:
            case 73:
            case 130:
            case 143:
            case 146:
                {
                alt214=1;
                }
                break;

            }

            switch (alt214) {
        	case 1 :
        	    // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: quantity
        	    {
        	    pushFollow(FOLLOW_quantity_in_synpred308_ChemicalChunker1682_static.FOLLOW_quantity_in_synpred308_ChemicalChunker1682);
        	    quantity();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt214 >= 1 ) break loop214;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(214, input);
                    throw eee;
            }
            cnt214++;
        } while (true);

        pushFollow(FOLLOW_inof_in_synpred308_ChemicalChunker1685_static.FOLLOW_inof_in_synpred308_ChemicalChunker1685);
        inof();

        state._fsp--;
        if (state.failed) return ;
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:19: ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? )
        int alt216=2;
        switch ( input.LA(1) ) {
        case 38:
        case 139:
        case 141:
        case 143:
        case 146:
            {
            alt216=1;
            }
            break;
        case 41:
        case 42:
        case 45:
        case 46:
        case 63:
        case 68:
        case 71:
        case 83:
        case 90:
        case 142:
        case 147:
        case 149:
        case 151:
        case 156:
        case 157:
        case 158:
        case 159:
            {
            alt216=2;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 216, 0, input);

            throw nvae;
        }

        switch (alt216) {
            case 1 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:20: unnamedmoleculeamount1
                {
                pushFollow(FOLLOW_unnamedmoleculeamount1_in_synpred308_ChemicalChunker1688_static.FOLLOW_unnamedmoleculeamount1_in_synpred308_ChemicalChunker1688);
                unnamedmoleculeamount1();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:43: unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )?
                {
                pushFollow(FOLLOW_unnamedmoleculeamount2_in_synpred308_ChemicalChunker1690_static.FOLLOW_unnamedmoleculeamount2_in_synpred308_ChemicalChunker1690);
                unnamedmoleculeamount2();

                state._fsp--;
                if (state.failed) return ;
                // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:66: ( optionalUnnamedMoleculeEnding )?
                int alt215=2;
                switch ( input.LA(1) ) {
                    case 38:
                    case 73:
                    case 130:
                    case 133:
                    case 139:
                    case 141:
                    case 143:
                    case 146:
                        {
                        alt215=1;
                        }
                        break;
                    case EOF:
                        {
                        int LA215_2 = input.LA(2);

                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {
                            alt215=1;
                        }
                        }
                        break;
                }

                switch (alt215) {
                    case 1 :
                        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:0:0: optionalUnnamedMoleculeEnding
                        {
                        pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_synpred308_ChemicalChunker1692_static.FOLLOW_optionalUnnamedMoleculeEnding_in_synpred308_ChemicalChunker1692);
                        optionalUnnamedMoleculeEnding();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred308_ChemicalChunker

    // $ANTLR start synpred310_ChemicalChunker
    public final void synpred310_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:122: ( unnamedmoleculeamount4 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:122: unnamedmoleculeamount4
        {
        pushFollow(FOLLOW_unnamedmoleculeamount4_in_synpred310_ChemicalChunker1699_static.FOLLOW_unnamedmoleculeamount4_in_synpred310_ChemicalChunker1699);
        unnamedmoleculeamount4();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_ChemicalChunker

    // $ANTLR start synpred311_ChemicalChunker
    public final void synpred311_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:145: ( unnamedmoleculeamount5 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:145: unnamedmoleculeamount5
        {
        pushFollow(FOLLOW_unnamedmoleculeamount5_in_synpred311_ChemicalChunker1701_static.FOLLOW_unnamedmoleculeamount5_in_synpred311_ChemicalChunker1701);
        unnamedmoleculeamount5();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_ChemicalChunker

    // $ANTLR start synpred312_ChemicalChunker
    public final void synpred312_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:168: ( unnamedmoleculeamount6 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:168: unnamedmoleculeamount6
        {
        pushFollow(FOLLOW_unnamedmoleculeamount6_in_synpred312_ChemicalChunker1703_static.FOLLOW_unnamedmoleculeamount6_in_synpred312_ChemicalChunker1703);
        unnamedmoleculeamount6();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_ChemicalChunker

    // $ANTLR start synpred313_ChemicalChunker
    public final void synpred313_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:191: ( unnamedmoleculeamount7 )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:191: unnamedmoleculeamount7
        {
        pushFollow(FOLLOW_unnamedmoleculeamount7_in_synpred313_ChemicalChunker1705_static.FOLLOW_unnamedmoleculeamount7_in_synpred313_ChemicalChunker1705);
        unnamedmoleculeamount7();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred313_ChemicalChunker

    // $ANTLR start synpred314_ChemicalChunker
    public final void synpred314_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:238: ( fromProcedure )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:206:238: fromProcedure
        {
        pushFollow(FOLLOW_fromProcedure_in_synpred314_ChemicalChunker1710_static.FOLLOW_fromProcedure_in_synpred314_ChemicalChunker1710);
        fromProcedure();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred314_ChemicalChunker

    // $ANTLR start synpred315_ChemicalChunker
    public final void synpred315_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:91: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:91: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred315_ChemicalChunker1726_static.FOLLOW_quantity_in_synpred315_ChemicalChunker1726);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred315_ChemicalChunker

    // $ANTLR start synpred316_ChemicalChunker
    public final void synpred316_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:100: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:209:100: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred316_ChemicalChunker1728_static.FOLLOW_mixture_in_synpred316_ChemicalChunker1728);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred316_ChemicalChunker

    // $ANTLR start synpred326_ChemicalChunker
    public final void synpred326_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:58: ( referenceToExampleCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:58: referenceToExampleCompound
        {
        pushFollow(FOLLOW_referenceToExampleCompound_in_synpred326_ChemicalChunker1766_static.FOLLOW_referenceToExampleCompound_in_synpred326_ChemicalChunker1766);
        referenceToExampleCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_ChemicalChunker

    // $ANTLR start synpred327_ChemicalChunker
    public final void synpred327_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:85: ( nnexample )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:212:85: nnexample
        {
        pushFollow(FOLLOW_nnexample_in_synpred327_ChemicalChunker1768_static.FOLLOW_nnexample_in_synpred327_ChemicalChunker1768);
        nnexample();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred327_ChemicalChunker

    // $ANTLR start synpred334_ChemicalChunker
    public final void synpred334_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:24: ( optionalUnnamedMoleculeEnding )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:215:24: optionalUnnamedMoleculeEnding
        {
        pushFollow(FOLLOW_optionalUnnamedMoleculeEnding_in_synpred334_ChemicalChunker1796_static.FOLLOW_optionalUnnamedMoleculeEnding_in_synpred334_ChemicalChunker1796);
        optionalUnnamedMoleculeEnding();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_ChemicalChunker

    // $ANTLR start synpred335_ChemicalChunker
    public final void synpred335_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred335_ChemicalChunker1807_static.FOLLOW_quantity_in_synpred335_ChemicalChunker1807);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred335_ChemicalChunker

    // $ANTLR start synpred336_ChemicalChunker
    public final void synpred336_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:63: ( numericOrIdentifierCompoundReference )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:63: numericOrIdentifierCompoundReference
        {
        pushFollow(FOLLOW_numericOrIdentifierCompoundReference_in_synpred336_ChemicalChunker1813_static.FOLLOW_numericOrIdentifierCompoundReference_in_synpred336_ChemicalChunker1813);
        numericOrIdentifierCompoundReference();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred336_ChemicalChunker

    // $ANTLR start synpred337_ChemicalChunker
    public final void synpred337_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:103: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:103: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred337_ChemicalChunker1818_static.FOLLOW_quantity_in_synpred337_ChemicalChunker1818);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_ChemicalChunker

    // $ANTLR start synpred338_ChemicalChunker
    public final void synpred338_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:112: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:218:112: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred338_ChemicalChunker1820_static.FOLLOW_mixture_in_synpred338_ChemicalChunker1820);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_ChemicalChunker

    // $ANTLR start synpred339_ChemicalChunker
    public final void synpred339_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:47: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:47: citation
        {
        pushFollow(FOLLOW_citation_in_synpred339_ChemicalChunker1834_static.FOLLOW_citation_in_synpred339_ChemicalChunker1834);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred339_ChemicalChunker

    // $ANTLR start synpred340_ChemicalChunker
    public final void synpred340_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:56: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:56: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred340_ChemicalChunker1836_static.FOLLOW_quantity_in_synpred340_ChemicalChunker1836);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred340_ChemicalChunker

    // $ANTLR start synpred341_ChemicalChunker
    public final void synpred341_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:65: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:221:65: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred341_ChemicalChunker1838_static.FOLLOW_mixture_in_synpred341_ChemicalChunker1838);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred341_ChemicalChunker

    // $ANTLR start synpred346_ChemicalChunker
    public final void synpred346_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:48: ( citation )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:48: citation
        {
        pushFollow(FOLLOW_citation_in_synpred346_ChemicalChunker1893_static.FOLLOW_citation_in_synpred346_ChemicalChunker1893);
        citation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred346_ChemicalChunker

    // $ANTLR start synpred347_ChemicalChunker
    public final void synpred347_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:57: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:57: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred347_ChemicalChunker1895_static.FOLLOW_quantity_in_synpred347_ChemicalChunker1895);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred347_ChemicalChunker

    // $ANTLR start synpred348_ChemicalChunker
    public final void synpred348_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:66: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:227:66: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred348_ChemicalChunker1897_static.FOLLOW_mixture_in_synpred348_ChemicalChunker1897);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred348_ChemicalChunker

    // $ANTLR start synpred349_ChemicalChunker
    public final void synpred349_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:4: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:4: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred349_ChemicalChunker1926_static.FOLLOW_quantity_in_synpred349_ChemicalChunker1926);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred349_ChemicalChunker

    // $ANTLR start synpred350_ChemicalChunker
    public final void synpred350_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:13: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:13: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred350_ChemicalChunker1928_static.FOLLOW_mixture_in_synpred350_ChemicalChunker1928);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred350_ChemicalChunker

    // $ANTLR start synpred352_ChemicalChunker
    public final void synpred352_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:45: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:45: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred352_ChemicalChunker1938_static.FOLLOW_quantity_in_synpred352_ChemicalChunker1938);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred352_ChemicalChunker

    // $ANTLR start synpred353_ChemicalChunker
    public final void synpred353_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:54: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:233:54: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred353_ChemicalChunker1940_static.FOLLOW_mixture_in_synpred353_ChemicalChunker1940);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred353_ChemicalChunker

    // $ANTLR start synpred357_ChemicalChunker
    public final void synpred357_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:34: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:236:34: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred357_ChemicalChunker1965_static.FOLLOW_quantity_in_synpred357_ChemicalChunker1965);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred357_ChemicalChunker

    // $ANTLR start synpred359_ChemicalChunker
    public final void synpred359_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:106: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:106: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred359_ChemicalChunker1986_static.FOLLOW_quantity_in_synpred359_ChemicalChunker1986);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred359_ChemicalChunker

    // $ANTLR start synpred360_ChemicalChunker
    public final void synpred360_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:115: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:239:115: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred360_ChemicalChunker1988_static.FOLLOW_mixture_in_synpred360_ChemicalChunker1988);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred360_ChemicalChunker

    // $ANTLR start synpred366_ChemicalChunker
    public final void synpred366_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:62: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:62: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred366_ChemicalChunker2024_static.FOLLOW_quantity_in_synpred366_ChemicalChunker2024);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred366_ChemicalChunker

    // $ANTLR start synpred367_ChemicalChunker
    public final void synpred367_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:73: ( quantity )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:73: quantity
        {
        pushFollow(FOLLOW_quantity_in_synpred367_ChemicalChunker2028_static.FOLLOW_quantity_in_synpred367_ChemicalChunker2028);
        quantity();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred367_ChemicalChunker

    // $ANTLR start synpred368_ChemicalChunker
    public final void synpred368_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:82: ( mixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:242:82: mixture
        {
        pushFollow(FOLLOW_mixture_in_synpred368_ChemicalChunker2030_static.FOLLOW_mixture_in_synpred368_ChemicalChunker2030);
        mixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred368_ChemicalChunker

    // $ANTLR start synpred370_ChemicalChunker
    public final void synpred370_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:31: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:245:31: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred370_ChemicalChunker2045_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred370_ChemicalChunker2045);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred370_ChemicalChunker

    // $ANTLR start synpred375_ChemicalChunker
    public final void synpred375_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:19: ( comma measurements )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:260:19: comma measurements
        {
        pushFollow(FOLLOW_comma_in_synpred375_ChemicalChunker2178_static.FOLLOW_comma_in_synpred375_ChemicalChunker2178);
        comma();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_measurements_in_synpred375_ChemicalChunker2181_static.FOLLOW_measurements_in_synpred375_ChemicalChunker2181);
        measurements();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred375_ChemicalChunker

    // $ANTLR start synpred378_ChemicalChunker
    public final void synpred378_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:40: ( dt )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:263:40: dt
        {
        pushFollow(FOLLOW_dt_in_synpred378_ChemicalChunker2206_static.FOLLOW_dt_in_synpred378_ChemicalChunker2206);
        dt();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred378_ChemicalChunker

    // $ANTLR start synpred379_ChemicalChunker
    public final void synpred379_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:25: ( measurementtypes )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:264:25: measurementtypes
        {
        pushFollow(FOLLOW_measurementtypes_in_synpred379_ChemicalChunker2218_static.FOLLOW_measurementtypes_in_synpred379_ChemicalChunker2218);
        measurementtypes();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred379_ChemicalChunker

    // $ANTLR start synpred386_ChemicalChunker
    public final void synpred386_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:60: ( yield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:266:60: yield
        {
        pushFollow(FOLLOW_yield_in_synpred386_ChemicalChunker2255_static.FOLLOW_yield_in_synpred386_ChemicalChunker2255);
        yield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred386_ChemicalChunker

    // $ANTLR start synpred398_ChemicalChunker
    public final void synpred398_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:20: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:20: fw
        {
        pushFollow(FOLLOW_fw_in_synpred398_ChemicalChunker2554_static.FOLLOW_fw_in_synpred398_ChemicalChunker2554);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred398_ChemicalChunker

    // $ANTLR start synpred399_ChemicalChunker
    public final void synpred399_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:23: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:23: verb
        {
        pushFollow(FOLLOW_verb_in_synpred399_ChemicalChunker2556_static.FOLLOW_verb_in_synpred399_ChemicalChunker2556);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred399_ChemicalChunker

    // $ANTLR start synpred400_ChemicalChunker
    public final void synpred400_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:28: ( nn )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:28: nn
        {
        pushFollow(FOLLOW_nn_in_synpred400_ChemicalChunker2558_static.FOLLOW_nn_in_synpred400_ChemicalChunker2558);
        nn();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred400_ChemicalChunker

    // $ANTLR start synpred401_ChemicalChunker
    public final void synpred401_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:31: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:31: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred401_ChemicalChunker2560_static.FOLLOW_quantity2Node_in_synpred401_ChemicalChunker2560);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred401_ChemicalChunker

    // $ANTLR start synpred404_ChemicalChunker
    public final void synpred404_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:58: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:58: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred404_ChemicalChunker2566_static.FOLLOW_oscarCompound_in_synpred404_ChemicalChunker2566);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred404_ChemicalChunker

    // $ANTLR start synpred405_ChemicalChunker
    public final void synpred405_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:72: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:72: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred405_ChemicalChunker2568_static.FOLLOW_molecule_in_synpred405_ChemicalChunker2568);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred405_ChemicalChunker

    // $ANTLR start synpred406_ChemicalChunker
    public final void synpred406_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:81: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:81: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred406_ChemicalChunker2570_static.FOLLOW_unnamedmolecule_in_synpred406_ChemicalChunker2570);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred406_ChemicalChunker

    // $ANTLR start synpred408_ChemicalChunker
    public final void synpred408_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:102: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:102: sym
        {
        pushFollow(FOLLOW_sym_in_synpred408_ChemicalChunker2574_static.FOLLOW_sym_in_synpred408_ChemicalChunker2574);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred408_ChemicalChunker

    // $ANTLR start synpred409_ChemicalChunker
    public final void synpred409_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:106: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:106: noun
        {
        pushFollow(FOLLOW_noun_in_synpred409_ChemicalChunker2576_static.FOLLOW_noun_in_synpred409_ChemicalChunker2576);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred409_ChemicalChunker

    // $ANTLR start synpred411_ChemicalChunker
    public final void synpred411_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:117: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:117: cd
        {
        pushFollow(FOLLOW_cd_in_synpred411_ChemicalChunker2580_static.FOLLOW_cd_in_synpred411_ChemicalChunker2580);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred411_ChemicalChunker

    // $ANTLR start synpred412_ChemicalChunker
    public final void synpred412_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:120: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:120: comma
        {
        pushFollow(FOLLOW_comma_in_synpred412_ChemicalChunker2582_static.FOLLOW_comma_in_synpred412_ChemicalChunker2582);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred412_ChemicalChunker

    // $ANTLR start synpred413_ChemicalChunker
    public final void synpred413_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:126: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:126: adj
        {
        pushFollow(FOLLOW_adj_in_synpred413_ChemicalChunker2584_static.FOLLOW_adj_in_synpred413_ChemicalChunker2584);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred413_ChemicalChunker

    // $ANTLR start synpred415_ChemicalChunker
    public final void synpred415_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:143: ( minimixture )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:143: minimixture
        {
        pushFollow(FOLLOW_minimixture_in_synpred415_ChemicalChunker2592_static.FOLLOW_minimixture_in_synpred415_ChemicalChunker2592);
        minimixture();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred415_ChemicalChunker

    // $ANTLR start synpred416_ChemicalChunker
    public final void synpred416_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:155: ( fw )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:155: fw
        {
        pushFollow(FOLLOW_fw_in_synpred416_ChemicalChunker2594_static.FOLLOW_fw_in_synpred416_ChemicalChunker2594);
        fw();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred416_ChemicalChunker

    // $ANTLR start synpred417_ChemicalChunker
    public final void synpred417_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:158: ( verb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:158: verb
        {
        pushFollow(FOLLOW_verb_in_synpred417_ChemicalChunker2596_static.FOLLOW_verb_in_synpred417_ChemicalChunker2596);
        verb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred417_ChemicalChunker

    // $ANTLR start synpred418_ChemicalChunker
    public final void synpred418_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:163: ( quantity2Node )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:163: quantity2Node
        {
        pushFollow(FOLLOW_quantity2Node_in_synpred418_ChemicalChunker2598_static.FOLLOW_quantity2Node_in_synpred418_ChemicalChunker2598);
        quantity2Node();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred418_ChemicalChunker

    // $ANTLR start synpred419_ChemicalChunker
    public final void synpred419_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:177: ( nnyield )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:177: nnyield
        {
        pushFollow(FOLLOW_nnyield_in_synpred419_ChemicalChunker2600_static.FOLLOW_nnyield_in_synpred419_ChemicalChunker2600);
        nnyield();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred419_ChemicalChunker

    // $ANTLR start synpred422_ChemicalChunker
    public final void synpred422_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:198: ( oscarCompound )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:198: oscarCompound
        {
        pushFollow(FOLLOW_oscarCompound_in_synpred422_ChemicalChunker2606_static.FOLLOW_oscarCompound_in_synpred422_ChemicalChunker2606);
        oscarCompound();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred422_ChemicalChunker

    // $ANTLR start synpred423_ChemicalChunker
    public final void synpred423_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:212: ( molecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:212: molecule
        {
        pushFollow(FOLLOW_molecule_in_synpred423_ChemicalChunker2608_static.FOLLOW_molecule_in_synpred423_ChemicalChunker2608);
        molecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred423_ChemicalChunker

    // $ANTLR start synpred424_ChemicalChunker
    public final void synpred424_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:221: ( unnamedmolecule )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:221: unnamedmolecule
        {
        pushFollow(FOLLOW_unnamedmolecule_in_synpred424_ChemicalChunker2610_static.FOLLOW_unnamedmolecule_in_synpred424_ChemicalChunker2610);
        unnamedmolecule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred424_ChemicalChunker

    // $ANTLR start synpred426_ChemicalChunker
    public final void synpred426_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:242: ( sym )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:242: sym
        {
        pushFollow(FOLLOW_sym_in_synpred426_ChemicalChunker2614_static.FOLLOW_sym_in_synpred426_ChemicalChunker2614);
        sym();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred426_ChemicalChunker

    // $ANTLR start synpred427_ChemicalChunker
    public final void synpred427_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:246: ( noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:246: noun
        {
        pushFollow(FOLLOW_noun_in_synpred427_ChemicalChunker2616_static.FOLLOW_noun_in_synpred427_ChemicalChunker2616);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred427_ChemicalChunker

    // $ANTLR start synpred429_ChemicalChunker
    public final void synpred429_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:257: ( cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:257: cd
        {
        pushFollow(FOLLOW_cd_in_synpred429_ChemicalChunker2620_static.FOLLOW_cd_in_synpred429_ChemicalChunker2620);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred429_ChemicalChunker

    // $ANTLR start synpred430_ChemicalChunker
    public final void synpred430_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:260: ( comma )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:260: comma
        {
        pushFollow(FOLLOW_comma_in_synpred430_ChemicalChunker2622_static.FOLLOW_comma_in_synpred430_ChemicalChunker2622);
        comma();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred430_ChemicalChunker

    // $ANTLR start synpred431_ChemicalChunker
    public final void synpred431_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:266: ( adj )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:285:266: adj
        {
        pushFollow(FOLLOW_adj_in_synpred431_ChemicalChunker2624_static.FOLLOW_adj_in_synpred431_ChemicalChunker2624);
        adj();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred431_ChemicalChunker

    // $ANTLR start synpred437_ChemicalChunker
    public final void synpred437_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:32: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:32: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred437_ChemicalChunker2701_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred437_ChemicalChunker2701);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred437_ChemicalChunker

    // $ANTLR start synpred438_ChemicalChunker
    public final void synpred438_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:64: ( numeric )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:64: numeric
        {
        pushFollow(FOLLOW_numeric_in_synpred438_ChemicalChunker2703_static.FOLLOW_numeric_in_synpred438_ChemicalChunker2703);
        numeric();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred438_ChemicalChunker

    // $ANTLR start synpred440_ChemicalChunker
    public final void synpred440_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:87: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:87: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred440_ChemicalChunker2712_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred440_ChemicalChunker2712);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred440_ChemicalChunker

    // $ANTLR start synpred441_ChemicalChunker
    public final void synpred441_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:130: ( submethod )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:130: submethod
        {
        pushFollow(FOLLOW_submethod_in_synpred441_ChemicalChunker2719_static.FOLLOW_submethod_in_synpred441_ChemicalChunker2719);
        submethod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred441_ChemicalChunker

    // $ANTLR start synpred442_ChemicalChunker
    public final void synpred442_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:142: ( lrb submethod rrb )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:294:142: lrb submethod rrb
        {
        pushFollow(FOLLOW_lrb_in_synpred442_ChemicalChunker2723_static.FOLLOW_lrb_in_synpred442_ChemicalChunker2723);
        lrb();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_submethod_in_synpred442_ChemicalChunker2725_static.FOLLOW_submethod_in_synpred442_ChemicalChunker2725);
        submethod();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_rrb_in_synpred442_ChemicalChunker2727_static.FOLLOW_rrb_in_synpred442_ChemicalChunker2727);
        rrb();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred442_ChemicalChunker

    // $ANTLR start synpred444_ChemicalChunker
    public final void synpred444_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:35: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:296:35: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred444_ChemicalChunker2744_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred444_ChemicalChunker2744);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred444_ChemicalChunker

    // $ANTLR start synpred445_ChemicalChunker
    public final void synpred445_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:13: ( identifierOrBracketedIdentifier )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:299:13: identifierOrBracketedIdentifier
        {
        pushFollow(FOLLOW_identifierOrBracketedIdentifier_in_synpred445_ChemicalChunker2759_static.FOLLOW_identifierOrBracketedIdentifier_in_synpred445_ChemicalChunker2759);
        identifierOrBracketedIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred445_ChemicalChunker

    // $ANTLR start synpred453_ChemicalChunker
    public final void synpred453_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:9: ( cdRatioNode )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:308:9: cdRatioNode
        {
        pushFollow(FOLLOW_cdRatioNode_in_synpred453_ChemicalChunker2859_static.FOLLOW_cdRatioNode_in_synpred453_ChemicalChunker2859);
        cdRatioNode();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred453_ChemicalChunker

    // $ANTLR start synpred454_ChemicalChunker
    public final void synpred454_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:15: ( colon cd )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:311:15: colon cd
        {
        pushFollow(FOLLOW_colon_in_synpred454_ChemicalChunker2897_static.FOLLOW_colon_in_synpred454_ChemicalChunker2897);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_cd_in_synpred454_ChemicalChunker2899_static.FOLLOW_cd_in_synpred454_ChemicalChunker2899);
        cd();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred454_ChemicalChunker

    // $ANTLR start synpred455_ChemicalChunker
    public final void synpred455_ChemicalChunker_fragment() throws RecognitionException {   
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:12: ( colon noun )
        // uk\\ac\\cam\\ch\\wwmm\\pregenerated\\ChemicalChunker.g:313:12: colon noun
        {
        pushFollow(FOLLOW_colon_in_synpred455_ChemicalChunker2914_static.FOLLOW_colon_in_synpred455_ChemicalChunker2914);
        colon();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_noun_in_synpred455_ChemicalChunker2916_static.FOLLOW_noun_in_synpred455_ChemicalChunker2916);
        noun();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred455_ChemicalChunker

    // Delegated rules

    public final boolean synpred440_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred440_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred408_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred408_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred424_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred424_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred445_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred445_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred453_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred453_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred415_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred415_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred367_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred367_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred347_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred347_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred429_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred429_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred427_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred427_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred368_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred368_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred437_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred437_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred366_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred366_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred418_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred418_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred417_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred417_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred386_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred378_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred378_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred423_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred423_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred375_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred375_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred413_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred413_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred430_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred430_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred409_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred409_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred442_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred442_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred370_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred370_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred416_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred438_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred438_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred404_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred422_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred422_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred352_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred352_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred280_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred280_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred411_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred411_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred379_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred379_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred400_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred400_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred455_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred455_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred349_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred349_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred419_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred419_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred360_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred360_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred353_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred353_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred348_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred412_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred412_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred426_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred426_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred350_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred350_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred406_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred406_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred401_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred401_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred444_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred444_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred359_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred359_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred431_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred431_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred398_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred398_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred405_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred346_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred346_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred441_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred441_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred454_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred454_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred399_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred399_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_ChemicalChunker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_ChemicalChunker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA5 dfa5 = new DFA5(this);
    protected DFA6 dfa6 = new DFA6(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA12 dfa12 = new DFA12(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA14 dfa14 = new DFA14(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA120 dfa120 = new DFA120(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA193 dfa193 = new DFA193(this);
    protected DFA205 dfa205 = new DFA205(this);
    protected DFA213 dfa213 = new DFA213(this);
    static class DFA2_static {
    static final String DFA2_eotS =
        "\u0092\uffff";
    static final String DFA2_eofS =
        "\1\1\u0091\uffff";
    static final String DFA2_minS =
        "\1\46\1\uffff\u008e\0\2\uffff";
    static final String DFA2_maxS =
        "\1\u00b4\1\uffff\u008e\0\2\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\3\u008e\uffff\1\1\1\2";
    static final String DFA2_specialS =
        "\2\uffff\1\35\1\117\1\105\1\56\1\154\1\23\1\142\1\75\1\20\1\77"+
        "\1\114\1\124\1\16\1\164\1\53\1\41\1\170\1\115\1\2\1\134\1\34\1\126"+
        "\1\45\1\u008b\1\130\1\61\1\76\1\165\1\167\1\156\1\136\1\65\1\73"+
        "\1\157\1\64\1\u008c\1\24\1\u0084\1\5\1\47\1\40\1\175\1\174\1\66"+
        "\1\22\1\162\1\u0083\1\121\1\125\1\50\1\55\1\147\1\145\1\122\1\144"+
        "\1\123\1\173\1\100\1\33\1\70\1\6\1\27\1\14\1\104\1\51\1\u008a\1"+
        "\42\1\120\1\30\1\171\1\17\1\u0086\1\160\1\37\1\112\1\4\1\25\1\u0089"+
        "\1\155\1\7\1\140\1\72\1\137\1\131\1\102\1\153\1\10\1\52\1\15\1\12"+
        "\1\11\1\161\1\127\1\u0087\1\176\1\133\1\111\1\u0082\1\152\1\13\1"+
        "\141\1\31\1\106\1\74\1\57\1\135\1\143\1\107\1\u0085\1\u008d\1\150"+
        "\1\0\1\32\1\103\1\67\1\113\1\172\1\u0088\1\1\1\26\1\46\1\63\1\116"+
        "\1\132\1\146\1\166\1\71\1\60\1\44\1\u0080\1\163\1\36\1\54\1\62\1"+
        "\110\1\u0081\1\177\1\151\1\43\1\3\1\101\1\21\2\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\7\1\13\1\15\1\110\1\46\1\51\1\u0085\1\14\1\34\1\114\1\115"+
            "\1\113\1\121\1\122\1\131\1\132\1\116\1\130\1\123\1\125\1\117"+
            "\1\120\1\127\1\126\1\124\1\22\1\47\1\u0086\1\54\1\u0087\1\50"+
            "\1\55\1\64\1\21\1\52\1\5\1\53\1\41\1\42\1\16\1\56\1\57\1\60"+
            "\1\61\1\62\1\43\1\23\1\143\1\u0083\1\144\1\147\1\17\1\67\1\151"+
            "\1\150\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\25\1\161"+
            "\1\63\1\162\1\146\1\163\1\164\1\70\1\165\1\71\1\166\1\72\1\167"+
            "\1\170\1\145\1\171\1\172\1\73\1\173\1\65\1\174\1\175\1\176\1"+
            "\74\1\177\1\45\1\66\1\u0080\1\u0081\1\u0082\1\6\1\134\1\u0088"+
            "\1\20\1\u0089\1\u0084\1\u008a\1\1\1\u008b\1\35\1\u008c\1\36"+
            "\1\26\1\3\1\u008d\1\u008e\1\4\1\2\1\102\1\75\1\112\1\10\1\11"+
            "\1\12\1\105\1\133\1\24\1\44\1\33\1\106\1\103\1\107\1\37\1\40"+
            "\1\27\1\30\1\32\1\31\1\76\1\111\1\u008f\1\135\1\140\1\137\1"+
            "\142\1\136\1\141\1\77\1\104\1\100\1\101",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_static.DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_static.DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_static.DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_static.DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_static.DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_static.DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_static.DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()+ loopback of 81:13: ( sentenceStructure | unmatchedPhrase )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_113);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_120);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA2_20 = input.LA(1);

                         
                        int index2_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_20);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_141);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA2_77 = input.LA(1);

                         
                        int index2_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_77);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA2_40 = input.LA(1);

                         
                        int index2_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_40);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA2_62 = input.LA(1);

                         
                        int index2_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_62);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA2_81 = input.LA(1);

                         
                        int index2_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_81);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_88);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_92);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_91);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_101);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA2_64 = input.LA(1);

                         
                        int index2_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_64);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_90);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA2_14 = input.LA(1);

                         
                        int index2_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_14);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA2_72 = input.LA(1);

                         
                        int index2_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_72);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA2_10 = input.LA(1);

                         
                        int index2_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_10);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA2_143 = input.LA(1);

                         
                        int index2_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_143);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA2_46 = input.LA(1);

                         
                        int index2_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_46);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA2_7 = input.LA(1);

                         
                        int index2_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_7);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA2_38 = input.LA(1);

                         
                        int index2_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_38);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA2_78 = input.LA(1);

                         
                        int index2_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_78);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_121);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA2_63 = input.LA(1);

                         
                        int index2_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_63);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA2_70 = input.LA(1);

                         
                        int index2_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_70);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_103);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_114);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA2_60 = input.LA(1);

                         
                        int index2_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_60);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA2_22 = input.LA(1);

                         
                        int index2_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_22);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA2_2 = input.LA(1);

                         
                        int index2_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_2);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_133);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA2_75 = input.LA(1);

                         
                        int index2_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_75);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA2_42 = input.LA(1);

                         
                        int index2_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_42);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA2_17 = input.LA(1);

                         
                        int index2_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_17);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA2_68 = input.LA(1);

                         
                        int index2_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_68);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_140);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_130);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA2_24 = input.LA(1);

                         
                        int index2_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_24);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_122);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA2_41 = input.LA(1);

                         
                        int index2_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_41);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA2_51 = input.LA(1);

                         
                        int index2_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_51);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA2_66 = input.LA(1);

                         
                        int index2_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_66);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_89);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA2_16 = input.LA(1);

                         
                        int index2_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_16);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_134);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA2_52 = input.LA(1);

                         
                        int index2_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_52);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA2_5 = input.LA(1);

                         
                        int index2_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_5);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_106);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_129);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_27);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_135);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_123);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA2_36 = input.LA(1);

                         
                        int index2_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_36);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_33);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA2_45 = input.LA(1);

                         
                        int index2_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_45);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_116);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA2_61 = input.LA(1);

                         
                        int index2_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_61);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_128);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA2_83 = input.LA(1);

                         
                        int index2_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_83);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA2_34 = input.LA(1);

                         
                        int index2_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_34);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_105);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA2_9 = input.LA(1);

                         
                        int index2_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_9);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA2_28 = input.LA(1);

                         
                        int index2_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_28);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA2_11 = input.LA(1);

                         
                        int index2_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_11);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA2_59 = input.LA(1);

                         
                        int index2_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_59);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_142);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA2_86 = input.LA(1);

                         
                        int index2_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_86);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_115);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA2_65 = input.LA(1);

                         
                        int index2_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_65);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA2_4 = input.LA(1);

                         
                        int index2_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_4);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_104);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_109);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_136);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_98);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA2_76 = input.LA(1);

                         
                        int index2_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_76);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_117);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA2_12 = input.LA(1);

                         
                        int index2_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_12);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA2_19 = input.LA(1);

                         
                        int index2_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_19);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_124);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA2_3 = input.LA(1);

                         
                        int index2_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_3);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA2_69 = input.LA(1);

                         
                        int index2_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_69);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA2_49 = input.LA(1);

                         
                        int index2_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_49);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA2_55 = input.LA(1);

                         
                        int index2_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_55);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA2_57 = input.LA(1);

                         
                        int index2_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_57);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA2_13 = input.LA(1);

                         
                        int index2_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_13);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA2_50 = input.LA(1);

                         
                        int index2_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_50);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA2_23 = input.LA(1);

                         
                        int index2_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_23);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_94);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA2_26 = input.LA(1);

                         
                        int index2_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_26);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA2_85 = input.LA(1);

                         
                        int index2_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_85);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_125);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_97);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA2_21 = input.LA(1);

                         
                        int index2_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_21);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_107);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA2_32 = input.LA(1);

                         
                        int index2_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_32);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA2_84 = input.LA(1);

                         
                        int index2_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_84);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA2_82 = input.LA(1);

                         
                        int index2_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_82);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_102);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA2_8 = input.LA(1);

                         
                        int index2_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_8);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_108);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA2_56 = input.LA(1);

                         
                        int index2_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_56);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA2_54 = input.LA(1);

                         
                        int index2_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_54);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_126);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA2_53 = input.LA(1);

                         
                        int index2_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_53);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_112);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_139);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_100);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_87);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA2_6 = input.LA(1);

                         
                        int index2_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_6);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA2_80 = input.LA(1);

                         
                        int index2_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_80);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_31);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA2_35 = input.LA(1);

                         
                        int index2_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_35);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA2_74 = input.LA(1);

                         
                        int index2_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_74);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_93);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA2_47 = input.LA(1);

                         
                        int index2_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_47);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_132);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA2_15 = input.LA(1);

                         
                        int index2_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_15);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_29);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_127);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA2_30 = input.LA(1);

                         
                        int index2_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred2_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred2_ChemicalChunker())) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_30);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA2_18 = input.LA(1);

                         
                        int index2_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_18);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA2_71 = input.LA(1);

                         
                        int index2_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_71);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_118);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA2_58 = input.LA(1);

                         
                        int index2_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_58);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA2_44 = input.LA(1);

                         
                        int index2_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_44);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA2_43 = input.LA(1);

                         
                        int index2_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_43);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_96);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_138);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_131);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_137);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_99);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA2_48 = input.LA(1);

                         
                        int index2_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_48);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA2_39 = input.LA(1);

                         
                        int index2_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_39);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_110);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA2_73 = input.LA(1);

                         
                        int index2_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_73);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_95);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_119);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA2_79 = input.LA(1);

                         
                        int index2_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_79);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA2_67 = input.LA(1);

                         
                        int index2_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_67);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_25);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA2_37 = input.LA(1);

                         
                        int index2_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_37);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_ChemicalChunker()) ) {s = 144;}

                        else if ( (synpred3_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index2_111);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA4_static {
    static final String DFA4_eotS =
        "\u0089\uffff";
    static final String DFA4_eofS =
        "\1\13\u0088\uffff";
    static final String DFA4_minS =
        "\1\46\12\0\1\uffff\171\0\4\uffff";
    static final String DFA4_maxS =
        "\1\u00b4\12\0\1\uffff\171\0\4\uffff";
    static final String DFA4_acceptS =
        "\13\uffff\1\5\171\uffff\1\1\1\2\1\3\1\4";
    static final String DFA4_specialS =
        "\1\uffff\1\64\1\156\1\174\1\101\1\162\1\100\1\55\1\13\1\161\1\30"+
        "\1\uffff\1\147\1\23\1\7\1\21\1\63\1\20\1\155\1\27\1\105\1\124\1"+
        "\60\1\172\1\0\1\54\1\14\1\3\1\142\1\117\1\130\1\112\1\15\1\53\1"+
        "\11\1\33\1\104\1\52\1\146\1\6\1\u0080\1\125\1\144\1\102\1\57\1\2"+
        "\1\120\1\176\1\123\1\111\1\73\1\45\1\106\1\175\1\17\1\157\1\35\1"+
        "\16\1\46\1\u0081\1\134\1\136\1\77\1\37\1\122\1\166\1\10\1\51\1\145"+
        "\1\133\1\143\1\160\1\42\1\31\1\22\1\127\1\137\1\u0082\1\65\1\153"+
        "\1\32\1\74\1\170\1\44\1\131\1\151\1\165\1\24\1\126\1\72\1\70\1\115"+
        "\1\61\1\163\1\56\1\43\1\26\1\67\1\62\1\41\1\75\1\25\1\5\1\76\1\121"+
        "\1\107\1\177\1\152\1\167\1\141\1\154\1\132\1\114\1\50\1\40\1\171"+
        "\1\164\1\135\1\103\1\47\1\36\1\4\1\150\1\113\1\140\1\66\1\71\1\12"+
        "\1\173\1\116\1\110\1\1\1\34\4\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\23\1\10\1\12\1\111\1\47\1\52\1\13\1\11\1\35\1\115\1\116"+
            "\1\114\1\122\1\123\1\132\1\133\1\117\1\131\1\124\1\126\1\120"+
            "\1\121\1\130\1\127\1\125\1\27\1\50\1\13\1\55\1\13\1\51\1\56"+
            "\1\65\1\26\1\53\1\21\1\54\1\42\1\43\1\24\1\57\1\60\1\61\1\62"+
            "\1\63\1\44\1\30\1\143\1\u0083\1\144\1\147\1\25\1\70\1\151\1"+
            "\150\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\32\1\161\1"+
            "\64\1\162\1\146\1\163\1\164\1\71\1\165\1\72\1\166\1\73\1\167"+
            "\1\170\1\145\1\171\1\172\1\74\1\173\1\66\1\174\1\175\1\176\1"+
            "\75\1\177\1\46\1\67\1\u0080\1\u0081\1\u0082\1\22\1\15\1\13\1"+
            "\14\1\13\1\u0084\3\13\1\36\1\13\1\37\1\33\1\17\2\13\1\20\1\16"+
            "\1\103\1\76\1\113\1\5\1\6\1\7\1\106\1\134\1\31\1\45\1\34\1\107"+
            "\1\104\1\110\1\40\1\41\1\1\1\2\1\4\1\3\1\77\1\112\1\13\1\135"+
            "\1\140\1\137\1\142\1\136\1\141\1\100\1\105\1\101\1\102",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_static.DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_static.DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_static.DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_static.DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_static.DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_static.DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_static.DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()+ loopback of 83:21: ( nounphrase | verbphrase | prepphrase | prepphraseAfter )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA4_24 = input.LA(1);

                         
                        int index4_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_24);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA4_131 = input.LA(1);

                         
                        int index4_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_131);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA4_45 = input.LA(1);

                         
                        int index4_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_45);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA4_27 = input.LA(1);

                         
                        int index4_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_27);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA4_121 = input.LA(1);

                         
                        int index4_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_121);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA4_102 = input.LA(1);

                         
                        int index4_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_102);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA4_39 = input.LA(1);

                         
                        int index4_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_39);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA4_14 = input.LA(1);

                         
                        int index4_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_14);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA4_66 = input.LA(1);

                         
                        int index4_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_66);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA4_34 = input.LA(1);

                         
                        int index4_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_34);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA4_127 = input.LA(1);

                         
                        int index4_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_127);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA4_8 = input.LA(1);

                         
                        int index4_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_8);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA4_26 = input.LA(1);

                         
                        int index4_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_26);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA4_32 = input.LA(1);

                         
                        int index4_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_32);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA4_57 = input.LA(1);

                         
                        int index4_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_57);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA4_54 = input.LA(1);

                         
                        int index4_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_54);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA4_17 = input.LA(1);

                         
                        int index4_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA4_15 = input.LA(1);

                         
                        int index4_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_15);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA4_74 = input.LA(1);

                         
                        int index4_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_74);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA4_13 = input.LA(1);

                         
                        int index4_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_13);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA4_87 = input.LA(1);

                         
                        int index4_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_87);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA4_101 = input.LA(1);

                         
                        int index4_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_101);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA4_96 = input.LA(1);

                         
                        int index4_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_96);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA4_19 = input.LA(1);

                         
                        int index4_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_19);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA4_10 = input.LA(1);

                         
                        int index4_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_10);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA4_73 = input.LA(1);

                         
                        int index4_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_73);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA4_80 = input.LA(1);

                         
                        int index4_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_80);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA4_35 = input.LA(1);

                         
                        int index4_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_35);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA4_132 = input.LA(1);

                         
                        int index4_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_132);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA4_56 = input.LA(1);

                         
                        int index4_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_56);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA4_120 = input.LA(1);

                         
                        int index4_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_120);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA4_63 = input.LA(1);

                         
                        int index4_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_63);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA4_114 = input.LA(1);

                         
                        int index4_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_114);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA4_99 = input.LA(1);

                         
                        int index4_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_99);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA4_72 = input.LA(1);

                         
                        int index4_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_72);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA4_95 = input.LA(1);

                         
                        int index4_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_95);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA4_83 = input.LA(1);

                         
                        int index4_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_83);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA4_51 = input.LA(1);

                         
                        int index4_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_51);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA4_58 = input.LA(1);

                         
                        int index4_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_58);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA4_119 = input.LA(1);

                         
                        int index4_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_119);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA4_113 = input.LA(1);

                         
                        int index4_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_113);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA4_67 = input.LA(1);

                         
                        int index4_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_67);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA4_37 = input.LA(1);

                         
                        int index4_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_37);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA4_33 = input.LA(1);

                         
                        int index4_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_33);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA4_25 = input.LA(1);

                         
                        int index4_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_25);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA4_7 = input.LA(1);

                         
                        int index4_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_7);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA4_94 = input.LA(1);

                         
                        int index4_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_94);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA4_44 = input.LA(1);

                         
                        int index4_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_44);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA4_22 = input.LA(1);

                         
                        int index4_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_22);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA4_92 = input.LA(1);

                         
                        int index4_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_92);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA4_98 = input.LA(1);

                         
                        int index4_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_98);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA4_16 = input.LA(1);

                         
                        int index4_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_16);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA4_1 = input.LA(1);

                         
                        int index4_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_1);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA4_78 = input.LA(1);

                         
                        int index4_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_78);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA4_125 = input.LA(1);

                         
                        int index4_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_125);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA4_97 = input.LA(1);

                         
                        int index4_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_97);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA4_90 = input.LA(1);

                         
                        int index4_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_90);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA4_126 = input.LA(1);

                         
                        int index4_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_126);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA4_89 = input.LA(1);

                         
                        int index4_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_89);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA4_50 = input.LA(1);

                         
                        int index4_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_50);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA4_81 = input.LA(1);

                         
                        int index4_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_81);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA4_100 = input.LA(1);

                         
                        int index4_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_100);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA4_103 = input.LA(1);

                         
                        int index4_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_103);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA4_62 = input.LA(1);

                         
                        int index4_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_62);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA4_6 = input.LA(1);

                         
                        int index4_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_6);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA4_4 = input.LA(1);

                         
                        int index4_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_4);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA4_43 = input.LA(1);

                         
                        int index4_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_43);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA4_118 = input.LA(1);

                         
                        int index4_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_118);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA4_36 = input.LA(1);

                         
                        int index4_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_36);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA4_20 = input.LA(1);

                         
                        int index4_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_20);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA4_52 = input.LA(1);

                         
                        int index4_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_52);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA4_105 = input.LA(1);

                         
                        int index4_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_105);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA4_130 = input.LA(1);

                         
                        int index4_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_130);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA4_49 = input.LA(1);

                         
                        int index4_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_49);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA4_31 = input.LA(1);

                         
                        int index4_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_31);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA4_123 = input.LA(1);

                         
                        int index4_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_123);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA4_112 = input.LA(1);

                         
                        int index4_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_112);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA4_91 = input.LA(1);

                         
                        int index4_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_91);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA4_129 = input.LA(1);

                         
                        int index4_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_129);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA4_29 = input.LA(1);

                         
                        int index4_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_29);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA4_46 = input.LA(1);

                         
                        int index4_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_46);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA4_104 = input.LA(1);

                         
                        int index4_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_104);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA4_64 = input.LA(1);

                         
                        int index4_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_64);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA4_48 = input.LA(1);

                         
                        int index4_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_48);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA4_21 = input.LA(1);

                         
                        int index4_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_21);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA4_41 = input.LA(1);

                         
                        int index4_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_41);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA4_88 = input.LA(1);

                         
                        int index4_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_88);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA4_75 = input.LA(1);

                         
                        int index4_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_75);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA4_30 = input.LA(1);

                         
                        int index4_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred5_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred5_ChemicalChunker())) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_30);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA4_84 = input.LA(1);

                         
                        int index4_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_84);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA4_111 = input.LA(1);

                         
                        int index4_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_111);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA4_69 = input.LA(1);

                         
                        int index4_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_69);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA4_60 = input.LA(1);

                         
                        int index4_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_60);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA4_117 = input.LA(1);

                         
                        int index4_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_117);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA4_61 = input.LA(1);

                         
                        int index4_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_61);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA4_76 = input.LA(1);

                         
                        int index4_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_76);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA4_124 = input.LA(1);

                         
                        int index4_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_124);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA4_109 = input.LA(1);

                         
                        int index4_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_109);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA4_28 = input.LA(1);

                         
                        int index4_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_28);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA4_70 = input.LA(1);

                         
                        int index4_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_70);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA4_42 = input.LA(1);

                         
                        int index4_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_42);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA4_68 = input.LA(1);

                         
                        int index4_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_68);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA4_38 = input.LA(1);

                         
                        int index4_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_38);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA4_12 = input.LA(1);

                         
                        int index4_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_12);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA4_122 = input.LA(1);

                         
                        int index4_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_122);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA4_85 = input.LA(1);

                         
                        int index4_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_85);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA4_107 = input.LA(1);

                         
                        int index4_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_107);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA4_79 = input.LA(1);

                         
                        int index4_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_79);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA4_110 = input.LA(1);

                         
                        int index4_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_110);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA4_18 = input.LA(1);

                         
                        int index4_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_18);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA4_2 = input.LA(1);

                         
                        int index4_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_2);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA4_55 = input.LA(1);

                         
                        int index4_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_55);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA4_71 = input.LA(1);

                         
                        int index4_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_71);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA4_9 = input.LA(1);

                         
                        int index4_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_9);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA4_5 = input.LA(1);

                         
                        int index4_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_5);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA4_93 = input.LA(1);

                         
                        int index4_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_93);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA4_116 = input.LA(1);

                         
                        int index4_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_116);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA4_86 = input.LA(1);

                         
                        int index4_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_86);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA4_65 = input.LA(1);

                         
                        int index4_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_65);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA4_108 = input.LA(1);

                         
                        int index4_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_108);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA4_82 = input.LA(1);

                         
                        int index4_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_82);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA4_115 = input.LA(1);

                         
                        int index4_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_115);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA4_23 = input.LA(1);

                         
                        int index4_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_23);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA4_128 = input.LA(1);

                         
                        int index4_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_128);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA4_3 = input.LA(1);

                         
                        int index4_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred8_ChemicalChunker()) ) {s = 136;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_3);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA4_53 = input.LA(1);

                         
                        int index4_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_53);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA4_47 = input.LA(1);

                         
                        int index4_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_47);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA4_106 = input.LA(1);

                         
                        int index4_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_106);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA4_40 = input.LA(1);

                         
                        int index4_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_40);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA4_59 = input.LA(1);

                         
                        int index4_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_ChemicalChunker()) ) {s = 133;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_59);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA4_77 = input.LA(1);

                         
                        int index4_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred7_ChemicalChunker()) ) {s = 135;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index4_77);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 4, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA5_static {
    static final String DFA5_eotS =
        "\32\uffff";
    static final String DFA5_eofS =
        "\1\1\31\uffff";
    static final String DFA5_minS =
        "\1\46\1\uffff\13\45\13\0\2\uffff";
    static final String DFA5_maxS =
        "\1\u00b4\1\uffff\13\45\13\0\2\uffff";
    static final String DFA5_acceptS =
        "\1\uffff\1\3\26\uffff\1\1\1\2";
    static final String DFA5_specialS =
        "\15\uffff\1\4\1\0\1\7\1\11\1\10\1\12\1\1\1\2\1\3\1\6\1\5\2\uffff}>";
    static final String[] DFA5_transitionS = {
            "\1\1\1\5\1\7\4\1\1\6\126\1\1\14\22\1\1\2\1\3\1\4\12\1\1\10"+
            "\1\11\1\13\1\12\15\1",
            "",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_static.DFA5_eotS);
    static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_static.DFA5_eofS);
    static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_minS);
    static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_static.DFA5_maxS);
    static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_static.DFA5_acceptS);
    static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_static.DFA5_specialS);
    static final short[][] DFA5_transition;

    static {
        int numStates = DFA5_static.DFA5_transitionS.length;
        DFA5_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA5_transition[i] = DFA.unpackEncodedString(DFA5_static.DFA5_transitionS[i]);
        }
    }

    class DFA5 extends DFA {

        public DFA5(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 5;
            this.eot = DFA5_eot;
            this.eof = DFA5_eof;
            this.min = DFA5_min;
            this.max = DFA5_max;
            this.accept = DFA5_accept;
            this.special = DFA5_special;
            this.transition = DFA5_transition;
        }
        public String getDescription() {
            return "()* loopback of 83:73: ( advAdj | colon )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA5_14 = input.LA(1);

                         
                        int index5_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_14);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA5_19 = input.LA(1);

                         
                        int index5_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_19);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA5_20 = input.LA(1);

                         
                        int index5_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_20);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA5_21 = input.LA(1);

                         
                        int index5_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_21);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA5_13 = input.LA(1);

                         
                        int index5_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA5_23 = input.LA(1);

                         
                        int index5_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred10_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_23);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA5_22 = input.LA(1);

                         
                        int index5_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_22);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA5_15 = input.LA(1);

                         
                        int index5_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_15);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA5_17 = input.LA(1);

                         
                        int index5_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA5_16 = input.LA(1);

                         
                        int index5_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_16);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA5_18 = input.LA(1);

                         
                        int index5_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index5_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 5, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA6_static {
    static final String DFA6_eotS =
        "\13\uffff";
    static final String DFA6_eofS =
        "\1\1\12\uffff";
    static final String DFA6_minS =
        "\1\46\1\uffff\3\45\3\0\3\uffff";
    static final String DFA6_maxS =
        "\1\u00b4\1\uffff\3\45\3\0\3\uffff";
    static final String DFA6_acceptS =
        "\1\uffff\1\4\6\uffff\1\1\1\3\1\2";
    static final String DFA6_specialS =
        "\5\uffff\1\1\1\2\1\0\3\uffff}>";
    static final String[] DFA6_transitionS = {
            "\135\1\1\3\1\1\1\2\13\1\1\4\43\1",
            "",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    }

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_static.DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_static.DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_static.DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_static.DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_static.DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_static.DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_static.DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 83:89: ( conjunction | rbconj | comma )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA6_7 = input.LA(1);

                         
                        int index6_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_7);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_5 = input.LA(1);

                         
                        int index6_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_ChemicalChunker()) ) {s = 8;}

                        else if ( (synpred13_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_5);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_6 = input.LA(1);

                         
                        int index6_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred12_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index6_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA8_static {
    static final String DFA8_eotS =
        "\111\uffff";
    static final String DFA8_eofS =
        "\111\uffff";
    static final String DFA8_minS =
        "\1\46\24\0\64\uffff";
    static final String DFA8_maxS =
        "\1\u00b4\24\0\64\uffff";
    static final String DFA8_acceptS =
        "\25\uffff\1\2\62\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\64\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\6\1\12\1\14\3\25\1\uffff\1\13\1\25\20\uffff\1\21\1\25\1"+
            "\uffff\1\25\1\uffff\3\25\1\20\1\25\1\4\3\25\1\15\6\25\1\22\4"+
            "\uffff\1\16\1\25\11\uffff\1\24\1\uffff\1\25\4\uffff\1\25\1\uffff"+
            "\1\25\1\uffff\1\25\5\uffff\1\25\1\uffff\1\25\3\uffff\1\25\1"+
            "\uffff\2\25\3\uffff\1\5\2\uffff\1\17\5\uffff\1\25\1\uffff\2"+
            "\25\1\2\2\uffff\1\3\1\1\2\25\1\uffff\1\7\1\10\1\11\1\25\1\uffff"+
            "\1\23\14\25\10\uffff\4\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_static.DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_static.DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_static.DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_static.DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_static.DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_static.DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_static.DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "97:1: nounphraseStructure : ( nounphraseStructure1 | nounphraseStructure2 );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA8_2 = input.LA(1);

                         
                        int index8_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA8_3 = input.LA(1);

                         
                        int index8_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA8_4 = input.LA(1);

                         
                        int index8_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA8_5 = input.LA(1);

                         
                        int index8_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA8_6 = input.LA(1);

                         
                        int index8_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA8_7 = input.LA(1);

                         
                        int index8_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA8_8 = input.LA(1);

                         
                        int index8_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA8_9 = input.LA(1);

                         
                        int index8_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA8_10 = input.LA(1);

                         
                        int index8_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA8_11 = input.LA(1);

                         
                        int index8_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA8_12 = input.LA(1);

                         
                        int index8_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA8_13 = input.LA(1);

                         
                        int index8_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA8_14 = input.LA(1);

                         
                        int index8_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA8_15 = input.LA(1);

                         
                        int index8_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA8_16 = input.LA(1);

                         
                        int index8_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA8_17 = input.LA(1);

                         
                        int index8_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA8_18 = input.LA(1);

                         
                        int index8_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA8_19 = input.LA(1);

                         
                        int index8_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA8_20 = input.LA(1);

                         
                        int index8_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_ChemicalChunker()) ) {s = 72;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index8_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA12_static {
    static final String DFA12_eotS =
        "\112\uffff";
    static final String DFA12_eofS =
        "\1\1\111\uffff";
    static final String DFA12_minS =
        "\1\46\1\uffff\107\0\1\uffff";
    static final String DFA12_maxS =
        "\1\u00b4\1\uffff\107\0\1\uffff";
    static final String DFA12_acceptS =
        "\1\uffff\1\2\107\uffff\1\1";
    static final String DFA12_specialS =
        "\2\uffff\1\52\1\70\1\27\1\54\1\103\1\100\1\17\1\73\1\2\1\66\1\71"+
        "\1\11\1\16\1\102\1\41\1\23\1\72\1\105\1\33\1\50\1\1\1\60\1\37\1"+
        "\75\1\12\1\77\1\104\1\63\1\46\1\76\1\5\1\40\1\35\1\20\1\51\1\6\1"+
        "\65\1\44\1\7\1\22\1\45\1\43\1\15\1\55\1\47\1\106\1\24\1\62\1\67"+
        "\1\14\1\26\1\42\1\34\1\61\1\101\1\74\1\57\1\31\1\4\1\32\1\10\1\53"+
        "\1\56\1\13\1\21\1\64\1\3\1\0\1\36\1\25\1\30\1\uffff}>";
    static final String[] DFA12_transitionS = {
            "\1\23\1\11\1\13\1\110\1\46\1\51\1\1\1\12\1\34\20\1\1\27\1\47"+
            "\1\1\1\54\1\1\1\50\1\55\1\64\1\26\1\52\1\21\1\53\1\41\1\42\1"+
            "\24\1\56\1\57\1\60\1\61\1\62\1\43\1\30\4\1\1\25\1\67\11\1\1"+
            "\32\1\1\1\63\4\1\1\70\1\1\1\71\1\1\1\72\5\1\1\73\1\1\1\65\3"+
            "\1\1\74\1\1\1\45\1\66\3\1\1\22\2\1\1\15\5\1\1\35\1\1\1\36\1"+
            "\1\1\17\1\1\1\14\1\20\1\16\1\102\1\75\1\1\1\6\1\7\1\10\1\105"+
            "\1\1\1\31\1\44\1\33\1\106\1\103\1\107\1\37\1\40\1\2\1\3\1\5"+
            "\1\4\1\76\10\1\1\77\1\104\1\100\1\101",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA12_eot = DFA.unpackEncodedString(DFA12_static.DFA12_eotS);
    static final short[] DFA12_eof = DFA.unpackEncodedString(DFA12_static.DFA12_eofS);
    static final char[] DFA12_min = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_minS);
    static final char[] DFA12_max = DFA.unpackEncodedStringToUnsignedChars(DFA12_static.DFA12_maxS);
    static final short[] DFA12_accept = DFA.unpackEncodedString(DFA12_static.DFA12_acceptS);
    static final short[] DFA12_special = DFA.unpackEncodedString(DFA12_static.DFA12_specialS);
    static final short[][] DFA12_transition;

    static {
        int numStates = DFA12_static.DFA12_transitionS.length;
        DFA12_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA12_transition[i] = DFA.unpackEncodedString(DFA12_static.DFA12_transitionS[i]);
        }
    }

    class DFA12 extends DFA {

        public DFA12(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 12;
            this.eot = DFA12_eot;
            this.eof = DFA12_eof;
            this.min = DFA12_min;
            this.max = DFA12_max;
            this.accept = DFA12_accept;
            this.special = DFA12_special;
            this.transition = DFA12_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:34: ( ( conjunction )* nounphraseContent )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA12_69 = input.LA(1);

                         
                        int index12_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_69);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA12_22 = input.LA(1);

                         
                        int index12_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_22);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA12_10 = input.LA(1);

                         
                        int index12_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA12_68 = input.LA(1);

                         
                        int index12_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_68);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA12_60 = input.LA(1);

                         
                        int index12_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_60);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA12_32 = input.LA(1);

                         
                        int index12_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_32);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA12_37 = input.LA(1);

                         
                        int index12_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_37);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA12_40 = input.LA(1);

                         
                        int index12_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_40);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA12_62 = input.LA(1);

                         
                        int index12_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_62);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA12_13 = input.LA(1);

                         
                        int index12_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_13);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA12_26 = input.LA(1);

                         
                        int index12_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_26);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA12_65 = input.LA(1);

                         
                        int index12_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_65);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA12_51 = input.LA(1);

                         
                        int index12_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_51);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA12_44 = input.LA(1);

                         
                        int index12_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_44);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA12_14 = input.LA(1);

                         
                        int index12_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_14);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA12_8 = input.LA(1);

                         
                        int index12_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_8);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA12_35 = input.LA(1);

                         
                        int index12_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_35);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA12_66 = input.LA(1);

                         
                        int index12_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_66);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA12_41 = input.LA(1);

                         
                        int index12_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_41);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA12_17 = input.LA(1);

                         
                        int index12_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_17);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA12_48 = input.LA(1);

                         
                        int index12_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_48);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA12_71 = input.LA(1);

                         
                        int index12_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_71);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA12_52 = input.LA(1);

                         
                        int index12_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_52);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA12_4 = input.LA(1);

                         
                        int index12_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_4);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA12_72 = input.LA(1);

                         
                        int index12_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_72);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA12_59 = input.LA(1);

                         
                        int index12_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_59);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA12_61 = input.LA(1);

                         
                        int index12_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_61);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA12_20 = input.LA(1);

                         
                        int index12_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_20);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA12_54 = input.LA(1);

                         
                        int index12_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_54);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA12_34 = input.LA(1);

                         
                        int index12_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_34);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA12_70 = input.LA(1);

                         
                        int index12_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_70);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA12_24 = input.LA(1);

                         
                        int index12_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_24);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA12_33 = input.LA(1);

                         
                        int index12_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_33);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA12_16 = input.LA(1);

                         
                        int index12_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_16);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA12_53 = input.LA(1);

                         
                        int index12_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_53);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA12_43 = input.LA(1);

                         
                        int index12_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_43);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA12_39 = input.LA(1);

                         
                        int index12_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_39);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA12_42 = input.LA(1);

                         
                        int index12_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_42);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA12_30 = input.LA(1);

                         
                        int index12_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_30);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA12_46 = input.LA(1);

                         
                        int index12_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_46);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA12_21 = input.LA(1);

                         
                        int index12_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_21);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA12_36 = input.LA(1);

                         
                        int index12_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_36);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA12_2 = input.LA(1);

                         
                        int index12_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_2);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA12_63 = input.LA(1);

                         
                        int index12_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_63);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA12_5 = input.LA(1);

                         
                        int index12_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_5);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA12_45 = input.LA(1);

                         
                        int index12_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_45);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA12_64 = input.LA(1);

                         
                        int index12_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_64);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA12_58 = input.LA(1);

                         
                        int index12_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_58);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA12_23 = input.LA(1);

                         
                        int index12_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_23);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA12_55 = input.LA(1);

                         
                        int index12_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_55);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA12_49 = input.LA(1);

                         
                        int index12_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_49);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA12_29 = input.LA(1);

                         
                        int index12_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_29);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA12_67 = input.LA(1);

                         
                        int index12_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_67);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA12_38 = input.LA(1);

                         
                        int index12_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_38);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA12_11 = input.LA(1);

                         
                        int index12_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_11);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA12_50 = input.LA(1);

                         
                        int index12_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_50);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA12_3 = input.LA(1);

                         
                        int index12_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_3);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA12_12 = input.LA(1);

                         
                        int index12_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_12);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA12_18 = input.LA(1);

                         
                        int index12_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_18);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA12_9 = input.LA(1);

                         
                        int index12_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_9);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA12_57 = input.LA(1);

                         
                        int index12_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_57);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA12_25 = input.LA(1);

                         
                        int index12_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_25);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA12_31 = input.LA(1);

                         
                        int index12_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_31);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA12_27 = input.LA(1);

                         
                        int index12_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_27);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA12_7 = input.LA(1);

                         
                        int index12_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_7);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA12_56 = input.LA(1);

                         
                        int index12_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_56);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA12_15 = input.LA(1);

                         
                        int index12_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_15);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA12_6 = input.LA(1);

                         
                        int index12_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_6);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA12_28 = input.LA(1);

                         
                        int index12_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_28);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA12_19 = input.LA(1);

                         
                        int index12_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred88_ChemicalChunker()||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||(synpred88_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_19);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA12_47 = input.LA(1);

                         
                        int index12_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred88_ChemicalChunker()) ) {s = 73;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index12_47);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 12, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA11_static {
    static final String DFA11_eotS =
        "\110\uffff";
    static final String DFA11_eofS =
        "\110\uffff";
    static final String DFA11_minS =
        "\1\46\20\uffff\1\0\66\uffff";
    static final String DFA11_maxS =
        "\1\u00b4\20\uffff\1\0\66\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA11_specialS =
        "\21\uffff\1\0\66\uffff}>";
    static final String[] DFA11_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\21\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_static.DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_static.DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_static.DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_static.DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_static.DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_static.DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_static.DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA11_17 = input.LA(1);

                         
                        int index11_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index11_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 11, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA14_static {
    static final String DFA14_eotS =
        "\17\uffff";
    static final String DFA14_eofS =
        "\17\uffff";
    static final String DFA14_minS =
        "\1\46\6\45\2\uffff\6\0";
    static final String DFA14_maxS =
        "\1\u00b4\6\45\2\uffff\6\0";
    static final String DFA14_acceptS =
        "\7\uffff\1\2\1\1\6\uffff";
    static final String DFA14_specialS =
        "\11\uffff\1\3\1\0\1\1\1\4\1\2\1\5}>";
    static final String[] DFA14_transitionS = {
            "\1\7\1\4\1\6\3\7\1\uffff\1\5\1\7\20\uffff\2\7\1\uffff\1\7\1"+
            "\uffff\21\7\4\uffff\2\7\11\uffff\1\7\1\uffff\1\7\4\uffff\1\7"+
            "\1\uffff\1\7\1\uffff\1\7\5\uffff\1\7\1\uffff\1\7\3\uffff\1\7"+
            "\1\uffff\2\7\3\uffff\1\7\2\uffff\1\7\5\uffff\1\7\1\uffff\1\7"+
            "\1\uffff\1\7\2\uffff\4\7\1\uffff\1\1\1\2\1\3\1\7\1\uffff\10"+
            "\7\4\10\1\7\10\uffff\4\7",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA14_eot = DFA.unpackEncodedString(DFA14_static.DFA14_eotS);
    static final short[] DFA14_eof = DFA.unpackEncodedString(DFA14_static.DFA14_eofS);
    static final char[] DFA14_min = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_minS);
    static final char[] DFA14_max = DFA.unpackEncodedStringToUnsignedChars(DFA14_static.DFA14_maxS);
    static final short[] DFA14_accept = DFA.unpackEncodedString(DFA14_static.DFA14_acceptS);
    static final short[] DFA14_special = DFA.unpackEncodedString(DFA14_static.DFA14_specialS);
    static final short[][] DFA14_transition;

    static {
        int numStates = DFA14_static.DFA14_transitionS.length;
        DFA14_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA14_transition[i] = DFA.unpackEncodedString(DFA14_static.DFA14_transitionS[i]);
        }
    }

    class DFA14 extends DFA {

        public DFA14(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 14;
            this.eot = DFA14_eot;
            this.eof = DFA14_eof;
            this.min = DFA14_min;
            this.max = DFA14_max;
            this.accept = DFA14_accept;
            this.special = DFA14_special;
            this.transition = DFA14_transition;
        }
        public String getDescription() {
            return "()* loopback of 105:4: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA14_10 = input.LA(1);

                         
                        int index14_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_10);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA14_11 = input.LA(1);

                         
                        int index14_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_11);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA14_13 = input.LA(1);

                         
                        int index14_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA14_9 = input.LA(1);

                         
                        int index14_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA14_12 = input.LA(1);

                         
                        int index14_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_12);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA14_14 = input.LA(1);

                         
                        int index14_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred91_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index14_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 14, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA15_static {
    static final String DFA15_eotS =
        "\110\uffff";
    static final String DFA15_eofS =
        "\1\1\107\uffff";
    static final String DFA15_minS =
        "\1\46\1\uffff\102\0\4\uffff";
    static final String DFA15_maxS =
        "\1\u00b4\1\uffff\102\0\4\uffff";
    static final String DFA15_acceptS =
        "\1\uffff\1\5\102\uffff\1\1\1\2\1\3\1\4";
    static final String DFA15_specialS =
        "\2\uffff\1\55\1\44\1\27\1\17\1\25\1\41\1\56\1\3\1\23\1\57\1\52"+
        "\1\60\1\14\1\66\1\64\1\100\1\16\1\71\1\47\1\22\1\7\1\26\1\1\1\72"+
        "\1\53\1\76\1\101\1\30\1\50\1\31\1\51\1\5\1\4\1\33\1\77\1\74\1\62"+
        "\1\36\1\6\1\10\1\42\1\2\1\40\1\11\1\32\1\43\1\63\1\0\1\45\1\21\1"+
        "\35\1\15\1\37\1\73\1\65\1\61\1\67\1\70\1\54\1\75\1\46\1\24\1\20"+
        "\1\13\1\12\1\34\4\uffff}>";
    static final String[] DFA15_transitionS = {
            "\1\16\1\6\1\10\1\103\1\41\1\44\1\1\1\7\1\22\20\1\1\20\1\42"+
            "\1\1\1\47\1\1\1\43\1\50\1\57\1\17\1\45\1\14\1\46\1\34\1\35\1"+
            "\30\1\51\1\52\1\53\1\54\1\55\1\36\1\21\4\1\1\31\1\62\11\1\1"+
            "\33\1\1\1\56\4\1\1\63\1\1\1\64\1\1\1\65\5\1\1\66\1\1\1\60\3"+
            "\1\1\67\1\1\1\40\1\61\3\1\1\15\2\1\1\2\5\1\1\23\1\1\1\24\1\1"+
            "\1\12\2\1\1\13\1\27\1\75\1\70\1\1\1\3\1\4\1\5\1\100\1\1\1\32"+
            "\1\37\1\11\1\101\1\76\1\102\1\25\1\26\4\1\1\71\10\1\1\72\1\77"+
            "\1\73\1\74",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA15_eot = DFA.unpackEncodedString(DFA15_static.DFA15_eotS);
    static final short[] DFA15_eof = DFA.unpackEncodedString(DFA15_static.DFA15_eofS);
    static final char[] DFA15_min = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_minS);
    static final char[] DFA15_max = DFA.unpackEncodedStringToUnsignedChars(DFA15_static.DFA15_maxS);
    static final short[] DFA15_accept = DFA.unpackEncodedString(DFA15_static.DFA15_acceptS);
    static final short[] DFA15_special = DFA.unpackEncodedString(DFA15_static.DFA15_specialS);
    static final short[][] DFA15_transition;

    static {
        int numStates = DFA15_static.DFA15_transitionS.length;
        DFA15_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA15_transition[i] = DFA.unpackEncodedString(DFA15_static.DFA15_transitionS[i]);
        }
    }

    class DFA15 extends DFA {

        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = DFA15_eot;
            this.eof = DFA15_eof;
            this.min = DFA15_min;
            this.max = DFA15_max;
            this.accept = DFA15_accept;
            this.special = DFA15_special;
            this.transition = DFA15_transition;
        }
        public String getDescription() {
            return "()+ loopback of 105:13: ( dissolvePhrase | ratio | noun | numeric )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA15_49 = input.LA(1);

                         
                        int index15_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_49);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA15_24 = input.LA(1);

                         
                        int index15_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_24);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA15_43 = input.LA(1);

                         
                        int index15_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_43);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA15_9 = input.LA(1);

                         
                        int index15_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA15_34 = input.LA(1);

                         
                        int index15_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_34);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA15_33 = input.LA(1);

                         
                        int index15_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_33);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA15_40 = input.LA(1);

                         
                        int index15_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_40);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA15_22 = input.LA(1);

                         
                        int index15_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_22);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA15_41 = input.LA(1);

                         
                        int index15_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_41);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA15_45 = input.LA(1);

                         
                        int index15_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_45);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA15_66 = input.LA(1);

                         
                        int index15_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_66);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA15_65 = input.LA(1);

                         
                        int index15_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_65);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA15_14 = input.LA(1);

                         
                        int index15_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred92_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred92_ChemicalChunker())) ) {s = 68;}

                        else if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 69;}

                        else if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 70;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_14);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA15_53 = input.LA(1);

                         
                        int index15_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_53);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA15_18 = input.LA(1);

                         
                        int index15_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_18);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA15_5 = input.LA(1);

                         
                        int index15_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_5);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA15_64 = input.LA(1);

                         
                        int index15_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_64);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA15_51 = input.LA(1);

                         
                        int index15_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_51);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA15_21 = input.LA(1);

                         
                        int index15_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_21);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA15_10 = input.LA(1);

                         
                        int index15_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred92_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred92_ChemicalChunker())) ) {s = 68;}

                        else if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 69;}

                        else if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_10);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA15_63 = input.LA(1);

                         
                        int index15_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_63);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA15_6 = input.LA(1);

                         
                        int index15_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_6);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA15_23 = input.LA(1);

                         
                        int index15_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA15_4 = input.LA(1);

                         
                        int index15_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_4);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA15_29 = input.LA(1);

                         
                        int index15_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_29);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA15_31 = input.LA(1);

                         
                        int index15_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_31);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA15_46 = input.LA(1);

                         
                        int index15_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_46);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA15_35 = input.LA(1);

                         
                        int index15_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_35);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA15_67 = input.LA(1);

                         
                        int index15_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_67);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA15_52 = input.LA(1);

                         
                        int index15_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_52);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA15_39 = input.LA(1);

                         
                        int index15_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_39);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA15_54 = input.LA(1);

                         
                        int index15_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_54);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA15_44 = input.LA(1);

                         
                        int index15_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_44);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA15_7 = input.LA(1);

                         
                        int index15_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_7);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA15_42 = input.LA(1);

                         
                        int index15_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_42);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA15_47 = input.LA(1);

                         
                        int index15_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_47);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA15_3 = input.LA(1);

                         
                        int index15_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_3);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA15_50 = input.LA(1);

                         
                        int index15_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_50);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA15_62 = input.LA(1);

                         
                        int index15_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_62);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA15_20 = input.LA(1);

                         
                        int index15_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred92_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred92_ChemicalChunker())) ) {s = 68;}

                        else if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 69;}

                        else if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_20);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA15_30 = input.LA(1);

                         
                        int index15_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_30);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA15_32 = input.LA(1);

                         
                        int index15_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_32);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA15_12 = input.LA(1);

                         
                        int index15_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_12);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA15_26 = input.LA(1);

                         
                        int index15_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_26);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA15_60 = input.LA(1);

                         
                        int index15_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_60);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA15_2 = input.LA(1);

                         
                        int index15_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_2);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA15_8 = input.LA(1);

                         
                        int index15_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_8);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA15_11 = input.LA(1);

                         
                        int index15_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred92_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred92_ChemicalChunker())) ) {s = 68;}

                        else if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 69;}

                        else if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 70;}

                        else if ( (synpred95_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_11);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA15_13 = input.LA(1);

                         
                        int index15_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_13);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA15_57 = input.LA(1);

                         
                        int index15_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_57);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA15_38 = input.LA(1);

                         
                        int index15_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_38);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA15_48 = input.LA(1);

                         
                        int index15_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_48);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA15_16 = input.LA(1);

                         
                        int index15_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_16);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA15_56 = input.LA(1);

                         
                        int index15_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_56);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA15_15 = input.LA(1);

                         
                        int index15_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_15);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA15_58 = input.LA(1);

                         
                        int index15_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_58);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA15_59 = input.LA(1);

                         
                        int index15_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_59);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA15_19 = input.LA(1);

                         
                        int index15_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred92_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred92_ChemicalChunker())) ) {s = 68;}

                        else if ( ((synpred93_ChemicalChunker()||(synpred93_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 69;}

                        else if ( ((synpred94_ChemicalChunker()||(synpred94_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_19);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA15_25 = input.LA(1);

                         
                        int index15_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_25);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA15_55 = input.LA(1);

                         
                        int index15_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_55);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA15_37 = input.LA(1);

                         
                        int index15_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_37);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA15_61 = input.LA(1);

                         
                        int index15_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_61);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA15_27 = input.LA(1);

                         
                        int index15_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_27);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA15_36 = input.LA(1);

                         
                        int index15_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_36);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA15_17 = input.LA(1);

                         
                        int index15_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred92_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_17);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA15_28 = input.LA(1);

                         
                        int index15_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred94_ChemicalChunker()) ) {s = 70;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index15_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 15, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA16_static {
    static final String DFA16_eotS =
        "\25\uffff";
    static final String DFA16_eofS =
        "\25\uffff";
    static final String DFA16_minS =
        "\1\46\7\uffff\1\0\14\uffff";
    static final String DFA16_maxS =
        "\1\u009e\7\uffff\1\0\14\uffff";
    static final String DFA16_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA16_specialS =
        "\10\uffff\1\0\14\uffff}>";
    static final String[] DFA16_transitionS = {
            "\3\1\4\uffff\2\1\20\uffff\1\1\7\uffff\1\1\1\uffff\1\1\12\uffff"+
            "\1\1\55\uffff\1\1\2\uffff\1\1\5\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\10\2\uffff\1\1\4\uffff\3\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA16_eot = DFA.unpackEncodedString(DFA16_static.DFA16_eotS);
    static final short[] DFA16_eof = DFA.unpackEncodedString(DFA16_static.DFA16_eofS);
    static final char[] DFA16_min = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_minS);
    static final char[] DFA16_max = DFA.unpackEncodedStringToUnsignedChars(DFA16_static.DFA16_maxS);
    static final short[] DFA16_accept = DFA.unpackEncodedString(DFA16_static.DFA16_acceptS);
    static final short[] DFA16_special = DFA.unpackEncodedString(DFA16_static.DFA16_specialS);
    static final short[][] DFA16_transition;

    static {
        int numStates = DFA16_static.DFA16_transitionS.length;
        DFA16_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA16_transition[i] = DFA.unpackEncodedString(DFA16_static.DFA16_transitionS[i]);
        }
    }

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = DFA16_eot;
            this.eof = DFA16_eof;
            this.min = DFA16_min;
            this.max = DFA16_max;
            this.accept = DFA16_accept;
            this.special = DFA16_special;
            this.transition = DFA16_transition;
        }
        public String getDescription() {
            return "108:4: ( dissolveStructure | lrb dissolveStructure rrb )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred96_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred96_ChemicalChunker())) ) {s = 1;}

                        else if ( (true) ) {s = 20;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA17_static {
    static final String DFA17_eotS =
        "\17\uffff";
    static final String DFA17_eofS =
        "\17\uffff";
    static final String DFA17_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA17_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA17_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA17_specialS =
        "\10\uffff\1\1\1\0\1\4\1\3\1\5\1\2\1\uffff}>";
    static final String[] DFA17_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\20\uffff\1\7\7\uffff\1\7\1\uffff"+
            "\1\7\12\uffff\1\7\55\uffff\1\7\2\uffff\1\7\5\uffff\1\7\1\uffff"+
            "\1\7\1\uffff\1\7\2\uffff\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA17_eot = DFA.unpackEncodedString(DFA17_static.DFA17_eotS);
    static final short[] DFA17_eof = DFA.unpackEncodedString(DFA17_static.DFA17_eofS);
    static final char[] DFA17_min = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_minS);
    static final char[] DFA17_max = DFA.unpackEncodedStringToUnsignedChars(DFA17_static.DFA17_maxS);
    static final short[] DFA17_accept = DFA.unpackEncodedString(DFA17_static.DFA17_acceptS);
    static final short[] DFA17_special = DFA.unpackEncodedString(DFA17_static.DFA17_specialS);
    static final short[][] DFA17_transition;

    static {
        int numStates = DFA17_static.DFA17_transitionS.length;
        DFA17_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA17_transition[i] = DFA.unpackEncodedString(DFA17_static.DFA17_transitionS[i]);
        }
    }

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = DFA17_eot;
            this.eof = DFA17_eof;
            this.min = DFA17_min;
            this.max = DFA17_max;
            this.accept = DFA17_accept;
            this.special = DFA17_special;
            this.transition = DFA17_transition;
        }
        public String getDescription() {
            return "111:4: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA17_9 = input.LA(1);

                         
                        int index17_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index17_9);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA17_8 = input.LA(1);

                         
                        int index17_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index17_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA17_13 = input.LA(1);

                         
                        int index17_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index17_13);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA17_11 = input.LA(1);

                         
                        int index17_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index17_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA17_10 = input.LA(1);

                         
                        int index17_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index17_10);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA17_12 = input.LA(1);

                         
                        int index17_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index17_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA19_static {
    static final String DFA19_eotS =
        "\23\uffff";
    static final String DFA19_eofS =
        "\23\uffff";
    static final String DFA19_minS =
        "\1\46\10\0\12\uffff";
    static final String DFA19_maxS =
        "\1\u0099\10\0\12\uffff";
    static final String DFA19_acceptS =
        "\11\uffff\1\1\6\uffff\1\2\2\uffff";
    static final String DFA19_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\12\uffff}>";
    static final String[] DFA19_transitionS = {
            "\1\5\2\11\4\uffff\1\11\1\20\20\uffff\1\10\7\uffff\1\7\1\uffff"+
            "\1\3\12\uffff\1\11\55\uffff\1\4\2\uffff\1\6\5\uffff\1\20\1\uffff"+
            "\1\20\1\uffff\1\1\2\uffff\1\2\4\uffff\3\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA19_eot = DFA.unpackEncodedString(DFA19_static.DFA19_eotS);
    static final short[] DFA19_eof = DFA.unpackEncodedString(DFA19_static.DFA19_eofS);
    static final char[] DFA19_min = DFA.unpackEncodedStringToUnsignedChars(DFA19_static.DFA19_minS);
    static final char[] DFA19_max = DFA.unpackEncodedStringToUnsignedChars(DFA19_static.DFA19_maxS);
    static final short[] DFA19_accept = DFA.unpackEncodedString(DFA19_static.DFA19_acceptS);
    static final short[] DFA19_special = DFA.unpackEncodedString(DFA19_static.DFA19_specialS);
    static final short[][] DFA19_transition;

    static {
        int numStates = DFA19_static.DFA19_transitionS.length;
        DFA19_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA19_transition[i] = DFA.unpackEncodedString(DFA19_static.DFA19_transitionS[i]);
        }
    }

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = DFA19_eot;
            this.eof = DFA19_eof;
            this.min = DFA19_min;
            this.max = DFA19_max;
            this.accept = DFA19_accept;
            this.special = DFA19_special;
            this.transition = DFA19_transition;
        }
        public String getDescription() {
            return "111:32: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA19_1 = input.LA(1);

                         
                        int index19_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA19_2 = input.LA(1);

                         
                        int index19_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA19_3 = input.LA(1);

                         
                        int index19_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA19_4 = input.LA(1);

                         
                        int index19_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA19_5 = input.LA(1);

                         
                        int index19_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA19_6 = input.LA(1);

                         
                        int index19_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA19_7 = input.LA(1);

                         
                        int index19_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA19_8 = input.LA(1);

                         
                        int index19_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index19_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA21_static {
    static final String DFA21_eotS =
        "\u0092\uffff";
    static final String DFA21_eofS =
        "\1\3\u0091\uffff";
    static final String DFA21_minS =
        "\1\46\2\0\u008f\uffff";
    static final String DFA21_maxS =
        "\1\u00b4\2\0\u008f\uffff";
    static final String DFA21_acceptS =
        "\3\uffff\1\2\u008d\uffff\1\1";
    static final String DFA21_specialS =
        "\1\uffff\1\0\1\1\u008f\uffff}>";
    static final String[] DFA21_transitionS = {
            "\137\3\1\2\13\3\1\1\43\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_static.DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_static.DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_static.DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_static.DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_static.DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_static.DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_static.DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "()* loopback of 111:71: ( conjunction molecule )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA21_1 = input.LA(1);

                         
                        int index21_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index21_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA21_2 = input.LA(1);

                         
                        int index21_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index21_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA23_static {
    static final String DFA23_eotS =
        "\17\uffff";
    static final String DFA23_eofS =
        "\17\uffff";
    static final String DFA23_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA23_maxS =
        "\1\u009e\6\45\1\uffff\6\0\1\uffff";
    static final String DFA23_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA23_specialS =
        "\10\uffff\1\5\1\4\1\2\1\3\1\0\1\1\1\uffff}>";
    static final String[] DFA23_transitionS = {
            "\1\7\1\4\1\6\4\uffff\1\5\1\7\20\uffff\1\7\7\uffff\1\7\1\uffff"+
            "\1\7\12\uffff\1\7\55\uffff\1\7\2\uffff\1\7\5\uffff\1\7\1\uffff"+
            "\1\7\1\uffff\1\7\2\uffff\1\7\4\uffff\1\1\1\2\1\3\4\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_static.DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_static.DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_static.DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_static.DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_static.DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_static.DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_static.DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "114:16: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA23_12 = input.LA(1);

                         
                        int index23_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_12);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA23_13 = input.LA(1);

                         
                        int index23_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA23_10 = input.LA(1);

                         
                        int index23_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA23_11 = input.LA(1);

                         
                        int index23_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_11);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA23_9 = input.LA(1);

                         
                        int index23_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA23_8 = input.LA(1);

                         
                        int index23_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred103_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index23_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA25_static {
    static final String DFA25_eotS =
        "\23\uffff";
    static final String DFA25_eofS =
        "\23\uffff";
    static final String DFA25_minS =
        "\1\46\10\0\12\uffff";
    static final String DFA25_maxS =
        "\1\u0099\10\0\12\uffff";
    static final String DFA25_acceptS =
        "\11\uffff\1\1\6\uffff\1\2\2\uffff";
    static final String DFA25_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\12\uffff}>";
    static final String[] DFA25_transitionS = {
            "\1\5\2\11\4\uffff\1\11\1\20\20\uffff\1\10\7\uffff\1\7\1\uffff"+
            "\1\3\12\uffff\1\11\55\uffff\1\4\2\uffff\1\6\5\uffff\1\20\1\uffff"+
            "\1\20\1\uffff\1\1\2\uffff\1\2\4\uffff\3\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_static.DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_static.DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_static.DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_static.DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_static.DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_static.DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_static.DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "114:26: ( molecule | unnamedmolecule )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA25_1 = input.LA(1);

                         
                        int index25_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA25_3 = input.LA(1);

                         
                        int index25_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA25_4 = input.LA(1);

                         
                        int index25_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA25_5 = input.LA(1);

                         
                        int index25_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA25_6 = input.LA(1);

                         
                        int index25_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA25_7 = input.LA(1);

                         
                        int index25_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA25_8 = input.LA(1);

                         
                        int index25_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred105_ChemicalChunker()) ) {s = 9;}

                        else if ( (true) ) {s = 16;}

                         
                        input.seek(index25_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA39_static {
    static final String DFA39_eotS =
        "\67\uffff";
    static final String DFA39_eofS =
        "\1\1\66\uffff";
    static final String DFA39_minS =
        "\1\46\1\uffff\64\0\1\uffff";
    static final String DFA39_maxS =
        "\1\u00b4\1\uffff\64\0\1\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA39_specialS =
        "\2\uffff\1\34\1\42\1\3\1\60\1\33\1\47\1\13\1\61\1\10\1\24\1\52"+
        "\1\31\1\23\1\21\1\20\1\53\1\5\1\4\1\32\1\51\1\17\1\6\1\0\1\35\1"+
        "\55\1\26\1\30\1\16\1\1\1\54\1\57\1\41\1\25\1\44\1\15\1\56\1\40\1"+
        "\11\1\27\1\63\1\45\1\22\1\36\1\14\1\43\1\46\1\7\1\37\1\12\1\62\1"+
        "\50\1\2\1\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\1\1\11\1\13\4\1\1\12\47\1\1\25\1\65\1\26\1\31\2\1\1\33\1"+
            "\32\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\1\1\43\1\1\1\44\1\30"+
            "\1\45\1\46\1\1\1\47\1\1\1\50\1\1\1\51\1\52\1\27\1\53\1\54\1"+
            "\1\1\55\1\1\1\56\1\57\1\60\1\1\1\61\1\15\1\1\1\62\1\63\1\64"+
            "\1\1\1\14\23\1\1\6\1\7\1\10\1\1\1\16\10\1\1\2\1\3\1\5\1\4\3"+
            "\1\1\17\1\22\1\21\1\24\1\20\1\23\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_static.DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_static.DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_static.DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_static.DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_static.DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_static.DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_static.DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_static.DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "()+ loopback of 118:48: ( ( md )* ( rbconj )? ( adv )* ( adj )? ( verb )+ ( md )* ( adv )* ( adj )? ( neg )? )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA39_24 = input.LA(1);

                         
                        int index39_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_24);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA39_30 = input.LA(1);

                         
                        int index39_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_30);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA39_53 = input.LA(1);

                         
                        int index39_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_53);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA39_19 = input.LA(1);

                         
                        int index39_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA39_18 = input.LA(1);

                         
                        int index39_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_18);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA39_23 = input.LA(1);

                         
                        int index39_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_23);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA39_48 = input.LA(1);

                         
                        int index39_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_48);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA39_10 = input.LA(1);

                         
                        int index39_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_10);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA39_39 = input.LA(1);

                         
                        int index39_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_39);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA39_50 = input.LA(1);

                         
                        int index39_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_50);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA39_8 = input.LA(1);

                         
                        int index39_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_8);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA39_45 = input.LA(1);

                         
                        int index39_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_45);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA39_36 = input.LA(1);

                         
                        int index39_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_36);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA39_29 = input.LA(1);

                         
                        int index39_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_29);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA39_22 = input.LA(1);

                         
                        int index39_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_22);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA39_16 = input.LA(1);

                         
                        int index39_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_16);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA39_15 = input.LA(1);

                         
                        int index39_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_15);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA39_43 = input.LA(1);

                         
                        int index39_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_43);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA39_14 = input.LA(1);

                         
                        int index39_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_14);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA39_11 = input.LA(1);

                         
                        int index39_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_11);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA39_34 = input.LA(1);

                         
                        int index39_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_34);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA39_27 = input.LA(1);

                         
                        int index39_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_27);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA39_40 = input.LA(1);

                         
                        int index39_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_40);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA39_28 = input.LA(1);

                         
                        int index39_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_28);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA39_13 = input.LA(1);

                         
                        int index39_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_13);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA39_20 = input.LA(1);

                         
                        int index39_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_20);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA39_6 = input.LA(1);

                         
                        int index39_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_6);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA39_2 = input.LA(1);

                         
                        int index39_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_2);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA39_25 = input.LA(1);

                         
                        int index39_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_25);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA39_44 = input.LA(1);

                         
                        int index39_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_44);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA39_49 = input.LA(1);

                         
                        int index39_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_49);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA39_38 = input.LA(1);

                         
                        int index39_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_38);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA39_33 = input.LA(1);

                         
                        int index39_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_33);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA39_3 = input.LA(1);

                         
                        int index39_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_3);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA39_46 = input.LA(1);

                         
                        int index39_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_46);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA39_35 = input.LA(1);

                         
                        int index39_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_35);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA39_42 = input.LA(1);

                         
                        int index39_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_42);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA39_47 = input.LA(1);

                         
                        int index39_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_47);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA39_7 = input.LA(1);

                         
                        int index39_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_7);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA39_52 = input.LA(1);

                         
                        int index39_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_52);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA39_21 = input.LA(1);

                         
                        int index39_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_21);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA39_12 = input.LA(1);

                         
                        int index39_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_12);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA39_17 = input.LA(1);

                         
                        int index39_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_17);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA39_31 = input.LA(1);

                         
                        int index39_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_31);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA39_26 = input.LA(1);

                         
                        int index39_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_26);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA39_37 = input.LA(1);

                         
                        int index39_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_37);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA39_32 = input.LA(1);

                         
                        int index39_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_32);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA39_5 = input.LA(1);

                         
                        int index39_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_5);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA39_51 = input.LA(1);

                         
                        int index39_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_51);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA39_41 = input.LA(1);

                         
                        int index39_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_ChemicalChunker()) ) {s = 54;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_41);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA34_static {
    static final String DFA34_eotS =
        "\53\uffff";
    static final String DFA34_eofS =
        "\1\1\52\uffff";
    static final String DFA34_minS =
        "\1\46\1\uffff\50\0\1\uffff";
    static final String DFA34_maxS =
        "\1\u00b4\1\uffff\50\0\1\uffff";
    static final String DFA34_acceptS =
        "\1\uffff\1\2\50\uffff\1\1";
    static final String DFA34_specialS =
        "\2\uffff\1\24\1\21\1\2\1\0\1\23\1\31\1\33\1\26\1\42\1\27\1\25\1"+
        "\14\1\15\1\10\1\46\1\22\1\43\1\12\1\34\1\13\1\41\1\36\1\6\1\35\1"+
        "\20\1\5\1\7\1\17\1\45\1\4\1\30\1\32\1\47\1\16\1\44\1\1\1\40\1\11"+
        "\1\37\1\3\1\uffff}>";
    static final String[] DFA34_transitionS = {
            "\57\1\1\11\1\51\1\12\1\15\2\1\1\17\1\16\1\20\1\21\1\22\1\23"+
            "\1\24\1\25\1\26\1\1\1\27\1\1\1\30\1\14\1\31\1\32\1\1\1\33\1"+
            "\1\1\34\1\1\1\35\1\36\1\13\1\37\1\40\1\1\1\41\1\1\1\42\1\43"+
            "\1\44\1\1\1\45\1\2\1\1\1\46\1\47\1\50\51\1\1\3\1\6\1\5\1\10"+
            "\1\4\1\7\4\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_static.DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_static.DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_static.DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_static.DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_static.DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_static.DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_static.DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_static.DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "()+ loopback of 118:71: ( verb )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA34_5 = input.LA(1);

                         
                        int index34_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA34_37 = input.LA(1);

                         
                        int index34_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_37);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA34_4 = input.LA(1);

                         
                        int index34_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA34_41 = input.LA(1);

                         
                        int index34_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_41);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA34_31 = input.LA(1);

                         
                        int index34_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_31);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA34_27 = input.LA(1);

                         
                        int index34_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_27);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA34_24 = input.LA(1);

                         
                        int index34_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_24);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA34_28 = input.LA(1);

                         
                        int index34_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_28);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA34_15 = input.LA(1);

                         
                        int index34_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_15);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA34_39 = input.LA(1);

                         
                        int index34_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_39);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA34_19 = input.LA(1);

                         
                        int index34_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_19);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA34_21 = input.LA(1);

                         
                        int index34_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_21);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA34_13 = input.LA(1);

                         
                        int index34_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA34_14 = input.LA(1);

                         
                        int index34_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA34_35 = input.LA(1);

                         
                        int index34_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_35);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA34_29 = input.LA(1);

                         
                        int index34_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_29);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA34_26 = input.LA(1);

                         
                        int index34_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_26);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA34_3 = input.LA(1);

                         
                        int index34_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_3);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA34_17 = input.LA(1);

                         
                        int index34_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_17);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA34_6 = input.LA(1);

                         
                        int index34_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_6);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA34_2 = input.LA(1);

                         
                        int index34_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_2);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA34_12 = input.LA(1);

                         
                        int index34_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_12);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA34_9 = input.LA(1);

                         
                        int index34_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_9);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA34_11 = input.LA(1);

                         
                        int index34_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_11);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA34_32 = input.LA(1);

                         
                        int index34_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_32);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA34_7 = input.LA(1);

                         
                        int index34_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_7);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA34_33 = input.LA(1);

                         
                        int index34_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_33);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA34_8 = input.LA(1);

                         
                        int index34_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_8);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA34_20 = input.LA(1);

                         
                        int index34_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_20);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA34_25 = input.LA(1);

                         
                        int index34_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_25);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA34_23 = input.LA(1);

                         
                        int index34_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_23);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA34_40 = input.LA(1);

                         
                        int index34_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_40);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA34_38 = input.LA(1);

                         
                        int index34_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_38);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA34_22 = input.LA(1);

                         
                        int index34_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_22);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA34_10 = input.LA(1);

                         
                        int index34_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_10);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA34_18 = input.LA(1);

                         
                        int index34_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_18);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA34_36 = input.LA(1);

                         
                        int index34_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_36);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA34_30 = input.LA(1);

                         
                        int index34_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_30);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA34_16 = input.LA(1);

                         
                        int index34_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_16);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA34_34 = input.LA(1);

                         
                        int index34_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_ChemicalChunker()) ) {s = 42;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index34_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA36_static {
    static final String DFA36_eotS =
        "\13\uffff";
    static final String DFA36_eofS =
        "\1\1\12\uffff";
    static final String DFA36_minS =
        "\1\46\1\uffff\4\45\4\0\1\uffff";
    static final String DFA36_maxS =
        "\1\u00b4\1\uffff\4\45\4\0\1\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\2\10\uffff\1\1";
    static final String DFA36_specialS =
        "\6\uffff\1\0\1\1\1\2\1\3\1\uffff}>";
    static final String[] DFA36_transitionS = {
            "\176\1\1\2\1\3\1\5\1\4\15\1",
            "",
            "\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_static.DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_static.DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_static.DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_static.DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_static.DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_static.DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_static.DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_static.DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "()* loopback of 118:81: ( adv )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA36_6 = input.LA(1);

                         
                        int index36_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred116_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index36_6);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA36_7 = input.LA(1);

                         
                        int index36_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred116_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index36_7);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA36_8 = input.LA(1);

                         
                        int index36_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred116_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index36_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA36_9 = input.LA(1);

                         
                        int index36_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred116_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index36_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA37_static {
    static final String DFA37_eotS =
        "\17\uffff";
    static final String DFA37_eofS =
        "\1\7\16\uffff";
    static final String DFA37_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA37_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA37_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA37_specialS =
        "\10\uffff\1\2\1\4\1\3\1\0\1\5\1\1\1\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_static.DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_static.DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_static.DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_static.DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_static.DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_static.DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_static.DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_static.DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "118:86: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA37_11 = input.LA(1);

                         
                        int index37_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index37_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA37_13 = input.LA(1);

                         
                        int index37_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index37_13);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA37_8 = input.LA(1);

                         
                        int index37_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index37_8);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA37_10 = input.LA(1);

                         
                        int index37_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index37_10);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA37_9 = input.LA(1);

                         
                        int index37_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index37_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA37_12 = input.LA(1);

                         
                        int index37_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index37_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA43_static {
    static final String DFA43_eotS =
        "\u0092\uffff";
    static final String DFA43_eofS =
        "\1\13\u0091\uffff";
    static final String DFA43_minS =
        "\1\46\12\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\27\uffff\1\0\2\uffff"+
        "\1\0\36\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA43_maxS =
        "\1\u00b4\12\0\1\uffff\2\0\3\uffff\1\0\1\uffff\1\0\27\uffff\1\0"+
        "\2\uffff\1\0\36\uffff\22\0\50\uffff\1\0\12\uffff";
    static final String DFA43_acceptS =
        "\13\uffff\1\2\u0085\uffff\1\1";
    static final String DFA43_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12"+
        "\1\13\3\uffff\1\14\1\uffff\1\15\27\uffff\1\16\2\uffff\1\17\36\uffff"+
        "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
        "\1\35\1\36\1\37\1\40\1\41\50\uffff\1\42\12\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\13\1\10\1\12\4\13\1\11\1\13\1\120\1\121\1\117\1\125\1\126"+
            "\1\135\1\136\1\122\1\134\1\127\1\131\1\123\1\124\1\133\1\132"+
            "\1\130\1\13\1\53\7\13\1\56\74\13\1\15\1\13\1\u0087\11\13\1\14"+
            "\1\23\1\21\2\13\1\116\1\5\1\6\1\7\12\13\1\1\1\2\1\4\1\3\1\13"+
            "\1\115\13\13",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_static.DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_static.DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_static.DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_static.DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_static.DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_static.DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_static.DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_static.DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "()* loopback of 118:106: ( ( cc )? ( comma )? prepphrase )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA43_1 = input.LA(1);

                         
                        int index43_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA43_2 = input.LA(1);

                         
                        int index43_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA43_3 = input.LA(1);

                         
                        int index43_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA43_4 = input.LA(1);

                         
                        int index43_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA43_5 = input.LA(1);

                         
                        int index43_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA43_6 = input.LA(1);

                         
                        int index43_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA43_7 = input.LA(1);

                         
                        int index43_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA43_8 = input.LA(1);

                         
                        int index43_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA43_9 = input.LA(1);

                         
                        int index43_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA43_10 = input.LA(1);

                         
                        int index43_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA43_12 = input.LA(1);

                         
                        int index43_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_12);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA43_13 = input.LA(1);

                         
                        int index43_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_13);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA43_17 = input.LA(1);

                         
                        int index43_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_17);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA43_19 = input.LA(1);

                         
                        int index43_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_19);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA43_43 = input.LA(1);

                         
                        int index43_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_43);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA43_46 = input.LA(1);

                         
                        int index43_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_46);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA43_77 = input.LA(1);

                         
                        int index43_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_77);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA43_78 = input.LA(1);

                         
                        int index43_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_78);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA43_79 = input.LA(1);

                         
                        int index43_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_79);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA43_80 = input.LA(1);

                         
                        int index43_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_80);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA43_81 = input.LA(1);

                         
                        int index43_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_81);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA43_82 = input.LA(1);

                         
                        int index43_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_82);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA43_83 = input.LA(1);

                         
                        int index43_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_83);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA43_84 = input.LA(1);

                         
                        int index43_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_84);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA43_85 = input.LA(1);

                         
                        int index43_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_85);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA43_86 = input.LA(1);

                         
                        int index43_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_86);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA43_87 = input.LA(1);

                         
                        int index43_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_87);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA43_88 = input.LA(1);

                         
                        int index43_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_88);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA43_89 = input.LA(1);

                         
                        int index43_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_89);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA43_90 = input.LA(1);

                         
                        int index43_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_90);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA43_91 = input.LA(1);

                         
                        int index43_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_91);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA43_92 = input.LA(1);

                         
                        int index43_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_92);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA43_93 = input.LA(1);

                         
                        int index43_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_93);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA43_94 = input.LA(1);

                         
                        int index43_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_94);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA43_135 = input.LA(1);

                         
                        int index43_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index43_135);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA44_static {
    static final String DFA44_eotS =
        "\60\uffff";
    static final String DFA44_eofS =
        "\51\uffff\1\52\2\uffff\1\52\3\uffff";
    static final String DFA44_minS =
        "\1\125\11\uffff\1\45\36\uffff\1\46\1\uffff\1\45\1\46\1\45\1\0\1"+
        "\uffff";
    static final String DFA44_maxS =
        "\1\u00b0\11\uffff\1\45\36\uffff\1\u00b4\1\uffff\1\45\1\u00b4\1"+
        "\45\1\0\1\uffff";
    static final String DFA44_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\30\1\31\1\32"+
        "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
        "\1\50\1\51\1\uffff\1\27\4\uffff\1\12";
    static final String DFA44_specialS =
        "\56\uffff\1\0\1\uffff}>";
    static final String[] DFA44_transitionS = {
            "\1\7\1\50\1\10\1\13\2\uffff\1\15\1\14\1\16\1\17\1\20\1\21\1"+
            "\22\1\23\1\24\1\uffff\1\25\1\uffff\1\26\1\12\1\27\1\30\1\uffff"+
            "\1\31\1\uffff\1\32\1\uffff\1\33\1\34\1\11\1\35\1\36\1\uffff"+
            "\1\37\1\uffff\1\40\1\41\1\42\1\uffff\1\43\1\44\1\uffff\1\45"+
            "\1\46\1\47\51\uffff\1\1\1\4\1\3\1\6\1\2\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\153\52\1\53\43\52",
            "",
            "\1\54",
            "\72\52\1\55\124\52",
            "\1\56",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_static.DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_static.DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_static.DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_static.DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_static.DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_static.DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_static.DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_static.DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "119:1: verb : ( vb | vbp | vbg | vbd | vbz | vbn | vbuse | vbsubmerge | vbimmerse | degassMultiVerb | vbsubject | vbadd | vbdilute | vbcharge | vbcontain | vbdrop | vbfill | vbsuspend | vbtreat | vbapparatus | vbconcentrate | vbcool | vbdegass | vbdissolve | vbdry | vbextract | vbfilter | vbheat | vbincrease | vbpartition | vbprecipitate | vbpurify | vbquench | vbrecover | vbremove | vbstir | vbsynthesize | vbwait | vbwash | vbyield | vbchange );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA44_46 = input.LA(1);

                         
                        int index44_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred133_ChemicalChunker()) ) {s = 47;}

                        else if ( (synpred146_ChemicalChunker()) ) {s = 42;}

                         
                        input.seek(index44_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA46_static {
    static final String DFA46_eotS =
        "\124\uffff";
    static final String DFA46_eofS =
        "\124\uffff";
    static final String DFA46_minS =
        "\1\46\2\uffff\17\0\1\uffff\3\0\2\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\67\uffff";
    static final String DFA46_maxS =
        "\1\u00b4\2\uffff\17\0\1\uffff\3\0\2\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\67\uffff";
    static final String DFA46_acceptS =
        "\1\uffff\1\1\1\2\17\uffff\1\6\4\uffff\1\10\3\uffff\1\12\1\uffff"+
        "\1\14\1\15\1\17\1\22\1\23\1\24\1\25\1\30\1\32\1\34\1\35\1\37\1\40"+
        "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\52\1\54\1\55\1\56\1\57"+
        "\1\61\1\62\1\63\5\uffff\1\64\1\65\1\66\1\67\1\3\1\5\1\7\1\26\1\4"+
        "\1\21\1\53\1\31\1\60\1\27\1\11\1\36\1\16\1\13\1\51\1\33\1\20";
    static final String DFA46_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\uffff\1\17\1\20\1\21\2\uffff\1\22\1\uffff\1\23\1"+
        "\uffff\1\24\67\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\10\1\16\1\20\1\102\1\40\1\43\1\uffff\1\17\1\27\20\uffff"+
            "\1\12\1\41\1\uffff\1\46\1\uffff\1\42\1\47\1\56\1\11\1\44\1\6"+
            "\1\45\1\32\1\33\1\23\1\50\1\51\1\52\1\53\1\54\1\34\1\21\4\uffff"+
            "\1\24\1\61\11\uffff\1\22\1\uffff\1\55\4\uffff\1\62\1\uffff\1"+
            "\63\1\uffff\1\64\5\uffff\1\65\1\uffff\1\57\3\uffff\1\66\1\uffff"+
            "\1\37\1\60\3\uffff\1\7\2\uffff\1\4\5\uffff\1\30\1\uffff\1\27"+
            "\1\uffff\1\3\2\uffff\1\5\1\22\1\71\1\67\1\uffff\1\13\1\14\1"+
            "\15\1\77\1\uffff\1\25\1\35\1\36\1\100\1\71\1\101\1\1\1\2\4\uffff"+
            "\1\70\10\uffff\4\71",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_static.DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_static.DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_static.DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_static.DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_static.DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_static.DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_static.DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_static.DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "126:1: nounStructure : ( prp | prp_poss | citation | cycles | molecule | apparatus | mixture | unnamedmolecule | nnstate | procedureNode | nn | nns | nnp | nnadd | preparationphrase | nnexample | range | oscaronts | nntime | nnatmosphere | tmunicode | quantity | nnchementity | nntemp | nnph | nnflash | nngeneral | nnamount | nneq | nnpressure | nncolumn | nnchromatography | nnvacuum | nncycle | nntimes | nnconcentrate | nnvol | nnpurify | nnsynthesize | nnmixture | squareBracketedReference | nndry | numeric | nnextract | nnfilter | nnprecipitate | nnremove | nnyield | fw | sym | clause | ls | nnps | pos | oscarase );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA46_3 = input.LA(1);

                         
                        int index46_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 69;}

                        else if ( (((synpred172_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred172_ChemicalChunker())) ) {s = 23;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 70;}

                         
                        input.seek(index46_3);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA46_4 = input.LA(1);

                         
                        int index46_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred167_ChemicalChunker()) ) {s = 67;}

                        else if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 69;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 23;}

                         
                        input.seek(index46_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA46_5 = input.LA(1);

                         
                        int index46_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred168_ChemicalChunker()) ) {s = 71;}

                        else if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred171_ChemicalChunker()) ) {s = 69;}

                        else if ( (((synpred172_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred172_ChemicalChunker())) ) {s = 23;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred207_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index46_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA46_6 = input.LA(1);

                         
                        int index46_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred189_ChemicalChunker()) ) {s = 74;}

                         
                        input.seek(index46_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA46_7 = input.LA(1);

                         
                        int index46_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred212_ChemicalChunker()) ) {s = 75;}

                         
                        input.seek(index46_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA46_8 = input.LA(1);

                         
                        int index46_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                        else if ( (((synpred172_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred172_ChemicalChunker())) ) {s = 23;}

                        else if ( (synpred181_ChemicalChunker()) ) {s = 72;}

                        else if ( (synpred186_ChemicalChunker()) ) {s = 70;}

                        else if ( (synpred207_ChemicalChunker()) ) {s = 73;}

                         
                        input.seek(index46_8);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA46_9 = input.LA(1);

                         
                        int index46_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred187_ChemicalChunker()) ) {s = 76;}

                         
                        input.seek(index46_9);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA46_10 = input.LA(1);

                         
                        int index46_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred172_ChemicalChunker()) ) {s = 23;}

                        else if ( (synpred173_ChemicalChunker()) ) {s = 77;}

                         
                        input.seek(index46_10);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA46_11 = input.LA(1);

                         
                        int index46_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                         
                        input.seek(index46_11);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA46_12 = input.LA(1);

                         
                        int index46_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                         
                        input.seek(index46_12);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA46_13 = input.LA(1);

                         
                        int index46_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                         
                        input.seek(index46_13);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA46_14 = input.LA(1);

                         
                        int index46_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                         
                        input.seek(index46_14);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA46_15 = input.LA(1);

                         
                        int index46_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                         
                        input.seek(index46_15);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA46_16 = input.LA(1);

                         
                        int index46_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                         
                        input.seek(index46_16);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA46_17 = input.LA(1);

                         
                        int index46_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred169_ChemicalChunker()) ) {s = 68;}

                        else if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                         
                        input.seek(index46_17);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA46_19 = input.LA(1);

                         
                        int index46_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred194_ChemicalChunker()) ) {s = 78;}

                         
                        input.seek(index46_19);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA46_20 = input.LA(1);

                         
                        int index46_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred178_ChemicalChunker()) ) {s = 79;}

                         
                        input.seek(index46_20);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA46_21 = input.LA(1);

                         
                        int index46_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred170_ChemicalChunker()) ) {s = 18;}

                        else if ( (synpred174_ChemicalChunker()) ) {s = 27;}

                        else if ( (synpred175_ChemicalChunker()) ) {s = 80;}

                         
                        input.seek(index46_21);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA46_24 = input.LA(1);

                         
                        int index46_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred172_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred172_ChemicalChunker())) ) {s = 23;}

                        else if ( (synpred205_ChemicalChunker()) ) {s = 81;}

                         
                        input.seek(index46_24);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA46_26 = input.LA(1);

                         
                        int index46_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 27;}

                        else if ( (synpred191_ChemicalChunker()) ) {s = 82;}

                         
                        input.seek(index46_26);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA46_28 = input.LA(1);

                         
                        int index46_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_ChemicalChunker()) ) {s = 27;}

                        else if ( (synpred180_ChemicalChunker()) ) {s = 83;}

                         
                        input.seek(index46_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA48_static {
    static final String DFA48_eotS =
        "\45\uffff";
    static final String DFA48_eofS =
        "\45\uffff";
    static final String DFA48_minS =
        "\1\47\36\0\6\uffff";
    static final String DFA48_maxS =
        "\1\u00a9\36\0\6\uffff";
    static final String DFA48_acceptS =
        "\37\uffff\1\2\1\3\1\1\1\6\1\5\1\4";
    static final String DFA48_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\6\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\1\16\1\17\1\15\1\23\1\24\1"+
            "\32\1\33\1\20\1\31\1\25\1\27\1\21\1\22\1\1\1\30\1\26\1\uffff"+
            "\1\37\7\uffff\1\40\111\uffff\1\36\1\35\2\uffff\1\14\1\6\1\7"+
            "\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff\1\34",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_static.DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_static.DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_static.DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_static.DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_static.DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_static.DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_static.DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_static.DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "131:10: ( prepphraseAtmosphere | prepphraseTime | prepphraseTemp | prepphraseIN | prepphraseRole | prepphraseOther )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA48_1 = input.LA(1);

                         
                        int index48_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_ChemicalChunker()) ) {s = 33;}

                        else if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA48_2 = input.LA(1);

                         
                        int index48_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA48_3 = input.LA(1);

                         
                        int index48_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA48_4 = input.LA(1);

                         
                        int index48_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA48_5 = input.LA(1);

                         
                        int index48_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA48_6 = input.LA(1);

                         
                        int index48_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA48_7 = input.LA(1);

                         
                        int index48_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA48_8 = input.LA(1);

                         
                        int index48_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_8);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA48_9 = input.LA(1);

                         
                        int index48_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_9);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA48_10 = input.LA(1);

                         
                        int index48_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_10);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA48_11 = input.LA(1);

                         
                        int index48_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_11);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA48_12 = input.LA(1);

                         
                        int index48_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_12);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA48_13 = input.LA(1);

                         
                        int index48_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index48_13);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA48_14 = input.LA(1);

                         
                        int index48_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred224_ChemicalChunker()) ) {s = 35;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_14);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA48_15 = input.LA(1);

                         
                        int index48_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_15);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA48_16 = input.LA(1);

                         
                        int index48_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_16);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA48_17 = input.LA(1);

                         
                        int index48_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_17);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA48_18 = input.LA(1);

                         
                        int index48_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_18);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA48_19 = input.LA(1);

                         
                        int index48_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (synpred223_ChemicalChunker()) ) {s = 36;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_19);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA48_20 = input.LA(1);

                         
                        int index48_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_20);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA48_21 = input.LA(1);

                         
                        int index48_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_21);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA48_22 = input.LA(1);

                         
                        int index48_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_22);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA48_23 = input.LA(1);

                         
                        int index48_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_23);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA48_24 = input.LA(1);

                         
                        int index48_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_24);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA48_25 = input.LA(1);

                         
                        int index48_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_25);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA48_26 = input.LA(1);

                         
                        int index48_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_26);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA48_27 = input.LA(1);

                         
                        int index48_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_27);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA48_28 = input.LA(1);

                         
                        int index48_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index48_28);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA48_29 = input.LA(1);

                         
                        int index48_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index48_29);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA48_30 = input.LA(1);

                         
                        int index48_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_ChemicalChunker()) ) {s = 31;}

                        else if ( (synpred222_ChemicalChunker()) ) {s = 32;}

                         
                        input.seek(index48_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA50_static {
    static final String DFA50_eotS =
        "\17\uffff";
    static final String DFA50_eofS =
        "\17\uffff";
    static final String DFA50_minS =
        "\1\46\1\uffff\6\45\1\uffff\6\0";
    static final String DFA50_maxS =
        "\1\u00a7\1\uffff\6\45\1\uffff\6\0";
    static final String DFA50_acceptS =
        "\1\uffff\1\2\6\uffff\1\1\6\uffff";
    static final String DFA50_specialS =
        "\11\uffff\1\3\1\2\1\0\1\1\1\4\1\5}>";
    static final String[] DFA50_transitionS = {
            "\1\1\1\5\1\7\4\uffff\1\6\21\uffff\1\1\7\uffff\1\1\1\uffff\1"+
            "\1\12\uffff\1\1\55\uffff\1\1\2\uffff\1\1\11\uffff\1\1\2\uffff"+
            "\1\1\4\uffff\1\2\1\3\1\4\12\uffff\4\10",
            "",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };
    }

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_static.DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_static.DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_static.DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_static.DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_static.DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_static.DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_static.DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_static.DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "()* loopback of 137:16: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA50_11 = input.LA(1);

                         
                        int index50_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index50_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA50_12 = input.LA(1);

                         
                        int index50_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index50_12);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA50_10 = input.LA(1);

                         
                        int index50_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index50_10);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA50_9 = input.LA(1);

                         
                        int index50_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index50_9);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA50_13 = input.LA(1);

                         
                        int index50_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index50_13);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA50_14 = input.LA(1);

                         
                        int index50_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_ChemicalChunker()) ) {s = 8;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index50_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 50, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA52_static {
    static final String DFA52_eotS =
        "\27\uffff";
    static final String DFA52_eofS =
        "\27\uffff";
    static final String DFA52_minS =
        "\1\47\1\uffff\12\45\12\0\1\uffff";
    static final String DFA52_maxS =
        "\1\u00a9\1\uffff\12\45\12\0\1\uffff";
    static final String DFA52_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA52_specialS =
        "\14\uffff\1\11\1\0\1\10\1\3\1\1\1\2\1\6\1\4\1\5\1\7\1\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\11\1\13\4\uffff\1\12\1\uffff\20\1\1\uffff\1\1\121\uffff"+
            "\2\1\2\uffff\1\1\1\6\1\7\1\10\12\uffff\1\2\1\3\1\5\1\4\1\uffff"+
            "\1\1",
            "",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_static.DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_static.DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_static.DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_static.DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_static.DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_static.DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_static.DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_static.DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "()* loopback of 143:3: ( advAdj )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA52_13 = input.LA(1);

                         
                        int index52_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_13);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA52_16 = input.LA(1);

                         
                        int index52_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA52_17 = input.LA(1);

                         
                        int index52_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA52_15 = input.LA(1);

                         
                        int index52_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_15);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA52_19 = input.LA(1);

                         
                        int index52_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA52_20 = input.LA(1);

                         
                        int index52_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_20);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA52_18 = input.LA(1);

                         
                        int index52_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_18);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA52_21 = input.LA(1);

                         
                        int index52_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_21);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA52_14 = input.LA(1);

                         
                        int index52_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_14);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA52_12 = input.LA(1);

                         
                        int index52_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA58_static {
    static final String DFA58_eotS =
        "\27\uffff";
    static final String DFA58_eofS =
        "\27\uffff";
    static final String DFA58_minS =
        "\1\47\12\45\1\uffff\12\0\1\uffff";
    static final String DFA58_maxS =
        "\1\u00a9\12\45\1\uffff\12\0\1\uffff";
    static final String DFA58_acceptS =
        "\13\uffff\1\2\12\uffff\1\1";
    static final String DFA58_specialS =
        "\14\uffff\1\5\1\7\1\6\1\0\1\1\1\10\1\4\1\2\1\11\1\3\1\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\10\1\12\4\uffff\1\11\1\uffff\20\13\11\uffff\1\13\111\uffff"+
            "\2\13\2\uffff\1\13\1\5\1\6\1\7\12\uffff\1\1\1\2\1\4\1\3\1\uffff"+
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_static.DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_static.DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_static.DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_static.DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_static.DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_static.DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_static.DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_static.DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "148:5: ( advAdj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA58_15 = input.LA(1);

                         
                        int index58_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index58_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA58_16 = input.LA(1);

                         
                        int index58_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index58_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA58_19 = input.LA(1);

                         
                        int index58_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index58_19);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA58_21 = input.LA(1);

                         
                        int index58_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index58_21);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA58_18 = input.LA(1);

                         
                        int index58_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index58_18);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA58_12 = input.LA(1);

                         
                        int index58_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index58_12);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA58_14 = input.LA(1);

                         
                        int index58_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index58_14);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA58_13 = input.LA(1);

                         
                        int index58_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index58_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA58_17 = input.LA(1);

                         
                        int index58_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index58_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA58_20 = input.LA(1);

                         
                        int index58_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_ChemicalChunker()) ) {s = 22;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index58_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA70_static {
    static final String DFA70_eotS =
        "\u0092\uffff";
    static final String DFA70_eofS =
        "\1\1\u0091\uffff";
    static final String DFA70_minS =
        "\1\46\4\uffff\6\0\1\uffff\2\0\3\uffff\15\0\164\uffff";
    static final String DFA70_maxS =
        "\1\u00b4\4\uffff\6\0\1\uffff\2\0\3\uffff\15\0\164\uffff";
    static final String DFA70_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA70_specialS =
        "\5\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\uffff\1\6\1\7\3\uffff\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\164\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\26\1\10\1\12\4\1\1\11\21\1\1\32\7\1\1\31\1\1\1\24\3\1\1"+
            "\27\6\1\1\33\4\1\1\30\12\1\1\35\35\1\1\25\2\1\1\15\11\1\1\22"+
            "\1\1\1\14\1\23\1\21\3\1\1\5\1\6\1\7\2\1\1\34\30\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_static.DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_static.DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_static.DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_static.DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_static.DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_static.DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_static.DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_static.DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "()* loopback of 169:14: ( ( conjunction )* apparatus )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA70_5 = input.LA(1);

                         
                        int index70_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA70_6 = input.LA(1);

                         
                        int index70_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_6);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA70_7 = input.LA(1);

                         
                        int index70_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_7);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA70_8 = input.LA(1);

                         
                        int index70_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_8);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA70_9 = input.LA(1);

                         
                        int index70_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_9);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA70_10 = input.LA(1);

                         
                        int index70_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_10);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA70_12 = input.LA(1);

                         
                        int index70_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_12);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA70_13 = input.LA(1);

                         
                        int index70_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_13);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA70_17 = input.LA(1);

                         
                        int index70_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_17);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA70_18 = input.LA(1);

                         
                        int index70_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_18);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA70_19 = input.LA(1);

                         
                        int index70_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_19);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA70_20 = input.LA(1);

                         
                        int index70_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_20);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA70_21 = input.LA(1);

                         
                        int index70_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_21);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA70_22 = input.LA(1);

                         
                        int index70_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_22);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA70_23 = input.LA(1);

                         
                        int index70_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_23);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA70_24 = input.LA(1);

                         
                        int index70_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_24);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA70_25 = input.LA(1);

                         
                        int index70_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_25);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA70_26 = input.LA(1);

                         
                        int index70_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_26);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA70_27 = input.LA(1);

                         
                        int index70_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_27);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA70_28 = input.LA(1);

                         
                        int index70_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_28);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA70_29 = input.LA(1);

                         
                        int index70_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index70_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA69_static {
    static final String DFA69_eotS =
        "\26\uffff";
    static final String DFA69_eofS =
        "\26\uffff";
    static final String DFA69_minS =
        "\1\46\16\uffff\1\0\6\uffff";
    static final String DFA69_maxS =
        "\1\u009c\16\uffff\1\0\6\uffff";
    static final String DFA69_acceptS =
        "\1\uffff\1\2\23\uffff\1\1";
    static final String DFA69_specialS =
        "\17\uffff\1\0\6\uffff}>";
    static final String[] DFA69_transitionS = {
            "\3\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\17\11\uffff\1\1\1\uffff\1\25\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_static.DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_static.DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_static.DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_static.DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_static.DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_static.DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_static.DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_static.DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "()* loopback of 169:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA69_15 = input.LA(1);

                         
                        int index69_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index69_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 69, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA76_static {
    static final String DFA76_eotS =
        "\34\uffff";
    static final String DFA76_eofS =
        "\1\1\33\uffff";
    static final String DFA76_minS =
        "\1\46\1\uffff\22\0\10\uffff";
    static final String DFA76_maxS =
        "\1\u009c\1\uffff\22\0\10\uffff";
    static final String DFA76_acceptS =
        "\1\uffff\1\11\22\uffff\1\1\1\5\1\2\1\3\1\4\1\6\1\7\1\10";
    static final String DFA76_specialS =
        "\2\uffff\1\14\1\21\1\3\1\20\1\10\1\4\1\1\1\11\1\12\1\13\1\7\1\17"+
        "\1\2\1\0\1\6\1\16\1\15\1\5\10\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\6\1\12\1\14\4\uffff\1\13\21\uffff\1\21\7\uffff\1\20\1\uffff"+
            "\1\4\3\uffff\1\15\6\uffff\1\22\4\uffff\1\16\12\uffff\1\1\35"+
            "\uffff\1\5\2\uffff\1\17\11\uffff\1\2\2\uffff\1\3\4\uffff\1\7"+
            "\1\10\1\11\2\uffff\1\23",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_static.DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_static.DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_static.DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_static.DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_static.DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_static.DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_static.DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "()+ loopback of 176:7: ( quantity | adj | nnpressure | nnadd | molecule | nnchementity | nnstate | nn )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA76_15 = input.LA(1);

                         
                        int index76_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA76_8 = input.LA(1);

                         
                        int index76_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_8);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA76_14 = input.LA(1);

                         
                        int index76_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_ChemicalChunker()) ) {s = 24;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_14);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA76_4 = input.LA(1);

                         
                        int index76_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA76_7 = input.LA(1);

                         
                        int index76_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_7);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA76_19 = input.LA(1);

                         
                        int index76_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_ChemicalChunker()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_19);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA76_16 = input.LA(1);

                         
                        int index76_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred257_ChemicalChunker()) ) {s = 25;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_16);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA76_12 = input.LA(1);

                         
                        int index76_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_12);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA76_6 = input.LA(1);

                         
                        int index76_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_6);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA76_9 = input.LA(1);

                         
                        int index76_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_9);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA76_10 = input.LA(1);

                         
                        int index76_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_10);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA76_11 = input.LA(1);

                         
                        int index76_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_ChemicalChunker()) ) {s = 22;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_11);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA76_2 = input.LA(1);

                         
                        int index76_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_2);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA76_18 = input.LA(1);

                         
                        int index76_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_18);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA76_17 = input.LA(1);

                         
                        int index76_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (synpred258_ChemicalChunker()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_17);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA76_13 = input.LA(1);

                         
                        int index76_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_ChemicalChunker()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_13);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA76_5 = input.LA(1);

                         
                        int index76_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_5);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA76_3 = input.LA(1);

                         
                        int index76_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_ChemicalChunker()) ) {s = 20;}

                        else if ( (synpred256_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index76_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA79_static {
    static final String DFA79_eotS =
        "\17\uffff";
    static final String DFA79_eofS =
        "\1\7\16\uffff";
    static final String DFA79_minS =
        "\1\46\6\45\1\uffff\6\0\1\uffff";
    static final String DFA79_maxS =
        "\1\u00b4\6\45\1\uffff\6\0\1\uffff";
    static final String DFA79_acceptS =
        "\7\uffff\1\2\6\uffff\1\1";
    static final String DFA79_specialS =
        "\10\uffff\1\0\1\2\1\1\1\4\1\3\1\5\1\uffff}>";
    static final String[] DFA79_transitionS = {
            "\1\7\1\4\1\6\4\7\1\5\151\7\1\1\1\2\1\3\33\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_static.DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_static.DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_static.DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_static.DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_static.DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_static.DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_static.DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_static.DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "180:46: ( adj )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA79_8 = input.LA(1);

                         
                        int index79_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index79_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA79_10 = input.LA(1);

                         
                        int index79_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index79_10);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA79_9 = input.LA(1);

                         
                        int index79_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index79_9);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA79_12 = input.LA(1);

                         
                        int index79_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index79_12);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA79_11 = input.LA(1);

                         
                        int index79_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index79_11);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA79_13 = input.LA(1);

                         
                        int index79_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index79_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA80_static {
    static final String DFA80_eotS =
        "\u0094\uffff";
    static final String DFA80_eofS =
        "\1\11\u0093\uffff";
    static final String DFA80_minS =
        "\1\46\10\0\u008b\uffff";
    static final String DFA80_maxS =
        "\1\u00b4\10\0\u008b\uffff";
    static final String DFA80_acceptS =
        "\11\uffff\1\4\u0087\uffff\1\1\1\3\1\2";
    static final String DFA80_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\u008b\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\5\40\11\1\6\1\11\1\3\70\11\1\4\10\11\1\7\1\11\1\10\1\11"+
            "\1\1\2\11\1\2\42\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_static.DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_static.DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_static.DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_static.DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_static.DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_static.DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_static.DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_static.DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "180:51: ( quantity | nnchementity | {...}? numericOrIdentifierCompoundReference )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA80_1 = input.LA(1);

                         
                        int index80_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 145;}

                        else if ( ((synpred265_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index80_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA80_2 = input.LA(1);

                         
                        int index80_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 145;}

                        else if ( ((synpred265_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index80_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA80_3 = input.LA(1);

                         
                        int index80_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index80_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA80_4 = input.LA(1);

                         
                        int index80_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index80_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA80_5 = input.LA(1);

                         
                        int index80_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_ChemicalChunker()) ) {s = 145;}

                        else if ( ((synpred265_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index80_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA80_6 = input.LA(1);

                         
                        int index80_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index80_6);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA80_7 = input.LA(1);

                         
                        int index80_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred265_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index80_7);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA80_8 = input.LA(1);

                         
                        int index80_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred265_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 146;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index80_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA81_static {
    static final String DFA81_eotS =
        "\u0092\uffff";
    static final String DFA81_eofS =
        "\1\1\u0091\uffff";
    static final String DFA81_minS =
        "\1\46\20\uffff\5\0\174\uffff";
    static final String DFA81_maxS =
        "\1\u00b4\20\uffff\5\0\174\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA81_specialS =
        "\21\uffff\1\0\1\1\1\2\1\3\1\4\174\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\25\42\1\1\23\70\1\1\24\14\1\1\21\2\1\1\22\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_static.DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_static.DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_static.DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_static.DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_static.DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_static.DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_static.DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "()* loopback of 180:165: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA81_17 = input.LA(1);

                         
                        int index81_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_17);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA81_18 = input.LA(1);

                         
                        int index81_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_18);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA81_19 = input.LA(1);

                         
                        int index81_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_19);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA81_20 = input.LA(1);

                         
                        int index81_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_20);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA81_21 = input.LA(1);

                         
                        int index81_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA82_static {
    static final String DFA82_eotS =
        "\u0092\uffff";
    static final String DFA82_eofS =
        "\1\2\u0091\uffff";
    static final String DFA82_minS =
        "\1\46\1\0\u0090\uffff";
    static final String DFA82_maxS =
        "\1\u00b4\1\0\u0090\uffff";
    static final String DFA82_acceptS =
        "\2\uffff\1\2\u008e\uffff\1\1";
    static final String DFA82_specialS =
        "\1\uffff\1\0\u0090\uffff}>";
    static final String[] DFA82_transitionS = {
            "\25\2\1\1\171\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_static.DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_static.DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_static.DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_static.DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_static.DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_static.DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_static.DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_static.DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "180:175: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA82_1 = input.LA(1);

                         
                        int index82_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index82_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA92_static {
    static final String DFA92_eotS =
        "\21\uffff";
    static final String DFA92_eofS =
        "\21\uffff";
    static final String DFA92_minS =
        "\1\46\6\0\12\uffff";
    static final String DFA92_maxS =
        "\1\u0099\6\0\12\uffff";
    static final String DFA92_acceptS =
        "\7\uffff\1\2\1\uffff\1\3\6\uffff\1\1";
    static final String DFA92_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\12\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\5\2\11\4\uffff\1\11\21\uffff\1\7\7\uffff\1\7\1\uffff\1\3"+
            "\12\uffff\1\11\55\uffff\1\4\2\uffff\1\6\11\uffff\1\1\2\uffff"+
            "\1\2\4\uffff\3\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_static.DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_static.DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_static.DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_static.DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_static.DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_static.DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_static.DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_static.DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "189:18: ( moleculeamount3 | moleculeamount1 | moleculeamount2 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA92_1 = input.LA(1);

                         
                        int index92_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index92_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA92_2 = input.LA(1);

                         
                        int index92_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index92_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA92_3 = input.LA(1);

                         
                        int index92_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index92_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA92_4 = input.LA(1);

                         
                        int index92_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index92_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA92_5 = input.LA(1);

                         
                        int index92_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index92_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA92_6 = input.LA(1);

                         
                        int index92_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_ChemicalChunker()) ) {s = 16;}

                        else if ( (synpred280_ChemicalChunker()) ) {s = 7;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index92_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA93_static {
    static final String DFA93_eotS =
        "\33\uffff";
    static final String DFA93_eofS =
        "\1\2\2\uffff\1\2\4\uffff\3\2\7\uffff\2\2\1\uffff\2\2\2\uffff\2"+
        "\2";
    static final String DFA93_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\3\46\1\0\5\45\1\uffff\2\46\1\0\2\46"+
        "\2\45\2\46";
    static final String DFA93_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\3\u00b4\1\0\5\45\1\uffff\2\u00b4"+
        "\1\0\2\u00b4\2\45\2\u00b4";
    static final String DFA93_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\11\uffff";
    static final String DFA93_specialS =
        "\13\uffff\1\1\10\uffff\1\0\6\uffff}>";
    static final String[] DFA93_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\6\21\2\1\7\123\2\1\4\3\2\1\5\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\16\127\2\1\14\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\uffff",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\1\uffff",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2"
    };
    }

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_static.DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_static.DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_static.DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_static.DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_static.DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_static.DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_static.DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_static.DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "189:71: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA93_20 = input.LA(1);

                         
                        int index93_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index93_20);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA93_11 = input.LA(1);

                         
                        int index93_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index93_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 93, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA96_static {
    static final String DFA96_eotS =
        "\13\uffff";
    static final String DFA96_eofS =
        "\13\uffff";
    static final String DFA96_minS =
        "\1\47\1\uffff\1\0\10\uffff";
    static final String DFA96_maxS =
        "\1\u0099\1\uffff\1\0\10\uffff";
    static final String DFA96_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\6\uffff";
    static final String DFA96_specialS =
        "\2\uffff\1\0\10\uffff}>";
    static final String[] DFA96_transitionS = {
            "\2\4\4\uffff\1\4\46\uffff\1\4\60\uffff\1\1\11\uffff\1\2\2\uffff"+
            "\1\1\4\uffff\3\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_static.DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_static.DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_static.DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_static.DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_static.DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_static.DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_static.DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_static.DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "192:54: ( mixture )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA96_2 = input.LA(1);

                         
                        int index96_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_ChemicalChunker()) ) {s = 1;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index96_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 96, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA102_static {
    static final String DFA102_eotS =
        "\u0092\uffff";
    static final String DFA102_eofS =
        "\1\2\u0091\uffff";
    static final String DFA102_minS =
        "\1\46\1\0\14\uffff\6\0\3\uffff\1\0\172\uffff";
    static final String DFA102_maxS =
        "\1\u00b4\1\0\14\uffff\6\0\3\uffff\1\0\172\uffff";
    static final String DFA102_acceptS =
        "\2\uffff\1\2\u008e\uffff\1\1";
    static final String DFA102_specialS =
        "\1\uffff\1\0\14\uffff\1\1\1\2\1\3\1\4\1\5\1\6\3\uffff\1\7\172\uffff}>";
    static final String[] DFA102_transitionS = {
            "\1\2\1\21\1\23\4\2\1\22\46\2\1\27\72\2\1\1\7\2\1\16\1\17\1"+
            "\20\33\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_static.DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_static.DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_static.DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_static.DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_static.DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_static.DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_static.DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_static.DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "()+ loopback of 195:86: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA102_1 = input.LA(1);

                         
                        int index102_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA102_14 = input.LA(1);

                         
                        int index102_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_14);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA102_15 = input.LA(1);

                         
                        int index102_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_15);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA102_16 = input.LA(1);

                         
                        int index102_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_16);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA102_17 = input.LA(1);

                         
                        int index102_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_17);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA102_18 = input.LA(1);

                         
                        int index102_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_18);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA102_19 = input.LA(1);

                         
                        int index102_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_19);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA102_23 = input.LA(1);

                         
                        int index102_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 102, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA103_static {
    static final String DFA103_eotS =
        "\16\uffff";
    static final String DFA103_eofS =
        "\16\uffff";
    static final String DFA103_minS =
        "\1\46\7\uffff\2\0\4\uffff";
    static final String DFA103_maxS =
        "\1\u0099\7\uffff\2\0\4\uffff";
    static final String DFA103_acceptS =
        "\1\uffff\1\3\10\uffff\1\1\2\uffff\1\2";
    static final String DFA103_specialS =
        "\10\uffff\1\0\1\1\4\uffff}>";
    static final String[] DFA103_transitionS = {
            "\1\12\2\1\4\uffff\1\1\33\uffff\1\12\12\uffff\1\1\55\uffff\1"+
            "\12\2\uffff\1\15\11\uffff\1\10\2\uffff\1\11\4\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_static.DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_static.DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_static.DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_static.DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_static.DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_static.DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_static.DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_static.DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "()* loopback of 198:3: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA103_8 = input.LA(1);

                         
                        int index103_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred297_ChemicalChunker()) ) {s = 13;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index103_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA103_9 = input.LA(1);

                         
                        int index103_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_ChemicalChunker()) ) {s = 10;}

                        else if ( (synpred297_ChemicalChunker()) ) {s = 13;}

                         
                        input.seek(index103_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 103, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA104_static {
    static final String DFA104_eotS =
        "\13\uffff";
    static final String DFA104_eofS =
        "\1\2\12\uffff";
    static final String DFA104_minS =
        "\1\46\1\0\1\uffff\7\0\1\uffff";
    static final String DFA104_maxS =
        "\1\u00b4\1\0\1\uffff\7\0\1\uffff";
    static final String DFA104_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA104_specialS =
        "\1\uffff\1\1\1\uffff\1\3\1\6\1\2\1\4\1\5\1\0\1\7\1\uffff}>";
    static final String[] DFA104_transitionS = {
            "\1\2\1\6\1\10\4\2\1\7\46\2\1\11\72\2\1\1\7\2\1\3\1\4\1\5\33"+
            "\2",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    }

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_static.DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_static.DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_static.DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_static.DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_static.DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_static.DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_static.DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "()+ loopback of 198:23: ( oscarCompound )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA104_8 = input.LA(1);

                         
                        int index104_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index104_8);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA104_1 = input.LA(1);

                         
                        int index104_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index104_1);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA104_5 = input.LA(1);

                         
                        int index104_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index104_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA104_3 = input.LA(1);

                         
                        int index104_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index104_3);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA104_6 = input.LA(1);

                         
                        int index104_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index104_6);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA104_7 = input.LA(1);

                         
                        int index104_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index104_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA104_4 = input.LA(1);

                         
                        int index104_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index104_4);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA104_9 = input.LA(1);

                         
                        int index104_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred298_ChemicalChunker()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index104_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA106_static {
    static final String DFA106_eotS =
        "\u0095\uffff";
    static final String DFA106_eofS =
        "\1\1\u0094\uffff";
    static final String DFA106_minS =
        "\1\46\3\uffff\1\0\13\uffff\5\0\u0080\uffff";
    static final String DFA106_maxS =
        "\1\u00b4\3\uffff\1\0\13\uffff\5\0\u0080\uffff";
    static final String DFA106_acceptS =
        "\1\uffff\1\5\u008f\uffff\1\1\1\3\1\4\1\2";
    static final String DFA106_specialS =
        "\4\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\u0080\uffff}>";
    static final String[] DFA106_transitionS = {
            "\1\24\42\1\1\22\70\1\1\23\2\1\1\4\11\1\1\20\2\1\1\21\42\1",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_static.DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_static.DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_static.DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_static.DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_static.DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_static.DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_static.DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_static.DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "()* loopback of 200:34: ( citation | quantity | comma ( quantity1Node | citationStructure ) | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA106_4 = input.LA(1);

                         
                        int index106_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred302_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred303_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_4);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA106_16 = input.LA(1);

                         
                        int index106_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred300_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred303_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA106_17 = input.LA(1);

                         
                        int index106_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 148;}

                        else if ( (synpred303_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA106_18 = input.LA(1);

                         
                        int index106_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA106_19 = input.LA(1);

                         
                        int index106_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_19);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA106_20 = input.LA(1);

                         
                        int index106_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_ChemicalChunker()) ) {s = 148;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index106_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA105_static {
    static final String DFA105_eotS =
        "\11\uffff";
    static final String DFA105_eofS =
        "\11\uffff";
    static final String DFA105_minS =
        "\1\u008f\1\45\1\46\1\45\2\uffff\1\54\1\45\1\101";
    static final String DFA105_maxS =
        "\1\u008f\1\45\1\u009e\1\45\2\uffff\1\u009e\1\45\1\u009e";
    static final String DFA105_acceptS =
        "\4\uffff\1\1\1\2\3\uffff";
    static final String DFA105_specialS =
        "\11\uffff}>";
    static final String[] DFA105_transitionS = {
            "\1\1",
            "\1\2",
            "\1\4\42\uffff\1\4\70\uffff\1\4\2\uffff\1\5\13\uffff\1\5\1"+
            "\3\2\uffff\1\5\10\uffff\1\5",
            "\1\6",
            "",
            "",
            "\1\4\24\uffff\3\4\1\uffff\2\4\76\uffff\1\5\4\uffff\1\4\6\uffff"+
            "\1\5\1\7\2\uffff\1\5\6\uffff\1\4\1\uffff\1\5",
            "\1\10",
            "\3\4\1\uffff\2\4\76\uffff\1\5\12\uffff\2\5\1\7\2\uffff\1\5"+
            "\10\uffff\1\5"
    };
    }

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_static.DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_static.DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_static.DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_static.DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_static.DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_static.DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_static.DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "200:59: ( quantity1Node | citationStructure )";
        }
    }
    static class DFA107_static {
    static final String DFA107_eotS =
        "\33\uffff";
    static final String DFA107_eofS =
        "\1\2\2\uffff\1\2\4\uffff\3\2\7\uffff\2\2\1\uffff\2\2\2\uffff\2"+
        "\2";
    static final String DFA107_minS =
        "\1\46\1\45\1\uffff\1\46\4\45\3\46\1\0\5\45\1\uffff\2\46\1\0\2\46"+
        "\2\45\2\46";
    static final String DFA107_maxS =
        "\1\u00b4\1\45\1\uffff\1\u00b4\4\45\3\u00b4\1\0\5\45\1\uffff\2\u00b4"+
        "\1\0\2\u00b4\2\45\2\u00b4";
    static final String DFA107_acceptS =
        "\2\uffff\1\2\16\uffff\1\1\11\uffff";
    static final String DFA107_specialS =
        "\13\uffff\1\0\10\uffff\1\1\6\uffff}>";
    static final String[] DFA107_transitionS = {
            "\11\2\1\1\u0085\2",
            "\1\3",
            "",
            "\7\2\1\6\21\2\1\7\123\2\1\4\3\2\1\5\35\2",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\7\2\1\15\21\2\1\16\127\2\1\14\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\uffff",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\1\uffff",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\7\2\1\20\21\2\1\7\127\2\1\17\35\2",
            "\1\31",
            "\1\32",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2",
            "\7\2\1\30\21\2\1\16\127\2\1\27\35\2"
    };
    }

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_static.DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_static.DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_static.DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_static.DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_static.DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_static.DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_static.DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "203:31: ( asAstate )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA107_11 = input.LA(1);

                         
                        int index107_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA107_20 = input.LA(1);

                         
                        int index107_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred304_ChemicalChunker()) ) {s = 17;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index107_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA111_static {
    static final String DFA111_eotS =
        "\20\uffff";
    static final String DFA111_eofS =
        "\20\uffff";
    static final String DFA111_minS =
        "\1\46\5\0\1\uffff\2\0\1\uffff\1\0\5\uffff";
    static final String DFA111_maxS =
        "\1\u0092\5\0\1\uffff\2\0\1\uffff\1\0\5\uffff";
    static final String DFA111_acceptS =
        "\6\uffff\1\2\2\uffff\1\5\1\uffff\1\7\1\1\1\3\1\6\1\4";
    static final String DFA111_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\uffff\1\5\1\6\1\uffff\1\7\5\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\5\7\uffff\1\6\20\uffff\1\13\7\uffff\1\12\1\uffff\1\3\70"+
            "\uffff\1\4\2\uffff\1\11\5\uffff\1\7\1\uffff\1\10\1\uffff\1\1"+
            "\2\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_static.DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_static.DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_static.DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_static.DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_static.DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_static.DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_static.DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "206:3: ( ( quantity )+ inof ( unnamedmoleculeamount1 | unnamedmoleculeamount2 ( optionalUnnamedMoleculeEnding )? ) | unnamedmoleculeamount3 | unnamedmoleculeamount4 | unnamedmoleculeamount5 | unnamedmoleculeamount6 | unnamedmoleculeamount7 | unnamedmoleculeamount8 )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA111_1 = input.LA(1);

                         
                        int index111_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 12;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred312_ChemicalChunker()) ) {s = 9;}

                        else if ( ((synpred313_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))) ) {s = 14;}

                         
                        input.seek(index111_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA111_2 = input.LA(1);

                         
                        int index111_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 12;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred311_ChemicalChunker()) ) {s = 15;}

                        else if ( (synpred312_ChemicalChunker()) ) {s = 9;}

                        else if ( ((synpred313_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))) ) {s = 14;}

                         
                        input.seek(index111_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA111_3 = input.LA(1);

                         
                        int index111_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 12;}

                        else if ( (synpred312_ChemicalChunker()) ) {s = 9;}

                         
                        input.seek(index111_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA111_4 = input.LA(1);

                         
                        int index111_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 12;}

                        else if ( (synpred312_ChemicalChunker()) ) {s = 9;}

                         
                        input.seek(index111_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA111_5 = input.LA(1);

                         
                        int index111_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred308_ChemicalChunker()) ) {s = 12;}

                        else if ( (synpred310_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred312_ChemicalChunker()) ) {s = 9;}

                        else if ( ((synpred313_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))) ) {s = 14;}

                         
                        input.seek(index111_5);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA111_7 = input.LA(1);

                         
                        int index111_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 13;}

                        else if ( ((synpred313_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))) ) {s = 14;}

                         
                        input.seek(index111_7);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA111_8 = input.LA(1);

                         
                        int index111_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_ChemicalChunker()) ) {s = 13;}

                        else if ( ((synpred313_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))) ) {s = 14;}

                         
                        input.seek(index111_8);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA111_10 = input.LA(1);

                         
                        int index111_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred313_ChemicalChunker()) ) {s = 14;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index111_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA109_static {
    static final String DFA109_eotS =
        "\u0093\uffff";
    static final String DFA109_eofS =
        "\1\117\u0092\uffff";
    static final String DFA109_minS =
        "\1\46\u0090\0\2\uffff";
    static final String DFA109_maxS =
        "\1\u00b4\u0090\0\2\uffff";
    static final String DFA109_acceptS =
        "\u0091\uffff\1\1\1\2";
    static final String DFA109_specialS =
        "\1\uffff\1\33\1\u008a\1\u0082\1\27\1\60\1\123\1\u0089\1\147\1\126"+
        "\1\26\1\0\1\177\1\150\1\50\1\u008c\1\116\1\6\1\144\1\164\1\114\1"+
        "\74\1\u008f\1\1\1\u0087\1\u0080\1\115\1\35\1\25\1\146\1\175\1\10"+
        "\1\11\1\170\1\125\1\55\1\40\1\153\1\103\1\122\1\134\1\57\1\45\1"+
        "\31\1\77\1\54\1\131\1\174\1\30\1\117\1\5\1\130\1\13\1\u008d\1\63"+
        "\1\176\1\u0085\1\66\1\21\1\3\1\34\1\u0088\1\46\1\132\1\142\1\u008e"+
        "\1\42\1\137\1\165\1\166\1\151\1\u008b\1\56\1\51\1\36\1\24\1\110"+
        "\1\70\1\u0086\1\22\1\75\1\23\1\120\1\171\1\61\1\157\1\145\1\20\1"+
        "\167\1\15\1\121\1\135\1\133\1\140\1\17\1\67\1\64\1\62\1\173\1\12"+
        "\1\73\1\124\1\163\1\53\1\16\1\105\1\136\1\161\1\72\1\113\1\52\1"+
        "\4\1\37\1\u0081\1\141\1\71\1\160\1\47\1\u0083\1\143\1\41\1\100\1"+
        "\111\1\156\1\65\1\112\1\32\1\107\1\154\1\14\1\106\1\44\1\2\1\162"+
        "\1\7\1\104\1\76\1\u0084\1\152\1\172\1\102\1\155\1\101\1\127\1\43"+
        "\2\uffff}>";
    static final String[] DFA109_transitionS = {
            "\1\5\1\24\1\26\1\112\1\50\1\53\1\u0088\1\25\1\33\1\12\1\124"+
            "\1\123\1\13\1\127\1\135\1\136\1\125\1\134\1\113\1\131\1\126"+
            "\1\11\1\133\1\132\1\130\1\31\1\51\1\u0089\1\56\1\u008a\1\52"+
            "\1\57\1\66\1\30\1\54\1\3\1\55\1\43\1\44\1\37\1\60\1\61\1\62"+
            "\1\63\1\64\1\45\1\32\1\146\1\u0086\1\147\1\152\1\40\1\71\1\154"+
            "\1\153\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\42\1\164"+
            "\1\65\1\165\1\151\1\166\1\167\1\72\1\170\1\73\1\171\1\74\1\172"+
            "\1\173\1\150\1\174\1\175\1\75\1\176\1\67\1\177\1\u0080\1\u0081"+
            "\1\76\1\u0082\1\47\1\70\1\u0083\1\u0084\1\u0085\1\4\1\115\1"+
            "\114\1\10\1\u008b\1\u0087\1\u008c\1\116\1\u008d\1\6\1\u008e"+
            "\1\7\1\120\1\1\1\u008f\1\14\1\2\1\36\1\104\1\77\1\122\1\21\1"+
            "\22\1\23\1\107\1\137\1\41\1\46\1\27\1\110\1\105\1\111\1\34\1"+
            "\35\1\15\1\16\1\20\1\17\1\100\1\121\1\u0090\1\140\1\143\1\142"+
            "\1\145\1\141\1\144\1\101\1\106\1\102\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_static.DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_static.DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_static.DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_static.DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_static.DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_static.DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_static.DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_static.DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "206:66: ( optionalUnnamedMoleculeEnding )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA109_11 = input.LA(1);

                         
                        int index109_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA109_23 = input.LA(1);

                         
                        int index109_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_23);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA109_132 = input.LA(1);

                         
                        int index109_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_132);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA109_59 = input.LA(1);

                         
                        int index109_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_59);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA109_111 = input.LA(1);

                         
                        int index109_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_111);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA109_50 = input.LA(1);

                         
                        int index109_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_50);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA109_17 = input.LA(1);

                         
                        int index109_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_17);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA109_134 = input.LA(1);

                         
                        int index109_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_134);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA109_31 = input.LA(1);

                         
                        int index109_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_31);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA109_32 = input.LA(1);

                         
                        int index109_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_32);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA109_99 = input.LA(1);

                         
                        int index109_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_99);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA109_52 = input.LA(1);

                         
                        int index109_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_52);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA109_129 = input.LA(1);

                         
                        int index109_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_129);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA109_89 = input.LA(1);

                         
                        int index109_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_89);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA109_104 = input.LA(1);

                         
                        int index109_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_104);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA109_94 = input.LA(1);

                         
                        int index109_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_94);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA109_87 = input.LA(1);

                         
                        int index109_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_87);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA109_58 = input.LA(1);

                         
                        int index109_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_58);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA109_79 = input.LA(1);

                         
                        int index109_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_79);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA109_81 = input.LA(1);

                         
                        int index109_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_81);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA109_75 = input.LA(1);

                         
                        int index109_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_75);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA109_28 = input.LA(1);

                         
                        int index109_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_28);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA109_10 = input.LA(1);

                         
                        int index109_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_10);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA109_4 = input.LA(1);

                         
                        int index109_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred307_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_4);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA109_48 = input.LA(1);

                         
                        int index109_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_48);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA109_43 = input.LA(1);

                         
                        int index109_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_43);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA109_126 = input.LA(1);

                         
                        int index109_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_126);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA109_1 = input.LA(1);

                         
                        int index109_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||(synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||synpred307_ChemicalChunker()||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_1);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA109_60 = input.LA(1);

                         
                        int index109_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_60);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA109_27 = input.LA(1);

                         
                        int index109_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_27);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA109_74 = input.LA(1);

                         
                        int index109_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_74);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA109_112 = input.LA(1);

                         
                        int index109_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_112);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA109_36 = input.LA(1);

                         
                        int index109_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_36);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA109_120 = input.LA(1);

                         
                        int index109_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_120);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA109_66 = input.LA(1);

                         
                        int index109_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_66);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA109_144 = input.LA(1);

                         
                        int index109_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_144);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA109_131 = input.LA(1);

                         
                        int index109_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_131);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA109_42 = input.LA(1);

                         
                        int index109_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_42);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA109_62 = input.LA(1);

                         
                        int index109_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_62);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA109_117 = input.LA(1);

                         
                        int index109_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_117);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA109_14 = input.LA(1);

                         
                        int index109_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_14);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA109_73 = input.LA(1);

                         
                        int index109_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_73);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA109_110 = input.LA(1);

                         
                        int index109_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_110);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA109_103 = input.LA(1);

                         
                        int index109_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_103);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA109_45 = input.LA(1);

                         
                        int index109_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_45);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA109_35 = input.LA(1);

                         
                        int index109_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_35);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA109_72 = input.LA(1);

                         
                        int index109_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_72);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA109_41 = input.LA(1);

                         
                        int index109_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_41);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA109_5 = input.LA(1);

                         
                        int index109_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||(synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||synpred307_ChemicalChunker()||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_5);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA109_84 = input.LA(1);

                         
                        int index109_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_84);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA109_97 = input.LA(1);

                         
                        int index109_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_97);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA109_54 = input.LA(1);

                         
                        int index109_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_54);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA109_96 = input.LA(1);

                         
                        int index109_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_96);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA109_124 = input.LA(1);

                         
                        int index109_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_124);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA109_57 = input.LA(1);

                         
                        int index109_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_57);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA109_95 = input.LA(1);

                         
                        int index109_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_95);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA109_77 = input.LA(1);

                         
                        int index109_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_77);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA109_115 = input.LA(1);

                         
                        int index109_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_115);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA109_108 = input.LA(1);

                         
                        int index109_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_108);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA109_100 = input.LA(1);

                         
                        int index109_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_100);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA109_21 = input.LA(1);

                         
                        int index109_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_21);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA109_80 = input.LA(1);

                         
                        int index109_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_80);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA109_136 = input.LA(1);

                         
                        int index109_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_136);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA109_44 = input.LA(1);

                         
                        int index109_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_44);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA109_121 = input.LA(1);

                         
                        int index109_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_121);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA109_142 = input.LA(1);

                         
                        int index109_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_142);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA109_140 = input.LA(1);

                         
                        int index109_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_140);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA109_38 = input.LA(1);

                         
                        int index109_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_38);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA109_135 = input.LA(1);

                         
                        int index109_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_135);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA109_105 = input.LA(1);

                         
                        int index109_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_105);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA109_130 = input.LA(1);

                         
                        int index109_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_130);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA109_127 = input.LA(1);

                         
                        int index109_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_127);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA109_76 = input.LA(1);

                         
                        int index109_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_76);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA109_122 = input.LA(1);

                         
                        int index109_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_122);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA109_125 = input.LA(1);

                         
                        int index109_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_125);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA109_109 = input.LA(1);

                         
                        int index109_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_109);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA109_20 = input.LA(1);

                         
                        int index109_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_20);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA109_26 = input.LA(1);

                         
                        int index109_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_26);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA109_16 = input.LA(1);

                         
                        int index109_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_16);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA109_49 = input.LA(1);

                         
                        int index109_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_49);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA109_82 = input.LA(1);

                         
                        int index109_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_82);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA109_90 = input.LA(1);

                         
                        int index109_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_90);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA109_39 = input.LA(1);

                         
                        int index109_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_39);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA109_6 = input.LA(1);

                         
                        int index109_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||(synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_6);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA109_101 = input.LA(1);

                         
                        int index109_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_101);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA109_34 = input.LA(1);

                         
                        int index109_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_34);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA109_9 = input.LA(1);

                         
                        int index109_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_9);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA109_143 = input.LA(1);

                         
                        int index109_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_143);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA109_51 = input.LA(1);

                         
                        int index109_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_51);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA109_46 = input.LA(1);

                         
                        int index109_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_46);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA109_63 = input.LA(1);

                         
                        int index109_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_63);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA109_92 = input.LA(1);

                         
                        int index109_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_92);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA109_40 = input.LA(1);

                         
                        int index109_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_40);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA109_91 = input.LA(1);

                         
                        int index109_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_91);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA109_106 = input.LA(1);

                         
                        int index109_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_106);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA109_67 = input.LA(1);

                         
                        int index109_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_67);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA109_93 = input.LA(1);

                         
                        int index109_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_93);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA109_114 = input.LA(1);

                         
                        int index109_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_114);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA109_64 = input.LA(1);

                         
                        int index109_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_64);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA109_119 = input.LA(1);

                         
                        int index109_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_119);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA109_18 = input.LA(1);

                         
                        int index109_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_18);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA109_86 = input.LA(1);

                         
                        int index109_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_86);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA109_29 = input.LA(1);

                         
                        int index109_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_29);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA109_8 = input.LA(1);

                         
                        int index109_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_8);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA109_13 = input.LA(1);

                         
                        int index109_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_13);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA109_70 = input.LA(1);

                         
                        int index109_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_70);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA109_138 = input.LA(1);

                         
                        int index109_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_138);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA109_37 = input.LA(1);

                         
                        int index109_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_37);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA109_128 = input.LA(1);

                         
                        int index109_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_128);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA109_141 = input.LA(1);

                         
                        int index109_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_141);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA109_123 = input.LA(1);

                         
                        int index109_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_123);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA109_85 = input.LA(1);

                         
                        int index109_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_85);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA109_116 = input.LA(1);

                         
                        int index109_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_116);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA109_107 = input.LA(1);

                         
                        int index109_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_107);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA109_133 = input.LA(1);

                         
                        int index109_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_133);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA109_102 = input.LA(1);

                         
                        int index109_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_102);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA109_19 = input.LA(1);

                         
                        int index109_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_19);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA109_68 = input.LA(1);

                         
                        int index109_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_68);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA109_69 = input.LA(1);

                         
                        int index109_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_69);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA109_88 = input.LA(1);

                         
                        int index109_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_88);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA109_33 = input.LA(1);

                         
                        int index109_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_33);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA109_83 = input.LA(1);

                         
                        int index109_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_83);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA109_139 = input.LA(1);

                         
                        int index109_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_139);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA109_98 = input.LA(1);

                         
                        int index109_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_98);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA109_47 = input.LA(1);

                         
                        int index109_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_47);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA109_30 = input.LA(1);

                         
                        int index109_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_30);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA109_55 = input.LA(1);

                         
                        int index109_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_55);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA109_12 = input.LA(1);

                         
                        int index109_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_12);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA109_25 = input.LA(1);

                         
                        int index109_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_25);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA109_113 = input.LA(1);

                         
                        int index109_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_113);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA109_3 = input.LA(1);

                         
                        int index109_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred307_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_3);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA109_118 = input.LA(1);

                         
                        int index109_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_118);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA109_137 = input.LA(1);

                         
                        int index109_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_137);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA109_56 = input.LA(1);

                         
                        int index109_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_56);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA109_78 = input.LA(1);

                         
                        int index109_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_78);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA109_24 = input.LA(1);

                         
                        int index109_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_24);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA109_61 = input.LA(1);

                         
                        int index109_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_61);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA109_7 = input.LA(1);

                         
                        int index109_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||(synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_7);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA109_2 = input.LA(1);

                         
                        int index109_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||(synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||synpred307_ChemicalChunker()||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_2);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA109_71 = input.LA(1);

                         
                        int index109_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_71);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA109_15 = input.LA(1);

                         
                        int index109_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_15);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA109_53 = input.LA(1);

                         
                        int index109_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_53);
                        if ( s>=0 ) return s;
                        break;

                    case 142 : 
                        int LA109_65 = input.LA(1);

                         
                        int index109_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_65);
                        if ( s>=0 ) return s;
                        break;

                    case 143 : 
                        int LA109_22 = input.LA(1);

                         
                        int index109_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred307_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index109_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 109, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA112_static {
    static final String DFA112_eotS =
        "\u0092\uffff";
    static final String DFA112_eofS =
        "\1\2\u0091\uffff";
    static final String DFA112_minS =
        "\1\46\1\0\u0090\uffff";
    static final String DFA112_maxS =
        "\1\u00b4\1\0\u0090\uffff";
    static final String DFA112_acceptS =
        "\2\uffff\1\2\u008e\uffff\1\1";
    static final String DFA112_specialS =
        "\1\uffff\1\0\u0090\uffff}>";
    static final String[] DFA112_transitionS = {
            "\25\2\1\1\171\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_static.DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_static.DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_static.DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_static.DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_static.DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_static.DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_static.DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "206:238: ( fromProcedure )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA112_1 = input.LA(1);

                         
                        int index112_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index112_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA113_static {
    static final String DFA113_eotS =
        "\u0093\uffff";
    static final String DFA113_eofS =
        "\1\1\u0092\uffff";
    static final String DFA113_minS =
        "\1\46\4\uffff\1\0\13\uffff\5\0\175\uffff";
    static final String DFA113_maxS =
        "\1\u00b4\4\uffff\1\0\13\uffff\5\0\175\uffff";
    static final String DFA113_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\2\1\1";
    static final String DFA113_specialS =
        "\5\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\175\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\25\42\1\1\23\70\1\1\24\2\1\1\5\11\1\1\21\2\1\1\22\42\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_static.DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_static.DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_static.DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_static.DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_static.DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_static.DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_static.DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "()* loopback of 209:90: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA113_5 = input.LA(1);

                         
                        int index113_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA113_17 = input.LA(1);

                         
                        int index113_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA113_18 = input.LA(1);

                         
                        int index113_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred316_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA113_19 = input.LA(1);

                         
                        int index113_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_19);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA113_20 = input.LA(1);

                         
                        int index113_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA113_21 = input.LA(1);

                         
                        int index113_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index113_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA116_static {
    static final String DFA116_eotS =
        "\17\uffff";
    static final String DFA116_eofS =
        "\17\uffff";
    static final String DFA116_minS =
        "\1\51\4\uffff\1\0\11\uffff";
    static final String DFA116_maxS =
        "\1\u009f\4\uffff\1\0\11\uffff";
    static final String DFA116_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\5\1\6";
    static final String DFA116_specialS =
        "\5\uffff\1\0\11\uffff}>";
    static final String[] DFA116_transitionS = {
            "\1\14\1\6\24\uffff\1\1\4\uffff\1\7\2\uffff\1\10\13\uffff\1"+
            "\5\6\uffff\1\11\72\uffff\1\12\6\uffff\1\2\1\3\1\4\1\13",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_static.DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_static.DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_static.DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_static.DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_static.DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_static.DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_static.DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "212:38: ( nnstate | nn | nns | nnp | referenceToExampleCompound | nnexample | oscaronts | nnatmosphere | nnchementity | nnmixture | fw | nnps | oscarase )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA116_5 = input.LA(1);

                         
                        int index116_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred326_ChemicalChunker()) ) {s = 13;}

                        else if ( (synpred327_ChemicalChunker()) ) {s = 14;}

                         
                        input.seek(index116_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 116, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA117_static {
    static final String DFA117_eotS =
        "\u0093\uffff";
    static final String DFA117_eofS =
        "\1\117\u0092\uffff";
    static final String DFA117_minS =
        "\1\46\u0090\0\2\uffff";
    static final String DFA117_maxS =
        "\1\u00b4\u0090\0\2\uffff";
    static final String DFA117_acceptS =
        "\u0091\uffff\1\1\1\2";
    static final String DFA117_specialS =
        "\1\uffff\1\32\1\u008a\1\u0082\1\26\1\57\1\123\1\u0089\1\147\1\126"+
        "\1\25\1\0\1\177\1\150\1\47\1\u008c\1\116\1\6\1\144\1\164\1\114\1"+
        "\73\1\u008f\1\1\1\u0087\1\u0080\1\115\1\34\1\24\1\146\1\175\1\10"+
        "\1\11\1\170\1\125\1\54\1\37\1\153\1\102\1\122\1\134\1\56\1\44\1"+
        "\30\1\76\1\53\1\131\1\174\1\27\1\117\1\5\1\130\1\13\1\u008d\1\62"+
        "\1\176\1\u0085\1\65\1\21\1\3\1\33\1\u0088\1\45\1\132\1\142\1\u008e"+
        "\1\41\1\137\1\165\1\166\1\151\1\u008b\1\55\1\50\1\35\1\23\1\110"+
        "\1\67\1\u0086\1\105\1\74\1\22\1\120\1\171\1\60\1\157\1\145\1\20"+
        "\1\167\1\15\1\121\1\135\1\133\1\140\1\17\1\66\1\63\1\61\1\173\1"+
        "\12\1\72\1\124\1\163\1\52\1\16\1\104\1\136\1\161\1\71\1\113\1\51"+
        "\1\4\1\36\1\u0081\1\141\1\70\1\160\1\46\1\u0083\1\143\1\40\1\77"+
        "\1\111\1\156\1\64\1\112\1\31\1\107\1\154\1\14\1\106\1\43\1\2\1\162"+
        "\1\7\1\103\1\75\1\u0084\1\152\1\172\1\101\1\155\1\100\1\127\1\42"+
        "\2\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\5\1\24\1\26\1\112\1\50\1\53\1\u0088\1\25\1\33\1\12\1\124"+
            "\1\123\1\13\1\127\1\135\1\136\1\125\1\134\1\113\1\131\1\126"+
            "\1\11\1\133\1\132\1\130\1\31\1\51\1\u0089\1\56\1\u008a\1\52"+
            "\1\57\1\66\1\30\1\54\1\3\1\55\1\43\1\44\1\37\1\60\1\61\1\62"+
            "\1\63\1\64\1\45\1\32\1\146\1\u0086\1\147\1\152\1\40\1\71\1\154"+
            "\1\153\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\42\1\164"+
            "\1\65\1\165\1\151\1\166\1\167\1\72\1\170\1\73\1\171\1\74\1\172"+
            "\1\173\1\150\1\174\1\175\1\75\1\176\1\67\1\177\1\u0080\1\u0081"+
            "\1\76\1\u0082\1\47\1\70\1\u0083\1\u0084\1\u0085\1\4\1\115\1"+
            "\114\1\10\1\u008b\1\u0087\1\u008c\1\116\1\u008d\1\6\1\u008e"+
            "\1\7\1\120\1\1\1\u008f\1\14\1\2\1\36\1\104\1\77\1\122\1\21\1"+
            "\22\1\23\1\107\1\137\1\41\1\46\1\27\1\110\1\105\1\111\1\34\1"+
            "\35\1\15\1\16\1\20\1\17\1\100\1\121\1\u0090\1\140\1\143\1\142"+
            "\1\145\1\141\1\144\1\101\1\106\1\102\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    }

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_static.DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_static.DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_static.DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_static.DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_static.DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_static.DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_static.DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "215:24: ( optionalUnnamedMoleculeEnding )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA117_11 = input.LA(1);

                         
                        int index117_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_11);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA117_23 = input.LA(1);

                         
                        int index117_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_23);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA117_132 = input.LA(1);

                         
                        int index117_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_132);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA117_59 = input.LA(1);

                         
                        int index117_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_59);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA117_111 = input.LA(1);

                         
                        int index117_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_111);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA117_50 = input.LA(1);

                         
                        int index117_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_50);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA117_17 = input.LA(1);

                         
                        int index117_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_17);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA117_134 = input.LA(1);

                         
                        int index117_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_134);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA117_31 = input.LA(1);

                         
                        int index117_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_31);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA117_32 = input.LA(1);

                         
                        int index117_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_32);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA117_99 = input.LA(1);

                         
                        int index117_99 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_99);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA117_52 = input.LA(1);

                         
                        int index117_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_52);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA117_129 = input.LA(1);

                         
                        int index117_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_129);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA117_89 = input.LA(1);

                         
                        int index117_89 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_89);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA117_104 = input.LA(1);

                         
                        int index117_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_104);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA117_94 = input.LA(1);

                         
                        int index117_94 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_94);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA117_87 = input.LA(1);

                         
                        int index117_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_87);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA117_58 = input.LA(1);

                         
                        int index117_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_58);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA117_81 = input.LA(1);

                         
                        int index117_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_81);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA117_75 = input.LA(1);

                         
                        int index117_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_75);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA117_28 = input.LA(1);

                         
                        int index117_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_28);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA117_10 = input.LA(1);

                         
                        int index117_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_10);
                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA117_4 = input.LA(1);

                         
                        int index117_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred334_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_4);
                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA117_48 = input.LA(1);

                         
                        int index117_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_48);
                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA117_43 = input.LA(1);

                         
                        int index117_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_43);
                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA117_126 = input.LA(1);

                         
                        int index117_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_126);
                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA117_1 = input.LA(1);

                         
                        int index117_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||(synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred334_ChemicalChunker()||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_1);
                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA117_60 = input.LA(1);

                         
                        int index117_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_60);
                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA117_27 = input.LA(1);

                         
                        int index117_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_27);
                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA117_74 = input.LA(1);

                         
                        int index117_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_74);
                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA117_112 = input.LA(1);

                         
                        int index117_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_112);
                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA117_36 = input.LA(1);

                         
                        int index117_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_36);
                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA117_120 = input.LA(1);

                         
                        int index117_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_120);
                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA117_66 = input.LA(1);

                         
                        int index117_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_66);
                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA117_144 = input.LA(1);

                         
                        int index117_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_144);
                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA117_131 = input.LA(1);

                         
                        int index117_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_131);
                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA117_42 = input.LA(1);

                         
                        int index117_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_42);
                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA117_62 = input.LA(1);

                         
                        int index117_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_62);
                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA117_117 = input.LA(1);

                         
                        int index117_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_117);
                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA117_14 = input.LA(1);

                         
                        int index117_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_14);
                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA117_73 = input.LA(1);

                         
                        int index117_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_73);
                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA117_110 = input.LA(1);

                         
                        int index117_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_110);
                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA117_103 = input.LA(1);

                         
                        int index117_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_103);
                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA117_45 = input.LA(1);

                         
                        int index117_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_45);
                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA117_35 = input.LA(1);

                         
                        int index117_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_35);
                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA117_72 = input.LA(1);

                         
                        int index117_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_72);
                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA117_41 = input.LA(1);

                         
                        int index117_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_41);
                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA117_5 = input.LA(1);

                         
                        int index117_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||(synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred334_ChemicalChunker()||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_5);
                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA117_84 = input.LA(1);

                         
                        int index117_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_84);
                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA117_97 = input.LA(1);

                         
                        int index117_97 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_97);
                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA117_54 = input.LA(1);

                         
                        int index117_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_54);
                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA117_96 = input.LA(1);

                         
                        int index117_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_96);
                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA117_124 = input.LA(1);

                         
                        int index117_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_124);
                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA117_57 = input.LA(1);

                         
                        int index117_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_57);
                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA117_95 = input.LA(1);

                         
                        int index117_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_95);
                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA117_77 = input.LA(1);

                         
                        int index117_77 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_77);
                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA117_115 = input.LA(1);

                         
                        int index117_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_115);
                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA117_108 = input.LA(1);

                         
                        int index117_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_108);
                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA117_100 = input.LA(1);

                         
                        int index117_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_100);
                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA117_21 = input.LA(1);

                         
                        int index117_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_21);
                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA117_80 = input.LA(1);

                         
                        int index117_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_80);
                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA117_136 = input.LA(1);

                         
                        int index117_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_136);
                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA117_44 = input.LA(1);

                         
                        int index117_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_44);
                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA117_121 = input.LA(1);

                         
                        int index117_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_121);
                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA117_142 = input.LA(1);

                         
                        int index117_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_142);
                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA117_140 = input.LA(1);

                         
                        int index117_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_140);
                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA117_38 = input.LA(1);

                         
                        int index117_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_38);
                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA117_135 = input.LA(1);

                         
                        int index117_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_135);
                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA117_105 = input.LA(1);

                         
                        int index117_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_105);
                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA117_79 = input.LA(1);

                         
                        int index117_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_79);
                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA117_130 = input.LA(1);

                         
                        int index117_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_130);
                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA117_127 = input.LA(1);

                         
                        int index117_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_127);
                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA117_76 = input.LA(1);

                         
                        int index117_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_76);
                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA117_122 = input.LA(1);

                         
                        int index117_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_122);
                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA117_125 = input.LA(1);

                         
                        int index117_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_125);
                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA117_109 = input.LA(1);

                         
                        int index117_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_109);
                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA117_20 = input.LA(1);

                         
                        int index117_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_20);
                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA117_26 = input.LA(1);

                         
                        int index117_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_26);
                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA117_16 = input.LA(1);

                         
                        int index117_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_16);
                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA117_49 = input.LA(1);

                         
                        int index117_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_49);
                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA117_82 = input.LA(1);

                         
                        int index117_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_82);
                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA117_90 = input.LA(1);

                         
                        int index117_90 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_90);
                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA117_39 = input.LA(1);

                         
                        int index117_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_39);
                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA117_6 = input.LA(1);

                         
                        int index117_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||(synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_6);
                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA117_101 = input.LA(1);

                         
                        int index117_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_101);
                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA117_34 = input.LA(1);

                         
                        int index117_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_34);
                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA117_9 = input.LA(1);

                         
                        int index117_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_9);
                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA117_143 = input.LA(1);

                         
                        int index117_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_143);
                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA117_51 = input.LA(1);

                         
                        int index117_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_51);
                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA117_46 = input.LA(1);

                         
                        int index117_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_46);
                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA117_63 = input.LA(1);

                         
                        int index117_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_63);
                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA117_92 = input.LA(1);

                         
                        int index117_92 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_92);
                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA117_40 = input.LA(1);

                         
                        int index117_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_40);
                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA117_91 = input.LA(1);

                         
                        int index117_91 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_91);
                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA117_106 = input.LA(1);

                         
                        int index117_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_106);
                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA117_67 = input.LA(1);

                         
                        int index117_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_67);
                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA117_93 = input.LA(1);

                         
                        int index117_93 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_93);
                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA117_114 = input.LA(1);

                         
                        int index117_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_114);
                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA117_64 = input.LA(1);

                         
                        int index117_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_64);
                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA117_119 = input.LA(1);

                         
                        int index117_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_119);
                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA117_18 = input.LA(1);

                         
                        int index117_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_18);
                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA117_86 = input.LA(1);

                         
                        int index117_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_86);
                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA117_29 = input.LA(1);

                         
                        int index117_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_29);
                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA117_8 = input.LA(1);

                         
                        int index117_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_8);
                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA117_13 = input.LA(1);

                         
                        int index117_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_13);
                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA117_70 = input.LA(1);

                         
                        int index117_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_70);
                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA117_138 = input.LA(1);

                         
                        int index117_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_138);
                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA117_37 = input.LA(1);

                         
                        int index117_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_37);
                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA117_128 = input.LA(1);

                         
                        int index117_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_128);
                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA117_141 = input.LA(1);

                         
                        int index117_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_141);
                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA117_123 = input.LA(1);

                         
                        int index117_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_123);
                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA117_85 = input.LA(1);

                         
                        int index117_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_85);
                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA117_116 = input.LA(1);

                         
                        int index117_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_116);
                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA117_107 = input.LA(1);

                         
                        int index117_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_107);
                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA117_133 = input.LA(1);

                         
                        int index117_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_133);
                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA117_102 = input.LA(1);

                         
                        int index117_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_102);
                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA117_19 = input.LA(1);

                         
                        int index117_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_19);
                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA117_68 = input.LA(1);

                         
                        int index117_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_68);
                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA117_69 = input.LA(1);

                         
                        int index117_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_69);
                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA117_88 = input.LA(1);

                         
                        int index117_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_88);
                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA117_33 = input.LA(1);

                         
                        int index117_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_33);
                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA117_83 = input.LA(1);

                         
                        int index117_83 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_83);
                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA117_139 = input.LA(1);

                         
                        int index117_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_139);
                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA117_98 = input.LA(1);

                         
                        int index117_98 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_98);
                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA117_47 = input.LA(1);

                         
                        int index117_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_47);
                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA117_30 = input.LA(1);

                         
                        int index117_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_30);
                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA117_55 = input.LA(1);

                         
                        int index117_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_55);
                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA117_12 = input.LA(1);

                         
                        int index117_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_12);
                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA117_25 = input.LA(1);

                         
                        int index117_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_25);
                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA117_113 = input.LA(1);

                         
                        int index117_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_113);
                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA117_3 = input.LA(1);

                         
                        int index117_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred334_ChemicalChunker())) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_3);
                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA117_118 = input.LA(1);

                         
                        int index117_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_118);
                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA117_137 = input.LA(1);

                         
                        int index117_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_137);
                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA117_56 = input.LA(1);

                         
                        int index117_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_56);
                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA117_78 = input.LA(1);

                         
                        int index117_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_78);
                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA117_24 = input.LA(1);

                         
                        int index117_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_24);
                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA117_61 = input.LA(1);

                         
                        int index117_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_61);
                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA117_7 = input.LA(1);

                         
                        int index117_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||(synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_7);
                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA117_2 = input.LA(1);

                         
                        int index117_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||(synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))||synpred334_ChemicalChunker()||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input)))||((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_2);
                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA117_71 = input.LA(1);

                         
                        int index117_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_71);
                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA117_15 = input.LA(1);

                         
                        int index117_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_15);
                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA117_53 = input.LA(1);

                         
                        int index117_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_53);
                        if ( s>=0 ) return s;
                        break;

                    case 142 : 
                        int LA117_65 = input.LA(1);

                         
                        int index117_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_65);
                        if ( s>=0 ) return s;
                        break;

                    case 143 : 
                        int LA117_22 = input.LA(1);

                         
                        int index117_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred334_ChemicalChunker()&&(!followedByNumberWhichIsNotAReference(input)))) ) {s = 145;}

                        else if ( (true) ) {s = 146;}

                         
                        input.seek(index117_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA118_static {
    static final String DFA118_eotS =
        "\u0092\uffff";
    static final String DFA118_eofS =
        "\1\1\u0091\uffff";
    static final String DFA118_minS =
        "\1\46\1\uffff\1\0\1\uffff\4\0\u008a\uffff";
    static final String DFA118_maxS =
        "\1\u00b4\1\uffff\1\0\1\uffff\4\0\u008a\uffff";
    static final String DFA118_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA118_specialS =
        "\2\uffff\1\0\1\uffff\1\1\1\2\1\3\1\4\u008a\uffff}>";
    static final String[] DFA118_transitionS = {
            "\1\5\42\1\1\6\70\1\1\7\14\1\1\4\2\1\1\2\42\1",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_static.DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_static.DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_static.DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_static.DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_static.DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_static.DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_static.DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "()* loopback of 218:4: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA118_2 = input.LA(1);

                         
                        int index118_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 145;}

                        else if ( ((((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||(!followedByNumberWhichIsNotAReference(input))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 1;}

                         
                        input.seek(index118_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA118_4 = input.LA(1);

                         
                        int index118_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 145;}

                        else if ( ((((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||(!followedByNumberWhichIsNotAReference(input))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 1;}

                         
                        input.seek(index118_4);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA118_5 = input.LA(1);

                         
                        int index118_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 145;}

                        else if ( ((((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||(!followedByNumberWhichIsNotAReference(input))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input)))||((!followedByNumberWhichIsNotAReference(input))&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 1;}

                         
                        input.seek(index118_5);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA118_6 = input.LA(1);

                         
                        int index118_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 145;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 1;}

                         
                        input.seek(index118_6);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA118_7 = input.LA(1);

                         
                        int index118_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_ChemicalChunker()) ) {s = 145;}

                        else if ( ((!followedByNumberWhichIsNotAReference(input))) ) {s = 1;}

                         
                        input.seek(index118_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 118, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA119_static {
    static final String DFA119_eotS =
        "\u0092\uffff";
    static final String DFA119_eofS =
        "\1\6\u0091\uffff";
    static final String DFA119_minS =
        "\1\46\5\0\u008c\uffff";
    static final String DFA119_maxS =
        "\1\u00b4\5\0\u008c\uffff";
    static final String DFA119_acceptS =
        "\6\uffff\1\2\u008a\uffff\1\1";
    static final String DFA119_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\u008c\uffff}>";
    static final String[] DFA119_transitionS = {
            "\1\5\144\6\1\1\1\6\1\3\1\6\1\4\2\6\1\2\42\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_static.DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_static.DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_static.DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_static.DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_static.DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_static.DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_static.DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_static.DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "218:63: ( numericOrIdentifierCompoundReference )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA119_1 = input.LA(1);

                         
                        int index119_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index119_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA119_2 = input.LA(1);

                         
                        int index119_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index119_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA119_3 = input.LA(1);

                         
                        int index119_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index119_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA119_4 = input.LA(1);

                         
                        int index119_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index119_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA119_5 = input.LA(1);

                         
                        int index119_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred336_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index119_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 119, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA120_static {
    static final String DFA120_eotS =
        "\u0093\uffff";
    static final String DFA120_eofS =
        "\1\1\u0092\uffff";
    static final String DFA120_minS =
        "\1\46\4\uffff\1\0\13\uffff\5\0\175\uffff";
    static final String DFA120_maxS =
        "\1\u00b4\4\uffff\1\0\13\uffff\5\0\175\uffff";
    static final String DFA120_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\2\1\1";
    static final String DFA120_specialS =
        "\5\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\175\uffff}>";
    static final String[] DFA120_transitionS = {
            "\1\25\42\1\1\23\70\1\1\24\2\1\1\5\11\1\1\21\2\1\1\22\42\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA120_eot = DFA.unpackEncodedString(DFA120_static.DFA120_eotS);
    static final short[] DFA120_eof = DFA.unpackEncodedString(DFA120_static.DFA120_eofS);
    static final char[] DFA120_min = DFA.unpackEncodedStringToUnsignedChars(DFA120_static.DFA120_minS);
    static final char[] DFA120_max = DFA.unpackEncodedStringToUnsignedChars(DFA120_static.DFA120_maxS);
    static final short[] DFA120_accept = DFA.unpackEncodedString(DFA120_static.DFA120_acceptS);
    static final short[] DFA120_special = DFA.unpackEncodedString(DFA120_static.DFA120_specialS);
    static final short[][] DFA120_transition;

    static {
        int numStates = DFA120_static.DFA120_transitionS.length;
        DFA120_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA120_transition[i] = DFA.unpackEncodedString(DFA120_static.DFA120_transitionS[i]);
        }
    }

    class DFA120 extends DFA {

        public DFA120(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 120;
            this.eot = DFA120_eot;
            this.eof = DFA120_eof;
            this.min = DFA120_min;
            this.max = DFA120_max;
            this.accept = DFA120_accept;
            this.special = DFA120_special;
            this.transition = DFA120_transition;
        }
        public String getDescription() {
            return "()* loopback of 218:102: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA120_5 = input.LA(1);

                         
                        int index120_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA120_17 = input.LA(1);

                         
                        int index120_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred338_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA120_18 = input.LA(1);

                         
                        int index120_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred338_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA120_19 = input.LA(1);

                         
                        int index120_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_19);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA120_20 = input.LA(1);

                         
                        int index120_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA120_21 = input.LA(1);

                         
                        int index120_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred337_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index120_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 120, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA121_static {
    static final String DFA121_eotS =
        "\u0094\uffff";
    static final String DFA121_eofS =
        "\1\1\u0093\uffff";
    static final String DFA121_minS =
        "\1\46\4\uffff\1\0\13\uffff\5\0\176\uffff";
    static final String DFA121_maxS =
        "\1\u00b4\4\uffff\1\0\13\uffff\5\0\176\uffff";
    static final String DFA121_acceptS =
        "\1\uffff\1\4\u008f\uffff\1\1\1\3\1\2";
    static final String DFA121_specialS =
        "\5\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\176\uffff}>";
    static final String[] DFA121_transitionS = {
            "\1\25\42\1\1\23\70\1\1\24\2\1\1\5\11\1\1\21\2\1\1\22\42\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_static.DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_static.DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_static.DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_static.DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_static.DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_static.DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_static.DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "()* loopback of 221:46: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA121_5 = input.LA(1);

                         
                        int index121_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred341_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA121_17 = input.LA(1);

                         
                        int index121_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred339_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred340_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred341_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA121_18 = input.LA(1);

                         
                        int index121_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred341_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA121_19 = input.LA(1);

                         
                        int index121_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_19);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA121_20 = input.LA(1);

                         
                        int index121_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA121_21 = input.LA(1);

                         
                        int index121_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index121_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA123_static {
    static final String DFA123_eotS =
        "\11\uffff";
    static final String DFA123_eofS =
        "\11\uffff";
    static final String DFA123_minS =
        "\1\46\1\45\2\uffff\1\46\1\45\1\54\1\45\1\101";
    static final String DFA123_maxS =
        "\1\u0092\1\45\2\uffff\1\u009e\1\45\1\u009e\1\45\1\u009e";
    static final String DFA123_acceptS =
        "\2\uffff\1\1\1\2\5\uffff";
    static final String DFA123_specialS =
        "\11\uffff}>";
    static final String[] DFA123_transitionS = {
            "\1\3\42\uffff\1\3\70\uffff\1\3\2\uffff\1\2\11\uffff\1\1\2\uffff"+
            "\1\3",
            "\1\4",
            "",
            "",
            "\1\3\42\uffff\1\3\70\uffff\1\3\2\uffff\1\2\13\uffff\1\2\1"+
            "\5\2\uffff\1\2\10\uffff\1\2",
            "\1\6",
            "\1\3\24\uffff\3\3\1\uffff\2\3\76\uffff\1\2\4\uffff\1\3\6\uffff"+
            "\1\2\1\7\2\uffff\1\2\6\uffff\1\3\1\uffff\1\2",
            "\1\10",
            "\3\3\1\uffff\2\3\76\uffff\1\2\12\uffff\2\2\1\7\2\uffff\1\2"+
            "\10\uffff\1\2"
    };
    }

    static final short[] DFA123_eot = DFA.unpackEncodedString(DFA123_static.DFA123_eotS);
    static final short[] DFA123_eof = DFA.unpackEncodedString(DFA123_static.DFA123_eofS);
    static final char[] DFA123_min = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_minS);
    static final char[] DFA123_max = DFA.unpackEncodedStringToUnsignedChars(DFA123_static.DFA123_maxS);
    static final short[] DFA123_accept = DFA.unpackEncodedString(DFA123_static.DFA123_acceptS);
    static final short[] DFA123_special = DFA.unpackEncodedString(DFA123_static.DFA123_specialS);
    static final short[][] DFA123_transition;

    static {
        int numStates = DFA123_static.DFA123_transitionS.length;
        DFA123_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA123_transition[i] = DFA.unpackEncodedString(DFA123_static.DFA123_transitionS[i]);
        }
    }

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = DFA123_eot;
            this.eof = DFA123_eof;
            this.min = DFA123_min;
            this.max = DFA123_max;
            this.accept = DFA123_accept;
            this.special = DFA123_special;
            this.transition = DFA123_transition;
        }
        public String getDescription() {
            return "227:28: ( citation )?";
        }
    }
    static class DFA124_static {
    static final String DFA124_eotS =
        "\u0094\uffff";
    static final String DFA124_eofS =
        "\1\1\u0093\uffff";
    static final String DFA124_minS =
        "\1\46\4\uffff\1\0\13\uffff\5\0\176\uffff";
    static final String DFA124_maxS =
        "\1\u00b4\4\uffff\1\0\13\uffff\5\0\176\uffff";
    static final String DFA124_acceptS =
        "\1\uffff\1\4\u008f\uffff\1\1\1\3\1\2";
    static final String DFA124_specialS =
        "\5\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\176\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\25\42\1\1\23\70\1\1\24\2\1\1\5\11\1\1\21\2\1\1\22\42\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_static.DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_static.DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_static.DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_static.DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_static.DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_static.DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_static.DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_static.DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "()* loopback of 227:47: ( citation | quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA124_5 = input.LA(1);

                         
                        int index124_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index124_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA124_17 = input.LA(1);

                         
                        int index124_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred346_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred347_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index124_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA124_18 = input.LA(1);

                         
                        int index124_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 147;}

                        else if ( (synpred348_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index124_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA124_19 = input.LA(1);

                         
                        int index124_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index124_19);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA124_20 = input.LA(1);

                         
                        int index124_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index124_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA124_21 = input.LA(1);

                         
                        int index124_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred347_ChemicalChunker()) ) {s = 147;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index124_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA127_static {
    static final String DFA127_eotS =
        "\u0093\uffff";
    static final String DFA127_eofS =
        "\1\1\u0092\uffff";
    static final String DFA127_minS =
        "\1\46\4\uffff\1\0\13\uffff\5\0\175\uffff";
    static final String DFA127_maxS =
        "\1\u00b4\4\uffff\1\0\13\uffff\5\0\175\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\2\1\1";
    static final String DFA127_specialS =
        "\5\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\175\uffff}>";
    static final String[] DFA127_transitionS = {
            "\1\25\42\1\1\23\70\1\1\24\2\1\1\5\11\1\1\21\2\1\1\22\42\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_static.DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_static.DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_static.DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_static.DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_static.DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_static.DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_static.DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "()* loopback of 233:44: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA127_5 = input.LA(1);

                         
                        int index127_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred353_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA127_17 = input.LA(1);

                         
                        int index127_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred352_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA127_18 = input.LA(1);

                         
                        int index127_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred352_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred353_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA127_19 = input.LA(1);

                         
                        int index127_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred352_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_19);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA127_20 = input.LA(1);

                         
                        int index127_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred352_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA127_21 = input.LA(1);

                         
                        int index127_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred352_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index127_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA130_static {
    static final String DFA130_eotS =
        "\u0092\uffff";
    static final String DFA130_eofS =
        "\1\1\u0091\uffff";
    static final String DFA130_minS =
        "\1\46\16\uffff\5\0\176\uffff";
    static final String DFA130_maxS =
        "\1\u00b4\16\uffff\5\0\176\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA130_specialS =
        "\17\uffff\1\0\1\1\1\2\1\3\1\4\176\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\23\42\1\1\21\70\1\1\22\14\1\1\17\2\1\1\20\42\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_static.DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_static.DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_static.DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_static.DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_static.DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_static.DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_static.DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_static.DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "()* loopback of 236:34: ( quantity )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA130_15 = input.LA(1);

                         
                        int index130_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA130_16 = input.LA(1);

                         
                        int index130_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_16);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA130_17 = input.LA(1);

                         
                        int index130_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_17);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA130_18 = input.LA(1);

                         
                        int index130_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_18);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA130_19 = input.LA(1);

                         
                        int index130_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred357_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index130_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA132_static {
    static final String DFA132_eotS =
        "\u0093\uffff";
    static final String DFA132_eofS =
        "\1\1\u0092\uffff";
    static final String DFA132_minS =
        "\1\46\4\uffff\1\0\13\uffff\5\0\175\uffff";
    static final String DFA132_maxS =
        "\1\u00b4\4\uffff\1\0\13\uffff\5\0\175\uffff";
    static final String DFA132_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\2\1\1";
    static final String DFA132_specialS =
        "\5\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\175\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\25\42\1\1\23\70\1\1\24\2\1\1\5\11\1\1\21\2\1\1\22\42\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_static.DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_static.DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_static.DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_static.DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_static.DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_static.DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_static.DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "()* loopback of 239:105: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA132_5 = input.LA(1);

                         
                        int index132_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred360_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index132_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA132_17 = input.LA(1);

                         
                        int index132_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred360_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index132_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA132_18 = input.LA(1);

                         
                        int index132_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred360_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index132_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA132_19 = input.LA(1);

                         
                        int index132_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index132_19);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA132_20 = input.LA(1);

                         
                        int index132_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index132_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA132_21 = input.LA(1);

                         
                        int index132_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred359_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index132_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA137_static {
    static final String DFA137_eotS =
        "\u0092\uffff";
    static final String DFA137_eofS =
        "\1\6\u0091\uffff";
    static final String DFA137_minS =
        "\1\46\5\0\u008c\uffff";
    static final String DFA137_maxS =
        "\1\u00b4\5\0\u008c\uffff";
    static final String DFA137_acceptS =
        "\6\uffff\1\2\u008a\uffff\1\1";
    static final String DFA137_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\u008c\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\5\42\6\1\3\70\6\1\4\14\6\1\1\2\6\1\2\42\6",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_static.DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_static.DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_static.DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_static.DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_static.DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_static.DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_static.DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "()+ loopback of 242:62: ( quantity )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA137_1 = input.LA(1);

                         
                        int index137_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred366_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index137_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA137_2 = input.LA(1);

                         
                        int index137_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred366_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index137_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA137_3 = input.LA(1);

                         
                        int index137_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred366_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index137_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA137_4 = input.LA(1);

                         
                        int index137_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred366_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index137_4);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA137_5 = input.LA(1);

                         
                        int index137_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred366_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index137_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA138_static {
    static final String DFA138_eotS =
        "\u0093\uffff";
    static final String DFA138_eofS =
        "\1\1\u0092\uffff";
    static final String DFA138_minS =
        "\1\46\4\uffff\1\0\13\uffff\5\0\175\uffff";
    static final String DFA138_maxS =
        "\1\u00b4\4\uffff\1\0\13\uffff\5\0\175\uffff";
    static final String DFA138_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\2\1\1";
    static final String DFA138_specialS =
        "\5\uffff\1\0\13\uffff\1\1\1\2\1\3\1\4\1\5\175\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\25\42\1\1\23\70\1\1\24\2\1\1\5\11\1\1\21\2\1\1\22\42\1",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_static.DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_static.DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_static.DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_static.DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_static.DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_static.DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_static.DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_static.DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "()* loopback of 242:72: ( quantity | mixture )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA138_5 = input.LA(1);

                         
                        int index138_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred368_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index138_5);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA138_17 = input.LA(1);

                         
                        int index138_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred367_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index138_17);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA138_18 = input.LA(1);

                         
                        int index138_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred367_ChemicalChunker()) ) {s = 146;}

                        else if ( (synpred368_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index138_18);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA138_19 = input.LA(1);

                         
                        int index138_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred367_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index138_19);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA138_20 = input.LA(1);

                         
                        int index138_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred367_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index138_20);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA138_21 = input.LA(1);

                         
                        int index138_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred367_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index138_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA139_static {
    static final String DFA139_eotS =
        "\12\uffff";
    static final String DFA139_eofS =
        "\12\uffff";
    static final String DFA139_minS =
        "\1\46\1\uffff\1\45\1\uffff\1\45\1\uffff\1\0\1\46\1\45\1\u008d";
    static final String DFA139_maxS =
        "\1\u0092\1\uffff\1\45\1\uffff\1\45\1\uffff\1\0\1\u0092\1\45\1\u0090";
    static final String DFA139_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\uffff\1\3\4\uffff";
    static final String DFA139_specialS =
        "\6\uffff\1\0\3\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\5\144\uffff\1\1\1\uffff\1\3\1\uffff\1\4\2\uffff\1\2",
            "",
            "\1\6",
            "",
            "\1\7",
            "",
            "\1\uffff",
            "\1\5\146\uffff\1\3\4\uffff\1\10",
            "\1\11",
            "\1\3\2\uffff\1\5"
    };
    }

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_static.DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_static.DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_static.DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_static.DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_static.DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_static.DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_static.DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_static.DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "245:5: ( squareBracketedReference | identifierOrBracketedIdentifier | numericOrBracketedNumeric )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA139_6 = input.LA(1);

                         
                        int index139_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred370_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index139_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 139, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA144_static {
    static final String DFA144_eotS =
        "\u0092\uffff";
    static final String DFA144_eofS =
        "\1\1\u0091\uffff";
    static final String DFA144_minS =
        "\1\46\2\uffff\1\0\u008e\uffff";
    static final String DFA144_maxS =
        "\1\u00b4\2\uffff\1\0\u008e\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\2\u008f\uffff\1\1";
    static final String DFA144_specialS =
        "\3\uffff\1\0\u008e\uffff}>";
    static final String[] DFA144_transitionS = {
            "\137\1\1\3\57\1",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_static.DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_static.DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_static.DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_static.DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_static.DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_static.DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_static.DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_static.DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "()* loopback of 260:18: ( comma measurements )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA144_3 = input.LA(1);

                         
                        int index144_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred375_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index144_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 144, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA148_static {
    static final String DFA148_eotS =
        "\u0092\uffff";
    static final String DFA148_eofS =
        "\1\5\u0091\uffff";
    static final String DFA148_minS =
        "\1\46\4\0\u008d\uffff";
    static final String DFA148_maxS =
        "\1\u00b4\4\0\u008d\uffff";
    static final String DFA148_acceptS =
        "\5\uffff\1\2\u008b\uffff\1\1";
    static final String DFA148_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008d\uffff}>";
    static final String[] DFA148_transitionS = {
            "\1\4\42\5\1\2\70\5\1\3\17\5\1\1\42\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_static.DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_static.DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_static.DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_static.DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_static.DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_static.DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_static.DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_static.DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "264:25: ( measurementtypes )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA148_1 = input.LA(1);

                         
                        int index148_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index148_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA148_2 = input.LA(1);

                         
                        int index148_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index148_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA148_3 = input.LA(1);

                         
                        int index148_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index148_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA148_4 = input.LA(1);

                         
                        int index148_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred379_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index148_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA149_static {
    static final String DFA149_eotS =
        "\25\uffff";
    static final String DFA149_eofS =
        "\20\uffff\1\23\4\uffff";
    static final String DFA149_minS =
        "\1\46\1\45\2\uffff\1\45\1\101\1\u008a\2\45\1\uffff\1\45\4\uffff"+
        "\1\u008a\1\46\1\101\1\45\1\uffff\1\0";
    static final String DFA149_maxS =
        "\1\u0092\1\45\2\uffff\1\45\2\u009c\2\45\1\uffff\1\45\4\uffff\1"+
        "\u008a\1\u00b4\1\u0092\1\45\1\uffff\1\0";
    static final String DFA149_acceptS =
        "\2\uffff\1\5\1\7\5\uffff\1\3\1\uffff\1\2\1\4\1\1\1\6\4\uffff\1"+
        "\10\1\uffff";
    static final String DFA149_specialS =
        "\24\uffff\1\0}>";
    static final String[] DFA149_transitionS = {
            "\1\4\42\uffff\1\2\70\uffff\1\3\17\uffff\1\1",
            "\1\5",
            "",
            "",
            "\1\6",
            "\1\11\1\13\1\15\1\uffff\1\16\1\14\103\uffff\1\10\7\uffff\1"+
            "\12\11\uffff\1\7",
            "\1\10\21\uffff\1\7",
            "\1\17",
            "\1\20",
            "",
            "\1\21",
            "",
            "",
            "",
            "",
            "\1\10",
            "\134\23\1\22\62\23",
            "\1\11\1\13\1\15\1\uffff\1\16\1\14\113\uffff\1\12",
            "\1\24",
            "",
            "\1\uffff"
    };
    }

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_static.DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_static.DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_static.DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_static.DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_static.DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_static.DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_static.DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_static.DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "265:1: measurementtypes : ( molar | amount | mass | volume | logHydrogenActivity | equivalent | yield | percent );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA149_20 = input.LA(1);

                         
                        int index149_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred386_ChemicalChunker()) ) {s = 3;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index149_20);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA160_static {
    static final String DFA160_eotS =
        "\u008b\uffff";
    static final String DFA160_eofS =
        "\u008b\uffff";
    static final String DFA160_minS =
        "\1\46\1\0\43\uffff\1\0\4\uffff\5\0\2\uffff\16\0\1\uffff\1\0\112"+
        "\uffff";
    static final String DFA160_maxS =
        "\1\u00b4\1\0\43\uffff\1\0\4\uffff\5\0\2\uffff\16\0\1\uffff\1\0"+
        "\112\uffff";
    static final String DFA160_acceptS =
        "\2\uffff\1\2\54\uffff\1\5\1\6\16\uffff\1\12\1\uffff\1\14\53\uffff"+
        "\1\15\21\uffff\1\21\1\22\1\1\1\3\1\4\1\10\1\11\1\16\1\7\1\20\1\17"+
        "\1\13";
    static final String DFA160_specialS =
        "\1\uffff\1\0\43\uffff\1\1\4\uffff\1\2\1\3\1\4\1\5\1\6\2\uffff\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\1\uffff\1\25\112\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\56\1\64\1\66\3\101\1\uffff\1\65\1\74\20\155\1\73\1\101\1"+
            "\uffff\1\101\1\uffff\3\101\1\72\1\101\1\54\12\101\1\67\4\2\2"+
            "\101\11\2\1\101\1\2\1\101\4\2\1\101\1\2\1\101\1\2\1\101\5\2"+
            "\1\101\1\2\1\101\3\2\1\101\1\2\1\45\1\101\3\2\1\55\1\uffff\1"+
            "\177\1\71\2\uffff\1\77\1\u0080\1\60\1\75\1\uffff\1\76\1\uffff"+
            "\1\70\2\uffff\1\53\2\101\1\1\1\155\1\61\1\62\1\63\1\101\1\57"+
            "\1\52\7\101\4\uffff\1\100\1\155\1\uffff\6\2\4\101",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_static.DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_static.DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_static.DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_static.DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_static.DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_static.DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_static.DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_static.DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "285:19: ( fw | verb | nn | quantity2Node | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA160_1 = input.LA(1);

                         
                        int index160_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred398_ChemicalChunker()) ) {s = 129;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index160_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA160_37 = input.LA(1);

                         
                        int index160_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred399_ChemicalChunker()) ) {s = 2;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index160_37);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA160_42 = input.LA(1);

                         
                        int index160_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred400_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index160_42);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA160_43 = input.LA(1);

                         
                        int index160_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred401_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( ((synpred406_ChemicalChunker()||(synpred406_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 133;}

                        else if ( ((synpred409_ChemicalChunker()||(synpred409_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 65;}

                        else if ( (synpred411_ChemicalChunker()) ) {s = 134;}

                         
                        input.seek(index160_43);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA160_44 = input.LA(1);

                         
                        int index160_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred401_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred406_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index160_44);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA160_45 = input.LA(1);

                         
                        int index160_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred401_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred406_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index160_45);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA160_46 = input.LA(1);

                         
                        int index160_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred401_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( ((synpred406_ChemicalChunker()||(synpred406_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 133;}

                        else if ( ((synpred409_ChemicalChunker()||(synpred409_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 65;}

                         
                        input.seek(index160_46);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA160_49 = input.LA(1);

                         
                        int index160_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred404_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index160_49);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA160_50 = input.LA(1);

                         
                        int index160_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred404_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index160_50);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA160_51 = input.LA(1);

                         
                        int index160_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred404_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index160_51);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA160_52 = input.LA(1);

                         
                        int index160_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred404_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index160_52);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA160_53 = input.LA(1);

                         
                        int index160_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred404_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index160_53);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA160_54 = input.LA(1);

                         
                        int index160_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred404_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred413_ChemicalChunker()) ) {s = 136;}

                         
                        input.seek(index160_54);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA160_55 = input.LA(1);

                         
                        int index160_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred404_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index160_55);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA160_56 = input.LA(1);

                         
                        int index160_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred404_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( ((synpred406_ChemicalChunker()||(synpred406_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 133;}

                        else if ( ((synpred409_ChemicalChunker()||(synpred409_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 65;}

                         
                        input.seek(index160_56);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA160_57 = input.LA(1);

                         
                        int index160_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred406_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred412_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index160_57);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA160_58 = input.LA(1);

                         
                        int index160_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred406_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index160_58);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA160_59 = input.LA(1);

                         
                        int index160_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred405_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred406_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index160_59);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA160_60 = input.LA(1);

                         
                        int index160_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred406_ChemicalChunker()) ) {s = 133;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index160_60);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA160_61 = input.LA(1);

                         
                        int index160_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred406_ChemicalChunker()||(synpred406_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 133;}

                        else if ( ((synpred409_ChemicalChunker()||(synpred409_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 65;}

                         
                        input.seek(index160_61);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA160_62 = input.LA(1);

                         
                        int index160_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred406_ChemicalChunker()||(synpred406_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 133;}

                        else if ( ((synpred409_ChemicalChunker()||(synpred409_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 65;}

                         
                        input.seek(index160_62);
                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA160_64 = input.LA(1);

                         
                        int index160_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred408_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred409_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index160_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA161_static {
    static final String DFA161_eotS =
        "\u008d\uffff";
    static final String DFA161_eofS =
        "\u008d\uffff";
    static final String DFA161_minS =
        "\1\46\1\uffff\3\0\43\uffff\1\0\4\uffff\4\0\2\uffff\14\0\1\uffff"+
        "\1\0\114\uffff";
    static final String DFA161_maxS =
        "\1\u00b4\1\uffff\3\0\43\uffff\1\0\4\uffff\4\0\2\uffff\14\0\1\uffff"+
        "\1\0\114\uffff";
    static final String DFA161_acceptS =
        "\1\uffff\1\24\3\uffff\1\3\53\uffff\1\6\1\7\14\uffff\1\13\1\uffff"+
        "\1\15\54\uffff\1\16\21\uffff\1\22\1\23\1\1\1\11\1\12\1\20\1\10\1"+
        "\2\1\4\1\17\1\5\1\21\1\14";
    static final String DFA161_specialS =
        "\2\uffff\1\0\1\1\1\2\43\uffff\1\3\4\uffff\1\4\1\5\1\6\1\7\2\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\uffff"+
        "\1\24\114\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\60\1\66\1\70\3\101\1\uffff\1\67\1\74\20\156\1\73\1\101\1"+
            "\uffff\1\101\1\uffff\3\101\1\72\1\101\1\56\12\101\1\71\4\5\2"+
            "\101\11\5\1\101\1\5\1\101\4\5\1\101\1\5\1\101\1\5\1\101\5\5"+
            "\1\101\1\5\1\101\3\5\1\101\1\5\1\50\1\101\3\5\1\57\1\uffff\1"+
            "\u0080\1\2\2\uffff\1\77\1\u0081\1\62\1\75\1\uffff\1\76\1\uffff"+
            "\1\3\1\1\1\uffff\1\55\2\101\1\4\1\156\1\63\1\64\1\65\1\101\1"+
            "\61\10\101\4\uffff\1\100\1\156\1\uffff\6\5\4\101",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_static.DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_static.DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_static.DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_static.DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_static.DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_static.DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_static.DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_static.DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "()+ loopback of 285:142: ( minimixture | fw | verb | quantity2Node | nnyield | md | nnpercent | oscarCompound | molecule | unnamedmolecule | dash | sym | noun | inAll | cd | comma | adj | colon | stop )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA161_2 = input.LA(1);

                         
                        int index161_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred424_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred430_ChemicalChunker()) ) {s = 133;}

                         
                        input.seek(index161_2);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA161_3 = input.LA(1);

                         
                        int index161_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred415_ChemicalChunker()) ) {s = 130;}

                        else if ( (synpred422_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( ((synpred424_ChemicalChunker()||(synpred424_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 132;}

                        else if ( (((synpred427_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred427_ChemicalChunker())) ) {s = 65;}

                         
                        input.seek(index161_3);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA161_4 = input.LA(1);

                         
                        int index161_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred416_ChemicalChunker()) ) {s = 135;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index161_4);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA161_40 = input.LA(1);

                         
                        int index161_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred417_ChemicalChunker()) ) {s = 5;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index161_40);
                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA161_45 = input.LA(1);

                         
                        int index161_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred418_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( ((synpred424_ChemicalChunker()||(synpred424_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 132;}

                        else if ( (((synpred427_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred427_ChemicalChunker())) ) {s = 65;}

                        else if ( (synpred429_ChemicalChunker()) ) {s = 137;}

                         
                        input.seek(index161_45);
                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA161_46 = input.LA(1);

                         
                        int index161_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred418_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred424_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index161_46);
                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA161_47 = input.LA(1);

                         
                        int index161_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred418_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred419_ChemicalChunker()) ) {s = 138;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred424_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index161_47);
                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA161_48 = input.LA(1);

                         
                        int index161_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred418_ChemicalChunker()) ) {s = 136;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( ((synpred424_ChemicalChunker()||(synpred424_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 132;}

                        else if ( (((synpred427_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred427_ChemicalChunker())) ) {s = 65;}

                         
                        input.seek(index161_48);
                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA161_51 = input.LA(1);

                         
                        int index161_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred431_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index161_51);
                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA161_52 = input.LA(1);

                         
                        int index161_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred431_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index161_52);
                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA161_53 = input.LA(1);

                         
                        int index161_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred431_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index161_53);
                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA161_54 = input.LA(1);

                         
                        int index161_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred431_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index161_54);
                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA161_55 = input.LA(1);

                         
                        int index161_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred431_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index161_55);
                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA161_56 = input.LA(1);

                         
                        int index161_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                        else if ( (synpred431_ChemicalChunker()) ) {s = 139;}

                         
                        input.seek(index161_56);
                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA161_57 = input.LA(1);

                         
                        int index161_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred422_ChemicalChunker()) ) {s = 134;}

                        else if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index161_57);
                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA161_58 = input.LA(1);

                         
                        int index161_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred424_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index161_58);
                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA161_59 = input.LA(1);

                         
                        int index161_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred423_ChemicalChunker()) ) {s = 131;}

                        else if ( (synpred424_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index161_59);
                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA161_60 = input.LA(1);

                         
                        int index161_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred424_ChemicalChunker()) ) {s = 132;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index161_60);
                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA161_61 = input.LA(1);

                         
                        int index161_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred424_ChemicalChunker()||(synpred424_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 132;}

                        else if ( (((synpred427_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred427_ChemicalChunker())) ) {s = 65;}

                         
                        input.seek(index161_61);
                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA161_62 = input.LA(1);

                         
                        int index161_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred424_ChemicalChunker()||(synpred424_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input))))) ) {s = 132;}

                        else if ( (((synpred427_ChemicalChunker()&&(numberLooksLikeAReferenceToACompound(input)))||synpred427_ChemicalChunker())) ) {s = 65;}

                         
                        input.seek(index161_62);
                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA161_64 = input.LA(1);

                         
                        int index161_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred426_ChemicalChunker()) ) {s = 140;}

                        else if ( (synpred427_ChemicalChunker()) ) {s = 65;}

                         
                        input.seek(index161_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA164_static {
    static final String DFA164_eotS =
        "\u0093\uffff";
    static final String DFA164_eofS =
        "\1\5\u0092\uffff";
    static final String DFA164_minS =
        "\1\46\4\0\u008e\uffff";
    static final String DFA164_maxS =
        "\1\u00b4\4\0\u008e\uffff";
    static final String DFA164_acceptS =
        "\5\uffff\1\3\u008b\uffff\1\1\1\2";
    static final String DFA164_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\u008e\uffff}>";
    static final String[] DFA164_transitionS = {
            "\1\4\146\5\1\2\1\5\1\3\2\5\1\1\42\5",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_static.DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_static.DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_static.DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_static.DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_static.DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_static.DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_static.DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_static.DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "294:31: ( identifierOrBracketedIdentifier | numeric )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA164_1 = input.LA(1);

                         
                        int index164_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred437_ChemicalChunker()) ) {s = 145;}

                        else if ( (synpred438_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index164_1);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA164_2 = input.LA(1);

                         
                        int index164_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred437_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index164_2);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA164_3 = input.LA(1);

                         
                        int index164_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred437_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index164_3);
                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA164_4 = input.LA(1);

                         
                        int index164_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred438_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index164_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA167_static {
    static final String DFA167_eotS =
        "\u0093\uffff";
    static final String DFA167_eofS =
        "\1\1\u0092\uffff";
    static final String DFA167_minS =
        "\1\46\16\uffff\1\0\22\uffff\2\0\157\uffff";
    static final String DFA167_maxS =
        "\1\u00b4\16\uffff\1\0\22\uffff\2\0\157\uffff";
    static final String DFA167_acceptS =
        "\1\uffff\1\3\u008f\uffff\1\2\1\1";
    static final String DFA167_specialS =
        "\17\uffff\1\0\22\uffff\1\1\1\2\157\uffff}>";
    static final String[] DFA167_transitionS = {
            "\46\1\1\42\6\1\1\43\73\1\1\17\45\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_static.DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_static.DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_static.DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_static.DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_static.DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_static.DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_static.DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_static.DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "()* loopback of 294:129: ( submethod | lrb submethod rrb )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA167_15 = input.LA(1);

                         
                        int index167_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred442_ChemicalChunker()) ) {s = 145;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index167_15);
                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA167_34 = input.LA(1);

                         
                        int index167_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index167_34);
                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA167_35 = input.LA(1);

                         
                        int index167_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred441_ChemicalChunker()) ) {s = 146;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index167_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 167, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA193_static {
    static final String DFA193_eotS =
        "\110\uffff";
    static final String DFA193_eofS =
        "\110\uffff";
    static final String DFA193_minS =
        "\1\46\20\uffff\1\0\66\uffff";
    static final String DFA193_maxS =
        "\1\u00b4\20\uffff\1\0\66\uffff";
    static final String DFA193_acceptS =
        "\1\uffff\1\2\105\uffff\1\1";
    static final String DFA193_specialS =
        "\21\uffff\1\0\66\uffff}>";
    static final String[] DFA193_transitionS = {
            "\6\1\1\uffff\2\1\20\uffff\2\1\1\uffff\1\1\1\uffff\21\1\4\uffff"+
            "\2\1\11\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff\2\1\3\uffff"+
            "\1\1\2\uffff\1\21\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\1\107\4\1\1\uffff\4\1\1\uffff\15\1\10\uffff\4\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA193_eot = DFA.unpackEncodedString(DFA193_static.DFA193_eotS);
    static final short[] DFA193_eof = DFA.unpackEncodedString(DFA193_static.DFA193_eofS);
    static final char[] DFA193_min = DFA.unpackEncodedStringToUnsignedChars(DFA193_static.DFA193_minS);
    static final char[] DFA193_max = DFA.unpackEncodedStringToUnsignedChars(DFA193_static.DFA193_maxS);
    static final short[] DFA193_accept = DFA.unpackEncodedString(DFA193_static.DFA193_acceptS);
    static final short[] DFA193_special = DFA.unpackEncodedString(DFA193_static.DFA193_specialS);
    static final short[][] DFA193_transition;

    static {
        int numStates = DFA193_static.DFA193_transitionS.length;
        DFA193_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA193_transition[i] = DFA.unpackEncodedString(DFA193_static.DFA193_transitionS[i]);
        }
    }

    class DFA193 extends DFA {

        public DFA193(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 193;
            this.eot = DFA193_eot;
            this.eof = DFA193_eof;
            this.min = DFA193_min;
            this.max = DFA193_max;
            this.accept = DFA193_accept;
            this.special = DFA193_special;
            this.transition = DFA193_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:35: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA193_17 = input.LA(1);

                         
                        int index193_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred87_ChemicalChunker()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index193_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 193, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA205_static {
    static final String DFA205_eotS =
        "\26\uffff";
    static final String DFA205_eofS =
        "\26\uffff";
    static final String DFA205_minS =
        "\1\46\16\uffff\1\0\6\uffff";
    static final String DFA205_maxS =
        "\1\u009c\16\uffff\1\0\6\uffff";
    static final String DFA205_acceptS =
        "\1\uffff\1\2\23\uffff\1\1";
    static final String DFA205_specialS =
        "\17\uffff\1\0\6\uffff}>";
    static final String[] DFA205_transitionS = {
            "\3\1\4\uffff\1\1\21\uffff\1\1\7\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\1\1\4\uffff\1\1\12\uffff\1\1\35\uffff\1\1\2\uffff"+
            "\1\17\11\uffff\1\1\1\uffff\1\25\2\1\3\uffff\3\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    }

    static final short[] DFA205_eot = DFA.unpackEncodedString(DFA205_static.DFA205_eotS);
    static final short[] DFA205_eof = DFA.unpackEncodedString(DFA205_static.DFA205_eofS);
    static final char[] DFA205_min = DFA.unpackEncodedStringToUnsignedChars(DFA205_static.DFA205_minS);
    static final char[] DFA205_max = DFA.unpackEncodedStringToUnsignedChars(DFA205_static.DFA205_maxS);
    static final short[] DFA205_accept = DFA.unpackEncodedString(DFA205_static.DFA205_acceptS);
    static final short[] DFA205_special = DFA.unpackEncodedString(DFA205_static.DFA205_specialS);
    static final short[][] DFA205_transition;

    static {
        int numStates = DFA205_static.DFA205_transitionS.length;
        DFA205_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA205_transition[i] = DFA.unpackEncodedString(DFA205_static.DFA205_transitionS[i]);
        }
    }

    class DFA205 extends DFA {

        public DFA205(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 205;
            this.eot = DFA205_eot;
            this.eof = DFA205_eof;
            this.min = DFA205_min;
            this.max = DFA205_max;
            this.accept = DFA205_accept;
            this.special = DFA205_special;
            this.transition = DFA205_transition;
        }
        public String getDescription() {
            return "()* loopback of 169:15: ( conjunction )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {

                    case 0 : 
                        int LA205_15 = input.LA(1);

                         
                        int index205_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_ChemicalChunker()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index205_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 205, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static class DFA213_static {
    static final String DFA213_eotS =
        "\11\uffff";
    static final String DFA213_eofS =
        "\11\uffff";
    static final String DFA213_minS =
        "\1\u008f\1\45\1\46\1\45\2\uffff\1\54\1\45\1\101";
    static final String DFA213_maxS =
        "\1\u008f\1\45\1\u009e\1\45\2\uffff\1\u009e\1\45\1\u009e";
    static final String DFA213_acceptS =
        "\4\uffff\1\1\1\2\3\uffff";
    static final String DFA213_specialS =
        "\11\uffff}>";
    static final String[] DFA213_transitionS = {
            "\1\1",
            "\1\2",
            "\1\4\42\uffff\1\4\70\uffff\1\4\2\uffff\1\5\13\uffff\1\5\1"+
            "\3\2\uffff\1\5\10\uffff\1\5",
            "\1\6",
            "",
            "",
            "\1\4\24\uffff\3\4\1\uffff\2\4\76\uffff\1\5\4\uffff\1\4\6\uffff"+
            "\1\5\1\7\2\uffff\1\5\6\uffff\1\4\1\uffff\1\5",
            "\1\10",
            "\3\4\1\uffff\2\4\76\uffff\1\5\12\uffff\2\5\1\7\2\uffff\1\5"+
            "\10\uffff\1\5"
    };
    }

    static final short[] DFA213_eot = DFA.unpackEncodedString(DFA213_static.DFA213_eotS);
    static final short[] DFA213_eof = DFA.unpackEncodedString(DFA213_static.DFA213_eofS);
    static final char[] DFA213_min = DFA.unpackEncodedStringToUnsignedChars(DFA213_static.DFA213_minS);
    static final char[] DFA213_max = DFA.unpackEncodedStringToUnsignedChars(DFA213_static.DFA213_maxS);
    static final short[] DFA213_accept = DFA.unpackEncodedString(DFA213_static.DFA213_acceptS);
    static final short[] DFA213_special = DFA.unpackEncodedString(DFA213_static.DFA213_specialS);
    static final short[][] DFA213_transition;

    static {
        int numStates = DFA213_static.DFA213_transitionS.length;
        DFA213_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA213_transition[i] = DFA.unpackEncodedString(DFA213_static.DFA213_transitionS[i]);
        }
    }

    class DFA213 extends DFA {

        public DFA213(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 213;
            this.eot = DFA213_eot;
            this.eof = DFA213_eof;
            this.min = DFA213_min;
            this.max = DFA213_max;
            this.accept = DFA213_accept;
            this.special = DFA213_special;
            this.transition = DFA213_transition;
        }
        public String getDescription() {
            return "200:59: ( quantity1Node | citationStructure )";
        }
    }
 

    static class FOLLOW_sentences_in_document202_static {
    public static final BitSet FOLLOW_sentences_in_document202 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFDFFL});

    }static class FOLLOW_sentenceStructure_in_sentences223_static {
    public static final BitSet FOLLOW_sentenceStructure_in_sentences223 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_unmatchedPhrase_in_sentences225_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_sentences225 = new BitSet(new long[]{0xFFFFFFC000000002L,0xFFFFFFFFFFFFFFFFL,0x001FFFFFFFFFFFFFL});

    }static class FOLLOW_stop_in_sentences229_static {
    public static final BitSet FOLLOW_stop_in_sentences229 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});

    }static class FOLLOW_nounphrase_in_sentenceStructure239_static {
    public static final BitSet FOLLOW_nounphrase_in_sentenceStructure239 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_verbphrase_in_sentenceStructure241_static {
    public static final BitSet FOLLOW_verbphrase_in_sentenceStructure241 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphrase_in_sentenceStructure243_static {
    public static final BitSet FOLLOW_prepphrase_in_sentenceStructure243 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_prepphraseAfter_in_sentenceStructure245_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_sentenceStructure245 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFEE8BFL});

    }static class FOLLOW_advAdj_in_sentenceStructure250_static {
    public static final BitSet FOLLOW_advAdj_in_sentenceStructure250 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_colon_in_sentenceStructure252_static {
    public static final BitSet FOLLOW_colon_in_sentenceStructure252 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003820038L});

    }static class FOLLOW_conjunction_in_sentenceStructure257_static {
    public static final BitSet FOLLOW_conjunction_in_sentenceStructure257 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_rbconj_in_sentenceStructure259_static {
    public static final BitSet FOLLOW_rbconj_in_sentenceStructure259 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_comma_in_sentenceStructure261_static {
    public static final BitSet FOLLOW_comma_in_sentenceStructure261 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020028L});

    }static class FOLLOW_unmatchedToken_in_unmatchedPhrase273_static {
    public static final BitSet FOLLOW_unmatchedToken_in_unmatchedPhrase273 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_unmatchedToken292_static {
    public static final BitSet FOLLOW_numeric_in_unmatchedToken292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_unmatchedToken294_static {
    public static final BitSet FOLLOW_advAdj_in_unmatchedToken294 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_unmatchedToken296_static {
    public static final BitSet FOLLOW_tmunicode_in_unmatchedToken296 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdunicode_in_unmatchedToken298_static {
    public static final BitSet FOLLOW_cdunicode_in_unmatchedToken298 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unmatchedToken300_static {
    public static final BitSet FOLLOW_jjcomp_in_unmatchedToken300 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_unmatchedToken302_static {
    public static final BitSet FOLLOW_inAll_in_unmatchedToken302 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unmatchedToken306_static {
    public static final BitSet FOLLOW_nnexample_in_unmatchedToken306 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_unmatchedToken308_static {
    public static final BitSet FOLLOW_nnstate_in_unmatchedToken308 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_unmatchedToken310_static {
    public static final BitSet FOLLOW_nntime_in_unmatchedToken310 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmass_in_unmatchedToken312_static {
    public static final BitSet FOLLOW_nnmass_in_unmatchedToken312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmolar_in_unmatchedToken314_static {
    public static final BitSet FOLLOW_nnmolar_in_unmatchedToken314 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_unmatchedToken316_static {
    public static final BitSet FOLLOW_nnamount_in_unmatchedToken316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unmatchedToken318_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unmatchedToken318 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_unmatchedToken320_static {
    public static final BitSet FOLLOW_nneq_in_unmatchedToken320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_unmatchedToken322_static {
    public static final BitSet FOLLOW_nnvol_in_unmatchedToken322 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unmatchedToken324_static {
    public static final BitSet FOLLOW_nnchementity_in_unmatchedToken324 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_unmatchedToken326_static {
    public static final BitSet FOLLOW_nntemp_in_unmatchedToken326 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_unmatchedToken328_static {
    public static final BitSet FOLLOW_nnph_in_unmatchedToken328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_unmatchedToken330_static {
    public static final BitSet FOLLOW_nnflash_in_unmatchedToken330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_unmatchedToken332_static {
    public static final BitSet FOLLOW_nngeneral_in_unmatchedToken332 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmethod_in_unmatchedToken334_static {
    public static final BitSet FOLLOW_nnmethod_in_unmatchedToken334 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_unmatchedToken336_static {
    public static final BitSet FOLLOW_nnpressure_in_unmatchedToken336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_unmatchedToken338_static {
    public static final BitSet FOLLOW_nncolumn_in_unmatchedToken338 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_unmatchedToken340_static {
    public static final BitSet FOLLOW_nnchromatography_in_unmatchedToken340 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_unmatchedToken342_static {
    public static final BitSet FOLLOW_nnvacuum_in_unmatchedToken342 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_unmatchedToken344_static {
    public static final BitSet FOLLOW_nncycle_in_unmatchedToken344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_unmatchedToken346_static {
    public static final BitSet FOLLOW_nntimes_in_unmatchedToken346 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_unmatchedToken350_static {
    public static final BitSet FOLLOW_oscarcm_in_unmatchedToken350 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_unmatchedToken352_static {
    public static final BitSet FOLLOW_oscaronts_in_unmatchedToken352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unmatchedToken354_static {
    public static final BitSet FOLLOW_oscarase_in_unmatchedToken354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_unmatchedToken356_static {
    public static final BitSet FOLLOW_verb_in_unmatchedToken356 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_unmatchedToken358_static {
    public static final BitSet FOLLOW_nnadd_in_unmatchedToken358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unmatchedToken360_static {
    public static final BitSet FOLLOW_nnmixture_in_unmatchedToken360 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_unmatchedToken362_static {
    public static final BitSet FOLLOW_nnapparatus_in_unmatchedToken362 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_unmatchedToken364_static {
    public static final BitSet FOLLOW_nnconcentrate_in_unmatchedToken364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_unmatchedToken366_static {
    public static final BitSet FOLLOW_nndry_in_unmatchedToken366 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_unmatchedToken368_static {
    public static final BitSet FOLLOW_nnextract_in_unmatchedToken368 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_unmatchedToken370_static {
    public static final BitSet FOLLOW_nnfilter_in_unmatchedToken370 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_unmatchedToken372_static {
    public static final BitSet FOLLOW_nnprecipitate_in_unmatchedToken372 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_unmatchedToken374_static {
    public static final BitSet FOLLOW_nnpurify_in_unmatchedToken374 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_unmatchedToken376_static {
    public static final BitSet FOLLOW_nnremove_in_unmatchedToken376 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_unmatchedToken378_static {
    public static final BitSet FOLLOW_nnsynthesize_in_unmatchedToken378 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_unmatchedToken380_static {
    public static final BitSet FOLLOW_nnyield_in_unmatchedToken380 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_unmatchedToken382_static {
    public static final BitSet FOLLOW_colon_in_unmatchedToken382 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_unmatchedToken384_static {
    public static final BitSet FOLLOW_apost_in_unmatchedToken384 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_unmatchedToken386_static {
    public static final BitSet FOLLOW_neg_in_unmatchedToken386 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_unmatchedToken388_static {
    public static final BitSet FOLLOW_dash_in_unmatchedToken388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpercent_in_unmatchedToken390_static {
    public static final BitSet FOLLOW_nnpercent_in_unmatchedToken390 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_unmatchedToken392_static {
    public static final BitSet FOLLOW_lsqb_in_unmatchedToken392 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rsqb_in_unmatchedToken394_static {
    public static final BitSet FOLLOW_rsqb_in_unmatchedToken394 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_unmatchedToken396_static {
    public static final BitSet FOLLOW_lrb_in_unmatchedToken396 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rrb_in_unmatchedToken398_static {
    public static final BitSet FOLLOW_rrb_in_unmatchedToken398 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_unmatchedToken402_static {
    public static final BitSet FOLLOW_cc_in_unmatchedToken402 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_unmatchedToken404_static {
    public static final BitSet FOLLOW_dt_in_unmatchedToken404 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_unmatchedToken406_static {
    public static final BitSet FOLLOW_dtTHE_in_unmatchedToken406 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unmatchedToken408_static {
    public static final BitSet FOLLOW_fw_in_unmatchedToken408 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_unmatchedToken410_static {
    public static final BitSet FOLLOW_md_in_unmatchedToken410 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unmatchedToken412_static {
    public static final BitSet FOLLOW_nn_in_unmatchedToken412 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unmatchedToken414_static {
    public static final BitSet FOLLOW_nns_in_unmatchedToken414 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unmatchedToken416_static {
    public static final BitSet FOLLOW_nnp_in_unmatchedToken416 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_in_unmatchedToken418_static {
    public static final BitSet FOLLOW_prp_in_unmatchedToken418 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_unmatchedToken420_static {
    public static final BitSet FOLLOW_prp_poss_in_unmatchedToken420 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_unmatchedToken422_static {
    public static final BitSet FOLLOW_rbconj_in_unmatchedToken422 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_unmatchedToken424_static {
    public static final BitSet FOLLOW_sym_in_unmatchedToken424 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_uh_in_unmatchedToken426_static {
    public static final BitSet FOLLOW_uh_in_unmatchedToken426 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_unmatchedToken428_static {
    public static final BitSet FOLLOW_clause_in_unmatchedToken428 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_unmatchedToken430_static {
    public static final BitSet FOLLOW_comma_in_unmatchedToken430 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_unmatchedToken432_static {
    public static final BitSet FOLLOW_ls_in_unmatchedToken432 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unmatchedToken434_static {
    public static final BitSet FOLLOW_nnps_in_unmatchedToken434 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_unmatchedToken436_static {
    public static final BitSet FOLLOW_pos_in_unmatchedToken436 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnidentifier_in_unmatchedToken438_static {
    public static final BitSet FOLLOW_nnidentifier_in_unmatchedToken438 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure_in_nounphrase448_static {
    public static final BitSet FOLLOW_nounphraseStructure_in_nounphrase448 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_nounphraseStructure467_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_nounphraseStructure467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure2_in_nounphraseStructure469_static {
    public static final BitSet FOLLOW_nounphraseStructure2_in_nounphraseStructure469 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_multiApparatus_in_nounphraseStructure1478_static {
    public static final BitSet FOLLOW_multiApparatus_in_nounphraseStructure1478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dtTHE_in_nounphraseStructure2495_static {
    public static final BitSet FOLLOW_dtTHE_in_nounphraseStructure2495 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_dt_in_nounphraseStructure2498_static {
    public static final BitSet FOLLOW_dt_in_nounphraseStructure2498 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2501_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2501 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_conjunction_in_nounphraseStructure2505_static {
    public static final BitSet FOLLOW_conjunction_in_nounphraseStructure2505 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_nounphraseContent_in_nounphraseStructure2508_static {
    public static final BitSet FOLLOW_nounphraseContent_in_nounphraseStructure2508 = new BitSet(new long[]{0x81046FC000000002L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_prepphraseOf_in_nounphraseStructure2513_static {
    public static final BitSet FOLLOW_prepphraseOf_in_nounphraseStructure2513 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_nounphraseStructure2516_static {
    public static final BitSet FOLLOW_prepphraseIN_in_nounphraseStructure2516 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_nounphraseContent528_static {
    public static final BitSet FOLLOW_advAdj_in_nounphraseContent528 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCA824L});

    }static class FOLLOW_dissolvePhrase_in_nounphraseContent533_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_nounphraseContent533 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_ratio_in_nounphraseContent535_static {
    public static final BitSet FOLLOW_ratio_in_nounphraseContent535 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_noun_in_nounphraseContent537_static {
    public static final BitSet FOLLOW_noun_in_nounphraseContent537 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_numeric_in_nounphraseContent539_static {
    public static final BitSet FOLLOW_numeric_in_nounphraseContent539 = new BitSet(new long[]{0x80006FC000000002L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase551_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase551 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_dissolvePhrase553_static {
    public static final BitSet FOLLOW_lrb_in_dissolvePhrase553 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000004384A824L});

    }static class FOLLOW_dissolveStructure_in_dissolvePhrase555_static {
    public static final BitSet FOLLOW_dissolveStructure_in_dissolvePhrase555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_dissolvePhrase557_static {
    public static final BitSet FOLLOW_rrb_in_dissolvePhrase557 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dissolveStructure582_static {
    public static final BitSet FOLLOW_adj_in_dissolveStructure582 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000004384A824L});

    }static class FOLLOW_nnp_in_dissolveStructure586_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_dissolveStructure588_static {
    public static final BitSet FOLLOW_nnchementity_in_dissolveStructure588 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_nnp_in_dissolveStructure591_static {
    public static final BitSet FOLLOW_nnp_in_dissolveStructure591 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000004384A824L});

    }static class FOLLOW_molecule_in_dissolveStructure594_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure594 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_unnamedmolecule_in_dissolveStructure596_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_dissolveStructure596 = new BitSet(new long[]{0x0004000000000000L});

    }static class FOLLOW_inMolecule_in_dissolveStructure600_static {
    public static final BitSet FOLLOW_inMolecule_in_dissolveStructure600 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_conjunction_in_dissolveStructure603_static {
    public static final BitSet FOLLOW_conjunction_in_dissolveStructure603 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_molecule_in_dissolveStructure605_static {
    public static final BitSet FOLLOW_molecule_in_dissolveStructure605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000020020L});

    }static class FOLLOW_inin_in_inMolecule617_static {
    public static final BitSet FOLLOW_inin_in_inMolecule617 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000004384E824L});

    }static class FOLLOW_dtTHE_in_inMolecule619_static {
    public static final BitSet FOLLOW_dtTHE_in_inMolecule619 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000004384A824L});

    }static class FOLLOW_adj_in_inMolecule622_static {
    public static final BitSet FOLLOW_adj_in_inMolecule622 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000004384A824L});

    }static class FOLLOW_nnp_in_inMolecule625_static {
    public static final BitSet FOLLOW_nnp_in_inMolecule625 = new BitSet(new long[]{0x800061C000000000L,0x0000000000100280L,0x000000004384A824L});

    }static class FOLLOW_molecule_in_inMolecule629_static {
    public static final BitSet FOLLOW_molecule_in_inMolecule629 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_inMolecule631_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_inMolecule631 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphraseStructure_in_verbphrase641_static {
    public static final BitSet FOLLOW_verbphraseStructure_in_verbphrase641 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_verbphraseStructure659_static {
    public static final BitSet FOLLOW_dt_in_verbphraseStructure659 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_to_in_verbphraseStructure662_static {
    public static final BitSet FOLLOW_to_in_verbphraseStructure662 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inAll_in_verbphraseStructure665_static {
    public static final BitSet FOLLOW_inAll_in_verbphraseStructure665 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_inafter_in_verbphraseStructure668_static {
    public static final BitSet FOLLOW_inafter_in_verbphraseStructure668 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_md_in_verbphraseStructure672_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure672 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_verbphraseStructure675_static {
    public static final BitSet FOLLOW_rbconj_in_verbphraseStructure675 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_verbphraseStructure678_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure678 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_verbphraseStructure681_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure681 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_verb_in_verbphraseStructure684_static {
    public static final BitSet FOLLOW_verb_in_verbphraseStructure684 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_md_in_verbphraseStructure687_static {
    public static final BitSet FOLLOW_md_in_verbphraseStructure687 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adv_in_verbphraseStructure690_static {
    public static final BitSet FOLLOW_adv_in_verbphraseStructure690 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_adj_in_verbphraseStructure693_static {
    public static final BitSet FOLLOW_adj_in_verbphraseStructure693 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_neg_in_verbphraseStructure696_static {
    public static final BitSet FOLLOW_neg_in_verbphraseStructure696 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00101L,0x0001FAF00BCE00ABL});

    }static class FOLLOW_inoff_in_verbphraseStructure702_static {
    public static final BitSet FOLLOW_inoff_in_verbphraseStructure702 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_cc_in_verbphraseStructure706_static {
    public static final BitSet FOLLOW_cc_in_verbphraseStructure706 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_verbphraseStructure709_static {
    public static final BitSet FOLLOW_comma_in_verbphraseStructure709 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_verbphraseStructure712_static {
    public static final BitSet FOLLOW_prepphrase_in_verbphraseStructure712 = new BitSet(new long[]{0x7FFFA18000000002L,0x0000000000000101L,0x000002F003CE00A0L});

    }static class FOLLOW_vb_in_verb724_static {
    public static final BitSet FOLLOW_vb_in_verb724 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbp_in_verb726_static {
    public static final BitSet FOLLOW_vbp_in_verb726 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbg_in_verb728_static {
    public static final BitSet FOLLOW_vbg_in_verb728 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbd_in_verb730_static {
    public static final BitSet FOLLOW_vbd_in_verb730 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbz_in_verb732_static {
    public static final BitSet FOLLOW_vbz_in_verb732 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbn_in_verb734_static {
    public static final BitSet FOLLOW_vbn_in_verb734 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbuse_in_verb736_static {
    public static final BitSet FOLLOW_vbuse_in_verb736 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubmerge_in_verb738_static {
    public static final BitSet FOLLOW_vbsubmerge_in_verb738 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbimmerse_in_verb740_static {
    public static final BitSet FOLLOW_vbimmerse_in_verb740 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_verb742_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_verb742 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsubject_in_verb744_static {
    public static final BitSet FOLLOW_vbsubject_in_verb744 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbadd_in_verb746_static {
    public static final BitSet FOLLOW_vbadd_in_verb746 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdilute_in_verb748_static {
    public static final BitSet FOLLOW_vbdilute_in_verb748 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcharge_in_verb750_static {
    public static final BitSet FOLLOW_vbcharge_in_verb750 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcontain_in_verb752_static {
    public static final BitSet FOLLOW_vbcontain_in_verb752 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdrop_in_verb754_static {
    public static final BitSet FOLLOW_vbdrop_in_verb754 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfill_in_verb756_static {
    public static final BitSet FOLLOW_vbfill_in_verb756 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsuspend_in_verb758_static {
    public static final BitSet FOLLOW_vbsuspend_in_verb758 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbtreat_in_verb760_static {
    public static final BitSet FOLLOW_vbtreat_in_verb760 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbapparatus_in_verb762_static {
    public static final BitSet FOLLOW_vbapparatus_in_verb762 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbconcentrate_in_verb764_static {
    public static final BitSet FOLLOW_vbconcentrate_in_verb764 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbcool_in_verb766_static {
    public static final BitSet FOLLOW_vbcool_in_verb766 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_verb768_static {
    public static final BitSet FOLLOW_vbdegass_in_verb768 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdissolve_in_verb770_static {
    public static final BitSet FOLLOW_vbdissolve_in_verb770 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdry_in_verb772_static {
    public static final BitSet FOLLOW_vbdry_in_verb772 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbextract_in_verb774_static {
    public static final BitSet FOLLOW_vbextract_in_verb774 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbfilter_in_verb776_static {
    public static final BitSet FOLLOW_vbfilter_in_verb776 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbheat_in_verb779_static {
    public static final BitSet FOLLOW_vbheat_in_verb779 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbincrease_in_verb781_static {
    public static final BitSet FOLLOW_vbincrease_in_verb781 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpartition_in_verb783_static {
    public static final BitSet FOLLOW_vbpartition_in_verb783 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbprecipitate_in_verb785_static {
    public static final BitSet FOLLOW_vbprecipitate_in_verb785 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbpurify_in_verb787_static {
    public static final BitSet FOLLOW_vbpurify_in_verb787 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbquench_in_verb789_static {
    public static final BitSet FOLLOW_vbquench_in_verb789 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbrecover_in_verb791_static {
    public static final BitSet FOLLOW_vbrecover_in_verb791 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbremove_in_verb793_static {
    public static final BitSet FOLLOW_vbremove_in_verb793 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbstir_in_verb795_static {
    public static final BitSet FOLLOW_vbstir_in_verb795 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_verb797_static {
    public static final BitSet FOLLOW_vbsynthesize_in_verb797 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwait_in_verb799_static {
    public static final BitSet FOLLOW_vbwait_in_verb799 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbwash_in_verb801_static {
    public static final BitSet FOLLOW_vbwash_in_verb801 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbyield_in_verb803_static {
    public static final BitSet FOLLOW_vbyield_in_verb803 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbchange_in_verb805_static {
    public static final BitSet FOLLOW_vbchange_in_verb805 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_degassMultiVerb814_static {
    public static final BitSet FOLLOW_vbdegass_in_degassMultiVerb814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_cc_in_degassMultiVerb816_static {
    public static final BitSet FOLLOW_cc_in_degassMultiVerb816 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});

    }static class FOLLOW_vbfill_in_degassMultiVerb818_static {
    public static final BitSet FOLLOW_vbfill_in_degassMultiVerb818 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounStructure_in_noun827_static {
    public static final BitSet FOLLOW_nounStructure_in_noun827 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_noun830_static {
    public static final BitSet FOLLOW_dash_in_noun830 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_noun832_static {
    public static final BitSet FOLLOW_nounStructure_in_noun832 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_prp_in_nounStructure843_static {
    public static final BitSet FOLLOW_prp_in_nounStructure843 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prp_poss_in_nounStructure845_static {
    public static final BitSet FOLLOW_prp_poss_in_nounStructure845 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_nounStructure847_static {
    public static final BitSet FOLLOW_citation_in_nounStructure847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_nounStructure849_static {
    public static final BitSet FOLLOW_cycles_in_nounStructure849 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_nounStructure851_static {
    public static final BitSet FOLLOW_molecule_in_nounStructure851 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_nounStructure853_static {
    public static final BitSet FOLLOW_apparatus_in_nounStructure853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_nounStructure855_static {
    public static final BitSet FOLLOW_mixture_in_nounStructure855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_nounStructure857_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_nounStructure857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_nounStructure859_static {
    public static final BitSet FOLLOW_nnstate_in_nounStructure859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_nounStructure861_static {
    public static final BitSet FOLLOW_procedureNode_in_nounStructure861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_nounStructure863_static {
    public static final BitSet FOLLOW_nn_in_nounStructure863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_nounStructure865_static {
    public static final BitSet FOLLOW_nns_in_nounStructure865 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_nounStructure867_static {
    public static final BitSet FOLLOW_nnp_in_nounStructure867 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_nounStructure869_static {
    public static final BitSet FOLLOW_nnadd_in_nounStructure869 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_preparationphrase_in_nounStructure871_static {
    public static final BitSet FOLLOW_preparationphrase_in_nounStructure871 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_nounStructure873_static {
    public static final BitSet FOLLOW_nnexample_in_nounStructure873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_nounStructure875_static {
    public static final BitSet FOLLOW_range_in_nounStructure875 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_nounStructure877_static {
    public static final BitSet FOLLOW_oscaronts_in_nounStructure877 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_nounStructure879_static {
    public static final BitSet FOLLOW_nntime_in_nounStructure879 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_nounStructure881_static {
    public static final BitSet FOLLOW_nnatmosphere_in_nounStructure881 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_tmunicode_in_nounStructure883_static {
    public static final BitSet FOLLOW_tmunicode_in_nounStructure883 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_nounStructure885_static {
    public static final BitSet FOLLOW_quantity_in_nounStructure885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_nounStructure887_static {
    public static final BitSet FOLLOW_nnchementity_in_nounStructure887 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_nounStructure889_static {
    public static final BitSet FOLLOW_nntemp_in_nounStructure889 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_nounStructure891_static {
    public static final BitSet FOLLOW_nnph_in_nounStructure891 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnflash_in_nounStructure893_static {
    public static final BitSet FOLLOW_nnflash_in_nounStructure893 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_nounStructure895_static {
    public static final BitSet FOLLOW_nngeneral_in_nounStructure895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnamount_in_nounStructure897_static {
    public static final BitSet FOLLOW_nnamount_in_nounStructure897 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nneq_in_nounStructure899_static {
    public static final BitSet FOLLOW_nneq_in_nounStructure899 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_nounStructure901_static {
    public static final BitSet FOLLOW_nnpressure_in_nounStructure901 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncolumn_in_nounStructure903_static {
    public static final BitSet FOLLOW_nncolumn_in_nounStructure903 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchromatography_in_nounStructure905_static {
    public static final BitSet FOLLOW_nnchromatography_in_nounStructure905 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvacuum_in_nounStructure907_static {
    public static final BitSet FOLLOW_nnvacuum_in_nounStructure907 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nncycle_in_nounStructure909_static {
    public static final BitSet FOLLOW_nncycle_in_nounStructure909 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntimes_in_nounStructure911_static {
    public static final BitSet FOLLOW_nntimes_in_nounStructure911 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnconcentrate_in_nounStructure913_static {
    public static final BitSet FOLLOW_nnconcentrate_in_nounStructure913 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnvol_in_nounStructure915_static {
    public static final BitSet FOLLOW_nnvol_in_nounStructure915 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpurify_in_nounStructure917_static {
    public static final BitSet FOLLOW_nnpurify_in_nounStructure917 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnsynthesize_in_nounStructure919_static {
    public static final BitSet FOLLOW_nnsynthesize_in_nounStructure919 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_nounStructure921_static {
    public static final BitSet FOLLOW_nnmixture_in_nounStructure921 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_nounStructure923_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_nounStructure923 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nndry_in_nounStructure925_static {
    public static final BitSet FOLLOW_nndry_in_nounStructure925 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_nounStructure927_static {
    public static final BitSet FOLLOW_numeric_in_nounStructure927 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnextract_in_nounStructure929_static {
    public static final BitSet FOLLOW_nnextract_in_nounStructure929 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnfilter_in_nounStructure931_static {
    public static final BitSet FOLLOW_nnfilter_in_nounStructure931 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnprecipitate_in_nounStructure933_static {
    public static final BitSet FOLLOW_nnprecipitate_in_nounStructure933 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnremove_in_nounStructure935_static {
    public static final BitSet FOLLOW_nnremove_in_nounStructure935 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_nounStructure937_static {
    public static final BitSet FOLLOW_nnyield_in_nounStructure937 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_nounStructure939_static {
    public static final BitSet FOLLOW_fw_in_nounStructure939 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_nounStructure941_static {
    public static final BitSet FOLLOW_sym_in_nounStructure941 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_clause_in_nounStructure943_static {
    public static final BitSet FOLLOW_clause_in_nounStructure943 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ls_in_nounStructure945_static {
    public static final BitSet FOLLOW_ls_in_nounStructure945 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_nounStructure947_static {
    public static final BitSet FOLLOW_nnps_in_nounStructure947 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pos_in_nounStructure949_static {
    public static final BitSet FOLLOW_pos_in_nounStructure949 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_nounStructure951_static {
    public static final BitSet FOLLOW_oscarase_in_nounStructure951 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_prepphrase963_static {
    public static final BitSet FOLLOW_neg_in_prepphrase963 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphraseAtmosphere_in_prepphrase967_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_prepphrase967 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_prepphrase969_static {
    public static final BitSet FOLLOW_prepphraseTime_in_prepphrase969 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_prepphrase971_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_prepphrase971 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_prepphrase973_static {
    public static final BitSet FOLLOW_prepphraseIN_in_prepphrase973 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_prepphrase975_static {
    public static final BitSet FOLLOW_prepphraseRole_in_prepphrase975 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOther_in_prepphrase977_static {
    public static final BitSet FOLLOW_prepphraseOther_in_prepphrase977 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere989_static {
    public static final BitSet FOLLOW_prepphraseAtmosphereContent_in_prepphraseAtmosphere989 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_prepphraseAtmosphereContent1009_static {
    public static final BitSet FOLLOW_inunder_in_prepphraseAtmosphereContent1009 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000F0038C8024L});

    }static class FOLLOW_dt_in_prepphraseAtmosphereContent1012_static {
    public static final BitSet FOLLOW_dt_in_prepphraseAtmosphereContent1012 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000F003848024L});

    }static class FOLLOW_advAdj_in_prepphraseAtmosphereContent1015_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAtmosphereContent1015 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x000000F003848024L});

    }static class FOLLOW_molecule_in_prepphraseAtmosphereContent1018_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseAtmosphereContent1018 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});

    }static class FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1020_static {
    public static final BitSet FOLLOW_nnatmosphere_in_prepphraseAtmosphereContent1020 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1030_static {
    public static final BitSet FOLLOW_prepPhraseTimeStructure_in_prepphraseTime1030 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1048_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1048 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000001L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepPhraseTimeStructure1051_static {
    public static final BitSet FOLLOW_inAll_in_prepPhraseTimeStructure1051 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepPhraseTimeStructure1055_static {
    public static final BitSet FOLLOW_dt_in_prepPhraseTimeStructure1055 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepPhraseTimeStructure1058_static {
    public static final BitSet FOLLOW_advAdj_in_prepPhraseTimeStructure1058 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000001L,0x000000F003840000L});

    }static class FOLLOW_cd_in_prepPhraseTimeStructure1061_static {
    public static final BitSet FOLLOW_cd_in_prepPhraseTimeStructure1061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});

    }static class FOLLOW_nntime_in_prepPhraseTimeStructure1064_static {
    public static final BitSet FOLLOW_nntime_in_prepPhraseTimeStructure1064 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});

    }static class FOLLOW_prepphraseTempContent_in_prepphraseTemp1074_static {
    public static final BitSet FOLLOW_prepphraseTempContent_in_prepphraseTemp1074 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1095_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1095 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000100L,0x000002F003CC0000L});

    }static class FOLLOW_inAll_in_prepphraseTempContent1098_static {
    public static final BitSet FOLLOW_inAll_in_prepphraseTempContent1098 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x000000F0038C0000L});

    }static class FOLLOW_dt_in_prepphraseTempContent1101_static {
    public static final BitSet FOLLOW_dt_in_prepphraseTempContent1101 = new BitSet(new long[]{0x0000218000000000L,0x0000000000000100L,0x000000F003840000L});

    }static class FOLLOW_advAdj_in_prepphraseTempContent1104_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseTempContent1104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000040000L});

    }static class FOLLOW_cd_in_prepphraseTempContent1107_static {
    public static final BitSet FOLLOW_cd_in_prepphraseTempContent1107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nntemp_in_prepphraseTempContent1110_static {
    public static final BitSet FOLLOW_nntemp_in_prepphraseTempContent1110 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});

    }static class FOLLOW_inin_in_prepphraseIN1119_static {
    public static final BitSet FOLLOW_inin_in_prepphraseIN1119 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_molecule_in_prepphraseIN1121_static {
    public static final BitSet FOLLOW_molecule_in_prepphraseIN1121 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_prepphraseRole1142_static {
    public static final BitSet FOLLOW_inas_in_prepphraseRole1142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L,0x0000000000080000L});

    }static class FOLLOW_dt_in_prepphraseRole1144_static {
    public static final BitSet FOLLOW_dt_in_prepphraseRole1144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_prepphraseRole1147_static {
    public static final BitSet FOLLOW_nnchementity_in_prepphraseRole1147 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseOther1170_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseOther1170 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_inMost_in_prepphraseOther1173_static {
    public static final BitSet FOLLOW_inMost_in_prepphraseOther1173 = new BitSet(new long[]{0xFFFFEFC000000000L,0x68A0A850061FFFF5L,0x001E03FFF7FCE8A4L});

    }static class FOLLOW_nounphrase_in_prepphraseOther1177_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOther1177 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_prepphraseOf1203_static {
    public static final BitSet FOLLOW_inof_in_prepphraseOf1203 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseOf1206_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseOf1206 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_prepphraseAfter1228_static {
    public static final BitSet FOLLOW_advAdj_in_prepphraseAfter1228 = new BitSet(new long[]{0x0002000000000000L});

    }static class FOLLOW_inafter_in_prepphraseAfter1231_static {
    public static final BitSet FOLLOW_inafter_in_prepphraseAfter1231 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BCE824L});

    }static class FOLLOW_nounphrase_in_prepphraseAfter1234_static {
    public static final BitSet FOLLOW_nounphrase_in_prepphraseAfter1234 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbsynthesize_in_preparationphrase1259_static {
    public static final BitSet FOLLOW_vbsynthesize_in_preparationphrase1259 = new BitSet(new long[]{0x0000800000000000L});

    }static class FOLLOW_inas_in_preparationphrase1261_static {
    public static final BitSet FOLLOW_inas_in_preparationphrase1261 = new BitSet(new long[]{0xFFFFA1C000000000L,0x0000000002183B81L,0x000002F013CC80A4L});

    }static class FOLLOW_nnexample_in_preparationphrase1264_static {
    public static final BitSet FOLLOW_nnexample_in_preparationphrase1264 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_preparationphrase1266_static {
    public static final BitSet FOLLOW_cd_in_preparationphrase1266 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_preparationphrase1269_static {
    public static final BitSet FOLLOW_prepphrase_in_preparationphrase1269 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_multiApparatus1280_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1280 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138E8024L});

    }static class FOLLOW_conjunction_in_multiApparatus1283_static {
    public static final BitSet FOLLOW_conjunction_in_multiApparatus1283 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138E8024L});

    }static class FOLLOW_apparatus_in_multiApparatus1286_static {
    public static final BitSet FOLLOW_apparatus_in_multiApparatus1286 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138E8024L});

    }static class FOLLOW_dt_in_apparatus1297_static {
    public static final BitSet FOLLOW_dt_in_apparatus1297 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138C8024L});

    }static class FOLLOW_preapparatus_in_apparatus1300_static {
    public static final BitSet FOLLOW_preapparatus_in_apparatus1300 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138C8024L});

    }static class FOLLOW_nnApp_in_apparatus1303_static {
    public static final BitSet FOLLOW_nnApp_in_apparatus1303 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138C8024L});

    }static class FOLLOW_nnapparatus_in_nnApp1330_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1330 = new BitSet(new long[]{0x800021C000000002L,0x0000001002102280L,0x00000000138C8124L});

    }static class FOLLOW_dash_in_nnApp1334_static {
    public static final BitSet FOLLOW_dash_in_nnApp1334 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138C8024L});

    }static class FOLLOW_nnapparatus_in_nnApp1336_static {
    public static final BitSet FOLLOW_nnapparatus_in_nnApp1336 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_quantity_in_preapparatus1350_static {
    public static final BitSet FOLLOW_quantity_in_preapparatus1350 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_adj_in_preapparatus1352_static {
    public static final BitSet FOLLOW_adj_in_preapparatus1352 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_nnpressure_in_preapparatus1354_static {
    public static final BitSet FOLLOW_nnpressure_in_preapparatus1354 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_nnadd_in_preapparatus1356_static {
    public static final BitSet FOLLOW_nnadd_in_preapparatus1356 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_molecule_in_preapparatus1358_static {
    public static final BitSet FOLLOW_molecule_in_preapparatus1358 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_nnchementity_in_preapparatus1360_static {
    public static final BitSet FOLLOW_nnchementity_in_preapparatus1360 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_nnstate_in_preapparatus1362_static {
    public static final BitSet FOLLOW_nnstate_in_preapparatus1362 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_nn_in_preapparatus1364_static {
    public static final BitSet FOLLOW_nn_in_preapparatus1364 = new BitSet(new long[]{0x800021C000000002L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_oscaront_in_oscaronts1376_static {
    public static final BitSet FOLLOW_oscaront_in_oscaronts1376 = new BitSet(new long[]{0x0000040000000002L});

    }static class FOLLOW_adj_in_oscarCompound1396_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1396 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_oscarCompoundStructure_in_oscarCompound1399_static {
    public static final BitSet FOLLOW_oscarCompoundStructure_in_oscarCompound1399 = new BitSet(new long[]{0x080021C000000002L,0x0000000000000280L,0x000000000384A804L});

    }static class FOLLOW_adj_in_oscarCompound1401_static {
    public static final BitSet FOLLOW_adj_in_oscarCompound1401 = new BitSet(new long[]{0x0800004000000002L,0x0000000000000280L,0x000000000004A804L});

    }static class FOLLOW_quantity_in_oscarCompound1405_static {
    public static final BitSet FOLLOW_quantity_in_oscarCompound1405 = new BitSet(new long[]{0x0800004000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_nnchementity_in_oscarCompound1409_static {
    public static final BitSet FOLLOW_nnchementity_in_oscarCompound1409 = new BitSet(new long[]{0x0800004000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_oscarCompound1415_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_oscarCompound1415 = new BitSet(new long[]{0x0800004000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_quantity_in_oscarCompound1419_static {
    public static final BitSet FOLLOW_quantity_in_oscarCompound1419 = new BitSet(new long[]{0x0800004000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_fromProcedure_in_oscarCompound1422_static {
    public static final BitSet FOLLOW_fromProcedure_in_oscarCompound1422 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_oscarCompoundStructure1431_static {
    public static final BitSet FOLLOW_oscarcm_in_oscarCompoundStructure1431 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000140L});

    }static class FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1433_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_oscarCompoundStructure1433 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1438_static {
    public static final BitSet FOLLOW_bracketedOscarCompoundStructure_in_oscarCompoundStructure1438 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1460_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1460 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1464_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_afterOscarCompoundStructure1466_static {
    public static final BitSet FOLLOW_oscarcm_in_afterOscarCompoundStructure1466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1471_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1471 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_afterOscarCompoundStructure1475_static {
    public static final BitSet FOLLOW_dash_in_afterOscarCompoundStructure1475 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_apost_in_afterOscarCompoundStructure1477_static {
    public static final BitSet FOLLOW_apost_in_afterOscarCompoundStructure1477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000140L});

    }static class FOLLOW_lrb_in_bracketedOscarCompoundStructure1486_static {
    public static final BitSet FOLLOW_lrb_in_bracketedOscarCompoundStructure1486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1489_static {
    public static final BitSet FOLLOW_oscarcm_in_bracketedOscarCompoundStructure1489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedOscarCompoundStructure1492_static {
    public static final BitSet FOLLOW_rrb_in_bracketedOscarCompoundStructure1492 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount_in_molecule1502_static {
    public static final BitSet FOLLOW_moleculeamount_in_molecule1502 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_moleculeamount1520_static {
    public static final BitSet FOLLOW_moleculeamount3_in_moleculeamount1520 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount1_in_moleculeamount1523_static {
    public static final BitSet FOLLOW_moleculeamount1_in_moleculeamount1523 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_moleculeamount2_in_moleculeamount1527_static {
    public static final BitSet FOLLOW_moleculeamount2_in_moleculeamount1527 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_moleculeamount1530_static {
    public static final BitSet FOLLOW_asAstate_in_moleculeamount1530 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount31541_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount31541 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_moleculeamount31543_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31543 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_inof_in_moleculeamount31547_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount31547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000C4000L});

    }static class FOLLOW_dtTHE_in_moleculeamount31550_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount31550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_dt_in_moleculeamount31554_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount31554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cdRatioNode_in_moleculeamount31558_static {
    public static final BitSet FOLLOW_cdRatioNode_in_moleculeamount31558 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_mixture_in_moleculeamount31560_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount31560 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_oscarCompound_in_moleculeamount31563_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount31563 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_moleculeamount11573_static {
    public static final BitSet FOLLOW_nnchementity_in_moleculeamount11573 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_nnstate_in_moleculeamount11577_static {
    public static final BitSet FOLLOW_nnstate_in_moleculeamount11577 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_quantity_in_moleculeamount11582_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11582 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_moleculeamount11584_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount11584 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_inof_in_moleculeamount11588_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11588 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x00000000038CC024L});

    }static class FOLLOW_quantity_in_moleculeamount11591_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount11591 = new BitSet(new long[]{0x810021C000000000L,0x0000000000100280L,0x00000000038CC024L});

    }static class FOLLOW_inof_in_moleculeamount11593_static {
    public static final BitSet FOLLOW_inof_in_moleculeamount11593 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x00000000038CC024L});

    }static class FOLLOW_dtTHE_in_moleculeamount11599_static {
    public static final BitSet FOLLOW_dtTHE_in_moleculeamount11599 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_dt_in_moleculeamount11603_static {
    public static final BitSet FOLLOW_dt_in_moleculeamount11603 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_oscarCompound_in_moleculeamount11607_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount11607 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11610_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount11610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_moleculeamount21619_static {
    public static final BitSet FOLLOW_quantity_in_moleculeamount21619 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_mixture_in_moleculeamount21621_static {
    public static final BitSet FOLLOW_mixture_in_moleculeamount21621 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_oscarCompound_in_moleculeamount21625_static {
    public static final BitSet FOLLOW_oscarCompound_in_moleculeamount21625 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21628_static {
    public static final BitSet FOLLOW_afterCompoundCitationOrQuantity_in_moleculeamount21628 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_afterCompoundCitationOrQuantity1636_static {
    public static final BitSet FOLLOW_citation_in_afterCompoundCitationOrQuantity1636 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_quantity_in_afterCompoundCitationOrQuantity1638_static {
    public static final BitSet FOLLOW_quantity_in_afterCompoundCitationOrQuantity1638 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_comma_in_afterCompoundCitationOrQuantity1640_static {
    public static final BitSet FOLLOW_comma_in_afterCompoundCitationOrQuantity1640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1643_static {
    public static final BitSet FOLLOW_quantity1Node_in_afterCompoundCitationOrQuantity1643 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1645_static {
    public static final BitSet FOLLOW_citationStructure_in_afterCompoundCitationOrQuantity1645 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_afterCompoundCitationOrQuantity1648_static {
    public static final BitSet FOLLOW_mixture_in_afterCompoundCitationOrQuantity1648 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1659_static {
    public static final BitSet FOLLOW_unnamedmoleculeDescription_in_unnamedmolecule1659 = new BitSet(new long[]{0x0000800000000002L});

    }static class FOLLOW_asAstate_in_unnamedmolecule1661_static {
    public static final BitSet FOLLOW_asAstate_in_unnamedmolecule1661 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_unnamedmoleculeDescription1682_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeDescription1682 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_inof_in_unnamedmoleculeDescription1685_static {
    public static final BitSet FOLLOW_inof_in_unnamedmoleculeDescription1685 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCE824L});

    }static class FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeDescription1688_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_unnamedmoleculeDescription1688 = new BitSet(new long[]{0x0800000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeDescription1690_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_unnamedmoleculeDescription1690 = new BitSet(new long[]{0x0800004000000000L,0x0000000000000280L,0x000000000004A824L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeDescription1692_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeDescription1692 = new BitSet(new long[]{0x0800000000000002L});

    }static class FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeDescription1697_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount3_in_unnamedmoleculeDescription1697 = new BitSet(new long[]{0x0800000000000002L});

    }static class FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeDescription1699_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_unnamedmoleculeDescription1699 = new BitSet(new long[]{0x0800000000000002L});

    }static class FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeDescription1701_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount5_in_unnamedmoleculeDescription1701 = new BitSet(new long[]{0x0800000000000002L});

    }static class FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeDescription1703_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount6_in_unnamedmoleculeDescription1703 = new BitSet(new long[]{0x0800000000000002L});

    }static class FOLLOW_unnamedmoleculeamount7_in_unnamedmoleculeDescription1705_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount7_in_unnamedmoleculeDescription1705 = new BitSet(new long[]{0x0800000000000002L});

    }static class FOLLOW_unnamedmoleculeamount8_in_unnamedmoleculeDescription1707_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount8_in_unnamedmoleculeDescription1707 = new BitSet(new long[]{0x0800000000000002L});

    }static class FOLLOW_fromProcedure_in_unnamedmoleculeDescription1710_static {
    public static final BitSet FOLLOW_fromProcedure_in_unnamedmoleculeDescription1710 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount11723_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount11723 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount11726_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount11726 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount11728_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount11728 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_dtTHE_in_unnamedmoleculeamount21740_static {
    public static final BitSet FOLLOW_dtTHE_in_unnamedmoleculeamount21740 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_dt_in_unnamedmoleculeamount21744_static {
    public static final BitSet FOLLOW_dt_in_unnamedmoleculeamount21744 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_jj_in_unnamedmoleculeamount21749_static {
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount21749 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_jjchem_in_unnamedmoleculeamount21751_static {
    public static final BitSet FOLLOW_jjchem_in_unnamedmoleculeamount21751 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_jjcomp_in_unnamedmoleculeamount21753_static {
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount21753 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nnstate_in_unnamedmoleculeamount21758_static {
    public static final BitSet FOLLOW_nnstate_in_unnamedmoleculeamount21758 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_unnamedmoleculeamount21760_static {
    public static final BitSet FOLLOW_nn_in_unnamedmoleculeamount21760 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nns_in_unnamedmoleculeamount21762_static {
    public static final BitSet FOLLOW_nns_in_unnamedmoleculeamount21762 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnp_in_unnamedmoleculeamount21764_static {
    public static final BitSet FOLLOW_nnp_in_unnamedmoleculeamount21764 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_unnamedmoleculeamount21766_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_unnamedmoleculeamount21766 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_unnamedmoleculeamount21768_static {
    public static final BitSet FOLLOW_nnexample_in_unnamedmoleculeamount21768 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaronts_in_unnamedmoleculeamount21770_static {
    public static final BitSet FOLLOW_oscaronts_in_unnamedmoleculeamount21770 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_unnamedmoleculeamount21772_static {
    public static final BitSet FOLLOW_nnatmosphere_in_unnamedmoleculeamount21772 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount21774_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount21774 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnmixture_in_unnamedmoleculeamount21776_static {
    public static final BitSet FOLLOW_nnmixture_in_unnamedmoleculeamount21776 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_unnamedmoleculeamount21778_static {
    public static final BitSet FOLLOW_fw_in_unnamedmoleculeamount21778 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnps_in_unnamedmoleculeamount21780_static {
    public static final BitSet FOLLOW_nnps_in_unnamedmoleculeamount21780 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarase_in_unnamedmoleculeamount21782_static {
    public static final BitSet FOLLOW_oscarase_in_unnamedmoleculeamount21782 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjcomp_in_unnamedmoleculeamount31792_static {
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount31792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount31794_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount31794 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000280L,0x000000000004A824L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeamount31796_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_unnamedmoleculeamount31796 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1807_static {
    public static final BitSet FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1807 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000280L,0x000000000004A824L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_optionalUnnamedMoleculeEnding1813_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_optionalUnnamedMoleculeEnding1813 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1818_static {
    public static final BitSet FOLLOW_quantity_in_optionalUnnamedMoleculeEnding1818 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_optionalUnnamedMoleculeEnding1820_static {
    public static final BitSet FOLLOW_mixture_in_optionalUnnamedMoleculeEnding1820 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_alphanumericOrIdentifierCompoundReference_in_unnamedmoleculeamount41831_static {
    public static final BitSet FOLLOW_alphanumericOrIdentifierCompoundReference_in_unnamedmoleculeamount41831 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount41834_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount41834 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount41836_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount41836 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount41838_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount41838 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference1851_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_alphanumericOrIdentifierCompoundReference1851 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference1853_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_alphanumericOrIdentifierCompoundReference1853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference1855_static {
    public static final BitSet FOLLOW_cdAlphanum_in_alphanumericOrIdentifierCompoundReference1855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference1857_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_alphanumericOrIdentifierCompoundReference1857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numberCompoundReference_in_unnamedmoleculeamount51885_static {
    public static final BitSet FOLLOW_numberCompoundReference_in_unnamedmoleculeamount51885 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount51887_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount51887 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount51890_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount51890 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_citation_in_unnamedmoleculeamount51893_static {
    public static final BitSet FOLLOW_citation_in_unnamedmoleculeamount51893 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount51895_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount51895 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount51897_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount51897 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_cd_in_numberCompoundReference1909_static {
    public static final BitSet FOLLOW_cd_in_numberCompoundReference1909 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount61926_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount61926 = new BitSet(new long[]{0x0000404000000000L,0x0000000000000280L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount61928_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount61928 = new BitSet(new long[]{0x0000404000000000L,0x0000000000000280L,0x0000000000048024L});

    }static class FOLLOW_jjcomp_in_unnamedmoleculeamount61932_static {
    public static final BitSet FOLLOW_jjcomp_in_unnamedmoleculeamount61932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount61935_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount61935 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount61938_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount61938 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount61940_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount61940 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_inas_in_asAstate1951_static {
    public static final BitSet FOLLOW_inas_in_asAstate1951 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000880000L});

    }static class FOLLOW_dt_in_asAstate1953_static {
    public static final BitSet FOLLOW_dt_in_asAstate1953 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jj_in_asAstate1957_static {
    public static final BitSet FOLLOW_jj_in_asAstate1957 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_asAstate1959_static {
    public static final BitSet FOLLOW_jjchem_in_asAstate1959 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_nnstate_in_asAstate1963_static {
    public static final BitSet FOLLOW_nnstate_in_asAstate1963 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_quantity_in_asAstate1965_static {
    public static final BitSet FOLLOW_quantity_in_asAstate1965 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount71976_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount71976 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000080L,0x000000000004A804L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount71983_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_unnamedmoleculeamount71983 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount71986_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount71986 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount71988_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount71988 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_nnchementity_in_unnamedmoleculeamount82000_static {
    public static final BitSet FOLLOW_nnchementity_in_unnamedmoleculeamount82000 = new BitSet(new long[]{0x0000804000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_nnstate_in_unnamedmoleculeamount82004_static {
    public static final BitSet FOLLOW_nnstate_in_unnamedmoleculeamount82004 = new BitSet(new long[]{0x0000804000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_inas_in_unnamedmoleculeamount82008_static {
    public static final BitSet FOLLOW_inas_in_unnamedmoleculeamount82008 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000880000L});

    }static class FOLLOW_dt_in_unnamedmoleculeamount82010_static {
    public static final BitSet FOLLOW_dt_in_unnamedmoleculeamount82010 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jj_in_unnamedmoleculeamount82014_static {
    public static final BitSet FOLLOW_jj_in_unnamedmoleculeamount82014 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_jjchem_in_unnamedmoleculeamount82016_static {
    public static final BitSet FOLLOW_jjchem_in_unnamedmoleculeamount82016 = new BitSet(new long[]{0x8000200000000000L,0x0000000000000000L,0x0000000000800000L});

    }static class FOLLOW_nnstate_in_unnamedmoleculeamount82020_static {
    public static final BitSet FOLLOW_nnstate_in_unnamedmoleculeamount82020 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount82024_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount82024 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_quantity_in_unnamedmoleculeamount82028_static {
    public static final BitSet FOLLOW_quantity_in_unnamedmoleculeamount82028 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixture_in_unnamedmoleculeamount82030_static {
    public static final BitSet FOLLOW_mixture_in_unnamedmoleculeamount82030 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference2043_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_numericOrIdentifierCompoundReference2043 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference2045_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_numericOrIdentifierCompoundReference2045 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference2047_static {
    public static final BitSet FOLLOW_numericOrBracketedNumeric_in_numericOrIdentifierCompoundReference2047 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lsqb_in_squareBracketedReference2073_static {
    public static final BitSet FOLLOW_lsqb_in_squareBracketedReference2073 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040004L});

    }static class FOLLOW_numeric_in_squareBracketedReference2075_static {
    public static final BitSet FOLLOW_numeric_in_squareBracketedReference2075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});

    }static class FOLLOW_rsqb_in_squareBracketedReference2077_static {
    public static final BitSet FOLLOW_rsqb_in_squareBracketedReference2077 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1Node_in_quantity2088_static {
    public static final BitSet FOLLOW_quantity1Node_in_quantity2088 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_quantity2090_static {
    public static final BitSet FOLLOW_quantity2Node_in_quantity2090 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity1_in_quantity1Node2099_static {
    public static final BitSet FOLLOW_quantity1_in_quantity1Node2099 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_quantity12119_static {
    public static final BitSet FOLLOW_lrb_in_quantity12119 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity12121_static {
    public static final BitSet FOLLOW_measurements_in_quantity12121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12124_static {
    public static final BitSet FOLLOW_comma_in_quantity12124 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity12127_static {
    public static final BitSet FOLLOW_measurements_in_quantity12127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_comma_in_quantity12132_static {
    public static final BitSet FOLLOW_comma_in_quantity12132 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12134_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010220L});

    }static class FOLLOW_stop_in_quantity12139_static {
    public static final BitSet FOLLOW_stop_in_quantity12139 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});

    }static class FOLLOW_preparationphrase_in_quantity12141_static {
    public static final BitSet FOLLOW_preparationphrase_in_quantity12141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});

    }static class FOLLOW_rrb_in_quantity12146_static {
    public static final BitSet FOLLOW_rrb_in_quantity12146 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2_in_quantity2Node2154_static {
    public static final BitSet FOLLOW_quantity2_in_quantity2Node2154 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurements_in_quantity22175_static {
    public static final BitSet FOLLOW_measurements_in_quantity22175 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_quantity22178_static {
    public static final BitSet FOLLOW_comma_in_quantity22178 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_quantity22181_static {
    public static final BitSet FOLLOW_measurements_in_quantity22181 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_cd_in_measurements2194_static {
    public static final BitSet FOLLOW_cd_in_measurements2194 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_nn_in_measurements2196_static {
    public static final BitSet FOLLOW_nn_in_measurements2196 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_multiple_in_measurements2201_static {
    public static final BitSet FOLLOW_multiple_in_measurements2201 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_measurementtypes_in_measurements2203_static {
    public static final BitSet FOLLOW_measurementtypes_in_measurements2203 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});

    }static class FOLLOW_dt_in_measurements2206_static {
    public static final BitSet FOLLOW_dt_in_measurements2206 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_multiple2214_static {
    public static final BitSet FOLLOW_cd_in_multiple2214 = new BitSet(new long[]{0x0000100000000000L});

    }static class FOLLOW_cdunicode_in_multiple2216_static {
    public static final BitSet FOLLOW_cdunicode_in_multiple2216 = new BitSet(new long[]{0x0000004000000002L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurementtypes_in_multiple2218_static {
    public static final BitSet FOLLOW_measurementtypes_in_multiple2218 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molar_in_measurementtypes2243_static {
    public static final BitSet FOLLOW_molar_in_measurementtypes2243 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_amount_in_measurementtypes2245_static {
    public static final BitSet FOLLOW_amount_in_measurementtypes2245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mass_in_measurementtypes2247_static {
    public static final BitSet FOLLOW_mass_in_measurementtypes2247 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_volume_in_measurementtypes2249_static {
    public static final BitSet FOLLOW_volume_in_measurementtypes2249 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_logHydrogenActivity_in_measurementtypes2251_static {
    public static final BitSet FOLLOW_logHydrogenActivity_in_measurementtypes2251 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_equivalent_in_measurementtypes2253_static {
    public static final BitSet FOLLOW_equivalent_in_measurementtypes2253 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_measurementtypes2255_static {
    public static final BitSet FOLLOW_yield_in_measurementtypes2255 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_measurementtypes2257_static {
    public static final BitSet FOLLOW_percent_in_measurementtypes2257 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_molar2265_static {
    public static final BitSet FOLLOW_cd_in_molar2265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000040000L});

    }static class FOLLOW_nnmolar_in_molar2268_static {
    public static final BitSet FOLLOW_nnmolar_in_molar2268 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_amount2289_static {
    public static final BitSet FOLLOW_cd_in_amount2289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000040000L});

    }static class FOLLOW_nnamount_in_amount2292_static {
    public static final BitSet FOLLOW_nnamount_in_amount2292 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_mass2313_static {
    public static final BitSet FOLLOW_cd_in_mass2313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000040000L});

    }static class FOLLOW_nnmass_in_mass2316_static {
    public static final BitSet FOLLOW_nnmass_in_mass2316 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_volume2336_static {
    public static final BitSet FOLLOW_cd_in_volume2336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000040000L});

    }static class FOLLOW_nnvol_in_volume2339_static {
    public static final BitSet FOLLOW_nnvol_in_volume2339 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_logHydrogenActivity2360_static {
    public static final BitSet FOLLOW_nnph_in_logHydrogenActivity2360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000040000L});

    }static class FOLLOW_sym_in_logHydrogenActivity2362_static {
    public static final BitSet FOLLOW_sym_in_logHydrogenActivity2362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_logHydrogenActivity2365_static {
    public static final BitSet FOLLOW_cd_in_logHydrogenActivity2365 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_equivalent2385_static {
    public static final BitSet FOLLOW_cd_in_equivalent2385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000000000040000L});

    }static class FOLLOW_nneq_in_equivalent2388_static {
    public static final BitSet FOLLOW_nneq_in_equivalent2388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield1_in_yield2406_static {
    public static final BitSet FOLLOW_yield1_in_yield2406 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield2_in_yield2417_static {
    public static final BitSet FOLLOW_yield2_in_yield2417 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_yield12431_static {
    public static final BitSet FOLLOW_nnyield_in_yield12431 = new BitSet(new long[]{0x0100000000000000L});

    }static class FOLLOW_inof_in_yield12433_static {
    public static final BitSet FOLLOW_inof_in_yield12433 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040004L});

    }static class FOLLOW_percent_in_yield12435_static {
    public static final BitSet FOLLOW_percent_in_yield12435 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_percent_in_yield22441_static {
    public static final BitSet FOLLOW_percent_in_yield22441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});

    }static class FOLLOW_nnyield_in_yield22443_static {
    public static final BitSet FOLLOW_nnyield_in_yield22443 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_percent2451_static {
    public static final BitSet FOLLOW_numeric_in_percent2451 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x0000000013848424L});

    }static class FOLLOW_nn_in_percent2453_static {
    public static final BitSet FOLLOW_nn_in_percent2453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_nnpercent_in_percent2456_static {
    public static final BitSet FOLLOW_nnpercent_in_percent2456 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdRatioNode_in_mixture2479_static {
    public static final BitSet FOLLOW_cdRatioNode_in_mixture2479 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048024L});

    }static class FOLLOW_mixtureStructure3_in_mixture2484_static {
    public static final BitSet FOLLOW_mixtureStructure3_in_mixture2484 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure2_in_mixture2486_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_mixture2486 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_mixture2488_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_mixture2488 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_mixtureStructure22513_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_lrb_in_mixtureStructure22515_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure22515 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureContent_in_mixtureStructure22517_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure22517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure22519_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure22519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_mixtureStructure22521_static {
    public static final BitSet FOLLOW_comma_in_mixtureStructure22521 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure12527_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure12527 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureContent_in_mixtureStructure12529_static {
    public static final BitSet FOLLOW_mixtureContent_in_mixtureStructure12529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure12531_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure12531 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_mixtureStructure32539_static {
    public static final BitSet FOLLOW_lrb_in_mixtureStructure32539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});

    }static class FOLLOW_nnpercent_in_mixtureStructure32542_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureStructure32542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_mixtureStructure32544_static {
    public static final BitSet FOLLOW_rrb_in_mixtureStructure32544 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_mixtureContent2554_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent2554 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_verb_in_mixtureContent2556_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2556 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nn_in_mixtureContent2558_static {
    public static final BitSet FOLLOW_nn_in_mixtureContent2558 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_quantity2Node_in_mixtureContent2560_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2560 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_md_in_mixtureContent2562_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2562 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nnpercent_in_mixtureContent2564_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent2564 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_oscarCompound_in_mixtureContent2566_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2566 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_molecule_in_mixtureContent2568_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent2568 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent2570_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent2570 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_dash_in_mixtureContent2572_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2572 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_sym_in_mixtureContent2574_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent2574 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_noun_in_mixtureContent2576_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2576 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_inAll_in_mixtureContent2578_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2578 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_cd_in_mixtureContent2580_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2580 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_comma_in_mixtureContent2582_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2582 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_adj_in_mixtureContent2584_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2584 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_colon_in_mixtureContent2586_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2586 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_stop_in_mixtureContent2588_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2588 = new BitSet(new long[]{0xFFFFEFC000000000L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_minimixture_in_mixtureContent2592_static {
    public static final BitSet FOLLOW_minimixture_in_mixtureContent2592 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_fw_in_mixtureContent2594_static {
    public static final BitSet FOLLOW_fw_in_mixtureContent2594 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_verb_in_mixtureContent2596_static {
    public static final BitSet FOLLOW_verb_in_mixtureContent2596 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_quantity2Node_in_mixtureContent2598_static {
    public static final BitSet FOLLOW_quantity2Node_in_mixtureContent2598 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nnyield_in_mixtureContent2600_static {
    public static final BitSet FOLLOW_nnyield_in_mixtureContent2600 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_md_in_mixtureContent2602_static {
    public static final BitSet FOLLOW_md_in_mixtureContent2602 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_nnpercent_in_mixtureContent2604_static {
    public static final BitSet FOLLOW_nnpercent_in_mixtureContent2604 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_oscarCompound_in_mixtureContent2606_static {
    public static final BitSet FOLLOW_oscarCompound_in_mixtureContent2606 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_molecule_in_mixtureContent2608_static {
    public static final BitSet FOLLOW_molecule_in_mixtureContent2608 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_unnamedmolecule_in_mixtureContent2610_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_mixtureContent2610 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_dash_in_mixtureContent2612_static {
    public static final BitSet FOLLOW_dash_in_mixtureContent2612 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_sym_in_mixtureContent2614_static {
    public static final BitSet FOLLOW_sym_in_mixtureContent2614 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_noun_in_mixtureContent2616_static {
    public static final BitSet FOLLOW_noun_in_mixtureContent2616 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_inAll_in_mixtureContent2618_static {
    public static final BitSet FOLLOW_inAll_in_mixtureContent2618 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_cd_in_mixtureContent2620_static {
    public static final BitSet FOLLOW_cd_in_mixtureContent2620 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_comma_in_mixtureContent2622_static {
    public static final BitSet FOLLOW_comma_in_mixtureContent2622 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_adj_in_mixtureContent2624_static {
    public static final BitSet FOLLOW_adj_in_mixtureContent2624 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_colon_in_mixtureContent2626_static {
    public static final BitSet FOLLOW_colon_in_mixtureContent2626 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_stop_in_mixtureContent2628_static {
    public static final BitSet FOLLOW_stop_in_mixtureContent2628 = new BitSet(new long[]{0xFFFFEFC000000002L,0xFFFFFFFFFFFFFFF5L,0x001FFBFFFFFCAF3FL});

    }static class FOLLOW_mixtureStructure2_in_minimixture2639_static {
    public static final BitSet FOLLOW_mixtureStructure2_in_minimixture2639 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixtureStructure1_in_minimixture2641_static {
    public static final BitSet FOLLOW_mixtureStructure1_in_minimixture2641 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_fromProcedure2662_static {
    public static final BitSet FOLLOW_infrom_in_fromProcedure2662 = new BitSet(new long[]{0x800021C000000000L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_procedureNode_in_fromProcedure2664_static {
    public static final BitSet FOLLOW_procedureNode_in_fromProcedure2664 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_method_in_procedureNode2671_static {
    public static final BitSet FOLLOW_method_in_procedureNode2671 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_method2692_static {
    public static final BitSet FOLLOW_nngeneral_in_method2692 = new BitSet(new long[]{0x800021C000000000L,0x0000000002103A80L,0x0000000013848024L});

    }static class FOLLOW_nn_in_method2694_static {
    public static final BitSet FOLLOW_nn_in_method2694 = new BitSet(new long[]{0x800021C000000000L,0x0000000002103A80L,0x0000000013848024L});

    }static class FOLLOW_nnmethod_in_method2698_static {
    public static final BitSet FOLLOW_nnmethod_in_method2698 = new BitSet(new long[]{0x800021C000000002L,0x0000000002183A80L,0x000000001384A024L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_method2701_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_method2701 = new BitSet(new long[]{0x800021C000000002L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_numeric_in_method2703_static {
    public static final BitSet FOLLOW_numeric_in_method2703 = new BitSet(new long[]{0x800021C000000002L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_nnexample_in_method2709_static {
    public static final BitSet FOLLOW_nnexample_in_method2709 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A004L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_method2712_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_method2712 = new BitSet(new long[]{0x800021C000000002L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_numeric_in_method2714_static {
    public static final BitSet FOLLOW_numeric_in_method2714 = new BitSet(new long[]{0x800021C000000002L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_submethod_in_method2719_static {
    public static final BitSet FOLLOW_submethod_in_method2719 = new BitSet(new long[]{0x800021C000000002L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_lrb_in_method2723_static {
    public static final BitSet FOLLOW_lrb_in_method2723 = new BitSet(new long[]{0x800021C000000000L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_submethod_in_method2725_static {
    public static final BitSet FOLLOW_submethod_in_method2725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_method2727_static {
    public static final BitSet FOLLOW_rrb_in_method2727 = new BitSet(new long[]{0x800021C000000002L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_nnmethod_in_submethod2738_static {
    public static final BitSet FOLLOW_nnmethod_in_submethod2738 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A004L});

    }static class FOLLOW_nnexample_in_submethod2740_static {
    public static final BitSet FOLLOW_nnexample_in_submethod2740 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A004L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_submethod2744_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_submethod2744 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_submethod2746_static {
    public static final BitSet FOLLOW_numeric_in_submethod2746 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_referenceToExampleCompound2756_static {
    public static final BitSet FOLLOW_nnexample_in_referenceToExampleCompound2756 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x000000000004A004L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2759_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_referenceToExampleCompound2759 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_referenceToExampleCompound2761_static {
    public static final BitSet FOLLOW_numeric_in_referenceToExampleCompound2761 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_advAdj2784_static {
    public static final BitSet FOLLOW_adv_in_advAdj2784 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_advAdj2786_static {
    public static final BitSet FOLLOW_adj_in_advAdj2786 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_range2793_static {
    public static final BitSet FOLLOW_numeric_in_range2793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_range2795_static {
    public static final BitSet FOLLOW_dash_in_range2795 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040004L});

    }static class FOLLOW_numeric_in_range2797_static {
    public static final BitSet FOLLOW_numeric_in_range2797 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycleStructure_in_cycles2804_static {
    public static final BitSet FOLLOW_cycleStructure_in_cycles2804 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cycleStructure2821_static {
    public static final BitSet FOLLOW_cd_in_cycleStructure2821 = new BitSet(new long[]{0x800021C000000000L,0x0000000002122280L,0x0000000013848024L});

    }static class FOLLOW_dashNN_in_cycleStructure2823_static {
    public static final BitSet FOLLOW_dashNN_in_cycleStructure2823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});

    }static class FOLLOW_nncycle_in_cycleStructure2826_static {
    public static final BitSet FOLLOW_nncycle_in_cycleStructure2826 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_dashNN2834_static {
    public static final BitSet FOLLOW_adj_in_dashNN2834 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN2836_static {
    public static final BitSet FOLLOW_nn_in_dashNN2836 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN2838_static {
    public static final BitSet FOLLOW_cd_in_dashNN2838 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_dashNN2842_static {
    public static final BitSet FOLLOW_dash_in_dashNN2842 = new BitSet(new long[]{0x800021C000000000L,0x0000000002102280L,0x0000000013848024L});

    }static class FOLLOW_adj_in_dashNN2845_static {
    public static final BitSet FOLLOW_adj_in_dashNN2845 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_nn_in_dashNN2847_static {
    public static final BitSet FOLLOW_nn_in_dashNN2847 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cd_in_dashNN2849_static {
    public static final BitSet FOLLOW_cd_in_dashNN2849 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});

    }static class FOLLOW_cdRatioNode_in_ratio2859_static {
    public static final BitSet FOLLOW_cdRatioNode_in_ratio2859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounratio_in_ratio2863_static {
    public static final BitSet FOLLOW_nounratio_in_ratio2863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdRatio_in_cdRatioNode2879_static {
    public static final BitSet FOLLOW_cdRatio_in_cdRatioNode2879 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_cdRatio2894_static {
    public static final BitSet FOLLOW_cd_in_cdRatio2894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_cdRatio2897_static {
    public static final BitSet FOLLOW_colon_in_cdRatio2897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_cdRatio2899_static {
    public static final BitSet FOLLOW_cd_in_cdRatio2899 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_noun_in_nounratio2910_static {
    public static final BitSet FOLLOW_noun_in_nounratio2910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_colon_in_nounratio2914_static {
    public static final BitSet FOLLOW_colon_in_nounratio2914 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_noun_in_nounratio2916_static {
    public static final BitSet FOLLOW_noun_in_nounratio2916 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});

    }static class FOLLOW_citationStructure_in_citation2928_static {
    public static final BitSet FOLLOW_citationStructure_in_citation2928 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_citation2930_static {
    public static final BitSet FOLLOW_comma_in_citation2930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_citationContent_in_citation2932_static {
    public static final BitSet FOLLOW_citationContent_in_citation2932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});

    }static class FOLLOW_comma_in_citation2934_static {
    public static final BitSet FOLLOW_comma_in_citation2934 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationContent_in_citationStructure2942_static {
    public static final BitSet FOLLOW_citationContent_in_citationStructure2942 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_citationContent2958_static {
    public static final BitSet FOLLOW_lrb_in_citationContent2958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent2961_static {
    public static final BitSet FOLLOW_nnp_in_citationContent2961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_fw_in_citationContent2963_static {
    public static final BitSet FOLLOW_fw_in_citationContent2963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_cd_in_citationContent2965_static {
    public static final BitSet FOLLOW_cd_in_citationContent2965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_conjunction_in_citationContent2967_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent2967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040260020L});

    }static class FOLLOW_nnp_in_citationContent2971_static {
    public static final BitSet FOLLOW_nnp_in_citationContent2971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_fw_in_citationContent2973_static {
    public static final BitSet FOLLOW_fw_in_citationContent2973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_cd_in_citationContent2975_static {
    public static final BitSet FOLLOW_cd_in_citationContent2975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_conjunction_in_citationContent2977_static {
    public static final BitSet FOLLOW_conjunction_in_citationContent2977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040270020L});

    }static class FOLLOW_rrb_in_citationContent2981_static {
    public static final BitSet FOLLOW_rrb_in_citationContent2981 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_numericOrBracketedNumeric2991_static {
    public static final BitSet FOLLOW_numeric_in_numericOrBracketedNumeric2991 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2995_static {
    public static final BitSet FOLLOW_bracketedNumeric_in_numericOrBracketedNumeric2995 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedNumeric3003_static {
    public static final BitSet FOLLOW_lrb_in_bracketedNumeric3003 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000000L,0x0000000000040004L});

    }static class FOLLOW_numeric_in_bracketedNumeric3005_static {
    public static final BitSet FOLLOW_numeric_in_bracketedNumeric3005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedNumeric3007_static {
    public static final BitSet FOLLOW_rrb_in_bracketedNumeric3007 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_identifierOrBracketedIdentifier3014_static {
    public static final BitSet FOLLOW_cd_in_identifierOrBracketedIdentifier3014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3017_static {
    public static final BitSet FOLLOW_nnidentifier_in_identifierOrBracketedIdentifier3017 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3021_static {
    public static final BitSet FOLLOW_bracketedIdentifier_in_identifierOrBracketedIdentifier3021 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_bracketedIdentifier3029_static {
    public static final BitSet FOLLOW_lrb_in_bracketedIdentifier3029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_cd_in_bracketedIdentifier3031_static {
    public static final BitSet FOLLOW_cd_in_bracketedIdentifier3031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});

    }static class FOLLOW_nnidentifier_in_bracketedIdentifier3034_static {
    public static final BitSet FOLLOW_nnidentifier_in_bracketedIdentifier3034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_bracketedIdentifier3036_static {
    public static final BitSet FOLLOW_rrb_in_bracketedIdentifier3036 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jj_in_adj3044_static {
    public static final BitSet FOLLOW_jj_in_adj3044 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjr_in_adj3046_static {
    public static final BitSet FOLLOW_jjr_in_adj3046 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjs_in_adj3048_static {
    public static final BitSet FOLLOW_jjs_in_adj3048 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcj_in_adj3050_static {
    public static final BitSet FOLLOW_oscarcj_in_adj3050 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_jjchem_in_adj3052_static {
    public static final BitSet FOLLOW_jjchem_in_adj3052 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarrn_in_adj3054_static {
    public static final BitSet FOLLOW_oscarrn_in_adj3054 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rb_in_adv3061_static {
    public static final BitSet FOLLOW_rb_in_adv3061 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbr_in_adv3063_static {
    public static final BitSet FOLLOW_rbr_in_adv3063 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rp_in_adv3065_static {
    public static final BitSet FOLLOW_rp_in_adv3065 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbs_in_adv3067_static {
    public static final BitSet FOLLOW_rbs_in_adv3067 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wdt_in_clause3074_static {
    public static final BitSet FOLLOW_wdt_in_clause3074 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_poss_in_clause3076_static {
    public static final BitSet FOLLOW_wp_poss_in_clause3076 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wrb_in_clause3078_static {
    public static final BitSet FOLLOW_wrb_in_clause3078 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ex_in_clause3080_static {
    public static final BitSet FOLLOW_ex_in_clause3080 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_pdt_in_clause3082_static {
    public static final BitSet FOLLOW_pdt_in_clause3082 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_wp_in_clause3084_static {
    public static final BitSet FOLLOW_wp_in_clause3084 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_conjunction3091_static {
    public static final BitSet FOLLOW_cc_in_conjunction3091 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_conjunction3093_static {
    public static final BitSet FOLLOW_comma_in_conjunction3093 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inAll3100_static {
    public static final BitSet FOLLOW_in_in_inAll3100 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inafter_in_inAll3102_static {
    public static final BitSet FOLLOW_inafter_in_inAll3102 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inAll3104_static {
    public static final BitSet FOLLOW_inas_in_inAll3104 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inAll3106_static {
    public static final BitSet FOLLOW_inbefore_in_inAll3106 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inAll3108_static {
    public static final BitSet FOLLOW_inby_in_inAll3108 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inAll3110_static {
    public static final BitSet FOLLOW_infor_in_inAll3110 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inAll3112_static {
    public static final BitSet FOLLOW_infrom_in_inAll3112 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inAll3114_static {
    public static final BitSet FOLLOW_inin_in_inAll3114 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inAll3116_static {
    public static final BitSet FOLLOW_ininto_in_inAll3116 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inAll3118_static {
    public static final BitSet FOLLOW_inof_in_inAll3118 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inAll3120_static {
    public static final BitSet FOLLOW_inoff_in_inAll3120 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inAll3122_static {
    public static final BitSet FOLLOW_inon_in_inAll3122 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inAll3124_static {
    public static final BitSet FOLLOW_inover_in_inAll3124 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inAll3126_static {
    public static final BitSet FOLLOW_inunder_in_inAll3126 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inAll3128_static {
    public static final BitSet FOLLOW_invia_in_inAll3128 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inAll3130_static {
    public static final BitSet FOLLOW_inwith_in_inAll3130 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inAll3132_static {
    public static final BitSet FOLLOW_inwithout_in_inAll3132 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inAll3134_static {
    public static final BitSet FOLLOW_to_in_inAll3134 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_in_in_inMost3141_static {
    public static final BitSet FOLLOW_in_in_inMost3141 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inas_in_inMost3143_static {
    public static final BitSet FOLLOW_inas_in_inMost3143 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inbefore_in_inMost3145_static {
    public static final BitSet FOLLOW_inbefore_in_inMost3145 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inby_in_inMost3147_static {
    public static final BitSet FOLLOW_inby_in_inMost3147 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infor_in_inMost3149_static {
    public static final BitSet FOLLOW_infor_in_inMost3149 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_infrom_in_inMost3151_static {
    public static final BitSet FOLLOW_infrom_in_inMost3151 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inin_in_inMost3153_static {
    public static final BitSet FOLLOW_inin_in_inMost3153 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ininto_in_inMost3155_static {
    public static final BitSet FOLLOW_ininto_in_inMost3155 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inof_in_inMost3157_static {
    public static final BitSet FOLLOW_inof_in_inMost3157 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_inMost3159_static {
    public static final BitSet FOLLOW_inoff_in_inMost3159 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inon_in_inMost3161_static {
    public static final BitSet FOLLOW_inon_in_inMost3161 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inover_in_inMost3163_static {
    public static final BitSet FOLLOW_inover_in_inMost3163 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inunder_in_inMost3165_static {
    public static final BitSet FOLLOW_inunder_in_inMost3165 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_invia_in_inMost3167_static {
    public static final BitSet FOLLOW_invia_in_inMost3167 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwith_in_inMost3169_static {
    public static final BitSet FOLLOW_inwith_in_inMost3169 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inwithout_in_inMost3171_static {
    public static final BitSet FOLLOW_inwithout_in_inMost3171 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_inMost3173_static {
    public static final BitSet FOLLOW_to_in_inMost3173 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_numeric3180_static {
    public static final BitSet FOLLOW_cd_in_numeric3180 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdAlphanum_in_numeric3182_static {
    public static final BitSet FOLLOW_cdAlphanum_in_numeric3182 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_38_in_cdAlphanum3190_static {
    public static final BitSet FOLLOW_38_in_cdAlphanum3190 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdAlphanum3192_static {
    public static final BitSet FOLLOW_TOKEN_in_cdAlphanum3192 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_39_in_oscarcj3205_static {
    public static final BitSet FOLLOW_39_in_oscarcj3205 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcj3207_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcj3207 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_40_in_oscarrn3220_static {
    public static final BitSet FOLLOW_40_in_oscarrn3220 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarrn3222_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarrn3222 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_41_in_oscarase3235_static {
    public static final BitSet FOLLOW_41_in_oscarase3235 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarase3237_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarase3237 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_42_in_oscaront3250_static {
    public static final BitSet FOLLOW_42_in_oscaront3250 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscaront3252_static {
    public static final BitSet FOLLOW_TOKEN_in_oscaront3252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_43_in_tmunicode3265_static {
    public static final BitSet FOLLOW_43_in_tmunicode3265 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_tmunicode3267_static {
    public static final BitSet FOLLOW_TOKEN_in_tmunicode3267 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_44_in_cdunicode3280_static {
    public static final BitSet FOLLOW_44_in_cdunicode3280 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cdunicode3282_static {
    public static final BitSet FOLLOW_TOKEN_in_cdunicode3282 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_45_in_jjchem3295_static {
    public static final BitSet FOLLOW_45_in_jjchem3295 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjchem3297_static {
    public static final BitSet FOLLOW_TOKEN_in_jjchem3297 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_46_in_jjcomp3310_static {
    public static final BitSet FOLLOW_46_in_jjcomp3310 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjcomp3312_static {
    public static final BitSet FOLLOW_TOKEN_in_jjcomp3312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_47_in_inas3326_static {
    public static final BitSet FOLLOW_47_in_inas3326 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inas3328_static {
    public static final BitSet FOLLOW_TOKEN_in_inas3328 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_48_in_inbefore3341_static {
    public static final BitSet FOLLOW_48_in_inbefore3341 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inbefore3343_static {
    public static final BitSet FOLLOW_TOKEN_in_inbefore3343 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_49_in_inafter3356_static {
    public static final BitSet FOLLOW_49_in_inafter3356 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inafter3358_static {
    public static final BitSet FOLLOW_TOKEN_in_inafter3358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_50_in_inin3371_static {
    public static final BitSet FOLLOW_50_in_inin3371 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inin3373_static {
    public static final BitSet FOLLOW_TOKEN_in_inin3373 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_51_in_ininto3386_static {
    public static final BitSet FOLLOW_51_in_ininto3386 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ininto3388_static {
    public static final BitSet FOLLOW_TOKEN_in_ininto3388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_52_in_inwith3401_static {
    public static final BitSet FOLLOW_52_in_inwith3401 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwith3403_static {
    public static final BitSet FOLLOW_TOKEN_in_inwith3403 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_53_in_inwithout3416_static {
    public static final BitSet FOLLOW_53_in_inwithout3416 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inwithout3418_static {
    public static final BitSet FOLLOW_TOKEN_in_inwithout3418 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_54_in_inby3431_static {
    public static final BitSet FOLLOW_54_in_inby3431 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inby3433_static {
    public static final BitSet FOLLOW_TOKEN_in_inby3433 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_55_in_invia3446_static {
    public static final BitSet FOLLOW_55_in_invia3446 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_invia3448_static {
    public static final BitSet FOLLOW_TOKEN_in_invia3448 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_56_in_inof3461_static {
    public static final BitSet FOLLOW_56_in_inof3461 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inof3463_static {
    public static final BitSet FOLLOW_TOKEN_in_inof3463 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_57_in_inon3476_static {
    public static final BitSet FOLLOW_57_in_inon3476 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inon3478_static {
    public static final BitSet FOLLOW_TOKEN_in_inon3478 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_58_in_infor3491_static {
    public static final BitSet FOLLOW_58_in_infor3491 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infor3493_static {
    public static final BitSet FOLLOW_TOKEN_in_infor3493 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_59_in_infrom3506_static {
    public static final BitSet FOLLOW_59_in_infrom3506 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_infrom3508_static {
    public static final BitSet FOLLOW_TOKEN_in_infrom3508 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_60_in_inunder3521_static {
    public static final BitSet FOLLOW_60_in_inunder3521 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inunder3523_static {
    public static final BitSet FOLLOW_TOKEN_in_inunder3523 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_61_in_inover3536_static {
    public static final BitSet FOLLOW_61_in_inover3536 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inover3538_static {
    public static final BitSet FOLLOW_TOKEN_in_inover3538 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_62_in_inoff3551_static {
    public static final BitSet FOLLOW_62_in_inoff3551 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_inoff3553_static {
    public static final BitSet FOLLOW_TOKEN_in_inoff3553 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_63_in_nnstate3568_static {
    public static final BitSet FOLLOW_63_in_nnstate3568 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnstate3570_static {
    public static final BitSet FOLLOW_TOKEN_in_nnstate3570 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_64_in_nntime3583_static {
    public static final BitSet FOLLOW_64_in_nntime3583 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntime3585_static {
    public static final BitSet FOLLOW_TOKEN_in_nntime3585 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_65_in_nnmass3598_static {
    public static final BitSet FOLLOW_65_in_nnmass3598 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmass3600_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmass3600 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_66_in_nnamount3613_static {
    public static final BitSet FOLLOW_66_in_nnamount3613 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnamount3615_static {
    public static final BitSet FOLLOW_TOKEN_in_nnamount3615 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_67_in_nnmolar3628_static {
    public static final BitSet FOLLOW_67_in_nnmolar3628 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmolar3630_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmolar3630 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_68_in_nnatmosphere3643_static {
    public static final BitSet FOLLOW_68_in_nnatmosphere3643 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnatmosphere3645_static {
    public static final BitSet FOLLOW_TOKEN_in_nnatmosphere3645 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_69_in_nneq3658_static {
    public static final BitSet FOLLOW_69_in_nneq3658 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nneq3660_static {
    public static final BitSet FOLLOW_TOKEN_in_nneq3660 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_70_in_nnvol3673_static {
    public static final BitSet FOLLOW_70_in_nnvol3673 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvol3675_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvol3675 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_71_in_nnchementity3688_static {
    public static final BitSet FOLLOW_71_in_nnchementity3688 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchementity3690_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchementity3690 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_72_in_nntemp3703_static {
    public static final BitSet FOLLOW_72_in_nntemp3703 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntemp3705_static {
    public static final BitSet FOLLOW_TOKEN_in_nntemp3705 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_73_in_nnph3718_static {
    public static final BitSet FOLLOW_73_in_nnph3718 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnph3720_static {
    public static final BitSet FOLLOW_TOKEN_in_nnph3720 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_74_in_nnflash3733_static {
    public static final BitSet FOLLOW_74_in_nnflash3733 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnflash3735_static {
    public static final BitSet FOLLOW_TOKEN_in_nnflash3735 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_75_in_nngeneral3748_static {
    public static final BitSet FOLLOW_75_in_nngeneral3748 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nngeneral3750_static {
    public static final BitSet FOLLOW_TOKEN_in_nngeneral3750 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_76_in_nnmethod3763_static {
    public static final BitSet FOLLOW_76_in_nnmethod3763 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmethod3765_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmethod3765 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_77_in_nnpressure3778_static {
    public static final BitSet FOLLOW_77_in_nnpressure3778 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpressure3780_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpressure3780 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_78_in_nncolumn3793_static {
    public static final BitSet FOLLOW_78_in_nncolumn3793 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncolumn3795_static {
    public static final BitSet FOLLOW_TOKEN_in_nncolumn3795 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_79_in_nnchromatography3808_static {
    public static final BitSet FOLLOW_79_in_nnchromatography3808 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnchromatography3810_static {
    public static final BitSet FOLLOW_TOKEN_in_nnchromatography3810 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_80_in_nnvacuum3823_static {
    public static final BitSet FOLLOW_80_in_nnvacuum3823 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnvacuum3825_static {
    public static final BitSet FOLLOW_TOKEN_in_nnvacuum3825 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_81_in_nncycle3838_static {
    public static final BitSet FOLLOW_81_in_nncycle3838 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nncycle3840_static {
    public static final BitSet FOLLOW_TOKEN_in_nncycle3840 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_82_in_nntimes3853_static {
    public static final BitSet FOLLOW_82_in_nntimes3853 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nntimes3855_static {
    public static final BitSet FOLLOW_TOKEN_in_nntimes3855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_83_in_nnexample3868_static {
    public static final BitSet FOLLOW_83_in_nnexample3868 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnexample3870_static {
    public static final BitSet FOLLOW_TOKEN_in_nnexample3870 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_84_in_oscarcm3885_static {
    public static final BitSet FOLLOW_84_in_oscarcm3885 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_oscarcm3887_static {
    public static final BitSet FOLLOW_TOKEN_in_oscarcm3887 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_85_in_vbuse3902_static {
    public static final BitSet FOLLOW_85_in_vbuse3902 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbuse3904_static {
    public static final BitSet FOLLOW_TOKEN_in_vbuse3904 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_86_in_vbchange3917_static {
    public static final BitSet FOLLOW_86_in_vbchange3917 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbchange3919_static {
    public static final BitSet FOLLOW_TOKEN_in_vbchange3919 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_87_in_vbsubmerge3932_static {
    public static final BitSet FOLLOW_87_in_vbsubmerge3932 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubmerge3934_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubmerge3934 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_88_in_vbsubject3947_static {
    public static final BitSet FOLLOW_88_in_vbsubject3947 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsubject3949_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsubject3949 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_89_in_nnadd3964_static {
    public static final BitSet FOLLOW_89_in_nnadd3964 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnadd3966_static {
    public static final BitSet FOLLOW_TOKEN_in_nnadd3966 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_90_in_nnmixture3979_static {
    public static final BitSet FOLLOW_90_in_nnmixture3979 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnmixture3981_static {
    public static final BitSet FOLLOW_TOKEN_in_nnmixture3981 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_91_in_vbdilute3994_static {
    public static final BitSet FOLLOW_91_in_vbdilute3994 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdilute3996_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdilute3996 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_92_in_vbadd4009_static {
    public static final BitSet FOLLOW_92_in_vbadd4009 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbadd4011_static {
    public static final BitSet FOLLOW_TOKEN_in_vbadd4011 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_93_in_vbcharge4024_static {
    public static final BitSet FOLLOW_93_in_vbcharge4024 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcharge4026_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcharge4026 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_94_in_vbcontain4039_static {
    public static final BitSet FOLLOW_94_in_vbcontain4039 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcontain4041_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcontain4041 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_95_in_vbdrop4054_static {
    public static final BitSet FOLLOW_95_in_vbdrop4054 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdrop4056_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdrop4056 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_96_in_vbfill4069_static {
    public static final BitSet FOLLOW_96_in_vbfill4069 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfill4071_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfill4071 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_97_in_vbsuspend4084_static {
    public static final BitSet FOLLOW_97_in_vbsuspend4084 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsuspend4086_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsuspend4086 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_98_in_vbtreat4099_static {
    public static final BitSet FOLLOW_98_in_vbtreat4099 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbtreat4101_static {
    public static final BitSet FOLLOW_TOKEN_in_vbtreat4101 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_99_in_vbapparatus4116_static {
    public static final BitSet FOLLOW_99_in_vbapparatus4116 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbapparatus4118_static {
    public static final BitSet FOLLOW_TOKEN_in_vbapparatus4118 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_100_in_nnapparatus4131_static {
    public static final BitSet FOLLOW_100_in_nnapparatus4131 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnapparatus4133_static {
    public static final BitSet FOLLOW_TOKEN_in_nnapparatus4133 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_101_in_vbconcentrate4148_static {
    public static final BitSet FOLLOW_101_in_vbconcentrate4148 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbconcentrate4150_static {
    public static final BitSet FOLLOW_TOKEN_in_vbconcentrate4150 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_102_in_nnconcentrate4163_static {
    public static final BitSet FOLLOW_102_in_nnconcentrate4163 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnconcentrate4165_static {
    public static final BitSet FOLLOW_TOKEN_in_nnconcentrate4165 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_103_in_vbcool4180_static {
    public static final BitSet FOLLOW_103_in_vbcool4180 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbcool4182_static {
    public static final BitSet FOLLOW_TOKEN_in_vbcool4182 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_104_in_vbdegass4197_static {
    public static final BitSet FOLLOW_104_in_vbdegass4197 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdegass4199_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdegass4199 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_105_in_vbdissolve4214_static {
    public static final BitSet FOLLOW_105_in_vbdissolve4214 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdissolve4216_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdissolve4216 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_106_in_vbdry4231_static {
    public static final BitSet FOLLOW_106_in_vbdry4231 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbdry4233_static {
    public static final BitSet FOLLOW_TOKEN_in_vbdry4233 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_107_in_nndry4246_static {
    public static final BitSet FOLLOW_107_in_nndry4246 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nndry4248_static {
    public static final BitSet FOLLOW_TOKEN_in_nndry4248 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_108_in_vbextract4263_static {
    public static final BitSet FOLLOW_108_in_vbextract4263 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbextract4265_static {
    public static final BitSet FOLLOW_TOKEN_in_vbextract4265 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_109_in_nnextract4278_static {
    public static final BitSet FOLLOW_109_in_nnextract4278 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnextract4280_static {
    public static final BitSet FOLLOW_TOKEN_in_nnextract4280 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_110_in_vbfilter4295_static {
    public static final BitSet FOLLOW_110_in_vbfilter4295 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbfilter4297_static {
    public static final BitSet FOLLOW_TOKEN_in_vbfilter4297 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_111_in_nnfilter4310_static {
    public static final BitSet FOLLOW_111_in_nnfilter4310 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnfilter4312_static {
    public static final BitSet FOLLOW_TOKEN_in_nnfilter4312 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_112_in_vbheat4327_static {
    public static final BitSet FOLLOW_112_in_vbheat4327 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbheat4329_static {
    public static final BitSet FOLLOW_TOKEN_in_vbheat4329 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_113_in_vbincrease4342_static {
    public static final BitSet FOLLOW_113_in_vbincrease4342 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbincrease4344_static {
    public static final BitSet FOLLOW_TOKEN_in_vbincrease4344 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_114_in_vbimmerse4359_static {
    public static final BitSet FOLLOW_114_in_vbimmerse4359 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbimmerse4361_static {
    public static final BitSet FOLLOW_TOKEN_in_vbimmerse4361 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_115_in_vbpartition4376_static {
    public static final BitSet FOLLOW_115_in_vbpartition4376 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpartition4378_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpartition4378 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_116_in_vbprecipitate4393_static {
    public static final BitSet FOLLOW_116_in_vbprecipitate4393 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbprecipitate4395_static {
    public static final BitSet FOLLOW_TOKEN_in_vbprecipitate4395 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_117_in_nnprecipitate4408_static {
    public static final BitSet FOLLOW_117_in_nnprecipitate4408 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnprecipitate4410_static {
    public static final BitSet FOLLOW_TOKEN_in_nnprecipitate4410 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_118_in_vbpurify4425_static {
    public static final BitSet FOLLOW_118_in_vbpurify4425 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbpurify4427_static {
    public static final BitSet FOLLOW_TOKEN_in_vbpurify4427 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_119_in_nnpurify4440_static {
    public static final BitSet FOLLOW_119_in_nnpurify4440 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpurify4442_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpurify4442 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_120_in_vbquench4457_static {
    public static final BitSet FOLLOW_120_in_vbquench4457 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbquench4459_static {
    public static final BitSet FOLLOW_TOKEN_in_vbquench4459 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_121_in_vbrecover4474_static {
    public static final BitSet FOLLOW_121_in_vbrecover4474 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbrecover4476_static {
    public static final BitSet FOLLOW_TOKEN_in_vbrecover4476 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_122_in_vbremove4491_static {
    public static final BitSet FOLLOW_122_in_vbremove4491 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbremove4493_static {
    public static final BitSet FOLLOW_TOKEN_in_vbremove4493 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_123_in_nnremove4506_static {
    public static final BitSet FOLLOW_123_in_nnremove4506 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnremove4508_static {
    public static final BitSet FOLLOW_TOKEN_in_nnremove4508 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_124_in_vbstir4523_static {
    public static final BitSet FOLLOW_124_in_vbstir4523 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbstir4525_static {
    public static final BitSet FOLLOW_TOKEN_in_vbstir4525 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_125_in_vbsynthesize4540_static {
    public static final BitSet FOLLOW_125_in_vbsynthesize4540 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbsynthesize4542_static {
    public static final BitSet FOLLOW_TOKEN_in_vbsynthesize4542 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_126_in_nnsynthesize4555_static {
    public static final BitSet FOLLOW_126_in_nnsynthesize4555 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnsynthesize4557_static {
    public static final BitSet FOLLOW_TOKEN_in_nnsynthesize4557 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_127_in_vbwait4572_static {
    public static final BitSet FOLLOW_127_in_vbwait4572 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwait4574_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwait4574 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_128_in_vbwash4589_static {
    public static final BitSet FOLLOW_128_in_vbwash4589 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbwash4591_static {
    public static final BitSet FOLLOW_TOKEN_in_vbwash4591 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_129_in_vbyield4606_static {
    public static final BitSet FOLLOW_129_in_vbyield4606 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbyield4608_static {
    public static final BitSet FOLLOW_TOKEN_in_vbyield4608 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_130_in_nnyield4623_static {
    public static final BitSet FOLLOW_130_in_nnyield4623 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnyield4625_static {
    public static final BitSet FOLLOW_TOKEN_in_nnyield4625 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_131_in_rbconj4641_static {
    public static final BitSet FOLLOW_131_in_rbconj4641 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbconj4643_static {
    public static final BitSet FOLLOW_TOKEN_in_rbconj4643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_132_in_colon4656_static {
    public static final BitSet FOLLOW_132_in_colon4656 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_colon4658_static {
    public static final BitSet FOLLOW_TOKEN_in_colon4658 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_133_in_comma4671_static {
    public static final BitSet FOLLOW_133_in_comma4671 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_comma4673_static {
    public static final BitSet FOLLOW_TOKEN_in_comma4673 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_134_in_apost4686_static {
    public static final BitSet FOLLOW_134_in_apost4686 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_apost4688_static {
    public static final BitSet FOLLOW_TOKEN_in_apost4688 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_135_in_neg4701_static {
    public static final BitSet FOLLOW_135_in_neg4701 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_neg4703_static {
    public static final BitSet FOLLOW_TOKEN_in_neg4703 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_136_in_dash4716_static {
    public static final BitSet FOLLOW_136_in_dash4716 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dash4718_static {
    public static final BitSet FOLLOW_TOKEN_in_dash4718 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_137_in_stop4731_static {
    public static final BitSet FOLLOW_137_in_stop4731 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_stop4733_static {
    public static final BitSet FOLLOW_TOKEN_in_stop4733 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_138_in_nnpercent4746_static {
    public static final BitSet FOLLOW_138_in_nnpercent4746 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnpercent4748_static {
    public static final BitSet FOLLOW_TOKEN_in_nnpercent4748 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_139_in_lsqb4761_static {
    public static final BitSet FOLLOW_139_in_lsqb4761 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lsqb4763_static {
    public static final BitSet FOLLOW_TOKEN_in_lsqb4763 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_140_in_rsqb4776_static {
    public static final BitSet FOLLOW_140_in_rsqb4776 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rsqb4778_static {
    public static final BitSet FOLLOW_TOKEN_in_rsqb4778 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_141_in_nnidentifier4792_static {
    public static final BitSet FOLLOW_141_in_nnidentifier4792 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnidentifier4794_static {
    public static final BitSet FOLLOW_TOKEN_in_nnidentifier4794 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_142_in_dtTHE4809_static {
    public static final BitSet FOLLOW_142_in_dtTHE4809 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dtTHE4811_static {
    public static final BitSet FOLLOW_TOKEN_in_dtTHE4811 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_143_in_lrb4825_static {
    public static final BitSet FOLLOW_143_in_lrb4825 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_lrb4827_static {
    public static final BitSet FOLLOW_TOKEN_in_lrb4827 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_144_in_rrb4840_static {
    public static final BitSet FOLLOW_144_in_rrb4840 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rrb4842_static {
    public static final BitSet FOLLOW_TOKEN_in_rrb4842 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_145_in_cc4859_static {
    public static final BitSet FOLLOW_145_in_cc4859 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cc4861_static {
    public static final BitSet FOLLOW_TOKEN_in_cc4861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_146_in_cd4876_static {
    public static final BitSet FOLLOW_146_in_cd4876 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_cd4878_static {
    public static final BitSet FOLLOW_TOKEN_in_cd4878 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_147_in_dt4893_static {
    public static final BitSet FOLLOW_147_in_dt4893 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_dt4895_static {
    public static final BitSet FOLLOW_TOKEN_in_dt4895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_148_in_ex4910_static {
    public static final BitSet FOLLOW_148_in_ex4910 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ex4912_static {
    public static final BitSet FOLLOW_TOKEN_in_ex4912 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_149_in_fw4927_static {
    public static final BitSet FOLLOW_149_in_fw4927 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_fw4929_static {
    public static final BitSet FOLLOW_TOKEN_in_fw4929 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_150_in_in4944_static {
    public static final BitSet FOLLOW_150_in_in4944 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_in4946_static {
    public static final BitSet FOLLOW_TOKEN_in_in4946 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_151_in_jj4961_static {
    public static final BitSet FOLLOW_151_in_jj4961 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jj4963_static {
    public static final BitSet FOLLOW_TOKEN_in_jj4963 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_152_in_jjr4978_static {
    public static final BitSet FOLLOW_152_in_jjr4978 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjr4980_static {
    public static final BitSet FOLLOW_TOKEN_in_jjr4980 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_153_in_jjs4995_static {
    public static final BitSet FOLLOW_153_in_jjs4995 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_jjs4997_static {
    public static final BitSet FOLLOW_TOKEN_in_jjs4997 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_154_in_ls5012_static {
    public static final BitSet FOLLOW_154_in_ls5012 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_ls5014_static {
    public static final BitSet FOLLOW_TOKEN_in_ls5014 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_155_in_md5029_static {
    public static final BitSet FOLLOW_155_in_md5029 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_md5031_static {
    public static final BitSet FOLLOW_TOKEN_in_md5031 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_156_in_nn5046_static {
    public static final BitSet FOLLOW_156_in_nn5046 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nn5048_static {
    public static final BitSet FOLLOW_TOKEN_in_nn5048 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_157_in_nns5063_static {
    public static final BitSet FOLLOW_157_in_nns5063 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nns5065_static {
    public static final BitSet FOLLOW_TOKEN_in_nns5065 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_158_in_nnp5080_static {
    public static final BitSet FOLLOW_158_in_nnp5080 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnp5082_static {
    public static final BitSet FOLLOW_TOKEN_in_nnp5082 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_159_in_nnps5097_static {
    public static final BitSet FOLLOW_159_in_nnps5097 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_nnps5099_static {
    public static final BitSet FOLLOW_TOKEN_in_nnps5099 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_160_in_pdt5114_static {
    public static final BitSet FOLLOW_160_in_pdt5114 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pdt5116_static {
    public static final BitSet FOLLOW_TOKEN_in_pdt5116 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_161_in_pos5131_static {
    public static final BitSet FOLLOW_161_in_pos5131 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_pos5133_static {
    public static final BitSet FOLLOW_TOKEN_in_pos5133 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_162_in_prp5148_static {
    public static final BitSet FOLLOW_162_in_prp5148 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp5150_static {
    public static final BitSet FOLLOW_TOKEN_in_prp5150 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_163_in_prp_poss5165_static {
    public static final BitSet FOLLOW_163_in_prp_poss5165 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_prp_poss5167_static {
    public static final BitSet FOLLOW_TOKEN_in_prp_poss5167 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_164_in_rb5182_static {
    public static final BitSet FOLLOW_164_in_rb5182 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rb5184_static {
    public static final BitSet FOLLOW_TOKEN_in_rb5184 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_165_in_rbr5199_static {
    public static final BitSet FOLLOW_165_in_rbr5199 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbr5201_static {
    public static final BitSet FOLLOW_TOKEN_in_rbr5201 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_166_in_rbs5216_static {
    public static final BitSet FOLLOW_166_in_rbs5216 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rbs5218_static {
    public static final BitSet FOLLOW_TOKEN_in_rbs5218 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_167_in_rp5233_static {
    public static final BitSet FOLLOW_167_in_rp5233 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_rp5235_static {
    public static final BitSet FOLLOW_TOKEN_in_rp5235 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_168_in_sym5250_static {
    public static final BitSet FOLLOW_168_in_sym5250 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_sym5252_static {
    public static final BitSet FOLLOW_TOKEN_in_sym5252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_169_in_to5267_static {
    public static final BitSet FOLLOW_169_in_to5267 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_to5269_static {
    public static final BitSet FOLLOW_TOKEN_in_to5269 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_170_in_uh5284_static {
    public static final BitSet FOLLOW_170_in_uh5284 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_uh5286_static {
    public static final BitSet FOLLOW_TOKEN_in_uh5286 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_171_in_vb5301_static {
    public static final BitSet FOLLOW_171_in_vb5301 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vb5303_static {
    public static final BitSet FOLLOW_TOKEN_in_vb5303 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_172_in_vbd5318_static {
    public static final BitSet FOLLOW_172_in_vbd5318 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbd5320_static {
    public static final BitSet FOLLOW_TOKEN_in_vbd5320 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_173_in_vbg5335_static {
    public static final BitSet FOLLOW_173_in_vbg5335 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbg5337_static {
    public static final BitSet FOLLOW_TOKEN_in_vbg5337 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_174_in_vbn5352_static {
    public static final BitSet FOLLOW_174_in_vbn5352 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbn5354_static {
    public static final BitSet FOLLOW_TOKEN_in_vbn5354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_175_in_vbp5369_static {
    public static final BitSet FOLLOW_175_in_vbp5369 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbp5371_static {
    public static final BitSet FOLLOW_TOKEN_in_vbp5371 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_176_in_vbz5386_static {
    public static final BitSet FOLLOW_176_in_vbz5386 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_vbz5388_static {
    public static final BitSet FOLLOW_TOKEN_in_vbz5388 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_177_in_wdt5403_static {
    public static final BitSet FOLLOW_177_in_wdt5403 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wdt5405_static {
    public static final BitSet FOLLOW_TOKEN_in_wdt5405 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_178_in_wp5420_static {
    public static final BitSet FOLLOW_178_in_wp5420 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp5422_static {
    public static final BitSet FOLLOW_TOKEN_in_wp5422 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_179_in_wp_poss5437_static {
    public static final BitSet FOLLOW_179_in_wp_poss5437 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wp_poss5439_static {
    public static final BitSet FOLLOW_TOKEN_in_wp_poss5439 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_180_in_wrb5454_static {
    public static final BitSet FOLLOW_180_in_wrb5454 = new BitSet(new long[]{0x0000002000000000L});

    }static class FOLLOW_TOKEN_in_wrb5456_static {
    public static final BitSet FOLLOW_TOKEN_in_wrb5456 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker223_static {
    public static final BitSet FOLLOW_sentenceStructure_in_synpred2_ChemicalChunker223 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker225_static {
    public static final BitSet FOLLOW_unmatchedPhrase_in_synpred3_ChemicalChunker225 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphrase_in_synpred5_ChemicalChunker239_static {
    public static final BitSet FOLLOW_nounphrase_in_synpred5_ChemicalChunker239 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verbphrase_in_synpred6_ChemicalChunker241_static {
    public static final BitSet FOLLOW_verbphrase_in_synpred6_ChemicalChunker241 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphrase_in_synpred7_ChemicalChunker243_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred7_ChemicalChunker243 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker245_static {
    public static final BitSet FOLLOW_prepphraseAfter_in_synpred8_ChemicalChunker245 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred9_ChemicalChunker250_static {
    public static final BitSet FOLLOW_advAdj_in_synpred9_ChemicalChunker250 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred10_ChemicalChunker252_static {
    public static final BitSet FOLLOW_colon_in_synpred10_ChemicalChunker252 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred11_ChemicalChunker257_static {
    public static final BitSet FOLLOW_conjunction_in_synpred11_ChemicalChunker257 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_rbconj_in_synpred12_ChemicalChunker259_static {
    public static final BitSet FOLLOW_rbconj_in_synpred12_ChemicalChunker259 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred13_ChemicalChunker261_static {
    public static final BitSet FOLLOW_comma_in_synpred13_ChemicalChunker261 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nounphraseStructure1_in_synpred84_ChemicalChunker467_static {
    public static final BitSet FOLLOW_nounphraseStructure1_in_synpred84_ChemicalChunker467 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred86_ChemicalChunker498_static {
    public static final BitSet FOLLOW_dt_in_synpred86_ChemicalChunker498 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred87_ChemicalChunker505_static {
    public static final BitSet FOLLOW_conjunction_in_synpred87_ChemicalChunker505 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred88_ChemicalChunker505_static {
    public static final BitSet FOLLOW_conjunction_in_synpred88_ChemicalChunker505 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E01FFF7BEE824L});

    }static class FOLLOW_nounphraseContent_in_synpred88_ChemicalChunker508_static {
    public static final BitSet FOLLOW_nounphraseContent_in_synpred88_ChemicalChunker508 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseOf_in_synpred89_ChemicalChunker513_static {
    public static final BitSet FOLLOW_prepphraseOf_in_synpred89_ChemicalChunker513 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred90_ChemicalChunker516_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred90_ChemicalChunker516 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred91_ChemicalChunker528_static {
    public static final BitSet FOLLOW_advAdj_in_synpred91_ChemicalChunker528 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker533_static {
    public static final BitSet FOLLOW_dissolvePhrase_in_synpred92_ChemicalChunker533 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_ratio_in_synpred93_ChemicalChunker535_static {
    public static final BitSet FOLLOW_ratio_in_synpred93_ChemicalChunker535 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred94_ChemicalChunker537_static {
    public static final BitSet FOLLOW_noun_in_synpred94_ChemicalChunker537 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred95_ChemicalChunker539_static {
    public static final BitSet FOLLOW_numeric_in_synpred95_ChemicalChunker539 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dissolveStructure_in_synpred96_ChemicalChunker551_static {
    public static final BitSet FOLLOW_dissolveStructure_in_synpred96_ChemicalChunker551 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred97_ChemicalChunker582_static {
    public static final BitSet FOLLOW_adj_in_synpred97_ChemicalChunker582 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred100_ChemicalChunker594_static {
    public static final BitSet FOLLOW_molecule_in_synpred100_ChemicalChunker594 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred101_ChemicalChunker603_static {
    public static final BitSet FOLLOW_conjunction_in_synpred101_ChemicalChunker603 = new BitSet(new long[]{0x800021C000000000L,0x0000000000100280L,0x0000000003848024L});

    }static class FOLLOW_molecule_in_synpred101_ChemicalChunker605_static {
    public static final BitSet FOLLOW_molecule_in_synpred101_ChemicalChunker605 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred103_ChemicalChunker622_static {
    public static final BitSet FOLLOW_adj_in_synpred103_ChemicalChunker622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred105_ChemicalChunker629_static {
    public static final BitSet FOLLOW_molecule_in_synpred105_ChemicalChunker629 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_to_in_synpred107_ChemicalChunker662_static {
    public static final BitSet FOLLOW_to_in_synpred107_ChemicalChunker662 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inAll_in_synpred108_ChemicalChunker665_static {
    public static final BitSet FOLLOW_inAll_in_synpred108_ChemicalChunker665 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred114_ChemicalChunker684_static {
    public static final BitSet FOLLOW_verb_in_synpred114_ChemicalChunker684 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred115_ChemicalChunker687_static {
    public static final BitSet FOLLOW_md_in_synpred115_ChemicalChunker687 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adv_in_synpred116_ChemicalChunker690_static {
    public static final BitSet FOLLOW_adv_in_synpred116_ChemicalChunker690 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred117_ChemicalChunker693_static {
    public static final BitSet FOLLOW_adj_in_synpred117_ChemicalChunker693 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_neg_in_synpred118_ChemicalChunker696_static {
    public static final BitSet FOLLOW_neg_in_synpred118_ChemicalChunker696 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_md_in_synpred119_ChemicalChunker672_static {
    public static final BitSet FOLLOW_md_in_synpred119_ChemicalChunker672 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_rbconj_in_synpred119_ChemicalChunker675_static {
    public static final BitSet FOLLOW_rbconj_in_synpred119_ChemicalChunker675 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adv_in_synpred119_ChemicalChunker678_static {
    public static final BitSet FOLLOW_adv_in_synpred119_ChemicalChunker678 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_adj_in_synpred119_ChemicalChunker681_static {
    public static final BitSet FOLLOW_adj_in_synpred119_ChemicalChunker681 = new BitSet(new long[]{0x7FFFA18000000000L,0xB75F57AFF9E00000L,0x0001FAF00BC8000BL});

    }static class FOLLOW_verb_in_synpred119_ChemicalChunker684_static {
    public static final BitSet FOLLOW_verb_in_synpred119_ChemicalChunker684 = new BitSet(new long[]{0x7FFFA18000000002L,0xB75F57AFF9E00000L,0x0001FAF00BC8008BL});

    }static class FOLLOW_md_in_synpred119_ChemicalChunker687_static {
    public static final BitSet FOLLOW_md_in_synpred119_ChemicalChunker687 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F00B800080L});

    }static class FOLLOW_adv_in_synpred119_ChemicalChunker690_static {
    public static final BitSet FOLLOW_adv_in_synpred119_ChemicalChunker690 = new BitSet(new long[]{0x0000218000000002L,0x0000000000000000L,0x000000F003800080L});

    }static class FOLLOW_adj_in_synpred119_ChemicalChunker693_static {
    public static final BitSet FOLLOW_adj_in_synpred119_ChemicalChunker693 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});

    }static class FOLLOW_neg_in_synpred119_ChemicalChunker696_static {
    public static final BitSet FOLLOW_neg_in_synpred119_ChemicalChunker696 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_inoff_in_synpred120_ChemicalChunker702_static {
    public static final BitSet FOLLOW_inoff_in_synpred120_ChemicalChunker702 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cc_in_synpred123_ChemicalChunker706_static {
    public static final BitSet FOLLOW_cc_in_synpred123_ChemicalChunker706 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC00A0L});

    }static class FOLLOW_comma_in_synpred123_ChemicalChunker709_static {
    public static final BitSet FOLLOW_comma_in_synpred123_ChemicalChunker709 = new BitSet(new long[]{0x7FFFA18000000000L,0x0000000000000101L,0x000002F003CC0080L});

    }static class FOLLOW_prepphrase_in_synpred123_ChemicalChunker712_static {
    public static final BitSet FOLLOW_prepphrase_in_synpred123_ChemicalChunker712 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_degassMultiVerb_in_synpred133_ChemicalChunker742_static {
    public static final BitSet FOLLOW_degassMultiVerb_in_synpred133_ChemicalChunker742 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_vbdegass_in_synpred146_ChemicalChunker768_static {
    public static final BitSet FOLLOW_vbdegass_in_synpred146_ChemicalChunker768 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred164_ChemicalChunker830_static {
    public static final BitSet FOLLOW_dash_in_synpred164_ChemicalChunker830 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_nounStructure_in_synpred164_ChemicalChunker832_static {
    public static final BitSet FOLLOW_nounStructure_in_synpred164_ChemicalChunker832 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred167_ChemicalChunker847_static {
    public static final BitSet FOLLOW_citation_in_synpred167_ChemicalChunker847 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cycles_in_synpred168_ChemicalChunker849_static {
    public static final BitSet FOLLOW_cycles_in_synpred168_ChemicalChunker849 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred169_ChemicalChunker851_static {
    public static final BitSet FOLLOW_molecule_in_synpred169_ChemicalChunker851 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apparatus_in_synpred170_ChemicalChunker853_static {
    public static final BitSet FOLLOW_apparatus_in_synpred170_ChemicalChunker853 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred171_ChemicalChunker855_static {
    public static final BitSet FOLLOW_mixture_in_synpred171_ChemicalChunker855 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred172_ChemicalChunker857_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred172_ChemicalChunker857 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred173_ChemicalChunker859_static {
    public static final BitSet FOLLOW_nnstate_in_synpred173_ChemicalChunker859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_procedureNode_in_synpred174_ChemicalChunker861_static {
    public static final BitSet FOLLOW_procedureNode_in_synpred174_ChemicalChunker861 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred175_ChemicalChunker863_static {
    public static final BitSet FOLLOW_nn_in_synpred175_ChemicalChunker863 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred178_ChemicalChunker869_static {
    public static final BitSet FOLLOW_nnadd_in_synpred178_ChemicalChunker869 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred180_ChemicalChunker873_static {
    public static final BitSet FOLLOW_nnexample_in_synpred180_ChemicalChunker873 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_range_in_synpred181_ChemicalChunker875_static {
    public static final BitSet FOLLOW_range_in_synpred181_ChemicalChunker875 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred186_ChemicalChunker885_static {
    public static final BitSet FOLLOW_quantity_in_synpred186_ChemicalChunker885 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred187_ChemicalChunker887_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred187_ChemicalChunker887 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnph_in_synpred189_ChemicalChunker891_static {
    public static final BitSet FOLLOW_nnph_in_synpred189_ChemicalChunker891 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nngeneral_in_synpred191_ChemicalChunker895_static {
    public static final BitSet FOLLOW_nngeneral_in_synpred191_ChemicalChunker895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred194_ChemicalChunker901_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred194_ChemicalChunker901 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_squareBracketedReference_in_synpred205_ChemicalChunker923_static {
    public static final BitSet FOLLOW_squareBracketedReference_in_synpred205_ChemicalChunker923 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred207_ChemicalChunker927_static {
    public static final BitSet FOLLOW_numeric_in_synpred207_ChemicalChunker927 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred212_ChemicalChunker937_static {
    public static final BitSet FOLLOW_nnyield_in_synpred212_ChemicalChunker937 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseAtmosphere_in_synpred220_ChemicalChunker967_static {
    public static final BitSet FOLLOW_prepphraseAtmosphere_in_synpred220_ChemicalChunker967 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTime_in_synpred221_ChemicalChunker969_static {
    public static final BitSet FOLLOW_prepphraseTime_in_synpred221_ChemicalChunker969 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseTemp_in_synpred222_ChemicalChunker971_static {
    public static final BitSet FOLLOW_prepphraseTemp_in_synpred222_ChemicalChunker971 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseIN_in_synpred223_ChemicalChunker973_static {
    public static final BitSet FOLLOW_prepphraseIN_in_synpred223_ChemicalChunker973 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_prepphraseRole_in_synpred224_ChemicalChunker975_static {
    public static final BitSet FOLLOW_prepphraseRole_in_synpred224_ChemicalChunker975 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred226_ChemicalChunker1015_static {
    public static final BitSet FOLLOW_advAdj_in_synpred226_ChemicalChunker1015 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnatmosphere_in_synpred227_ChemicalChunker1020_static {
    public static final BitSet FOLLOW_nnatmosphere_in_synpred227_ChemicalChunker1020 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred228_ChemicalChunker1048_static {
    public static final BitSet FOLLOW_advAdj_in_synpred228_ChemicalChunker1048 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntime_in_synpred233_ChemicalChunker1064_static {
    public static final BitSet FOLLOW_nntime_in_synpred233_ChemicalChunker1064 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_advAdj_in_synpred234_ChemicalChunker1095_static {
    public static final BitSet FOLLOW_advAdj_in_synpred234_ChemicalChunker1095 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nntemp_in_synpred239_ChemicalChunker1110_static {
    public static final BitSet FOLLOW_nntemp_in_synpred239_ChemicalChunker1110 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred245_ChemicalChunker1283_static {
    public static final BitSet FOLLOW_conjunction_in_synpred245_ChemicalChunker1283 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_conjunction_in_synpred246_ChemicalChunker1283_static {
    public static final BitSet FOLLOW_conjunction_in_synpred246_ChemicalChunker1283 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138E8024L});

    }static class FOLLOW_apparatus_in_synpred246_ChemicalChunker1286_static {
    public static final BitSet FOLLOW_apparatus_in_synpred246_ChemicalChunker1286 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnApp_in_synpred249_ChemicalChunker1303_static {
    public static final BitSet FOLLOW_nnApp_in_synpred249_ChemicalChunker1303 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnapparatus_in_synpred250_ChemicalChunker1330_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred250_ChemicalChunker1330 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred251_ChemicalChunker1334_static {
    public static final BitSet FOLLOW_dash_in_synpred251_ChemicalChunker1334 = new BitSet(new long[]{0x800021C000000000L,0x0000001002102280L,0x00000000138C8024L});

    }static class FOLLOW_nnapparatus_in_synpred251_ChemicalChunker1336_static {
    public static final BitSet FOLLOW_nnapparatus_in_synpred251_ChemicalChunker1336 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred252_ChemicalChunker1350_static {
    public static final BitSet FOLLOW_quantity_in_synpred252_ChemicalChunker1350 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred253_ChemicalChunker1352_static {
    public static final BitSet FOLLOW_adj_in_synpred253_ChemicalChunker1352 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnpressure_in_synpred254_ChemicalChunker1354_static {
    public static final BitSet FOLLOW_nnpressure_in_synpred254_ChemicalChunker1354 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnadd_in_synpred255_ChemicalChunker1356_static {
    public static final BitSet FOLLOW_nnadd_in_synpred255_ChemicalChunker1356 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred256_ChemicalChunker1358_static {
    public static final BitSet FOLLOW_molecule_in_synpred256_ChemicalChunker1358 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred257_ChemicalChunker1360_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred257_ChemicalChunker1360 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnstate_in_synpred258_ChemicalChunker1362_static {
    public static final BitSet FOLLOW_nnstate_in_synpred258_ChemicalChunker1362 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred259_ChemicalChunker1364_static {
    public static final BitSet FOLLOW_nn_in_synpred259_ChemicalChunker1364 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscaront_in_synpred260_ChemicalChunker1376_static {
    public static final BitSet FOLLOW_oscaront_in_synpred260_ChemicalChunker1376 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred262_ChemicalChunker1401_static {
    public static final BitSet FOLLOW_adj_in_synpred262_ChemicalChunker1401 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred263_ChemicalChunker1405_static {
    public static final BitSet FOLLOW_quantity_in_synpred263_ChemicalChunker1405 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnchementity_in_synpred264_ChemicalChunker1409_static {
    public static final BitSet FOLLOW_nnchementity_in_synpred264_ChemicalChunker1409 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_synpred265_ChemicalChunker1415_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_synpred265_ChemicalChunker1415 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred266_ChemicalChunker1419_static {
    public static final BitSet FOLLOW_quantity_in_synpred266_ChemicalChunker1419 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred267_ChemicalChunker1422_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred267_ChemicalChunker1422 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_afterOscarCompoundStructure_in_synpred268_ChemicalChunker1433_static {
    public static final BitSet FOLLOW_afterOscarCompoundStructure_in_synpred268_ChemicalChunker1433 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred270_ChemicalChunker1460_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred270_ChemicalChunker1460 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarcm_in_synpred272_ChemicalChunker1466_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred272_ChemicalChunker1466 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred273_ChemicalChunker1464_static {
    public static final BitSet FOLLOW_dash_in_synpred273_ChemicalChunker1464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred273_ChemicalChunker1466_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred273_ChemicalChunker1466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});

    }static class FOLLOW_dash_in_synpred274_ChemicalChunker1471_static {
    public static final BitSet FOLLOW_dash_in_synpred274_ChemicalChunker1471 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred275_ChemicalChunker1464_static {
    public static final BitSet FOLLOW_dash_in_synpred275_ChemicalChunker1464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});

    }static class FOLLOW_oscarcm_in_synpred275_ChemicalChunker1466_static {
    public static final BitSet FOLLOW_oscarcm_in_synpred275_ChemicalChunker1466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L,0x0000000000000100L});

    }static class FOLLOW_dash_in_synpred275_ChemicalChunker1471_static {
    public static final BitSet FOLLOW_dash_in_synpred275_ChemicalChunker1471 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dash_in_synpred276_ChemicalChunker1475_static {
    public static final BitSet FOLLOW_dash_in_synpred276_ChemicalChunker1475 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_apost_in_synpred277_ChemicalChunker1477_static {
    public static final BitSet FOLLOW_apost_in_synpred277_ChemicalChunker1477 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount3_in_synpred279_ChemicalChunker1520_static {
    public static final BitSet FOLLOW_moleculeamount3_in_synpred279_ChemicalChunker1520 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_moleculeamount1_in_synpred280_ChemicalChunker1523_static {
    public static final BitSet FOLLOW_moleculeamount1_in_synpred280_ChemicalChunker1523 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred281_ChemicalChunker1530_static {
    public static final BitSet FOLLOW_asAstate_in_synpred281_ChemicalChunker1530 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred282_ChemicalChunker1541_static {
    public static final BitSet FOLLOW_quantity_in_synpred282_ChemicalChunker1541 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred283_ChemicalChunker1543_static {
    public static final BitSet FOLLOW_mixture_in_synpred283_ChemicalChunker1543 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred286_ChemicalChunker1560_static {
    public static final BitSet FOLLOW_mixture_in_synpred286_ChemicalChunker1560 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred289_ChemicalChunker1582_static {
    public static final BitSet FOLLOW_quantity_in_synpred289_ChemicalChunker1582 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred290_ChemicalChunker1584_static {
    public static final BitSet FOLLOW_mixture_in_synpred290_ChemicalChunker1584 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred295_ChemicalChunker1607_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred295_ChemicalChunker1607 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred296_ChemicalChunker1619_static {
    public static final BitSet FOLLOW_quantity_in_synpred296_ChemicalChunker1619 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred297_ChemicalChunker1621_static {
    public static final BitSet FOLLOW_mixture_in_synpred297_ChemicalChunker1621 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred298_ChemicalChunker1625_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred298_ChemicalChunker1625 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred299_ChemicalChunker1636_static {
    public static final BitSet FOLLOW_citation_in_synpred299_ChemicalChunker1636 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred300_ChemicalChunker1638_static {
    public static final BitSet FOLLOW_quantity_in_synpred300_ChemicalChunker1638 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred302_ChemicalChunker1640_static {
    public static final BitSet FOLLOW_comma_in_synpred302_ChemicalChunker1640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});

    }static class FOLLOW_quantity1Node_in_synpred302_ChemicalChunker1643_static {
    public static final BitSet FOLLOW_quantity1Node_in_synpred302_ChemicalChunker1643 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citationStructure_in_synpred302_ChemicalChunker1645_static {
    public static final BitSet FOLLOW_citationStructure_in_synpred302_ChemicalChunker1645 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred303_ChemicalChunker1648_static {
    public static final BitSet FOLLOW_mixture_in_synpred303_ChemicalChunker1648 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_asAstate_in_synpred304_ChemicalChunker1661_static {
    public static final BitSet FOLLOW_asAstate_in_synpred304_ChemicalChunker1661 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_synpred307_ChemicalChunker1692_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_synpred307_ChemicalChunker1692 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred308_ChemicalChunker1682_static {
    public static final BitSet FOLLOW_quantity_in_synpred308_ChemicalChunker1682 = new BitSet(new long[]{0x0100004000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_inof_in_synpred308_ChemicalChunker1685_static {
    public static final BitSet FOLLOW_inof_in_synpred308_ChemicalChunker1685 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCE824L});

    }static class FOLLOW_unnamedmoleculeamount1_in_synpred308_ChemicalChunker1688_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount1_in_synpred308_ChemicalChunker1688 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount2_in_synpred308_ChemicalChunker1690_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount2_in_synpred308_ChemicalChunker1690 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000280L,0x000000000004A824L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_synpred308_ChemicalChunker1692_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_synpred308_ChemicalChunker1692 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount4_in_synpred310_ChemicalChunker1699_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount4_in_synpred310_ChemicalChunker1699 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount5_in_synpred311_ChemicalChunker1701_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount5_in_synpred311_ChemicalChunker1701 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount6_in_synpred312_ChemicalChunker1703_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount6_in_synpred312_ChemicalChunker1703 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmoleculeamount7_in_synpred313_ChemicalChunker1705_static {
    public static final BitSet FOLLOW_unnamedmoleculeamount7_in_synpred313_ChemicalChunker1705 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fromProcedure_in_synpred314_ChemicalChunker1710_static {
    public static final BitSet FOLLOW_fromProcedure_in_synpred314_ChemicalChunker1710 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred315_ChemicalChunker1726_static {
    public static final BitSet FOLLOW_quantity_in_synpred315_ChemicalChunker1726 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred316_ChemicalChunker1728_static {
    public static final BitSet FOLLOW_mixture_in_synpred316_ChemicalChunker1728 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_referenceToExampleCompound_in_synpred326_ChemicalChunker1766_static {
    public static final BitSet FOLLOW_referenceToExampleCompound_in_synpred326_ChemicalChunker1766 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnexample_in_synpred327_ChemicalChunker1768_static {
    public static final BitSet FOLLOW_nnexample_in_synpred327_ChemicalChunker1768 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_optionalUnnamedMoleculeEnding_in_synpred334_ChemicalChunker1796_static {
    public static final BitSet FOLLOW_optionalUnnamedMoleculeEnding_in_synpred334_ChemicalChunker1796 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred335_ChemicalChunker1807_static {
    public static final BitSet FOLLOW_quantity_in_synpred335_ChemicalChunker1807 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numericOrIdentifierCompoundReference_in_synpred336_ChemicalChunker1813_static {
    public static final BitSet FOLLOW_numericOrIdentifierCompoundReference_in_synpred336_ChemicalChunker1813 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred337_ChemicalChunker1818_static {
    public static final BitSet FOLLOW_quantity_in_synpred337_ChemicalChunker1818 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred338_ChemicalChunker1820_static {
    public static final BitSet FOLLOW_mixture_in_synpred338_ChemicalChunker1820 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred339_ChemicalChunker1834_static {
    public static final BitSet FOLLOW_citation_in_synpred339_ChemicalChunker1834 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred340_ChemicalChunker1836_static {
    public static final BitSet FOLLOW_quantity_in_synpred340_ChemicalChunker1836 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred341_ChemicalChunker1838_static {
    public static final BitSet FOLLOW_mixture_in_synpred341_ChemicalChunker1838 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_citation_in_synpred346_ChemicalChunker1893_static {
    public static final BitSet FOLLOW_citation_in_synpred346_ChemicalChunker1893 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred347_ChemicalChunker1895_static {
    public static final BitSet FOLLOW_quantity_in_synpred347_ChemicalChunker1895 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred348_ChemicalChunker1897_static {
    public static final BitSet FOLLOW_mixture_in_synpred348_ChemicalChunker1897 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred349_ChemicalChunker1926_static {
    public static final BitSet FOLLOW_quantity_in_synpred349_ChemicalChunker1926 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred350_ChemicalChunker1928_static {
    public static final BitSet FOLLOW_mixture_in_synpred350_ChemicalChunker1928 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred352_ChemicalChunker1938_static {
    public static final BitSet FOLLOW_quantity_in_synpred352_ChemicalChunker1938 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred353_ChemicalChunker1940_static {
    public static final BitSet FOLLOW_mixture_in_synpred353_ChemicalChunker1940 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred357_ChemicalChunker1965_static {
    public static final BitSet FOLLOW_quantity_in_synpred357_ChemicalChunker1965 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred359_ChemicalChunker1986_static {
    public static final BitSet FOLLOW_quantity_in_synpred359_ChemicalChunker1986 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred360_ChemicalChunker1988_static {
    public static final BitSet FOLLOW_mixture_in_synpred360_ChemicalChunker1988 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred366_ChemicalChunker2024_static {
    public static final BitSet FOLLOW_quantity_in_synpred366_ChemicalChunker2024 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity_in_synpred367_ChemicalChunker2028_static {
    public static final BitSet FOLLOW_quantity_in_synpred367_ChemicalChunker2028 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_mixture_in_synpred368_ChemicalChunker2030_static {
    public static final BitSet FOLLOW_mixture_in_synpred368_ChemicalChunker2030 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred370_ChemicalChunker2045_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred370_ChemicalChunker2045 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred375_ChemicalChunker2178_static {
    public static final BitSet FOLLOW_comma_in_synpred375_ChemicalChunker2178 = new BitSet(new long[]{0x0000004000000000L,0x0000000000000200L,0x0000000000048004L});

    }static class FOLLOW_measurements_in_synpred375_ChemicalChunker2181_static {
    public static final BitSet FOLLOW_measurements_in_synpred375_ChemicalChunker2181 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_dt_in_synpred378_ChemicalChunker2206_static {
    public static final BitSet FOLLOW_dt_in_synpred378_ChemicalChunker2206 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_measurementtypes_in_synpred379_ChemicalChunker2218_static {
    public static final BitSet FOLLOW_measurementtypes_in_synpred379_ChemicalChunker2218 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_yield_in_synpred386_ChemicalChunker2255_static {
    public static final BitSet FOLLOW_yield_in_synpred386_ChemicalChunker2255 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred398_ChemicalChunker2554_static {
    public static final BitSet FOLLOW_fw_in_synpred398_ChemicalChunker2554 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred399_ChemicalChunker2556_static {
    public static final BitSet FOLLOW_verb_in_synpred399_ChemicalChunker2556 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nn_in_synpred400_ChemicalChunker2558_static {
    public static final BitSet FOLLOW_nn_in_synpred400_ChemicalChunker2558 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred401_ChemicalChunker2560_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred401_ChemicalChunker2560 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred404_ChemicalChunker2566_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred404_ChemicalChunker2566 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred405_ChemicalChunker2568_static {
    public static final BitSet FOLLOW_molecule_in_synpred405_ChemicalChunker2568 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred406_ChemicalChunker2570_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred406_ChemicalChunker2570 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred408_ChemicalChunker2574_static {
    public static final BitSet FOLLOW_sym_in_synpred408_ChemicalChunker2574 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred409_ChemicalChunker2576_static {
    public static final BitSet FOLLOW_noun_in_synpred409_ChemicalChunker2576 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred411_ChemicalChunker2580_static {
    public static final BitSet FOLLOW_cd_in_synpred411_ChemicalChunker2580 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred412_ChemicalChunker2582_static {
    public static final BitSet FOLLOW_comma_in_synpred412_ChemicalChunker2582 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred413_ChemicalChunker2584_static {
    public static final BitSet FOLLOW_adj_in_synpred413_ChemicalChunker2584 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_minimixture_in_synpred415_ChemicalChunker2592_static {
    public static final BitSet FOLLOW_minimixture_in_synpred415_ChemicalChunker2592 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_fw_in_synpred416_ChemicalChunker2594_static {
    public static final BitSet FOLLOW_fw_in_synpred416_ChemicalChunker2594 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_verb_in_synpred417_ChemicalChunker2596_static {
    public static final BitSet FOLLOW_verb_in_synpred417_ChemicalChunker2596 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_quantity2Node_in_synpred418_ChemicalChunker2598_static {
    public static final BitSet FOLLOW_quantity2Node_in_synpred418_ChemicalChunker2598 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_nnyield_in_synpred419_ChemicalChunker2600_static {
    public static final BitSet FOLLOW_nnyield_in_synpred419_ChemicalChunker2600 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_oscarCompound_in_synpred422_ChemicalChunker2606_static {
    public static final BitSet FOLLOW_oscarCompound_in_synpred422_ChemicalChunker2606 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_molecule_in_synpred423_ChemicalChunker2608_static {
    public static final BitSet FOLLOW_molecule_in_synpred423_ChemicalChunker2608 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_unnamedmolecule_in_synpred424_ChemicalChunker2610_static {
    public static final BitSet FOLLOW_unnamedmolecule_in_synpred424_ChemicalChunker2610 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_sym_in_synpred426_ChemicalChunker2614_static {
    public static final BitSet FOLLOW_sym_in_synpred426_ChemicalChunker2614 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_noun_in_synpred427_ChemicalChunker2616_static {
    public static final BitSet FOLLOW_noun_in_synpred427_ChemicalChunker2616 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cd_in_synpred429_ChemicalChunker2620_static {
    public static final BitSet FOLLOW_cd_in_synpred429_ChemicalChunker2620 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_comma_in_synpred430_ChemicalChunker2622_static {
    public static final BitSet FOLLOW_comma_in_synpred430_ChemicalChunker2622 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_adj_in_synpred431_ChemicalChunker2624_static {
    public static final BitSet FOLLOW_adj_in_synpred431_ChemicalChunker2624 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred437_ChemicalChunker2701_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred437_ChemicalChunker2701 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_numeric_in_synpred438_ChemicalChunker2703_static {
    public static final BitSet FOLLOW_numeric_in_synpred438_ChemicalChunker2703 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred440_ChemicalChunker2712_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred440_ChemicalChunker2712 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_submethod_in_synpred441_ChemicalChunker2719_static {
    public static final BitSet FOLLOW_submethod_in_synpred441_ChemicalChunker2719 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_lrb_in_synpred442_ChemicalChunker2723_static {
    public static final BitSet FOLLOW_lrb_in_synpred442_ChemicalChunker2723 = new BitSet(new long[]{0x800021C000000000L,0x0000000002183A80L,0x0000000013848024L});

    }static class FOLLOW_submethod_in_synpred442_ChemicalChunker2725_static {
    public static final BitSet FOLLOW_submethod_in_synpred442_ChemicalChunker2725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});

    }static class FOLLOW_rrb_in_synpred442_ChemicalChunker2727_static {
    public static final BitSet FOLLOW_rrb_in_synpred442_ChemicalChunker2727 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred444_ChemicalChunker2744_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred444_ChemicalChunker2744 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_identifierOrBracketedIdentifier_in_synpred445_ChemicalChunker2759_static {
    public static final BitSet FOLLOW_identifierOrBracketedIdentifier_in_synpred445_ChemicalChunker2759 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_cdRatioNode_in_synpred453_ChemicalChunker2859_static {
    public static final BitSet FOLLOW_cdRatioNode_in_synpred453_ChemicalChunker2859 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred454_ChemicalChunker2897_static {
    public static final BitSet FOLLOW_colon_in_synpred454_ChemicalChunker2897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});

    }static class FOLLOW_cd_in_synpred454_ChemicalChunker2899_static {
    public static final BitSet FOLLOW_cd_in_synpred454_ChemicalChunker2899 = new BitSet(new long[]{0x0000000000000002L});

    }static class FOLLOW_colon_in_synpred455_ChemicalChunker2914_static {
    public static final BitSet FOLLOW_colon_in_synpred455_ChemicalChunker2914 = new BitSet(new long[]{0x80006FC000000000L,0x68A0A850061FFFF5L,0x001E010FF7BCA824L});

    }static class FOLLOW_noun_in_synpred455_ChemicalChunker2916_static {
    public static final BitSet FOLLOW_noun_in_synpred455_ChemicalChunker2916 = new BitSet(new long[]{0x0000000000000002L});

    }
}